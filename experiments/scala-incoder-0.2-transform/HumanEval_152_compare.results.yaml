language: scala
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesCorrect = guessesScores.filter(_._1 ==\
    \ gameScores.values.toSet.size).map(_._2)\n        val guessesIncorrect = guessesScores.filter(_._1\
    \ != gameScores.values.toSet.size).map(_._2)\n        val guessesDiff = guessesIncorrect\
    \ diff guessesCorrect\n        val guessesDiffWithIndex = guessesDiff.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndex\
    \ = guessesDiffWithIndex.sortBy(_._1)\n        val guessesDiffWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndex.filter(_._2 == guessesCorrect.size)\n  \
    \      val guessesDiffWithIndexSortedByIndexWithCorrectWithIndex = guessesDiffWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n     \
    \   val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect.zipWithIndex.map\
    \ { case (score, index) => score -> index }.toMap\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndex.sortBy(_._1)\n\
    \        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrect\
    \ = guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWithCorrectWithIndexSortedByIndex.filter(_._2\
    \ == guessesCorrect.size)\n        val guessesDiffWithIndexSortedByIndexWithCorrectWithIndexSortedByIndexWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvice1_mk.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvice1_mk.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesDiff\e[0m = guessesIncorrect diff guessesCorrect\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ diff is not a member of scala.collection.immutable.Iterable[Int] - did you mean\
    \ guessesIncorrect.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvice1_mk.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(_.swap)\n        val guessesScores = guess.zipWithIndex.map(_.swap)\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreKeys = gameScoreMap.keySet\n        val guessesScoreKeys\
    \ = guessesScoreMap.keySet\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeys.toSet\n        val gameScoreKeysSetSet\
    \ = gameScoreKeysSet.intersect(guessesScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n        val gameScoreKeysSetSetSet\
    \ = gameScoreKeysSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(guessesScoreKeysSet)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(gameScoreKeysSetSet)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(guessesScoreKeysSetSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreKeysSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zghw9qw.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSetSet\e\
    [0m = gameScoreKeysSetSet.intersect(gameScoreKeysSetSetSet)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSetSet is already defined "
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreSet\
    \ = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetSize = gameScoreSet.size\n        val guessScoreSetSize\
    \ = guessScoreSet.size\n        val gameScoreListSize = gameScoreList.size\n \
    \       val guessScoreListSize = guessScoreList.size\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n   \
    \     val guessScoreListSize = guessScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessScoreSetSize = guessScoreSetSize\n    \
    \    val gameScoreListSize = gameScoreListSize\n        val guessScoreListSize\
    \ = guessScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n    \
    \    val guessScoreSetSize = guessScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessScoreListSize = guessScoreListSize\n \
    \       val gameScoreSetSize = gameScoreSetSize\n        val guessScoreSetSize\
    \ = guessScoreSetSize\n        val gameScoreListSize = game\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSize\e[0m =\
    \ guessScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreListSize\e[0m\
    \ = guessScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphgqa4hle.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffCount\e[0m\
    \ = guessScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m =\
    \ guessScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameS"
  stdout: ''
  timestamp: 1659798268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val guessesScores = guess.zipWithIndex.map{ case (score, index) => score -\
    \ game(index) }\n        gameScores.zip(guessesScores).map{ case (gameScore, guessesScore)\
    \ => gameScore - guessesScore }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd40ly9uh.scala:22)\n\tat Problem.main(tmpd40ly9uh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - gameScoreCount\n        val guessScoreDiff\
    \ = guessScoreSum - guessScoreCount\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScoreDiff)\n        val gameScoreDiffAbsArray\
    \ = Array.ofDim[Long](gameScoreCount)\n        val guessScoreDiffAbsArray = Array.ofDim[Long](guessScoreCount)\n\
    \        var i = 0\n        while (i < gameScoreCount) {\n            gameScoreDiffAbsArray(i)\
    \ = gameScoreDiffAbs\n            guessScoreDiffAbsArray(i) = guessScoreDiffAbs\n\
    \            i += 1\n        }\n        val gameScoreDiffArray = Array.ofDim[Long](gameScoreCount)\n\
    \        val guessScoreDiffArray = Array.ofDim[Long](guessScoreCount)\n      \
    \  var j = 0\n        while (j < guessScoreCount) {\n            gameScoreDiffArray(j)\
    \ = gameScoreDiff\n            guessScoreDiffArray(j) = guessScoreDiff\n     \
    \       j += 1\n        }\n        val gameScoreDiffArrayAbs = gameScoreDiffArray.zip(gameScoreDiffArray).map\
    \ { case (gameScoreDiff, gameScoreDiffAbs) => gameScoreDiff }\n        val guessScoreDiffArrayAbs\
    \ = guessScoreDiffArray.zip(guessScoreDiffArray).map { case (guessScoreDiff, guessScoreDiffAbs)\
    \ => guessScoreDiff }\n        val gameScoreDiffArrayAbsArray = gameScoreDiffArrayAbs.zip(gameScoreDiffArrayAbs).map\
    \ { case (gameScoreDiffAbs, gameScoreDiffAbsArray) => gameScoreDiffAbs }\n   \
    \     val guessScoreDiffArrayAbsArray = guessScoreDiffArrayAbs.zip(guessScoreDiffArrayAbs).map\
    \ { case (guessScoreDiffAbs, guessScoreDiffArrayAbsArray) => guessScoreDiffAbs\
    \ }\n        val gameScoreDiffArrayAbsArraySum = gameScoreDiffArrayAbsArray.sum\n\
    \        val guessScoreDiffArrayAbsArraySum = guessScoreDiffArrayAbsArray.sum\n\
    \        val gameScoreDiffArray\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmc4jyiun.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmc4jyiun.scala:23:41\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mgameScoreDiff\e[0m = gameScoreSum - gameScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e\
    [0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int):\
    \ Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e\
    [31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((gameScoreCount\
    \ : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmc4jyiun.scala:24:43\
    \ -----------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e\
    [0m \e[36mguessScoreDiff\e[0m = guessScoreSum - guessScoreCount\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((guessScoreCount\
    \ : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmc4jyiun.scala:27:54\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArray\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](gameScoreCount)\n\e[31m\e[31m   |\e[0m    \
    \                                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Found:    (gameScoreCount : (Long => Boolean) =>\
    \ Int)\n\e[31m   |\e[0m                   Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreCount = gameScores.count\n        val guessScoreCount = guessScores.count\n\
    \        val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiff\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5_poq7ry.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffCount\e[0m = gameScoreDiff.count\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreDiffCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5_poq7ry.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffCount\e[0m = guessScoreDiff.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5_poq7ry.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m =\
    \ guessScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group o"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gameCount = game.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val gameScore = game.foldLeft(0L) { (sum, score) => sum + score }\n \
    \       val guessScore = guess.foldLeft(0L) { (sum, guess) => sum + guess }\n\
    \        var gameGuess = 0\n        var guessGuess = 0\n        var gameDiff =\
    \ 0\n        var guessDiff = 0\n        var gameDiffCount = 0\n        var guessDiffCount\
    \ = 0\n        var gameDiffCountMax = 0\n        var guessDiffCountMax = 0\n \
    \       var gameDiffCountMin = 0\n        var guessDiffCountMin = 0\n        var\
    \ gameDiffCountMaxMax = 0\n        var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMin\
    \ = 0\n        var guessDiffCountMinMin = 0\n        var gameDiffCountMaxMin =\
    \ 0\n        var guessDiffCountMaxMin = 0\n        var gameDiffCountMinMax = 0\n\
    \        var guessDiffCountMinMax = 0\n        var gameDiffCountMaxMax = 0\n \
    \       var guessDiffCountMaxMax = 0\n        var gameDiffCountMinMinMax = 0\n\
    \        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax =\
    \ 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMax\
    \ = 0\n        var guessDiffCountMinMinMax = 0\n        var gameDiffCountMaxMinMax\
    \ = 0\n        var guessDiffCountMaxMinMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var gameDiffCountMaxMinMaxMax\
    \ = 0\n        var guessDiffCountMaxMinMaxMax = 0\n        var gameDiffCountMinMinMaxMax\
    \ = 0\n        var guessDiffCountMinMinMaxMax = 0\n        var game\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm0_1mv1z.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameDiffCountMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameDiffCountMaxMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mgameDiffCountMaxMax\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mguessDiffCountMaxMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessDiffCountMaxMax is already\
    \ defined as \e[33mvariable\e[0m \e[35mguessDiffCountMaxMax\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm0_1mv1z.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mgameDiffCountMinMinMax\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameDiffCountMinMinMax\
    \ is already defined as \e[33mvariable\e[0m \e[35mgameDiffCountMinMinMax\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpm0_1mv1z.scala:47:12 ---------------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m        \e[33mvar\e[0m \e[36mguessDiffCountMinMinMax\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessDiffCountMinMinMax is already defined as \e[33mvariable\e[0m \e\
    [35mguessDiffCountMinMinMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- "
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guessesWithIndexesWithScores.map {\
    \ case (score, index) => index -> index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexes.map { case (score, index) => index -> score\
    \ }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores = guessesWithIndexesWithIndexesWithIndexes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map { case (score, index)\
    \ => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map {\
    \ case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithes.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:24:65 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndexesWithIndexes.map { \e[33mcase\e[0m (score, index)\
    \ => index -> score }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: guessesWithIndexesWithIndexesWithIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:25:76\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e[0m = guessesWithIndexesWithIndexesWithIndexesWithIndexes.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \         Not found: guessesWithIndexesWithIndexesWithIndexesWithIndexes\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:26:87 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\e\
    [0m = guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes.map { \e\
    [33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNot found: guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk05lb9u9.scala:27:98\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m      "
  stdout: ''
  timestamp: 1659798265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val gameScoreList:\
    \ List[Long] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(x => gameScoreMap.get(x))\n\
    \        val guessScoreList: List[Long] = guessScoreMap.keySet.toList.sortBy(_._1).reverse.map(x\
    \ => guessScoreMap.get(x))\n        val gameScoreDiff = gameScoreList.zip(guessScoreList).map(x\
    \ => Math.abs(x(0) - x(1)))\n        val gameScoreDiffList = gameScoreDiff.toList\n\
    \        val gameScoreDiffListMap = gameScoreDiffList.groupBy(x => x).toMap\n\
    \        val gameScoreDiffListMapKeys = gameScoreDiffListMap.keys\n        val\
    \ gameScoreDiffListMapValues = gameScoreDiffListMap.values\n        val gameScoreDiffListMapValuesList\
    \ = gameScoreDiffListMapValues.map(x => x.toList)\n        val gameScoreDiffListMapValuesListSorted\
    \ = gameScoreDiffListMapValuesList.toList.sortBy(_._1).reverse\n        val gameScoreDiffListMapValuesListSortedMap\
    \ = gameScoreDiffListMapValuesListSorted.groupBy(x => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMap.keys\n        val gameScoreDiffListMapValuesListSortedMapValues\
    \ = gameScoreDiffListMapValuesListSortedMap.values\n        val gameScoreDiffListMapValuesListSortedMapValuesList\
    \ = gameScoreDiffListMapValuesListSortedMapValues.map(x => x.toList)\n       \
    \ val gameScoreDiffListMapValuesListSortedMapValuesListSorted = gameScoreDiffListMapValuesListSortedMapValuesList.toList.sortBy(_._1).reverse\n\
    \        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMap = gameScoreDiffListMapValuesListSortedMapValuesListSorted.groupBy(x\
    \ => x).toMap\n        val gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys\
    \ = gameScoreDiffListMapValuesListSortedMapValuesListSortedMapKeys.keys\n    \
    \    val gameScoreDiffListMapValuesList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo3hewpmn.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:19:48\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:19:70\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \  value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _2 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo3hewpmn.scala:20:72\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \    value _1 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpo3hewpmn.scala:21:76 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m: \e[35mList\e[0m[\e[35mLong\e\
    [0m] = gameScoreMap.keySet.toList.sortBy(_._1).reverse.map(\e[36mx\e[0m => gameScoreMap.get(x))\n\
    \e[31m\e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659798269
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - game(index) }\n        gameScores.zip(guessesScores).map { case (gameScore,\
    \ guessesScore) => if (gameScore == 0) 0 else abs(gameScore - guessesScore) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpleh2ue7o.scala:22)\n\tat Problem.main(tmpleh2ue7o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(x => x).map { case (score, index) => index\
    \ -> score.size }.toMap\n        val guessScoreMap = guessScores.groupBy(x =>\
    \ x).map { case (score, index) => index -> score.size }.toMap\n        val gameScoreArray\
    \ = gameScores.map { case (score, index) => index -> score }.toArray\n       \
    \ val guessScoreArray = guessScores.map { case (score, index) => index -> score\
    \ }.toArray\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case (score, index) => index -> score.size }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(x => x).map { case (score, index) => index -> score.size\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(x => x).map\
    \ { case \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdhzs84wo.scala:35:73 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap\e[0m =\
    \ gameScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \         pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdhzs84wo.scala:45:0 ----------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap\e[0m =\
    \ gameScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m (score, index)\
    \ => index -> score.size }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArrayMap\e[0m\
    \ = guessScoreArray.groupBy(\e[36mx\e[0m => x).map { \e[33mcase\e[0m (score, index)\
    \ => index -> score.size }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreArrayMap is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdhzs84wo.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesWithIndex\
    \ = guessesScores.zipWithIndex.map{case (score, index) => index}.toList\n    \
    \    val gameWithIndex = gameScores.zipWithIndex.map{case (score, index) => index}.toList\n\
    \        val gameWithIndexAndScores = gameWithIndex.zip(gameScores).toList\n \
    \       val guessesWithIndexAndScores = guessesWithIndex.zip(guessesScores).toList\n\
    \        val gameWithIndexAndScoreAndIndex = gameWithIndexAndScores.zip(guessesWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore = gameWithIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex.zip(gameWithIndexAndScores).toList\n\
    \        val gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = gameWithIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore.zip(gameWithIndexAndScores).toList\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyr9g69g4.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => gameScores(index) -> score }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScore = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuess = guessesWithIndexesSortedSortedByScore.map\
    \ { case (index, score) => (index, score, guessesWithIndexesSortedSortedByScoreAndGuess(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGuess.map { case (index, score, guess)\
    \ => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\
    \ = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { case (index, score, guess, guessSortedByScoreAndGuess) => (index, score, guess,\
    \ guessSortedByScoreAndGuess(index)) }\n        val guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuessAndGuessedCorrectly\
    \ = guessesWithIndexesSortedSortedByScoreAndGue\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmtyb6lzq.scala:23:142 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedSortedByScoreAndGuess\e\
    [0m = guessesWithIndexesSortedSortedByScore.map { \e[33mcase\e[0m (index, score)\
    \ => (index, score, guessesWithIndexesSortedSortedByScoreAndGuess(index)) }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreAndGuess\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmtyb6lzq.scala:24:183\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\e[0m\
    \ = guessesWithIndexesSortedSortedByScoreAndGuess.map { \e[33mcase\e[0m (index,\
    \ score, guess) => (index, score, guess, guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly(index))\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectly\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpmtyb6lzq.scala:27:276\
    \ ----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScoreAndGuess\e\
    [0m = guessesWithIndexesSortedSortedByScoreAndGuessAndGuessedCorrectlySortedSortedByScore.map\
    \ { \e[33mcase\e[0m (index, score, guess, guessSortedByScoreAndGuess) => (index,\
    \ score, guess, guessSortedByScoreAndGuess(index)) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                  "
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreList = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val gameScoreList\
    \ = gameScores.toList\n        val guessesScoreList = guessesScores.toList\n \
    \       val gameScoreSet = gameScores.toSet\n        val guessesScoreSet = guessesScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessesScoreList =\
    \ guessesScores.toList\n        val gameScoreSet = gameScores.toSet\n        val\
    \ guessesScoreSet = guessesScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessesScoreMap = guessesScores.toMap\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwwytlnwk.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwwytlnwk.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreMap\e[0m = guessesScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessesScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwwytlnwk.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e[35mguessesScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index ->\
    \ score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map { case\
    \ (score, index) => index -> score }.toMap\n        val gameScoreList = gameScores.map\
    \ { case (score, index) => index -> score }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index -> score }.toList\n       \
    \ val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n        val\
    \ guessScoreList = guessScores.map { case (score, index) => index -> score }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index -> score }.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmupkbpn7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._1).map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(_._1).map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmupkbpn7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1659798269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScoreDiffs\
    \ = gameScoreDiffs.zipWithIndex.map { case (score, index) => Math.abs(score -\
    \ gameScore) }\n        val gameScoreDiffs = gameScoreDiffs.zipWithIndex.map {\
    \ case (score, index) => Math.abs(score - gameScore) }\n        val gameScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi3ofubij.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3ofubij.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map { \e[33mcase\e[0m\
    \ (score, index) => Math.abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiffs.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffs is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3ofubij.scala:"
  stdout: ''
  timestamp: 1659798267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val guessesToGameScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGuessesScore = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_))\
    \ < 0)\n        val gamesToGuessesScore = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < 0)\n        val guessesToGues\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqswdsrd9.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqswdsrd9.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgamesToGuessesScore\e[0m = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_))\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgamesToGuessesScore is already defined as \e[33mvalue\e[0m\
    \ \e[35mgamesToGuessesScore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqswdsrd9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesToGuessesScore\e\
    [0m = guessesScoreMap.keySet.toList.sortWith(_.compare(guessesScoreMap(_)) < \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesToGuessesScore is already defined as \e[33mvalue\e\
    [0m \e[35mguessesToGuessesScore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqswdsrd9.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgamesToGuessesScore\e[0m\
    \ = gameScoreMap.keySet.toList.sortWith(_.compare(gameScoreMap(_)) < \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgamesToGuessesScore is already defined as \e[33mvalue\e[0m\
    \ \e[35mgamesToGuessesScore\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqswdsrd9.scala:27:12 ---------------------------\e"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = guess.zipWithIndex.map\
    \ { case (guess, index) => guess - game(index) }\n        val guesses = guesses.sum\n\
    \        val differences = guesses.zip(gameScores).map { case (guess, score) =>\
    \ guess - score }\n        val differences = differences.sum\n        differences.toList.sortBy(-_)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp80je2asy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = guesses.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguesses\
    \ is already defined as \e[33mvalue\e[0m \e[35mguesses\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp80je2asy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdifferences\e[0m = differences.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdifferences is already defined as \e[33mvalue\e[0m \e[35mdifferences\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660013545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesCorrect = guessesScores.filter(_._2 == gameScores(_._1)).map\
    \ { case (index, score) => (index, 0) }.toMap\n        val guessesIncorrect =\
    \ guessesScores.filter(_._2 != gameScores(_._1)).map { case (index, score) =>\
    \ (index, score) }.toMap\n        val guessesDiff = guessesCorrect ++ guessesIncorrect\n\
    \        guessesDiff.map { case (index, score) => (index, Math.abs(score - gameScores(index)))}\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpkotetrs7.scala:19:69 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesCorrect\e[0m = guessesScores.filter(_._2\
    \ == gameScores(_._1)).map { \e[33mcase\e[0m (index, score) => (index, \e[31m0\e\
    [0m) }.toMap\n\e[31m\e[31m   |\e[0m                                          \
    \                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => _$2._1.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpkotetrs7.scala:20:71 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesIncorrect\e[0m =\
    \ guessesScores.filter(_._2 != gameScores(_._1)).map { \e[33mcase\e[0m (index,\
    \ score) => (index, score) }.toMap\n\e[31m\e[31m   |\e[0m                    \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 =>\
    \ _$4._1.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkotetrs7.scala:22:72\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        guessesDiff.map {\
    \ \e[33mcase\e[0m (index, score) => (index, Math.abs(score - gameScores(index)))}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of AnyVal, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffSum = guessScoreDiffs.sum\n        val gameScoreDiffDiff\
    \ = gameScoreDiffSum - guessScoreDiffSum\n        val guessScoreDiffDiff = guessScoreDiffSum\
    \ - gameScoreDiffSum\n        val gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n\
    \        val guessScoreDiffDiffSum = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff\
    \ = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff\
    \ = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs\
    \ = gameScoreDiffDiffDiff.zipWithIndex.map { case (diff, index) => diff }\n  \
    \      val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map {\
    \ case (diff, index) => diff }\n        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffs.sum\n\
    \        val guessScoreDiffDiffSum = guessScoreDiffDiffSum.sum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiffSum - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiffSum\
    \ = guessScoreDiffDiffSum - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffSum\
    \ = gameScoreDiffDiffDiffSum.sum\n        val guessScoreDiffDiffSum = guessScoreDiffDiffSum.sum\n\
    \        val gameScoreDiffDiffDiffSum = gameScoreDiffDiffDiffSum.sum\n       \
    \ val guessScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppbquht6s.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbquht6s.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffDiffSum\e[0m = guessScoreDiffDiffSum.sum\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreDiffDiffSum is already defined as \e[33mvalue\e[0m \e[35mguessScoreDiffDiffSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppbquht6s.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffSum\e[0m = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbquht6s.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffDiffSum\e\
    [0m = gameScoreDiffDiffDiffSum.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbquht6s.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffSum\e\
    [0m = guessScoreDiffDiffSum.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScor"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0e4lpoh.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0e4lpoh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660013547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoresWithIndexes = guess.zipWithIndex.map {\
    \ case (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWith\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpknwzynsa.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpknwzynsa.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpknwzynsa.scala:22:111 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoresWithIndexes\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpknwzynsa.scala:23:121\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScoresWithIndexesWithScores\e[0m = guess.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, index) => guess -> score -> index }.toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                         ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                        Not found: score\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpknwzynsa.scala:24:132\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e["
  stdout: ''
  timestamp: 1660013548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guesses_count = guesses.size\n       \
    \ val scores_count = scores.size\n        val guesses_sum = guesses.sum\n    \
    \    val scores_sum = scores.sum\n        val guesses_sum_abs = guesses_sum.abs\n\
    \        val scores_sum_abs = scores_sum.abs\n        val guesses_sum_diff = guesses_sum\
    \ - scores_sum\n        val guesses_sum_diff_abs = guesses_sum_diff.abs\n    \
    \    val guesses_diff_sum = guesses_sum_diff + guesses_sum_abs - scores_sum_abs\n\
    \        val guesses_diff_sum_abs = guesses_diff_sum.abs\n        val guesses_diff_sum_diff_abs\
    \ = guesses_diff_sum_abs + guesses_sum_diff_abs - scores_sum_abs\n        val\
    \ guesses_diff_sum_diff_diff_abs = guesses_diff_sum_diff_abs + guesses_sum_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_abs = guesses_diff_sum_diff_diff_abs\
    \ + guesses_sum_diff_diff_diff_abs - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_abs = guesses_diff_sum_diff_diff_diff_abs\
    \ + guesses_sum_diff_diff_diff_diff_abs - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n        val guesses_diff_sum_diff_diff_diff_diff_diff_diff_diff_abs\
    \ = guesses_diff_sum_diff_diff_diff_diff_diff_diff_diff_diff_ab\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zyrt2wc.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguesses_diff_sum_diff_diff_diff_abs\e\
    [0m = guesses_diff_sum_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguesses_diff_sum_diff_diff_diff_abs is already defined as\
    \ \e[33mvalue\e[0m \e[35mguesses_diff_sum_diff_diff_diff_abs\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zyrt2wc.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguesses_diff_sum_diff_diff_diff_diff_abs\e[0m = guesses_diff_sum_diff_diff_diff_diff_abs\
    \ + guesses_sum_diff_diff_diff_diff_diff_abs - scores_sum_abs\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguesses_diff_sum_diff_diff_diff_diff_abs is already defined\
    \ as \e[33mvalue\e[0m \e[35mguesses_diff_sum_diff_diff_diff_diff_abs\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1zyrt2wc.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mguesses_diff_sum_diff_diff_diff_diff_diff_diff_abs\e\
    [0m = guesses_diff_sum_diff_diff_diff_diff_diff_diff_abs + guesses_sum_diff_diff_diff_diff_diff_diff_diff_diff_abs\
    \ - scores_sum_abs\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguesses_diff_sum_diff_diff_diff_diff_diff_diff_abs is already\
    \ defined as \e[33mvalue\e[0m \e[35mgu"
  stdout: ''
  timestamp: 1660013547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreDiff = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0\n            else Math.abs(gameScore\
    \ - guessScore)\n        }\n        gameScoreDiff.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreDiffs = gameScores.zip(guessScores).map {\n            case (gameScore,\
    \ guessScore) => Math.abs(gameScore - guessScore)\n        }\n        gameScoreDiffs.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesWithScores\
    \ = guess.zip(game).map(x => (x._2, x._1)).toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0)).toMap\n        val guessesWithScoreAndIndexAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2)).toMap\n        val\
    \ guessesWithScoreAndIndexAndGuessAndGuessAndGuess = guess.zip(game).map(x =>\
    \ (x._2, x._1, x._0, x._1, x._2, x._3)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4)).toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5)).toMap\n\
    \        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5,\
    \ x._6)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._2, x._1, x._0, x._1, x._2, x._3, x._4, x._5,\
    \ x._6, x._7)).toMap\n        val guessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\
    \ = guess.zip(game).map(x => (x._\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwqiuapb2.scala:28:131 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuessAndGuess\e\
    [0m = guess.zip(game).map(\e[36mx\e[0m => (x._\n\e[31m\e[31m   |\e[0m        \
    \                                                                            \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                             an identifier expected, but '_' found\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwqiuapb2.scala:20:79 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndex\e\
    [0m = guess.zip(game).map(\e[36mx\e[0m => (x._2, x._1, x._0)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \             ^^^^\e[0m\n\e[31m   |\e[0m           value _0 is not a member of\
    \ (Long, Long) - did you mean x._1?\n\e[31m\e[31m-- Error: /tmp/tmpwqiuapb2.scala:20:89\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithScoreAndIndex\e[0m = guess.zip(game).map(\e\
    [36mx\e[0m => (x._2, x._1, x._0)).toMap\n\e[31m\e[31m   |\e[0m               \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                      Cannot prove that (Long, Long, Nothing)\
    \ <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                      where:   \
    \ K is a type variable\n\e[31m   |\e[0m                                V is a\
    \ type variable\n\e[31m   |\e[0m                      .\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpwqiuapb2.scala:21:87 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndGuess\e\
    [0m = guess.zip(game).map(\e[36mx\e[0m => (x._2, x._1, x._0, x._1)).toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                           ^^^^\e[0m\n\e[31m   |\e[0m           value _0 is not\
    \ a member of (Long, Lon"
  stdout: ''
  timestamp: 1660013551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSorted = guessesWithScores.sortBy(_._1)\n      \
    \  val guessesWithScoresSortedWithCorrect = guessesWithScoresSorted.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSorted = guessesWithScoresSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrect = guessesWithScoresSortedWithCorrectSorted.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n       \
    \ val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrect = guessesWithScoresSortedWithCorrectSortedWithCorrectSorted.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSorted\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.sortBy(_._1)\n\
    \        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ = guessesWithScoresSortedWithCorrectSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gjpz1uu.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\e\
    [0m = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9gjpz1uu.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9gjpz1uu.scala:27:100 --------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\e\
    [0m = guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect.filter(_._2\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoresSortedWithCorrectSortedWithCorrectSortedWithCorrectSortedWithCorrect\n\
    \e[31m  "
  stdout: ''
  timestamp: 1660013547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSetSize\n \
    \       val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScore\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjnww8ekk.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gameScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnww8ekk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetSize\e[0m\
    \ = guessesScoreSetSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnww8ekk.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ gameScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnww8ekk.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m\
    \ = guessesScoreListSize\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreListSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreListSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjnww8ekk.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSize\e[0m =\
    \ gam"
  stdout: ''
  timestamp: 1660013547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl8oypezt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl8oypezt.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mguessSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl8oypezt.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl8oypezt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl8oypezt.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e[0m"
  stdout: ''
  timestamp: 1660013548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => if (x == 0) 0 else x).sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n\
    \        val guessesDiff = guess.zip(gameScores).map(x => if (x._1 == 0) 0 else\
    \ x._1 - x._2).sum\n        val guessesDiffAbs = guessesDiff.abs\n        val\
    \ gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n        val guessesDiffAbsSum =\
    \ guessesDiffAbs.sum\n        val gameScoreDiffAbsSumAbs = gameScoreDiffAbsSum.abs\n\
    \        val guessesDiffAbsSumAbs = guessesDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsAbs\
    \ = gameScoreDiffAbsSumAbs.abs\n        val guessesDiffAbsSumAbsAbs = guessesDiffAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsAbsAbs = gameScoreDiffAbsSumAbsAbs.abs\n  \
    \      val guessesDiffAbsSumAbsAbsAbs = guessesDiffAbsSumAbsAbs.abs\n        val\
    \ guessesDiffAbsSumAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbs.abs\n        val\
    \ guessesDiffAbsSumAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbs.abs\n     \
    \   val guessesDiffAbsSumAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \        val guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbsAbs = guessesDiffAbsSumAbsAbsAbsAb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabgc1pol.scala:23:51 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSum\e[0m\
    \ = gameScoreDiffAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpabgc1pol.scala:24:47 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesDiffAbsSum\e[0m = guessesDiffAbs.sum\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                value sum is not a member of Long\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpabgc1pol.scala:33:50 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffAbsSumAbsAbsAbsAbsAbsAbs\e\
    [0m = guessesDiffAbsSumAbsAbsAbsAbsAbsAbs.abs\n\e[31m\e[31m   |\e[0m         \
    \                                         ^\e[0m\n\e[31m   |\e[0m          Recursive\
    \ \e[33mvalue\e[0m \e[35mguessesDiffAbsSumAbsAbsAbsAbsAbsAbs\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpabgc1pol.scala:34:53\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs\e[0m = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m       Recursive \e[33mvalue\e[0m \e[35mguessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpabgc1pol.scala:35:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs\e[0m = guessesDiffAbsSumAbsAbsAbsAbsAbsAbsAbsAbs.abs\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mguessesDiffAbsSumAbsAbsAbsAbsAbs"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff\
    \ / gameScoreCount\n        val guessScoreDiffCount = guessScoreDiff / guessScoreCount\n\
    \        val gameScoreDiffCounts = gameScoreDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val guessScoreDiffCounts = guessScoreDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val gameScoreDiffCountSum = gameScoreDiffCounts.sum\n\
    \        val guessScoreDiffCountSum = guessScoreDiffCounts.sum\n        val gameScoreDiffCountDiff\
    \ = gameScoreDiffCountSum - guessScoreDiffCountSum\n        val guessScoreDiffCountDiff\
    \ = guessScoreDiffCountSum - gameScoreDiffCountSum\n        val gameScoreDiffCountDiffCount\
    \ = gameScoreDiffCountDiff / gameScoreCount\n        val guessScoreDiffCountDiffCount\
    \ = guessScoreDiffCountDiff / guessScoreCount\n        val gameScoreDiffCountDiffCounts\
    \ = gameScoreDiffCountDiffCount.toList.zipWithIndex.map { case (count, index)\
    \ => count }\n        val guessScoreDiffCountDiffCounts = guessScoreDiffCountDiffCount.toList.zipWithIndex.map\
    \ { case (count, index) => count }\n        val gameScoreDiffCountDiffCountSum\
    \ = gameScoreDiffCountDiffCounts.sum\n        val guessScoreDiffCountDiffCountSum\
    \ = guessScoreDiffCountDiffCounts.sum\n        val gameScoreDiffCountDiffCountDiff\
    \ = gameScoreDiffCountDiffCountSum - guessScoreDiffCountDiffCountSum\n       \
    \ val guessScoreDiffCountDiffCountDiff = guessScoreDiffCountDiffCountSum - gameScoreDiffCountDiffCountSum\n\
    \        val gameScoreDiffCountDiffCountDiffCount = gameScoreDiffCountDiffCountDiff\
    \ / gameScoreCount\n        val guessScoreDiffCountDiffCountDiffCount = guessScoreDiffCountDiffCountDiff\
    \ / guessScoreCount\n        val gameScoreDiffCountDiff\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqg6enfb.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcqg6enfb.scala:25:47\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e\
    [0m \e[36mgameScoreDiffCount\e[0m = gameScoreDiff / gameScoreCount\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m in \e\
    [33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\
    \e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e\
    [0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short):\
    \ Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((gameScoreCount\
    \ : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcqg6enfb.scala:26:49\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e\
    [0m \e[36mguessScoreDiffCount\e[0m = guessScoreDiff / guessScoreCount\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m/\e[0m\
    \ in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\
    \e[31m   |\e[0m (x: Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e\
    [0m (x: Short): Long\n\e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments\
    \ ((guessScoreCount : (Long => Boolean) => Int))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcqg6enfb.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve_6tefa.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScoreMap.toList\n        val guessScoreList = guessScoreMap.toList\n\
    \        val gameScores = gameScoreList.map { case (score, index) => score }\n\
    \        val guessScores = guessScoreList.map { case (score, index) => score }\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScoreMap.toList\n        val guessScoreList =\
    \ guessScoreMap.toList\n        val gameScores = gameScoreList.map { case (score,\
    \ index) => score }\n        val guessScores = guessScoreList.map { case (score,\
    \ index) => score }\n        val gameScoreMap = gameScores.toMap\n        val\
    \ guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ { case (score, index) => score }\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScoreMap.toList\n\
    \        val guessScoreList = guessScoreMap.toList\n        val gameScores = gameScoreList.map\
    \ { case (score, index) => score }\n        val guessScores = guessScoreList.map\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnn32o9d2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnn32o9d2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnn32o9d2.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnn32o9d2.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnn32o9d2.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1660013549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toList\n   \
    \     val guessScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toList\n        val gameScoreMap = gameScores.groupBy(_._1).map { case\
    \ (index, scores) => (index, scores.map(_._2).toList) }.toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(_._1).map { case (index, scores) => (index, scores.map(_._2).toList)\
    \ }.toMap\n        val gameScoreList: List[Long] = gameScoreMap.values.flatten.toList\n\
    \        val guessScoreList: List[Long] = guessScoreMap.values.flatten.toList\n\
    \        val gameScoreDiff = gameScoreList.zip(guessScoreList).map { case (gameScore,\
    \ guessScore) =>\n            if (gameScore == guessScore) 0\n            else\
    \ Math.abs(gameScore - guessScore)\n        }\n        gameScoreDiff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7bee4q34.scala:30)\n\tat Problem.main(tmp7bee4q34.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScore = guesses.zipWithIndex.map\
    \ { case (index, guess) => guess - gameScore(index) }\n        guessesWithScore.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp20ym_hg5.scala:20:89 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guesses.zipWithIndex.map { \e[33mcase\e[0m (index, guess) => guess - gameScore(index)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         \e[33mvalue\e[0m \e[35mgameScore\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesCorrect\
    \ = guessesScores.zipWithIndex.map { case (score, index) => if (index == 0) 0\
    \ else abs(score - guessesScores(index-1)) }\n        val guessesDiff = guessesCorrect\
    \ zip gameScores\n        guessesDiff.map { case (guess, score) => if (guess ==\
    \ 0) 0 else abs(guess - score) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42d8s0ns.scala:24)\n\tat Problem.main(tmp42d8s0ns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.length\n      \
    \  val scoresCount = scores.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = Math.abs(guess\
    \ - score)\n            if (diff == 0) {\n                result.add(i)\n    \
    \        } else {\n                result.add(diff)\n            }\n         \
    \   i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0u4sup_r.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0u4sup_r.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessesScores = guess.map(_.toLong)\n      \
    \  val guessesDiff = guessesScores.zip(gameScores).map { case (guess, score) =>\
    \ (guess - score) }\n        guessesDiff.map(_.abs).filter(_ > 0).map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkahuugzy.scala:23)\n\tat Problem.main(tmpkahuugzy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(x => Math.abs(x - guess(x)))\n        val guessesWithScores = guess.zip(gameScores)\n\
    \        val guessesWithScore = guessesWithScores.toList\n        val guessesWithScoreSorted\
    \ = guessesWithScore.sortBy(_._1)\n        val guessesWithScoreSortedReversed\
    \ = guessesWithScoreSorted.reverse\n        val guessesWithScoreSortedReversedSorted\
    \ = guessesWithScoreSortedReversed.sortBy(_._1)\n        val guessesWithScoreSortedReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSorted.zipWithIndex\n        val guessesWithScoreSortedReversedSortedWithIndexReversed\
    \ = guessesWithScoreSortedReversedSortedWithIndex.sortBy(_._1)\n        val guessesWithScoreSortedReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversed.sortBy(_._1)\n     \
    \   val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndex =\
    \ guessesWithScoreSortedReversedSortedWithIndexReversedSorted.zipWithIndex\n \
    \       val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.sortBy(_._1)\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2n1b58zx.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n1b58zx.scala:17:58 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.map(\e[36mx\e[0m =>\
    \ Math.abs(x - guess(x)))\n\e[31m\e[31m   |\e[0m                             \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                            Found:    (x : Long)\n\e[31m   |\e[0m           \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp2n1b58zx.scala:27:97 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted\e\
    [0m = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2n1b58zx.scala:31:143 -----------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted\e\
    [0m = guessesWithScoreSortedReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSorted.\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = abs(guess - score)\n            if (difference < 0)\n                difference\
    \ = difference * -1\n            result(i) = difference\n            i += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5l0y340h.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp5l0y340h.scala:28:27 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                difference = difference * -\e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \               Reassignment to val difference\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5l0y340h.scala:32:8 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map { case (diff, index) => diff +\
    \ guessesDiff(index) }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqm9n92cz.scala:23)\n\tat Problem.main(tmpqm9n92cz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => Math.abs(x)).sum\n        val gameScoreDiffPercent = gameScoreDiff / gameScoreSum\
    \ * 100\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercent.toString\n\
    \        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercent\
    \ = gameScoreDiffPercent / 100\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercent.toString\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiffPercentPercentString.substring(0,\
    \ gameScoreDiffPercentPercentString.length - 1)\n        val gameScoreDiffPercentPercentString\
    \ = gameScoreDiffPercentPercentString.substring(0, gameScoreDiffPercentPercentString.length\
    \ - 1)\n        val gameScoreDiffPercentPercentString = gameScoreDiff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8md0sme5.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercentPercentString\e\
    [0m = gameScoreDiffPercentPercentString.substring(\e[31m0\e[0m, gameScoreDiffPercentPercentString.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercentPercentString is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffPercentPercentString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8md0sme5.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffPercentPercentString\e[0m = gameScoreDiffPercentPercent.toString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercentPercentString is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffPercentPercentString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8md0sme5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffPercentPercentString\e[0m = gameScoreDiffPercentPercentString.substring(\e\
    [31m0\e[0m, gameScoreDiffPercentPercentString.length - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercentPercentString is already defined as \e\
    [33mvalue\e[0m \e[35mgameScoreDiffPercentPercentString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8md0sme5.scala:26:12\
    \ ------------------------"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg6pj2za5.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffDiffCount\e[0m = guessScoreDiffDiffs.count\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScoreDiffDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffSum\e[0m\
    \ = gameScoreDiffDiffs.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffSum\e\
    [0m = guessScoreDiffDiffs.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6pj2za5.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue zipWithIndex is\
    \ not a member of Null, but could be made available as "
  stdout: ''
  timestamp: 1660013559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => Math.abs(score) }\n        val gameScoreDiffSum = gameScoreDiff.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiff.map { case diff => Math.abs(diff)\
    \ }\n        gameScoreDiffSum.zip(gameScoreDiffDiff).map { case (diff, diffDiff)\
    \ => diff + diffDiff }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrsp0rhv.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        gameScoreDiffSum.zip(gameScoreDiffDiff).map {\
    \ \e[33mcase\e[0m (diff, diffDiff) => diff + diffDiff }\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value zip is not a\
    \ member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesWithScores = guesses.zip(scores)\n\
    \        val guessesWithScoresSortedByScore = guessesWithScores.sortBy(_._1)\n\
    \        val guessesWithScoresSortedByScoreWithCorrect = guessesWithScoresSortedByScore.filter(_._2\
    \ == 0)\n        val guessesWithScoresSortedByScoreWithIncorrect = guessesWithScoresSortedByScore.filter(_._2\
    \ != 0)\n        val guessesWithScoresSortedByScoreWithCorrectAndIncorrect = guessesWithScoresSortedByScoreWithCorrect\
    \ ++ guessesWithScoresSortedByScoreWithIncorrect\n        val guessesWithScoresSortedByScoreWithCorrectAndCorrect\
    \ = guessesWithScoresSortedByScoreWithCorrect ++ guessesWithScoresSortedByScoreWithCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrect =\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrect =\
    \ guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndCorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndCorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndCorrect\n\
    \        val guessesWithScoresSortedByScoreWithCorrectAndCorrectAndIncorrectAndIncorrect\
    \ = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nag6_j1.scala:26:137 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoresSortedByScoreWithCorrectAndIncorrectAndIncorrect\e\
    [0m = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndIncorrect\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m      Not found: guessesWithScoresSortedByScoreWithIncorrectAndIncorrect\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nag6_j1.scala:28:147\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndIncorrect\e\
    [0m = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndIncorrect\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndIncorrect\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_nag6_j1.scala:30:145\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoresSortedByScoreWithCorrectAndIncorrectAndCorrectAndCorrect\e\
    [0m = guessesWithScoresSortedByScoreWithCorrectAndIncorrect ++ guessesWithScoresSortedByScoreWithIncorrectAndCorrectAndCorrect\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        var i = 0\n        while (i < guessesRemaining &&\
    \ i < scoresRemaining) {\n            if (scoresRemaining == 0) {\n          \
    \      result(i) = guesses(i)\n                guessesRemaining -= 1\n       \
    \         scoresRemaining -= 1\n                i += 1\n            } else if\
    \ (guessesRemaining == 0) {\n                result(i) = scores(i)\n         \
    \       guessesRemaining -= 1\n                scoresRemaining -= 1\n        \
    \        i += 1\n            } else if (guesses(i) < scores(i)) {\n          \
    \      result(i) = guesses(i) - scores(i)\n                guessesRemaining -=\
    \ 1\n                scoresRemaining -= 1\n                i += 1\n          \
    \  } else {\n                result(i) = scores(i) - guesses(i)\n            \
    \    guessesRemaining -= 1\n                scoresRemaining -= 1\n           \
    \     i += 1\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdi66fl81.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdi66fl81.scala:29:32 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m                scoresRemaining -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value -= is not a member\
    \ of Int - did you mean scoresRemaining.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdi66fl81.scala:34:32 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                scoresRemaining -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value -= is not a member\
    \ of Int - did you mean scoresRemaining.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdi66fl81.scala:39:32 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m                scoresRemaining -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value -= is not a member\
    \ of Int - did you mean scoresRemaining.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdi66fl81.scala:44:32 ------------------------\e[0m\e[0m\n\e[31m44 |\e\
    [0m                scoresRemaining -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value -= is not a member\
    \ of Int - did you mean scoresRemaining.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdi66fl81.scala:48:8 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660013559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc774epi_.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc774epi_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index -> score -> index \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m30 |\e\
    [0m    }\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc774epi_.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc774epi_.scala:22:108 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when comp"
  stdout: ''
  timestamp: 1660013561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesCorrect = guessesScores.filter(_._2 ==\
    \ gameScores.size)\n        val guessesWrong = guessesScores.filter(_._2 != gameScores.size)\n\
    \        val guessesDiff = guessesWrong.map { case (score, index) => (gameScores(score)\
    \ - guessesScores(score)) }\n        guessesDiff.map { case diff => if (diff <\
    \ 0) diff else diff }.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnj5ib3g3.scala:22:70\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        guessesDiff.map { \e\
    [33mcase\e[0m diff => \e[33mif\e[0m (diff < \e[31m0\e[0m) diff \e[33melse\e[0m\
    \ diff }.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScores = gameScores.toList\n        val gameScores = gameScores.sortWith(_.compareTo(_)\
    \ < 0)\n        val gameScores = gameScores.reverse\n        val gameScores =\
    \ gameScores.map { score => if (score < 0) score else -score }\n        gameScores\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpycim7kdz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycim7kdz.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycim7kdz.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpycim7kdz.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map { \e\
    [36mscore\e[0m => \e[33mif\e[0m (score < \e[31m0\e[0m) score \e[33melse\e[0m -score\
    \ }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660013556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until game.size) {\n            val score = scores(i)\n  \
    \          val guess = guesses(i)\n            val diff = Math.abs(guess - score)\n\
    \            if(guess == score) {\n                results.add(i)\n          \
    \  }\n            else {\n                results.add(diff)\n            }\n \
    \       }\n        results.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ix48d34.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ix48d34.scala:23:38\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdiff\e[0m = Math.abs(guess - score)\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of\
    \ Boolean, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.length\n\
    \        val scores = game.length\n        val results = new mutable.ArrayList[Long](guesses)\n\
    \        val differences = new mutable.ArrayList[Long](guesses)\n        val difference\
    \ = 0l\n        var i = 0\n        while (i < guesses) {\n            val guess\
    \ = guess(i)\n            val score = game(i)\n            if (guess == score)\
    \ {\n                results.add(score)\n                differences.set(i, 0l)\n\
    \            } else {\n                val difference = abs(guess - score)\n \
    \               differences.set(i, difference)\n            }\n            i +=\
    \ 1\n        }\n        results\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkagp1e6g.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guesses)\n\e[31m\e[31m   |\e[0m       \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkagp1e6g.scala:20:30\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mdifferences\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mLong\e[0m](guesses)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpkagp1e6g.scala:24:24 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mguess\e[0m = guess(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mguess\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreSetSize = gameScoreSet.size\n  \
    \      val guessesScoreSetSize = guessesScoreSet.size\n        val gameScoreSetIterator\
    \ = gameScoreSet.iterator\n        val guessesScoreSetIterator = guessesScoreSet.iterator\n\
    \        val gameScoreSetIteratorSize = gameScoreSetIterator.size\n        val\
    \ guessesScoreSetIteratorSize = guessesScoreSetIterator.size\n        val gameScoreSetIteratorNext\
    \ = gameScoreSetIterator.next\n        val guessesScoreSetIteratorNext = guessesScoreSetIterator.next\n\
    \        val gameScoreSetIteratorNextValue = gameScoreSetIteratorNext._1\n   \
    \     val guessesScoreSetIteratorNextValue = guessesScoreSetIteratorNext._1\n\
    \        val gameScoreSetIteratorNextScore = gameScoreSetIteratorNext._2\n   \
    \     val guessesScoreSetIteratorNextScore = guessesScoreSetIteratorNext._2\n\
    \        val gameScoreSetIteratorNextScoreValue = gameScoreSetIteratorNextScore.toLong\n\
    \        val guessesScoreSetIteratorNextScoreValue = guessesScoreSetIteratorNextScore.toLong\n\
    \        val gameScoreSetIteratorNextScoreValueAbs = Math.abs(gameScoreSetIteratorNextScoreValue)\n\
    \        val guessesScoreSetIteratorNextScoreValueAbs = Math.abs(guessesScoreSetIteratorNextScoreValue)\n\
    \        val gameScoreSetIteratorNextScoreValueAbsValue = gameScoreSetIteratorNextScoreValueAbs.toLong\n\
    \        val guessesScoreSetIteratorNextScoreValueAbsValue = guessesScoreSetIteratorNextScoreValueAbs.toLong\n\
    \        val gameScoreSetIteratorNextScoreValueAbsValueAbs = Math.abs(gameScoreSetIteratorNextScoreValueAbsValue)\n\
    \        val guessesScoreSetIteratorNextScoreValueAbsValueAbs = Math.abs(guessesScoreSetIteratorNextScoreValueAbsValue)\n\
    \        val gameScoreSetIteratorNextScoreValueAbsValueAbsValue = gameScoreSetIteratorNextScoreValueAbsValueAbs.toLong\n\
    \        val guessesScoreSetIteratorNextScoreValueAbsValueAbsValue = guessesScoreSetIteratorNextScoreValueAbsValueAbs.toLong\n\
    \        val gameScoreSetIteratorNextScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg3nlsj2r.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg3nlsj2r.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreMap = gameScores.groupBy(_).mapValues(_.size)\n        val guessScoreMap\
    \ = guessScores.groupBy(_).mapValues(_.size)\n        val gameScoreList = gameScoreMap.mapValues(_._2).toList\n\
    \        val guessScoreList = guessScoreMap.mapValues(_._2).toList\n        val\
    \ gameScores = gameScoreList.zip(guessScoreList).map{case (gameScore, guessScore)\
    \ => Math.abs(gameScore - guessScore)}\n        gameScores.toList.map(_.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpijzyymqt.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.zip(guessScoreList).map{\e\
    [33mcase\e[0m (gameScore, guessScore) => Math.abs(gameScore - guessScore)}\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpijzyymqt.scala:19:46 -----------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_).mapValues(_.size)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$3 of expanded function:\n\e[31m   |\e\
    [0m   _$3 => gameScores.groupBy(_$3).mapValues(_$4 => _$4.size).\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpijzyymqt.scala:20:48 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(_).mapValues(_.size)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$5 of expanded function:\n\e[31m   |\e\
    [0m   _$5 => guessScores.groupBy(_$5).mapValues(_$6 => _$6.size).\n3 errors found\n"
  stdout: ''
  timestamp: 1660013557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => if (x == 0) 0 else x).sum\n        val gameScoreDiffAbs = gameScoreDiff.abs\n\
    \        val gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsSumAbs\
    \ = gameScoreDiffAbsSum.abs\n        val gameScoreDiffAbsSumAbsSum = gameScoreDiffAbsSumAbs.sum\n\
    \        val gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n  \
    \      val gameScoreDiffAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum = gameScoreDiffAbsSumAbsSumAbsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_re69aq5.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_re69aq5.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSumAbs\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_re69aq5.scala:21:51 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSum\e[0m = gameScoreDiffAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_re69aq5.scala:25:46 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\e[31m\e[31m   |\e[0m             \
    \                                 ^\e[0m\n\e[31m   |\e[0m              Recursive\
    \ \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSum\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e"
  stdout: ''
  timestamp: 1660013561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - game(index) }\n     \
    \   val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - guess(index) }\n        val differences = guessesScores.zip(gameScores).map\
    \ { case (guess, game) => guess - game }\n        differences.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjfhsqq_e.scala:23)\n\tat Problem.main(tmpjfhsqq_e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.length\n      \
    \  val scoresCount = scores.length\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            var j = 0\n\
    \            while (j < scoresCount) {\n                if (scores(j) == guesses(i))\
    \ {\n                    result.add(i)\n                    result.add(j)\n  \
    \                  j++\n                }\n                else {\n          \
    \          j++\n                }\n            }\n            i++\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplthygs4p.scala:29:23 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    j++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmplthygs4p.scala:32:23 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m                    j++\n\e[31m\e[31m   |\e[0m                       ^\e\
    [0m\n\e[31m   |\e[0m                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplthygs4p.scala:35:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            i++\n\e[31m\e\
    [31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplthygs4p.scala:17:22 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplthygs4p.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => score }\n        val guessScore = guessScores.map { case (score, index) =>\
    \ score }\n        val gameScoreDiff = gameScore diff guessScore\n        val\
    \ gameScoreDiff2 = gameScoreDiff.map { case (score, index) => Math.abs(score -\
    \ guessScore(index)) }\n        val gameScoreDiff3 = gameScoreDiff2.map { case\
    \ (score, index) => Math.abs(score - gameScore(index)) }\n        gameScoreDiff3.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0tbr3wa7.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScore\
    \ diff guessScore\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue diff is not a member of scala.collection.immutable.Iterable[Long]\
    \ - did you mean gameScore.drop?\n1 error found\n"
  stdout: ''
  timestamp: 1660013560
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => (index, score)}.toMap\n       \
    \ val guessScores = guess.zipWithIndex.map{case (score, index) => (index, score)}.toMap\n\
    \        val gameScore = gameScores.foldLeft(0L){case (acc, (index, score)) =>\
    \ acc + (score - gameScores.get(index))}\n        val guessScore = guessScores.foldLeft(0L){case\
    \ (acc, (index, score)) => acc + (score - guessScores.get(index))}\n        val\
    \ difference = guessScore - gameScore\n        val differences = guessScores.map{case\
    \ (index, score) => if (score == gameScore) 0 else difference}\n        differences.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpspn0curb.scala:19:91 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScores.foldLeft(\e\
    [31m0L\e[0m){\e[33mcase\e[0m (acc, (index, score)) => acc + (score - gameScores.get(index))}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (Option[Long])\n\e[31m\e[31m--\
    \ [E134] Type Error: /tmp/tmpspn0curb.scala:20:93 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScore\e[0m = guessScores.foldLeft(\e\
    [31m0L\e[0m){\e[33mcase\e[0m (acc, (index, score)) => acc + (score - guessScores.get(index))}\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mLong\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Long\n\e[31m\
    \   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\e[31m   |\e[0m\
    \ (x: Byte): Long\n\e[31m   |\e[0mmatch arguments (Option[Long])\n2 errors found\n"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScores = gameScores.toList\n        val guessesCorrect = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - guess(index)) }\n\
    \        val guessesCorrect = guessesCorrect.toList\n        guessesCorrect.zipWithIndex.map\
    \ { case (guess, index) => if (guess == 0) 0 else abs(guess - game(index)) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7f2qmarc.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f2qmarc.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesCorrect\e[0m = guessesCorrect.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesCorrect is already defined as \e[33mvalue\e[0m \e[35mguessesCorrect\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660013558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesWithScores\
    \ = guessesScores.map(x => x._1 -> x._2)\n        val guessesWithoutScores = guessesScores.map(x\
    \ => x._1 -> 0)\n        val guessesWithoutScores = guessesWithoutScores.map(x\
    \ => x._1 -> x._2)\n        val guessesWithScoreAndScore = guessesWithScores ++\
    \ guessesWithoutScores\n        val guessesWithScoreAndScoreAndScore = guessesWithScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScore\n        val guessesWithScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScore ++ guessesWithScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScore = guessesWithScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScore\n        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore ++\
    \ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ = guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \        val guessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp96hr1tjs.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96hr1tjs.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithoutScores\e[0m = guessesWithoutScores.map(\e[36mx\e[0m => x._1\
    \ -> x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithoutScores is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesWithoutScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp96hr1tjs.scala:23:75 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndScoreAndScore\e\
    [0m = guessesWithScoreAndScore ++ guessesWithScoreAndScoreAndScore\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m             Recursive \e[33mvalue\e[0m \e[35mguessesWithScoreAndScoreAndScore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp96hr1tjs.scala:25:63\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreAndScoreAndScoreAndScoreAndScore\e[0m = guessesWithScoreAndScoreAndScoreAndScoreAndScore\
    \ ++ guessesWithScoreAndScoreAndScoreAndScoreAndScore\n\e[31m\e[31m   |\e[0m \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithScoreAndScoreAndScoreAndScoreAndScore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp96hr1tjs.scala:27:152\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScore\e[0m = guess"
  stdout: ''
  timestamp: 1660013563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guessesRemaining = guessesCount - 1\n        val scoresRemaining\
    \ = scoresCount - 1\n        val guessesRemainingInScore = guessesRemaining /\
    \ scoresCount\n        val scoresRemainingInScore = scoresRemaining / guessesCount\n\
    \        val guessesRemainingInScore2 = guessesRemainingInScore * scoresCount\n\
    \        val scoresRemainingInScore2 = scoresRemainingInScore * guessesCount\n\
    \        val guessesRemainingInScore3 = guessesRemainingInScore2 * scoresCount\n\
    \        val scoresRemainingInScore3 = scoresRemainingInScore2 * guessesCount\n\
    \        val guessesRemainingInScore4 = guessesRemainingInScore3 * scoresCount\n\
    \        val scoresRemainingInScore4 = scoresRemainingInScore3 * guessesCount\n\
    \        val guessesRemainingInScore5 = guessesRemainingInScore4 * scoresCount\n\
    \        val scoresRemainingInScore5 = scoresRemainingInScore4 * guessesCount\n\
    \        val guessesRemainingInScore6 = guessesRemainingInScore5 * scoresCount\n\
    \        val scoresRemainingInScore6 = scoresRemainingInScore5 * guessesCount\n\
    \        val guessesRemainingInScore7 = guessesRemainingInScore6 * scoresCount\n\
    \        val scoresRemainingInScore7 = scoresRemainingInScore6 * guessesCount\n\
    \        val guessesRemainingInScore8 = guessesRemainingInScore7 * scoresCount\n\
    \        val scoresRemainingInScore8 = scoresRemainingInScore7 * guessesCount\n\
    \        val guessesRemainingInScore9 = guessesRemainingInScore8 * scoresCount\n\
    \        val scoresRemainingInScore9 = scoresRemainingInScore8 * guessesCount\n\
    \        val guessesRemainingInScore10 = guessesRemainingInScore9 * scoresCount\n\
    \        val scoresRemainingInScore10 = scoresRemainingInScore9 * guessesCount\n\
    \        val guessesRemainingInScore11 = guessesRemainingInScore10 * scoresCount\n\
    \        val scoresRemainingInScore11 = scoresRemainingInScore10 * guessesCount\n\
    \        val guessesRemainingInScore12 = guessesRemainingInScore11 * scoresCount\n\
    \        val scoresRemainingInScore12 = scoresRemainingInScore11 * guessesCount\n\
    \        val gues\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1shtw04z.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1shtw04z.scala:19:35\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesCount\e[0m = guesses.size\n\e[31m\e[31m   |\e[0m                  \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a member of Null,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.buffer\
    \ AsJavaList\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsJavaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1shtw04z.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1shtw04z.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with"
  stdout: ''
  timestamp: 1660013563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val scoreDiff = new mutable.ListBuffer[Long]()\n        val guessesDiff\
    \ = new mutable.ListBuffer[Long]()\n        val guessesDiffCount = guessesCount\
    \ - guesses.size\n        val scoresDiffCount = scoresCount - scores.size\n  \
    \      val scoreDiffCount = scoreDiffCount - scoreDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount\
    \ = guessesDiffCount - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount\
    \ - guessesDiff.size\n        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n\
    \        val guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val\
    \ guessesDiffCount = guessesDiffCount - guessesDiff.size\n        val guesses\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkjrwc8rp.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrwc8rp.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesDiffCount\e[0m = guessesDiffCount - guessesDiff.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCount is already defined as \e[33mvalue\e[0m \e\
    [35mguessesDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkjrwc8rp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffCount\e[0m =\
    \ guessesDiffCount - guessesDiff.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCount is already defined as \e[33mvalue\e[0m \e\
    [35mguessesDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkjrwc8rp.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffCount\e[0m =\
    \ guessesDiffCount - guessesDiff.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCount is already defined as \e[33mvalue\e[0m \e\
    [35mguessesDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkjrwc8rp.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffCount\e[0m =\
    \ guessesDiffCount - guessesDiff.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesDiffCount is already defined as \e[33mvalue\e[0m \e\
    [35mguessesD"
  stdout: ''
  timestamp: 1660013562
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map { case (diff, index) => diff }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(_.abs).sum\n\
    \        val gameScoreDiffAbs = gameScoreDiff.abs\n        val gameScoreDiffAbsSum\
    \ = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsSumAbs = gameScoreDiffAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSum = gameScoreDiffAbsSumAbs.sum\n        val\
    \ gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAb\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmc6z1659.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSum\e[0m\
    \ = gameScoreDiffAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value sum is not a member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc6z1659.scala:25:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsSumAbsSumAbsSum\e[0m = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc6z1659.scala:26:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbs\e[0m = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc6z1659.scala:27:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSum\e[0m = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbsSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc6z1659.scala:28:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs\e[0m = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n\
    \e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660013568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0e4lpoh.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0e4lpoh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660013547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(x => Math.abs(x))\n        val guessesScores = guess.map(x => Math.abs(x))\n\
    \        val guessesDiff = guessesScores.zip(gameScores).map(x => if (x._1 ==\
    \ x._2) 0 else x._1 - x._2)\n        guessesDiff\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bmuo3nr.scala:23)\n\tat Problem.main(tmp6bmuo3nr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) results += score\n            else results += guess\
    \ - score\n        }\n        results.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpha4y7jg5.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreIndexes\
    \ = gameScores.zipWithIndex.map { case (score, index) => index }\n        val\
    \ guessScoreIndexes = guessScores.zipWithIndex.map { case (score, index) => index\
    \ }\n        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndexesWithGuess = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \        val gameScoreIndex\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp54lgodp3.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54lgodp3.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreIndexesWithGuess\e[0m = gameScoreIndexes.zip(guessScoreIndexes)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreIndexesWithGuess is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreIndexesWithGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54lgodp3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreIndexesWithGuess\e\
    [0m = gameScoreIndexes.zip(guessScoreIndexes)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreIndexesWithGuess is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreIndexesWithGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54lgodp3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreIndexesWithGuess\e\
    [0m = gameScoreIndexes.zip(guessScoreIndexes)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreIndexesWithGuess is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreIndexesWithGuess\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54lgodp3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreIndexesWithGuess\e\
    [0m = gameScoreIndexes.zip(guessScoreIndexes)\n\e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660013569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve_6tefa.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff < result(i)) {\n                result(i) = diff\n\
    \            } else {\n                result(i) = result(i) - diff\n        \
    \    }\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzqmheg8.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdzqmheg8.scala:34:8 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreKeys = gameScoreMap.keys\n        val guessesScoreKeys = guessesScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values\n        val guessesScoreValues\
    \ = guessesScoreMap.values\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeySet = guessesScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessesScoreValueSet = guessesScoreValues.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeySet.toSet\n        val gameScoreValueSet = gameScoreValueSet.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n\
    \        val gameScoreValueSet = gameScoreValueSet.toSet\n        val guessesScoreValueSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n        val gameScoreValueSet\
    \ = gameScoreValueSet.toSet\n        val guessesScoreValueSet = guessesScoreValueSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeysSet.toSet\n        val gameScoreValueSet = gameScoreValueSet.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValueSet.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n\
    \        val gameScoreValueSet = gameScoreValueSet.toSet\n        val guessesScoreValueSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKey\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsp1ual3s.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsp1ual3s.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreValueSet\e[0m = gameScoreValueSet.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreValueSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreValueSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsp1ual3s.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreValueSet\e[0m = guessesScoreValueSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreValueSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreValueSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpsp1ual3s.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSet\e[0m =\
    \ gameScoreKeysSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSet is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreKeysSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpsp1ual3s.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSet\e[0m\
    \ = guessesScoreKeysSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreKeysSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overlo"
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScores =\
    \ guess.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessesScoreKeys\
    \ = guessesScores.keySet\n        val gameScoreKeys = gameScores.keySet\n    \
    \    val guessesScoreKeysSet = guessesScoreKeys.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeys.toSet\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfwiz9ay5.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfwiz9ay5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeysSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfwiz9ay5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m = gameScoreKeysSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfwiz9ay5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfwiz9ay5.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote tha"
  stdout: ''
  timestamp: 1660013572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val guessesWithScores = guessesScores.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (index, score) => (index, score) }.toMap\n \
    \       val guessesWithIndexesWithScoresWithIndexes = guessesWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScores\
    \ = guessesWithIndexesWithScoresWithIndexes.map { case (index, score) => (index,\
    \ score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScores.map { case (index, score)\
    \ => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexes.map { case (index,\
    \ score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes.map\
    \ { case (index, score) => (index, score) }.toMap\n        val guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexes\
    \ = guessesWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScoresWithIndexesWithScores.map\
    \ { case (index, score) => (index, score) }.toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv4tvgi83.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScores = guessesWithIndexesSorted.map\
    \ { case (index, score) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithScores.map { case (index, score) => index -> index\
    \ }.toMap\n        val guessesWithIndexesSortedWithIndexesSorted = guessesWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithScores = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { case (index, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithScores.map { case (index, index)\
    \ => index -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes.map\
    \ { case (index, index) => index -> score }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexes\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithScores.map {\
    \ case (index, index) => index -> index }.toMap\n        val guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted\
    \ = guessesWithIndexesSortedWithIndexesSortedWithIndexesSortedWithIndexesSorted.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithIndexesSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz1jllj0r.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E005] Naming Error: /tmp/tmpz1jllj0r.scala:25:127\
    \ --------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithIndexesSortedWithScores\e[0m = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { \e[33mcase\e[0m (index, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       duplicate pattern variable: index\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1jllj0r.scala:25:146\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSortedWithIndexesSortedWithScores\e[0m = guessesWithIndexesSortedWithIndexesSorted.map\
    \ { \e[33mcase\e[0m (index, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E005] Naming Error: /tmp/tmpz1jllj0r.scala:26:138\
    \ --------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithIndexesSortedWithIndexes\e[0m = guessesWithIndexesSortedWithIndexesSortedWithScores.map\
    \ { \e[33mcase\e[0m (index, index) => index -> index }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       duplicate pattern variable:\
    \ index\n\e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val gameScore = gameScores.sum\n        val guesses = guess.zipWithIndex.map{\
    \ case (guess, index) => guess - game(index) }\n        val guessesWithCorrect\
    \ = guesses.filter{ case (guess, index) => guess == 0 }\n        val guessesWithWrong\
    \ = guesses.filter{ case (guess, index) => guess != 0 }\n        guessesWithCorrect\
    \ ++ guessesWithWrong.map{ case (guess, index) => guess - gameScore(index) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ezj36f3.scala:22:81 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        guessesWithCorrect ++ guessesWithWrong.map{ \e\
    [33mcase\e[0m (guess, index) => guess - gameScore(index) }\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp7ezj36f3.scala:22:83 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        guessesWithCorrect ++ guessesWithWrong.map{ \e\
    [33mcase\e[0m (guess, index) => guess - gameScore(index) }\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \e[33mvalue\e\
    [0m \e[35mgameScore\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSetSize\n \
    \       val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4lu1rw2a.scala:57:31 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lu1rw2a.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSize\e[0m = gameScoreSetSize\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreSetSize\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4lu1rw2a.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetSize\e[0m = guessesScoreSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSetSize is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4lu1rw2a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m = gameScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4lu1rw2a.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m = guessesScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSetSize = guessSetSize.toLong\n        val gameSetSize = gameSetSize.toLong\n\
    \        val guessSet\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0e4lpoh.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0e4lpoh.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameSetSize\e[0m = gameSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameSetSize is already defined as \e[33mvalue\e[0m \e[35mgameSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessSetSize\e[0m = guessSetSize.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessSetSize is already defined as \e[33mvalue\e[0m \e[35mguessSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0e4lpoh.scala:25:12 ----------"
  stdout: ''
  timestamp: 1660013547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map{\
    \ case (score, index) => index }\n        val guessesScore = guesses.sum\n   \
    \     val guessesDiff = guessesScore - gameScore\n        guesses.map(guess =>\
    \ if (guess == 0) 0 else abs(guess - gameScore))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh8qvedx.scala:25)\n\tat Problem.main(tmpqh8qvedx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve_6tefa.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoreAndIndex = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpje1grn1m.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje1grn1m.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score -> index }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpje1grn1m.scala:22:107 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndIndex\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje1grn1m.scala:23:116\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScoreAndIndexWithScore\e[0m = guess.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, index) => guess -> score -> index -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: score\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpje1grn1m.scala:23:134\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1660013572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScores = guesses.zipWithIndex.map\
    \ { case (index, score) => score - guess(index) }\n        guessesWithScores.map\
    \ { case (guess, score) => if (guess == 0) 0 else abs(guess) }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4z08kiti.scala:21:78 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        guessesWithScores.map { \e[33mcase\e[0m (guess,\
    \ score) => \e[33mif\e[0m (guess == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m\
    \ abs(guess) }\n\e[31m\e[31m   |\e[0m                                        \
    \                                      ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0mmatch arguments ((guess : Any))\n1 error found\n"
  stdout: ''
  timestamp: 1660013570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndex = guessesWithScores.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScores = guessesWithScoreAndIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndex =\
    \ guessesWithScoreAndIndexWithScores.zipWithIndex.map(x => (x._2, x._1))\n   \
    \     val guessesWithScoreAndIndexWithScoresWithIndexWithScores = guessesWithScoreAndIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScores.zipWithIndex.map(x =>\
    \ (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex.zip(gameScores).map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppbw7fgk8.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbw7fgk8.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\e\
    [0m = guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex.zipWithIndex.map(\e\
    [36mx\e[0m => (x._2, x._1))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppbw7fgk8.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.length\n\
    \        val scores = game.length\n        val result = new mutable.ArrayList[Long](guesses)\n\
    \        val guessesSoFar = 0\n        val scoresSoFar = 0\n        val guessesLeftToCompare\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare = scores - scoresSoFar\n\
    \        val guessesLeftToCompare2 = guesses - guessesSoFar\n        val scoresLeftToCompare2\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare3 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare3 = scores - scoresSoFar\n        val guessesLeftToCompare4\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare4 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare5 = guesses - guessesSoFar\n        val scoresLeftToCompare5\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare6 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare6 = scores - scoresSoFar\n        val guessesLeftToCompare7\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare7 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare8 = guesses - guessesSoFar\n        val scoresLeftToCompare8\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare9 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare9 = scores - scoresSoFar\n        val guessesLeftToCompare10\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare10 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare11 = guesses - guessesSoFar\n        val scoresLeftToCompare11\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare12 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare12 = scores - scoresSoFar\n        val guessesLeftToCompare13\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare13 = scores - scoresSoFar\n\
    \        val guessesLeftToCompare14 = guesses - guessesSoFar\n        val scoresLeftToCompare14\
    \ = scores - scoresSoFar\n        val guessesLeftToCompare15 = guesses - guessesSoFar\n\
    \        val scoresLeftToCompare15 = scores - scoresSoFar\n        val guessesLeftToCompare16\
    \ = guesses - guessesSoFar\n        val scoresLeftToCompare16 = scores - scores\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvnrc3vz.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guesses)\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvnrc3vz.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).filter{case (guess, score) => guess == score}\n\
    \        val guessesWrong = guessesScores.zip(gameScores).filter{case (guess,\
    \ score) => guess != score}\n        guessesCorrect.map{case (guess, score) =>\
    \ guess - score}.toList ++ guessesWrong.map{case (guess, score) => abs(guess -\
    \ score)} ++ List(guessesWrong.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpku5a_4ed.scala:24)\n\tat Problem.main(tmpku5a_4ed.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScore = guessesWithIndexesSorted.toSeq.sortBy(_._2).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndex = guessesWithIndexesSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSorted\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { case (score, index) => index -> score }.toMap\n        val guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\
    \ = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpedcdnopi.scala:25:80 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\e\
    [0m = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore.map {\
    \ \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpedcdnopi.scala:26:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\e\
    [0m = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex.toSeq.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedcdnopi.scala:27:95\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSorted\e\
    [0m = guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithIndexesSortedSortedByScoreWithIndexSortedSortedByScoreWithIndexSortedSortedByScore\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m lon"
  stdout: ''
  timestamp: 1660013573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index }.toMap\n\
    \        val guessesWithIndexesWithScoresWithIndex = guess.zipWithIndex.map {\
    \ case (guess, index) => guess -> score -> index -> guess }.toMap\n        val\
    \ guessesWithIndexesWithScoresWithIndexAndScore = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index -> guess -> score }.toMap\n      \
    \  val guessesWithIndexesWithScoresWithIndexAndScoreAndGuess = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> score -> index -> guess -> score -> guess\
    \ }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScoreAndGuess\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score -> guess }.toMap\n        val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAndScoreAndGuessAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ guess -> score -> guess -> index -> score -> guess -> index }.toMap\n      \
    \  val guessesWithIndexesWithScoresWithIndexAndScoreAndGuessAndIndexAnd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6rxb79wh.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6rxb79wh.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score -> index }.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6rxb79wh.scala:22:109 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoresWithIndex\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index -> guess }.toMap\n\e[31m\e[31m   |\e[0m                           \
    \                                                                            \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \             Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6rxb79wh.scala:23:117 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoresWithIndexAndScore\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index -> guess -> score }.toMap\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6rxb79wh.scala:23:144 -------------------"
  stdout: ''
  timestamp: 1660013575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guesses.zipWithIndex.map { case (guess, score) => (guess, score) }.toMap\n\
    \        val guessesWithScoreAndIndexWithScores = guesses.zip(game).map { case\
    \ (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScores = guesses.zip(game).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(game).map { case (guess, score) => (guess, score) }.toMap\n  \
    \      val guessesWithScoreAnd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt87qpj_1.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt87qpj_1.scala:20:39\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndex\e[0m = guesses.zipWithIndex.map { \e[33mcase\e[0m\
    \ (guess, score) => (guess, score) }.toMap\n\e[31m\e[31m   |\e[0m            \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                   Not found: guesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt87qpj_1.scala:21:49 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexWithScores\e\
    [0m = guesses.zip(game).map { \e[33mcase\e[0m (guess, score) => (guess, score)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \      Not found: guesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpt87qpj_1.scala:22:58 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexWithScoresWithIndex\e\
    [0m = guesses.zip(game).map { \e[33mcase\e[0m (guess, score) => (guess, score)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                    Not found: guesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt87qpj_1.scala:23:68 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexWithScoresWithIndexWithScores\e\
    [0m = guesses.zip(game).map { \e[33mcase\e[0m (guess, score) => (guess, score)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \   "
  stdout: ''
  timestamp: 1660013574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for(score <- scores) {\n            val guess = guesses.find(_ == score)\n\
    \            if(guess == None) result += score\n            else result += guess\
    \ - score\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzf8bxvwk.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values\n        val guessScoreValues\
    \ = guessScoreMap.values\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessScoreValueSetSize = guessScoreValueSet.size\n        val gameScoreKeySetSize\
    \ = gameScoreKeySet.size\n        val guessScoreKeySetSize = guessScoreKeySet.size\n\
    \        val gameScoreValueSetSize = gameScoreValueSet.size\n        val guessScoreValueSetSize\
    \ = guessScoreValueSet.size\n        val gameScoreKeySetSize = gameScoreKeySet.size\n\
    \        val guessScoreKeySetSize = guessScoreKeySet.size\n        val gameScoreValueSetSize\
    \ = gameScoreValueSet.size\n        val guessScoreValueSetSize = guessScoreValueSet.size\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessScoreKeySetSize\
    \ = guessScoreKeySet.size\n        val gameScoreValueSetSize = gameScore\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwubr597n.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeySetSize\e[0m\
    \ = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwubr597n.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mguessScoreKeySetSize\e[0m\
    \ = guessScoreKeySet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreKeySetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwubr597n.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwubr597n.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mguessScoreValueSetSize\e\
    [0m = guessScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwubr597n.scala:37:12 ---------------------------\e\
    [0m\e["
  stdout: ''
  timestamp: 1660013576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessesScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) =>\n            val guessesScore = guessesScoreMap.get(index)\n\
    \            val gameScore = gameScoreMap.get(index)\n            if (guessesScore\
    \ == gameScore) {\n                gameScoreList.add(gameScore)\n            \
    \    guessesScoreList.add(guessesScore)\n            } else {\n              \
    \  val diff = abs(guessesScore - gameScore)\n                gameScoreList.add(gameScore)\n\
    \                guessesScoreList.add(guessesScore)\n                guessesScoreList.add(diff)\n\
    \            }\n        }\n        gameScoreList.map(_.toLong)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvw44bqu.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphvw44bqu.scala:22:35 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvw44bqu.scala:30:44\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e\
    [0m \e[36mdiff\e[0m = abs(guessesScore - gameScore)\n\e[31m\e[31m   |\e[0m   \
    \                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of Option[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> guess }.toMap\n        val guessesWithIndexesWithScores\
    \ = guessesWithIndexes.map { case (score, index) => index -> gameScores(index)\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScores = guessesWithIndexesWithScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess }.toMap\n      \
    \  val guessesWithIndexesWithScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores = guessesWithIndexesWithScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores.map { case (score,\
    \ index) => index -> gameScores(index) - guess - guess - guess - guess }.toMap\n\
    \        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ - guess - guess }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores.map\
    \ { case (score, index) => index -> gameScores(index) - guess - guess - guess\
    \ - guess - guess - guess }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guessesWithIndexesWithScoreAndScoreAndScore\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq6v6j02j.scala:21:111\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guessesWithIndexes.map { \e[33mcase\e[0m (score, index) => index -> gameScores(index)\
    \ }.toMap\n\e[31m\e[31m   |\e[0m                                             \
    \                                                                  ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                          Found:    (index : List[Long])\n\
    \e[31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq6v6j02j.scala:22:136 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guessesWithIndexesWithScores.map { \e[33mcase\e[0m (score, index) => index\
    \ -> gameScores(index) - guess }.toMap\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Int, Int), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpq6v6j02j.scala:24:67 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScoreAndScoreAndScores\e\
    [0m = guessesWithIndexesWithScoreAndScoreAndScoreAndScores.map { \e[33mcase\e\
    [0m (score, index) => index -> gameScores(index) - guess - guess - guess }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesWithScoreAndScoreAndSco"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val guessesScoreKeys = guessesScoreMap.keys\n        val gameScoreKeys =\
    \ gameScoreMap.keys\n        val guessesScoreKeysSet = guessesScoreKeys.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeys.toSet\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val gameScoreKeysSetSize = gameScoreKeysSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9vd_zwex.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vd_zwex.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vd_zwex.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vd_zwex.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9vd_zwex.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetList = gameScores.toSet.toList\n        val guessScoreSetList\
    \ = guessScores.toSet.toList\n        val gameScoreSetSet = gameScoreSet.toSet\n\
    \        val guessScoreSetSet = guessScoreSet.toSet\n        val gameScoreSetList\
    \ = gameScoreSet.toList\n        val guessScoreSetList = guessScoreSet.toList\n\
    \        val gameScoreSetSetList = gameScoreSet.toSet.toList\n        val guessScoreSetSetList\
    \ = guessScoreSet.toSet.toList\n        val gameScoreSetSetSet = gameScoreSetSet.toSet\n\
    \        val guessScoreSetSetList = guessScoreSetSet.toList\n        val guessScoreSetSetSet\
    \ = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList = gameScoreSetSet.toList\n\
    \        val guessScoreSetSetSet = guessScoreSetSet.toSet.toList\n        val\
    \ gameScoreSetSetSetSet = gameScoreSetSetSet.toSet.toList\n        val guessScoreSetSetSetSet\
    \ = guessScoreSetSetSet.toSet.toList\n        val gameScoreSetSetSetSetSet = gameScoreSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSet = guessScoreSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSetSetSetSet.toSet.toList\n\
    \        val gameScoreSetSetSetSetSetSetSet = gameScoreSetSetSetSetSet.toSet.toList\n\
    \        val guessScoreSetSetSetSetSetSetSet = guessScoreSetSet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpryaouusv.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetList\e[0m =\
    \ gameScoreSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpryaouusv.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetList\e[0m =\
    \ guessScoreSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetList is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpryaouusv.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSetList\e[0m\
    \ = guessScoreSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSetList is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpryaouusv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSetSet\e[0m\
    \ = guessScoreSetSet.toSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSetSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpryaouusv.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1660013580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keys\n        val guessScoreKeys = guessScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeySet.toSet\n        val guessScoreKeysSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValuesSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValuesSet = guessScoreValueSet.toSet\n        val gameScoreKeysSetSet\
    \ = gameScoreKeysSet.toSet\n        val guessScoreKeysSetSet = guessScoreKeysSet.toSet\n\
    \        val gameScoreValuesSetSet = gameScoreValuesSet.toSet\n        val guessScoreValuesSetSet\
    \ = guessScoreValuesSet.toSet\n        val gameScoreKeysSetSetSet = gameScoreKeysSetSet.toSet\n\
    \        val guessScoreKeysSetSetSet = guessScoreKeysSetSet.toSet\n        val\
    \ gameScoreValuesSetSetSet = gameScoreValuesSetSet.toSet\n        val guessScoreValuesSetSetSet\
    \ = guessScoreValuesSetSet.toSet\n        val gameScoreKeysSetSetSetSet = gameScoreKeysSetSetSet.toSet\n\
    \        val guessScoreKeysSetSetSetSet = guessScoreKeysSetSetSet.toSet\n    \
    \    val gameScoreValuesSetSetSetSet = gameScoreValuesSetSetSet.toSet\n      \
    \  val guessScoreValuesSetSetSetSet = guessScoreValuesSetSetSet.toSet\n      \
    \  val gameScoreKeysSetSetSetSetSet = gameScoreKeysSetSetSetSet.toSet\n      \
    \  val guessScoreKeysSetSetSetSetSet = guessScoreKeysSetSetSetSet.toSet\n    \
    \    val gameScoreValuesSetSetSetSetSet = gameScoreValuesSetSetSetSet.toSet\n\
    \        val guessScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpitn9dt9q.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpitn9dt9q.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                       where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                 V\
    \ is a type variable\n\e[31m   |\e[0m                                       .\n\
    \e[31m\e[31m-- Error: /tmp/tmpitn9dt9q.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitn9dt9q.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}\n        val guessesScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}\n        val guessesCorrect\
    \ = guessesScores.zipWithIndex.filter{case (score, index) => gameScores(index)\
    \ == score}\n        val guessesWrong = guessesScores.zipWithIndex.filter{case\
    \ (score, index) => gameScores(index) != score}\n        guessesCorrect.map{case\
    \ (score, index) => Math.abs(gameScores(index) - score)}.zipWithIndex.map{case\
    \ (score, index) => Math.abs(gameScores(index) - score)}.filter(_ > 0).map(_ +\
    \ gameScores(index)).toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmcuurtq2.scala:21:197 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        guessesCorrect.map{\e[33mcase\e[0m (score, index)\
    \ => Math.abs(gameScores(index) - score)}.zipWithIndex.map{\e[33mcase\e[0m (score,\
    \ index) => Math.abs(gameScores(index) - score)}.filter(_ > \e[31m0\e[0m).map(_\
    \ + gameScores(index)).toList\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                                                            \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                           Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = guess - score\n            if (difference < 0l) {\n                result.add(difference)\n\
    \            } else {\n                result.add(0l)\n            }\n       \
    \     i += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqroh45ei.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqroh45ei.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(x => x.toLong)\n        val guessScores = guess.map(x => x.toLong)\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).mapValues(_.size)\n   \
    \     val guessScoreMap = guessScores.groupBy(x => x).mapValues(_.size)\n    \
    \    val gameScoreList = new mutable.ListBuffer[Long]()\n        val guessScoreList\
    \ = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach {\n         \
    \   case (k, v) => gameScoreList += k\n        }\n        guessScoreMap.foreach\
    \ {\n            case (k, v) => guessScoreList += k\n        }\n        gameScoreList.zip(guessScoreList).map\
    \ {\n            case (gameScore, guessScore) => Math.abs(gameScore - guessScore)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3jxc1bg.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo3jxc1bg.scala:22:33 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex\
    \ = guesses.zipWithIndex.map { case (guess, score) => (guess, score) }.toMap\n\
    \        val guessesWithScoreAndIndexWithScores = guesses.zip(gameScores).map\
    \ { case (guess, score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndex\
    \ = guesses.zip(gameScores).zip(guessesScores).map { case (guess, score, index)\
    \ => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).map { case\
    \ (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScores\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).zip(guessesWithScoresWithIndexWithScores).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWithScoresWithIndexWithScoresWithIndex\
    \ = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).zip(guessesWithScoresWithIndex).zip(guessesWithScoresWithIndexWithScores).zip(guessesWithScoresWithIndexWithScoresWithIndex).map\
    \ { case (guess, score, index) => (guess, score, index) }.toMap\n        val guessesWithScoreAndIndexWithScoresWithIndexWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn4y7ev3c.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn4y7ev3c.scala:20:39\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndex\e[0m = guesses.zipWithIndex.map { \e[33mcase\e[0m\
    \ (guess, score) => (guess, score) }.toMap\n\e[31m\e[31m   |\e[0m            \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                   Not found: guesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn4y7ev3c.scala:21:49 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexWithScores\e\
    [0m = guesses.zip(gameScores).map { \e[33mcase\e[0m (guess, score) => (guess,\
    \ score) }.toMap\n\e[31m\e[31m   |\e[0m                                      \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \             Not found: guesses\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpn4y7ev3c.scala:22:58 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexWithScoresWithIndex\e\
    [0m = guesses.zip(gameScores).zip(guessesScores).map { \e[33mcase\e[0m (guess,\
    \ score, index) => (guess, score, index) }.toMap\n\e[31m\e[31m   |\e[0m      \
    \                                                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Not found: guesses\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn4y7ev3c.scala:23:68\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndexWithScoresWithIndexWithScores\e[0m = guesses.zip(gameScores).zip(guessesScores).zip(guessesWithScores).map\
    \ { \e[33mcase\e[0m (guess, score,"
  stdout: ''
  timestamp: 1660013581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.toList\n   \
    \     val guessesScoreList = guessesScoreMap.toList\n        val gameScores =\
    \ gameScoreList.map(x => gameScoreMap.getOrElse(x, 0l))\n        val guessesScores\
    \ = guessesScoreList.map(x => guessesScoreMap.getOrElse(x, 0l))\n        val gameScores\
    \ = gameScores.toList\n        val guessesScores = guessesScores.toList\n    \
    \    val gameScores = gameScores.zipWithIndex.map(x => x._1 - x._2)\n        val\
    \ guessesScores = guessesScores.zipWithIndex.map(x => x._1 - x._2)\n        val\
    \ gameScores = gameScores.toList\n        val guessesScores = guessesScores.toList\n\
    \        val gameScores = gameScores.zipWithIndex.map(x => x._1 - x._2)\n    \
    \    val guessesScores = guessesScores.zipWithIndex.map(x => x._1 - x._2)\n  \
    \      val gameScores = gameScores.toList\n        val guessesScores = guessesScores.toList\n\
    \        val gameScores = gameScores.zipWithIndex.map(x => x._1 - x._2)\n    \
    \    val guessesScores = guessesScores.zipWithIndex.map(x => x._1 - x._2)\n  \
    \      val gameScores = gameScores.toList\n        val guessesScores = guessesScores.toList\n\
    \        val gameScores = gameScores.zipWithIndex.map(x => x._1 - x._2)\n    \
    \    val guessesScores = guessesScores.zipWithIndex.map(x => x._1 - x._2)\n  \
    \      val gameScores = gameScores.toList\n        val guessesScores = guessesScores.toList\n\
    \        val gameScores = gameScores.zipWithIndex.map(x => x._1 - x._2)\n    \
    \    val guessesScores = guessesScores.zipWithIndex.map(x => x._1 - x._2)\n  \
    \      val gameScores = gameScores.toList\n        val guessesScores = guessesScores.toList\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_3omen_t.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map(\e\
    [36mx\e[0m => gameScoreMap.getOrElse(x, \e[31m0l\e[0m))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3omen_t.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScoreList.map(\e\
    [36mx\e[0m => guessesScoreMap.getOrElse(x, \e[31m0l\e[0m))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3omen_t.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3omen_t.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScores\e[0m = guessesScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesScores is already defined as \e[33mvalue\e[0m \e[35mguessesScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_3omen_t.scala:27:12 ---------------"
  stdout: ''
  timestamp: 1660013584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessedCorrectly = guess.zip(game).forall { case\
    \ (guess, score) => gameScores(score) == guess }\n        val guessesDiff = guess.zip(game).map\
    \ { case (guess, score) => guess - score }\n        val guessesDiffAbsolute =\
    \ guessesDiff.map(math.abs)\n        val guessesDiffAbsoluteCorrectly = guessesDiffAbsolute.zip(guessedCorrectly).map\
    \ { case (guess, correct) => if (correct) 0 else guess }\n        guessesDiffAbsoluteCorrectly\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb7wi4hl.scala:22:67\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesDiffAbsoluteCorrectly\e\
    [0m = guessesDiffAbsolute.zip(guessedCorrectly).map { \e[33mcase\e[0m (guess,\
    \ correct) => \e[33mif\e[0m (correct) \e[31m0\e[0m \e[33melse\e[0m guess }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     Found:    (guessedCorrectly : Boolean)\n\e[31m   |\e[0m                \
    \                  Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val guessScoreDiffAbs = Math.abs(guessScore - gameScore)\n        gameScoreDiffAbs.zip(guessScoreDiffAbs).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr7hec6u5.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        gameScoreDiffAbs.zip(guessScoreDiffAbs).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  value zip is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660013583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val diffs\
    \ = guessScores.zip(gameScores).map { case (guess, game) => math.abs(guess - game)\
    \ }\n        diffs.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffSum\
    \ = gameScoreDiffs.sum\n        val guessScoreDiffSum = guessScoreDiffs.sum\n\
    \        val gameScoreDiffDiff = gameScoreDiffSum - guessScoreDiffSum\n      \
    \  val guessScoreDiffDiff = guessScoreDiffSum - gameScoreDiffSum\n        val\
    \ gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val gameScoreDiffDiffDiff = gameScoreDiffDiffSum\
    \ - guessScoreDiffDiffSum\n        val guessScoreDiffDiffDiff = guessScoreDiffDiffSum\
    \ - gameScoreDiffDiffSum\n        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffSum = gameScoreDiffDiffs.sum\n        val guessScoreDiffDiffSum\
    \ = guessScoreDiffDiffs.sum\n        val game\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg6pj2za5.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessScoreDiffDiffCount\e[0m = guessScoreDiffDiffs.count\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessScoreDiffDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffDiffSum\e[0m\
    \ = gameScoreDiffDiffs.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffDiffSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg6pj2za5.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffDiffSum\e\
    [0m = guessScoreDiffDiffs.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffDiffSum is already defined as \e[33mvalue\e\
    [0m \e[35mguessScoreDiffDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6pj2za5.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = game.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue zipWithIndex is\
    \ not a member of Null, but could be made available as "
  stdout: ''
  timestamp: 1660013559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScores = guesses.zipWithIndex.map\
    \ { case (index, guess) => guess + score }\n        guessesWithScores.map { case\
    \ (guess, score) => if (guess == gameScore) 0 else abs(guess - gameScore) }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnbe2p07.scala:20:90 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guesses.zipWithIndex.map { \e[33mcase\e[0m (index, guess) => guess + score }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                         Not found: score\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnnbe2p07.scala:21:96 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        guessesWithScores.map { \e[33mcase\e[0m (guess,\
    \ score) => \e[33mif\e[0m (guess == gameScore) \e[31m0\e[0m \e[33melse\e[0m abs(guess\
    \ - gameScore) }\n\e[31m\e[31m   |\e[0m                                      \
    \                                                    ^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660013584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.map(_.toSet)\n        val guessesScoreSet = guessesScoreList.map(_.toSet)\n\
    \        val gameScoreSetSet = gameScoreSet.union(guessesScoreSet)\n        val\
    \ gameScoreSetList = gameScoreSetSet.toList\n        val gameScoreSetSetList =\
    \ gameScoreSetSetList.map(_.toList)\n        val gameScoreSetSetListSet = gameScoreSetSetList.map(_.toSet)\n\
    \        val gameScoreSetSetListSetSet = gameScoreSetSetListSet.map(_.toList)\n\
    \        val gameScoreSetSetListSetList = gameScoreSetSetListSet.map(_.toList)\n\
    \        val gameScoreSetSetListSetListSet = gameScoreSetSetListSetList.map(_.toList)\n\
    \        val gameScoreSetSetListSetListSetList = gameScoreSetSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSet = gameScoreSetSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSet = gameScoreSetSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSetListSet\
    \ = gameScoreSetSetListSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetListSetListSetListSetListSetListSet\
    \ = gameScoreSetSetListSetListSetListSetListSetListSetListSetListSetListSet.toList\n\
    \        val gameScoreSetSetListSetListSetListSetList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn7tc9hak.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn7tc9hak.scala:23:47\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreSet\e[0m = gameScoreList.map(_.toSet)\n\e[31m\e[31m   |\e[0m    \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      value toSet is not a member of Int - did you mean _$1.toInt?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn7tc9hak.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSet\e[0m = guessesScoreList.map(_.toSet)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value toSet is not a member of Int - did you mean\
    \ _$2.toInt?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn7tc9hak.scala:27:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSetList\e[0m = gameScoreSetSetList.map(_.toList)\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mgameScoreSetSetList\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn7tc9hak.scala:33:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSetListSetListSetListSet\e[0m = gameScoreSetSetListSetListSetListSet.toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m         Recursive \e[33mvalue\e[0m \e[35mgameScoreSetSetListSetListSetListSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn7tc9hak.scala:34:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSetListSetListSetListSetListSet\e[0m = gameScoreSetSetListSetListS"
  stdout: ''
  timestamp: 1660013585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val guessesWithScores = guess.zipWithIndex.map { case (score, index) => score\
    \ - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - game(index) }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map\
    \ { case (score, index) => score - game(index) }\n        val guessesWithScores\
    \ = guessesWithScores.zipWithIndex.map { case (score, index) => score - game(index)\
    \ }\n        val guessesWithScores = guessesWithScores.zipWithIndex.map { case\
    \ (score, index) => score - \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx8vo32km.scala:33:99 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.zipWithIndex.map { \e[33mcase\e[0m (score, index) => score\
    \ - \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx8vo32km.scala:43:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx8vo32km.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m = guessesWithScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score - game(index) }\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8vo32km.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.zipWithIndex.map { \e[33mcase\e[0m (score, index) => score\
    \ - game(index) }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8vo32km.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        "
  stdout: ''
  timestamp: 1660013585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = new mutable.ListBuffer[Long]()\n\
    \        val guessesScoreList = new mutable.ListBuffer[Long]()\n        gameScoreMap.foreach\
    \ { case (score, index) =>\n            val guessesScore = guessesScoreMap.get(score)\n\
    \            if (guessesScore == None) {\n                gameScoreList += score\n\
    \                guessesScoreList += score\n            } else {\n           \
    \     val diff = guessesScore.get.toLong - score\n                if (diff < 0)\
    \ {\n                    gameScoreList += score\n                    guessesScoreList\
    \ += diff\n                } else {\n                    gameScoreList += diff\n\
    \                    guessesScoreList += score\n                }\n          \
    \  }\n        }\n        gameScoreList.map { score => Math.abs(score) }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_5zw067.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = \e\
    [33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpm_5zw067.scala:22:35 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexes = guess.zipWithIndex.map { case (score,\
    \ index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexes\
    \ = guess.zipWithIndex.map { case (score, index) => index }.toMap\n        val\
    \ guessesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score }.toMap\n \
    \       val guessesWithIndexesWithIndexesWithIndexesWithIndex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph4yv0t4p.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmph4yv0t4p.scala:20:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                        Cannot prove that\
    \ Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                           \
    \             where:    K is a type variable\n\e[31m   |\e[0m                \
    \                                  V is a type variable\n\e[31m   |\e[0m     \
    \                                   .\n\e[31m\e[31m-- Error: /tmp/tmph4yv0t4p.scala:22:105\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithIndexesWithIndexes\e[0m = guess.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index }.toMap\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \             Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                        where:    K is a type variable\n\e\
    [31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph4yv0t4p.scala:24:116 ----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithIndexesWithIndexes\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[3"
  stdout: ''
  timestamp: 1660013587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, score) => math.abs(guess\
    \ - score) }\n        guessesDiff.zip(guessesScores).map { case (guess, score)\
    \ => math.abs(guess - score) }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxphrfu8n.scala:23)\n\tat Problem.main(tmpxphrfu8n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val guessScores = guess.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScores = guess.zip(game).map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScore = guessesWithScores.toSeq.sortBy(x\
    \ => x._1).reverse\n        val guessesWithScoreWithIndex = guessesWithScore.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScore = guessesWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScore.map(x => (x._2, x._1)).toMap\n        val\
    \ guessesWithScoreWithIndexWithScoreWithIndexWithScore = guessesWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScore.map(x => (x._2, x._1)).toMap\n\
    \        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\
    \ = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppy1lc6wb.scala:30:121 -----------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScore\e\
    [0m = guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWith\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: guessesWithScoreWithIndexWithScoreWithIndexWithScoreWithIndexWithScoreWith\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppy1lc6wb.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScoreSum\
    \ - gameScores.last\n        gameScores.map(gameScoreDiff)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaa97mpjw.scala:20:23\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        gameScores.map(gameScoreDiff)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    (gameScoreDiff : Long)\n\e[31m   |\e[0m    \
    \                   Required: Long => Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.sum\n\
    \        val gameScoreDiffAbs = gameScoreDiff.abs\n        val gameScoreDiffAbsSum\
    \ = gameScoreDiffAbs.sum\n        val gameScoreDiffAbsSumAbs = gameScoreDiffAbsSum.abs\n\
    \        val gameScoreDiffAbsSumAbsSum = gameScoreDiffAbsSumAbs.sum\n        val\
    \ gameScoreDiffAbsSumAbsSumAbs = gameScoreDiffAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbs.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbs\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n        val gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\
    \ = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpln5eiaro.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum.abs\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpln5eiaro.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSumAbs\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumAbsSumAbsSumAbsSumAbsSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpln5eiaro.scala:21:51 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSum\e[0m = gameScoreDiffAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpln5eiaro.scala:25:46 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSumAbsSumAbsSum\e\
    [0m = gameScoreDiffAbsSumAbsSumAbsSum.abs\n\e[31m\e[31m   |\e[0m             \
    \                                 ^\e[0m\n\e[31m   |\e[0m              Recursive\
    \ \e[33mvalue\e[0m \e[35mgameScoreDiffAbsSumAbsSumA"
  stdout: ''
  timestamp: 1660013587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSetList = gameScores.toList.toSet\n        val guessScoreSetList\
    \ = guessScores.toList.toSet\n        val gameScoreSetSet = gameScoreSet.toSet\n\
    \        val guessScoreSetSet = guessScoreSet.toSet\n        val gameScoreSetList\
    \ = gameScoreSet.toList\n        val guessScoreSetList = guessScoreSet.toList\n\
    \        val gameScoreSetSetList = gameScoreSet.toList.toSet\n        val guessScoreSetSetList\
    \ = guessScoreSet.toList.toSet\n        val gameScoreSetSetSet = gameScoreSetSet.toSet\n\
    \        val guessScoreSetSetList = guessScoreSetSet.toList.toSet\n        val\
    \ gameScoreSetSetSet = gameScoreSetSet.toSet\n        val guessScoreSetSetSet\
    \ = guessScoreSetSet.toSet\n        val gameScoreSetSetSetList = gameScoreSetSet.toList.toSet\n\
    \        val guessScoreSetSetSetList = guessScoreSetSet.toList.toSet\n       \
    \ val gameScoreSetSetSetSet = gameScoreSetSet.toSet.toSet\n        val guessScoreSetSetSetSet\
    \ = guessScoreSetSet.toSet.toSet\n        val gameScoreSetSetSetSetList = gameScoreSetSet.toList.toSet.toSet\n\
    \        val guessScoreSetSetSetSetList = guessScoreSetSet.toList.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSet = gameScoreSetSet.toSet.toSet.toSet\n  \
    \      val guessScoreSetSetSetSetSet = guessScoreSetSet.toSet.toSet.toSet\n  \
    \      val gameScoreSetSetSetSetSetList = gameScoreSetSet.toList.toSet.toSet.toSet\n\
    \        val guessScoreSetSetSetSetSetList = guessScoreSetSet.toList.toSet.toSet.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSet = gameScoreSetSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val guessScoreSetSetSetSetSetSet = guessScoreSetSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val gameScoreSetSetSetSetSetSetList = gameScoreSetSet.toList.toSet.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoyzyur2r.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetList\e[0m =\
    \ gameScoreSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetList is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoyzyur2r.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetList\e[0m =\
    \ guessScoreSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetList is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoyzyur2r.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSetSetList\e[0m\
    \ = guessScoreSetSet.toList.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreSetSetList is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpoyzyur2r.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSetSetSet\e[0m\
    \ = gameScoreSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreSetSetSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpoyzyur2r.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e["
  stdout: ''
  timestamp: 1660013589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2).toList\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => x._2).toList\n        val guessesDiff = guessesScores.zip(gameScores).map(x\
    \ => if (x._1 == x._2) 0 else abs(x._1 - x._2))\n        guessesDiff.map(x =>\
    \ if (x == 0) 0 else x)\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxhuqflc.scala:23)\n\tat Problem.main(tmpaxhuqflc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val maxScore = scores.max\n        val minScore = scores.min\n      \
    \  val maxGuess = guesses.max\n        val minGuess = guesses.min\n        val\
    \ maxDiff = maxScore - minScore\n        val minDiff = minScore - maxScore\n \
    \       val maxGuessesCount = guesses.size - 1\n        val minGuessesCount =\
    \ guesses.size - 1\n        val maxScoresCount = scores.size - 1\n        val\
    \ minScoresCount = scores.size - 1\n        val maxDiffCount = maxDiff - 1\n \
    \       val minDiffCount = minDiff - 1\n        val maxGuessesCountCount = maxGuessesCount\
    \ - 1\n        val minGuessesCountCount = minGuessesCount - 1\n        val maxScoresCountCount\
    \ = maxScoresCount - 1\n        val minScoresCountCount = minScoresCount - 1\n\
    \        val maxDiffCountCount = maxDiffCount - 1\n        val minDiffCountCount\
    \ = minDiffCount - 1\n        val maxGuessesCountCountCount = maxGuessesCountCount\
    \ - 1\n        val minGuessesCountCountCount = minGuessesCountCount - 1\n    \
    \    val maxScoresCountCountCount = maxScoresCountCountCount - 1\n        val\
    \ minScoresCountCountCount = minScoresCountCountCount - 1\n        val maxDiffCountCountCount\
    \ = maxDiffCountCountCount - 1\n        val minDiffCountCountCount = minDiffCountCountCount\
    \ - 1\n        val maxGuessesCountCountCountCount = maxGuessesCountCountCount\
    \ - 1\n        val minGuessesCountCountCountCount = minGuessesCountCountCount\
    \ - 1\n        val maxScoresCountCountCountCount = maxScoresCountCountCountCount\
    \ - 1\n        val minScoresCountCountCountCount = minScoresCountCountCountCount\
    \ - 1\n        val maxDiffCountCountCountCount = maxDiffCountCountCountCount -\
    \ 1\n        val minDiffCountCountCountCount = minDiffCountCountCountCount - 1\n\
    \        val maxGuessesCountCountCountCountCount = maxGuessesCountCountCountCount\
    \ - 1\n        val minGuessesCountCountCountCountCount = minGuessesCountCountCountCount\
    \ - 1\n        val maxScoresCountCountCountCountCount = maxScoresCountCountCountCountCount\
    \ - 1\n        val minScores\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxw5u0g9d.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxw5u0g9d.scala:17:22\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mguesses\e[0m = gues\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: gues\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxw5u0g9d.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxw5u0g9d.scala:42:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxScoresCountCountCount\e[0m = maxScoresCountCountCount - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                     Recursive \e[33mvalue\e[0m \e[35mmaxScoresCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxw5u0g9d.scala:43:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminScoresCountCountCount\e[0m = minScoresCountCountCount - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e\
    [0m                     Recursive \e[33mvalue\e[0m \e[35mminScoresCountCountCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxw5u0g9d.scala:44:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDiffCountCountCount\e[0m = maxDiffCountCountCoun"
  stdout: ''
  timestamp: 1660013589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val gameScoreDiffsSumAbs = gameScoreDiffsSum.abs\n        val gameScoreDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbs.diff\n        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsSum =\
    \ gameScoreDiffsSumAbsDiffsSum.sum\n        val gameScoreDiffsSumAbsDiffsSumAbs\
    \ = gameScoreDiffsSumAbsDiffsSum.abs\n        val gameScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = gameScoreDiffsSumAbsDiffsSumAbs.diff\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiffsSumAbsDiff.zipWithIndex.map { case (score, index)\
    \ => score }\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffsSumAbsDiffsSum.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiff.diff\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffsSum.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDiffsSum\
    \ = gameScoreDiffsSumAbsDiff\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugk5nqrv.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffs\e[0m = gameScoreDiff.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m         \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                     value zipWithIndex is not a member of Long\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpugk5nqrv.scala:27:43 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsSumAbsDiffsSum\e\
    [0m = gameScoreDiffsSumAbsDiffsSum.sum\n\e[31m\e[31m   |\e[0m                \
    \                           ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mgameScoreDiffsSumAbsDiffsSum\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpugk5nqrv.scala:31:54 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsSumAbsDiffsSumAbsDiffsSum\e\
    [0m = gameScoreDiffsSumAbsDiffsSumAbsDiffsSum.sum\n\e[31m\e[31m   |\e[0m     \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \  Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffsSumAbsDiffsSumAbsDiffsSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpugk5nqrv.scala:32:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs\e[0m = gameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs.abs\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m   Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpugk5nqrv.scala:33:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffsSumAbsDiffsSumAbsDiffsSumAbsDif"
  stdout: ''
  timestamp: 1660013591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = guess - score\n            if (difference < 0)\n                result.add(difference)\n\
    \            else\n                result.add(-difference)\n            i += 1\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdw4l9rsy.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdw4l9rsy.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap\
    \ = guessScores.toMap\n        val gameScoreList = gameScores.toList\n       \
    \ val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guessScores.toSet\n        val gameScoreMap = gameScores.toMap\n\
    \        val guessScoreMap = guessScores.toMap\n        val gameScoreList = gameScores.toList\n\
    \        val guessScoreList = guessScores.toList\n        val gameScoreSet = gameScores.toSet\n\
    \        val guessScoreSet = guess\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1gr48m3o.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1gr48m3o.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1gr48m3o.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1gr48m3o.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1gr48m3o.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._2 - x._1).toList\n        val guessScores = guess.zipWithIndex.map(x\
    \ => x._2 - x._1).toList\n        val gameScore = gameScores.sum\n        val\
    \ guessScore = guessScores.sum\n        val gameScoreDiff = gameScore - guessScore\n\
    \        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n        val guessScoreDiffAbs\
    \ = Math.abs(guessScore - gameScore)\n        val gameScoreDiffAbsDiff = gameScoreDiffAbs\
    \ - guessScoreDiffAbs\n        val gameScoreDiffAbsDiffList = gameScoreDiffAbsDiff.map(x\
    \ => Math.abs(x)).toList\n        val gameScoreDiffAbsDiffListSum = gameScoreDiffAbsDiffList.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSum)\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiff = gameScoreDiffAbsDiffListSumAbs\
    \ - guessScoreDiffAbsDiffListSumAbs\n        val gameScoreDiffAbsDiffListSumAbsDiffList\
    \ = gameScoreDiffAbsDiffListSumAbsDiff.map(x => Math.abs(x)).toList\n        val\
    \ gameScoreDiffAbsDiffListSumAbsDiffListSum = gameScoreDiffAbsDiffListSumAbsDiffListSum.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSumAbsDiffListSum)\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiff = gameScoreDiffAbsDiffListSumAbsDiffListSumAbs\
    \ - guessScoreDiffAbsDiffListSumAbsDiffListSumAbs\n        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffList\
    \ = gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiff.map(x => Math.abs(x)).toList\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum = gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum.sum\n\
    \        val gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSumAbs = Math.abs(gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum)\n\
    \        val gameScoreDiffAbs\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz9v6za6z.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz9v6za6z.scala:25:60\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiffAbsDiffList\e[0m = gameScoreDiffAbsDiff.map(\e[36mx\e[0m => Math.abs(x)).toList\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value map is not a\
    \ member of Long\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz9v6za6z.scala:30:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsDiffListSumAbsDiffListSum\e[0m = gameScoreDiffAbsDiffListSumAbsDiffListSum.sum\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m    Recursive \e[33mvalue\e[0m \e[35mgameScoreDiffAbsDiffListSumAbsDiffListSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz9v6za6z.scala:34:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum\e[0m = gameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum.sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgameScoreDiffAbsDiffListSumAbsDiffListSumAbsDiffListSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz9v6za6z.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guessesWithScores = guess.zipWithIndex.map\
    \ { case (score, index) => score - gameScore(index) }\n        val guessesWithScore\
    \ = guessesWithScores.sum\n        guessesWithScores.map { case (guess, score)\
    \ => if (guess == 0) 0 else abs(guess - score) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpg0krbf6e.scala:19:88 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => score - gameScore(index)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        \e[33mvalue\e[0m \e[35mgameScore\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpg0krbf6e.scala:20:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guessesWithScores.sum\n\e[31m\e[31m   |\e[0m                               \
    \                     ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e\
    [33mobject\e[0m \e[35mLongIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpg0krbf6e.scala:21:88 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        guessesWithScores.map { \e[33mcase\e[0m (guess, score) => \e[33mif\e\
    [0m (guess == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m abs(guess - score) }\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  i"
  stdout: ''
  timestamp: 1660013595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ gameScoreDiff = gameScores.zip(guessScores).map { case (gameScore, guessScore)\
    \ =>\n            if (gameScore == guessScore) 0\n            else Math.abs(gameScore\
    \ - guessScore)\n        }\n        gameScoreDiff.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map{\
    \ case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map{\
    \ case (diff, index) => diff }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffsSum = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs\n        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiff = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n\
    \        val guessScoreDiffsSumAbsDiff = guessScoreDiffsSumAbs - gameScoreDiffsSumAbs\n\
    \        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map{\
    \ case (diff, index) => diff }\n        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map{\
    \ case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs\
    \ - guessScoreDiffsSumAbsDiffsSumAbs\n        val guessScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbsDiffsSumAbs - gameScoreDiffsSumAbsDiffsSumAbs\n     \
    \   val gameScoreDiff\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo9j5m09n.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9j5m09n.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScoreCount - guessScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Long => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9j5m09n.scala:22:45\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreDiff\e[0m = guessScoreCount - gameScoreCount\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of (Long => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo9j5m09n.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ guessesDiff = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess\
    \ - game) }\n        guessesDiff.zip(guessesScores).map { case (guess, game) =>\
    \ math.abs(guess - game) }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiw01rm0u.scala:23)\n\tat Problem.main(tmpiw01rm0u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => score - gameScoreSum }\n        gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgti3lbuq.scala:23)\n\tat Problem.main(tmpgti3lbuq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        val gameScores = gameScores.zipWithIndex.map { case (score,\
    \ index) => if (score < 0) -score else score }\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score < 0) -score else score }\n        val gameScores\
    \ = gameScores.zipWithIndex.map { case (score, index) => if (score < 0) -score\
    \ else score }\n        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp90z8pya2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp90z8pya2.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp90z8pya2.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score < \e[31m0\e[0m) -score\
    \ \e[33melse\e[0m score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp90z8pya2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, in"
  stdout: ''
  timestamp: 1660013596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val result = guess.zipWithIndex.map { case (score, index)\
    \ =>\n            val gameScore = gameScores(score)\n            val guessScore\
    \ = guessScores(score)\n            if (gameScore == guessScore) {\n         \
    \       0\n            } else {\n                Math.abs(guessScore - gameScore)\n\
    \            }\n        }.toList\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkvq9_4jx.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val guesses_count = guesses.length\n        val scores_count = scores.length\n\
    \        val guesses_range = guesses.toRange\n        val scores_range = scores.toRange\n\
    \        val guesses_count = guesses_range.length\n        val scores_count =\
    \ scores_range.length\n        val guesses_range = guesses.toRange\n        val\
    \ scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range.length\n\
    \        val scores_count = scores_range.length\n        val guesses_range = guesses.toRange\n\
    \        val scores_range = scores.toRange\n        val guesses_count = guesses_range\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwsrlq7k_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguesses_count\e[0m = guesses_range.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguesses_count is already defined as \e[33mvalue\e[0m \e[35mguesses_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwsrlq7k_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mscores_count\e[0m = scores_range.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mscores_count is already defined as \e[33mvalue\e[0m \e[35mscores_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwsrlq7k_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguesses_range\e[0m = guesses.toRange\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguesses_range is already defined as \e[33mvalue\e[0m \e[35mguesses_range\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwsrlq7k_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mscores_range\e[0m = scores.toRange\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mscores_range is already defined as \e[33mvalue\e[0m \e[35mscores_range\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwsrlq7k_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguesses_count\e[0m = guesses_range.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e"
  stdout: ''
  timestamp: 1660013597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toMap\n        val gameScore = gameScores.values.toList\n        val\
    \ guessScore = guessScores.values.toList\n        val gameScores = gameScores.map\
    \ { case (index, score) => (index, score - guessScore(index)) }\n        val gameScore\
    \ = gameScore.max\n        val gameScores = gameScores.map { case (index, score)\
    \ => (index, score) }\n        gameScores.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf2qtup83.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (index, score) => (index, score - guessScore(index)) }\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf2qtup83.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScore\e[0m = gameScore.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScore\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScore\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf2qtup83.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScores\e[0m = gameScores.map { \e[33mcase\e[0m (index, score) => (index,\
    \ score) }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpf2qtup83.scala:24:19 --------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        gameScores.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0m\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m,\e[0m\e[1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameSet = game.distinct\n\
    \        val guessSet = guess.distinct\n        val gameSetSize = gameSet.size\n\
    \        val guessSetSize = guessSet.size\n        val result = new mutable.ArrayList[Long](guessSetSize)\n\
    \        val gameSetIterator = gameSet.iterator\n        val guessSetIterator\
    \ = guessSet.iterator\n        var gameSetIndex = 0\n        var guessSetIndex\
    \ = 0\n        while(gameSetIndex < gameSetSize && guessSetIndex < guessSetSize)\
    \ {\n            val gameSetValue = gameSetIterator.next()\n            val guessSetValue\
    \ = guessSetIterator.next()\n            val gameSetDifference = gameSetValue\
    \ - guessSetValue\n            val guessSetDifference = guessSetValue - gameSetValue\n\
    \            if(gameSetDifference < 0 && guessSetDifference < 0) {\n         \
    \       result.add(gameSetValue)\n                gameSetIndex += 1\n        \
    \    } else if(gameSetDifference > 0 && guessSetDifference > 0) {\n          \
    \      result.add(guessSetValue)\n                guessSetIndex += 1\n       \
    \     } else {\n                result.add(gameSetValue)\n                result.add(guessSetValue)\n\
    \                gameSetIndex += 1\n                guessSetIndex += 1\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bedqq0p.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guessSetSize)\n\e[31m\e[31m   |\e[0m  \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map{ case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreKeys = gameScoreMap.keySet\n        val guessScoreKeys = guessScoreMap.keySet\n\
    \        val gameScoreValues = gameScoreMap.values.toList\n        val guessScoreValues\
    \ = guessScoreMap.values.toList\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessScoreKeySet = guessScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessScoreValueSet = guessScoreValues.toSet\n\
    \        val gameScoreKeySetSet = gameScoreKeySet.toSet\n        val guessScoreKeySetSet\
    \ = guessScoreKeySet.toSet\n        val gameScoreValueSetSet = gameScoreValueSet.toSet\n\
    \        val guessScoreValueSetSet = guessScoreValueSet.toSet\n        val gameScoreKeySetSetSet\
    \ = gameScoreKeySetSet.toSet\n        val guessScoreKeySetSetSet = guessScoreKeySetSet.toSet\n\
    \        val gameScoreValueSetSetSet = gameScoreValueSetSet.toSet\n        val\
    \ guessScoreValueSetSetSet = guessScoreValueSetSet.toSet\n        val gameScoreKeySetSetSetSet\
    \ = gameScoreKeySetSetSet.toSet\n        val guessScoreKeySetSetSetSet = guessScoreKeySetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSet = gameScoreValueSetSetSet.toSet\n    \
    \    val guessScoreValueSetSetSetSet = guessScoreValueSetSetSet.toSet\n      \
    \  val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n        val\
    \ guessScoreKeySetSetSetSetSet = guessScoreKeySetSetSetSet.toSet\n        val\
    \ gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n        val\
    \ guessScoreValueSetSetSetSetSet = guessScoreValueSetSetSetSet.toSet\n       \
    \ val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSetSetSet.toSet\n   \
    \     val guessScoreKeySetSetSetSetSetSet = guessScoreKeySetSetSetSetSet.toSet\n\
    \        val gameScoreValueSetSetSetSet\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6id02qdo.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp6id02qdo.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                               Cannot prove that Long <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                       where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                                 V\
    \ is a type variable\n\e[31m   |\e[0m                                       .\n\
    \e[31m\e[31m-- Error: /tmp/tmp6id02qdo.scala:20:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                       Cannot prove that Long <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \              V is a type variable\n\e[31m   |\e[0m                         \
    \              .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6id02qdo.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScores = gameScores.toList\n        val gameScores = gameScores.sortWith(_\
    \ < _)\n        val gameScores = gameScores.reverse\n        val gameScores =\
    \ gameScores.take(gameScores.size)\n        val gameScores = gameScores.reverse\n\
    \        val gameScores = gameScores.take(gameScores.size)\n        val gameScores\
    \ = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        val gameScores = gameScores.take(gameScores.size)\n\
    \        val gameScores = gameScores.reverse\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpawuppawm.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawuppawm.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawuppawm.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawuppawm.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.take(gameScores.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpawuppawm.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e"
  stdout: ''
  timestamp: 1660013597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesCorrect\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => if (guess == game)\
    \ 0 else Math.abs(guess - game) }\n        guessesCorrect.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guessesScores.map { case (score,\
    \ index) => score -> gameScores(index) }.toMap\n        val guessesWithIndexes\
    \ = guessesWithScores.map { case (score, index) => index -> score }.toMap\n  \
    \      val guessesWithIndexesSorted = guessesWithIndexes.sortBy(_._1)\n      \
    \  val guessesWithIndexesSortedReversed = guessesWithIndexesSorted.reverse\n \
    \       val guessesWithIndexesSortedReversedSorted = guessesWithIndexesSortedReversed.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndex = guessesWithIndexesSortedReversedSorted.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndex.sortBy(_._1)\n     \
    \   val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex =\
    \ guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex.map { case\
    \ (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map\
    \ { case (score, index) => (score, index) }\n        val guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcc9oumxp.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcc9oumxp.scala:21:58\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesSorted\e[0m = guessesWithIndexes.sortBy(_._1)\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value sortBy is not a member of\
    \ Map[Int, Long]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcc9oumxp.scala:26:83\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex\e\
    [0m = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => (score, index) }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcc9oumxp.scala:27:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted\e\
    [0m = guessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesSortedReversedSortedSortedWithIndexSortedWithIndexSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcc9oumxp.scala:28:98\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedReversedSortedSortedW"
  stdout: ''
  timestamp: 1660013600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n\
    \        val scores = game.toList\n        val guessesCount = guesses.size\n \
    \       val scoresCount = scores.size\n        val guessesPerScore = guessesCount\
    \ / scoresCount\n        val guessesPerScoreAbs = guessesPerScore.abs\n      \
    \  val guessesPerScoreAbsDiff = guessesPerScoreAbs.diff\n        val guessesPerScoreAbsDiffDiff\
    \ = guessesPerScoreAbsDiff.diff\n        val guessesPerScoreAbsDiffDiffDiff =\
    \ guessesPerScoreAbsDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff.diff\n        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n        val\
    \ guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        val guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6afktehr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff\e\
    [0m = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff is already\
    \ defined as \e[33mvalue\e[0m \e[35mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6afktehr.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\e\
    [0m = guessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff.diff\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ is already defined as \e[33mvalue\e[0m \e[35mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6afktehr.scala:23:56 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesPerScoreAbsDiff\e[0m = guessesPerScoreAbs.diff\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value diff is not a member\
    \ of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6afktehr.scala:33:73\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesPerScoreAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff\e[0m = guessesPerScoreAbsDiffDiffDiffDiffDif"
  stdout: ''
  timestamp: 1660013599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case (score, index) => score - gameScore(index) }\n        gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => abs(score) }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpic6gu1ys.scala:19:74 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => score - gameScore(index) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpic6gu1ys.scala:19:76 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => score - gameScore(index) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \e[33mvalue\e\
    [0m \e[35mgameScore\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => if (score > 0) score else -score }\n        gameScoreDiff.zip(gameScoreSum).map\
    \ { case (diff, sum) => if (sum == 0) 0 else diff }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9nsmr6y.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        gameScoreDiff.zip(gameScoreSum).map\
    \ { \e[33mcase\e[0m (diff, sum) => \e[33mif\e[0m (sum == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m diff }\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (gameScoreSum : Long)\n\
    \e[31m   |\e[0m                          Required: IterableOnce[Any]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(x => x).map { case (score, index) => index\
    \ -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(x => x).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreList =\
    \ gameScores.map { case (score, index) => index }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index }.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreMap = guessScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val gameScoreList = gameScores.map { case\
    \ (score, index) => index }.toList\n        val guessScoreList = guessScores.map\
    \ { case (score, index) => index }.toList\n        val gameScoreMap = gameScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val gameScoreList = gameScores.map { case (score, index) => index }.toList\n\
    \        val guessScoreList = guessScores.map { case (score, index) => index }.toList\n\
    \        val gameScoreMap = gameScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreMap = guessScores.groupBy(x\
    \ => x).map { case (score, index) => index -> score }.toMap\n        val gameScoreList\
    \ = gameScores.map { case (score, index) => index }.toList\n        val guessScoreList\
    \ = guessScores.map { case (score, index) => index }.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(x => x).map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreMap = guessScores.groupBy(x => x).map { case (score, index)\
    \ => index -> score }.toMap\n        val gameScoreList = gameScores.map { case\
    \ (score, index) => index }.toList\n        val guessScoreList = guessScores.map\
    \ { case (score, index) => index }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7xci8wnp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(\e\
    [36mx\e[0m => x).map { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7xci8wnp.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.groupBy(\e\
    [36mx\e[0m => x).map { \e[33mcase\e[0m (score, index) => index -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7xci8wnp.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => index }.toList\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7xci8wnp.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.map\
    \ { \e[33mcase\e[0m (score, index) => index }.toList\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660013601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guesses = gameScores.zipWithIndex.map\
    \ { case (score, index) => index }\n        val guessesWithScore = guesses.zipWithIndex.map\
    \ { case (index, score) => score - gameScore(index) }\n        guessesWithScore.zipWithIndex.map\
    \ { case (guess, index) => guess + gameScore(index) }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnqodfkcp.scala:20:89 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScore\e[0m =\
    \ guesses.zipWithIndex.map { \e[33mcase\e[0m (index, score) => score - gameScore(index)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                         \e[33mvalue\e[0m \e[35mgameScore\e[0m does not take\
    \ parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnqodfkcp.scala:21:73\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        guessesWithScore.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, index) => guess + gameScore(index) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpnqodfkcp.scala:21:75\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        guessesWithScore.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, index) => guess + gameScore(index) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \e[33mvalue\e\
    [0m \e[35mgameScore\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (score, index) }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => (score,\
    \ index) }.toMap\n        val gameScore = gameScores.map { case (score, index)\
    \ => (score, gameScores.get(index).getOrElse(0l)) }.toMap\n        val guessScore\
    \ = guessScores.map { case (score, index) => (score, guessScores.get(index).getOrElse(0l))\
    \ }.toMap\n        val gameScores = gameScores.map { case (score, index) => (score,\
    \ gameScores.get(index).getOrElse(0l) - guessScore.get(index).getOrElse(0l)) }.toMap\n\
    \        val guessScores = guessScores.map { case (score, index) => (score, guessScores.get(index).getOrElse(0l)\
    \ - gameScore.get(index).getOrElse(0l)) }.toMap\n        gameScores.map { case\
    \ (score, index) => (score, gameScores.get(index).getOrElse(0l)) }.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_w_xzk8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.map\
    \ { \e[33mcase\e[0m (score, index) => (score, gameScores.get(index).getOrElse(\e\
    [31m0l\e[0m) - guessScore.get(index).getOrElse(\e[31m0l\e[0m)) }.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe_w_xzk8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.map {\
    \ \e[33mcase\e[0m (score, index) => (score, guessScores.get(index).getOrElse(\e\
    [31m0l\e[0m) - gameScore.get(index).getOrElse(\e[31m0l\e[0m)) }.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpe_w_xzk8.scala:23:95 --------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        gameScores.map { \e[33mcase\e[0m (score, index) => (score,\
    \ gameScores.get(index).getOrElse(\e[31m0l\e[0m)) }.toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mAnyVal\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m\
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(x => Math.abs(x - guess(x)))\n        val guessesWithScores = guess.zip(gameScores)\n\
    \        val guessesWithScoreAndScore = guessesWithScores.map(x => if (x._2 ==\
    \ 0) 0 else x._1 - x._2)\n        guessesWithScoreAndScore\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyeb9a3x.scala:17:58\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e\
    [0m = game.map(\e[36mx\e[0m => Math.abs(x - guess(x)))\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (x : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => guess -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexes = guess.zip(game).map { case (guess, score,\
    \ index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes2\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes3 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes4\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes5 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes6\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes7 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes8\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes9 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes10\
    \ = guess.zip(game).map { case (guess, score, index) => guess -> score -> index\
    \ }.toMap\n        val guessesWithScoreAndIndexes11 = guess.zip(game).map { case\
    \ (guess, score, index) => guess -> score -> index }.toMap\n        val guessesWithScoreAndIndexes12\
    \ = guess.zip(game).map \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9p66qbup.scala:21:102 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndex\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => guess -> score ->\
    \ index }.toMap\n\e[31m\e[31m   |\e[0m                                       \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                        Not found:\
    \ index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9p66qbup.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{ case (score, index) => score - guess(index) }\n     \
    \   val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map{\
    \ case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n   \
    \     gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpew6ggotw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map{\
    \ \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessScoreMap =\
    \ guessScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessScoreList = guessScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessScoreSet = guessScoreList.toSet\n  \
    \      val gameScoreList = gameScoreList.filter(_ != 0l)\n        val guessScoreList\
    \ = guessScoreList.filter(_ != 0l)\n        val gameScoreSet = gameScoreSet.toList\n\
    \        val guessScoreSet = guessScoreSet.toList\n        val gameScoreSet =\
    \ gameScoreSet.filter(_ != 0l)\n        val guessScoreSet = guessScoreSet.filter(_\
    \ != 0l)\n        val gameScoreSet = gameScoreSet.map { case score => score ->\
    \ gameScoreList.indexOf(score) }.toMap\n        val guessScoreSet = guessScoreSet.map\
    \ { case score => score -> guessScoreList.indexOf(score) }.toMap\n        val\
    \ gameScoreSet = gameScoreSet.filter(_._2 != 0l)\n        val guessScoreSet =\
    \ guessScoreSet.filter(_._2 != 0l)\n        val gameScoreSet = gameScoreSet.map\
    \ { case (score, index) => score -> gameScoreList.indexOf(score) }.toMap\n   \
    \     val guessScoreSet = guessScoreSet.map { case (score, index) => score ->\
    \ guessScoreList.indexOf(score) }.toMap\n        val gameScoreSet = gameScoreSet.filter(_._2\
    \ != 0l)\n        val guessScoreSet = guessScoreSet.filter(_._2 != 0l)\n     \
    \   val gameScoreSet = gameScoreSet.map { case (score, index) => score -> gameScoreList.indexOf(score)\
    \ }.toMap\n        val guessScoreSet = guessScoreSet.map { case (score, index)\
    \ => score -> guessScoreList.indexOf(score) }.toMap\n        val gameScoreSet\
    \ = gameScoreSet.filter(_._2 != 0l)\n        val guessScoreSet = guessScoreSet.filter(_._2\
    \ != 0l)\n        val gameScoreSet = gameScoreSet.map { case (score, index) =>\
    \ score -> gameScoreList.indexOf(score) }.toMap\n        val guessScoreSet = guessScoreSet.map\
    \ { case (score, index) => score -> guess\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3waoq440.scala:54:0 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3waoq440.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreList\e[0m = gameScoreList.filter(_ != \e[31m0l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3waoq440.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScoreList.filter(_\
    \ != \e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3waoq440.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3waoq440.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreSet\e[0m = guessScoreSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definiti"
  stdout: ''
  timestamp: 1660013608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessesScoreMap = guessesScores.toMap\n    \
    \    val gameScoreKeys = gameScoreMap.keys\n        val guessesScoreKeys = guessesScoreMap.keys\n\
    \        val gameScoreValues = gameScoreMap.values\n        val guessesScoreValues\
    \ = guessesScoreMap.values\n        val gameScoreKeySet = gameScoreKeys.toSet\n\
    \        val guessesScoreKeySet = guessesScoreKeys.toSet\n        val gameScoreValueSet\
    \ = gameScoreValues.toSet\n        val guessesScoreValueSet = guessesScoreValues.toSet\n\
    \        val gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScoreKeySetSize = gameScoreKeySet.size\n        val guessesScoreKeySetSize\
    \ = guessesScoreKeySet.size\n        val gameScoreValueSetSize = gameScoreValueSet.size\n\
    \        val guessesScoreValueSetSize = guessesScoreValueSet.size\n        val\
    \ gameScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1uan416l.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1uan416l.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeySetSize\e[0m = gameScoreKeySet.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeySetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeySetSize\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1uan416l.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeySetSize\e[0m = guessesScoreKeySet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeySetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeySetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1uan416l.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValueSetSize\e\
    [0m = gameScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreValueSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1uan416l.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreValueSetSize\e\
    [0m = guessesScoreValueSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreValueSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreValueSetSize\e[0m"
  stdout: ''
  timestamp: 1660013609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => score - gameScoreSum }\n        gameScoreDiff.map { diff =>\
    \ if (diff < 0) diff else diff }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfbvhekc9.scala:23)\n\tat Problem.main(tmpfbvhekc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffsSum = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs\n        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiff = gameScoreDiffsSumAbs - guessScoreDiffsSumAbs\n\
    \        val guessScoreDiffsSumAbsDiff = guessScoreDiffsSumAbs - gameScoreDiffsSumAbs\n\
    \        val gameScoreDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs\
    \ - guessScoreDiffsSumAbsDiffsSumAbs\n        val guessScoreDiffsSumAbsDiffsSumAbsDiff\
    \ = guessScoreDiffsSumAbsDiffsSumAbs - gameScoreDiffsSumAbsDiffsSumAbs\n     \
    \   val gameScoreDiff\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2gcl9_b4.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2gcl9_b4.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScoreCount - guessScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Long => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2gcl9_b4.scala:22:45\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreDiff\e[0m = guessScoreCount - gameScoreCount\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of (Long => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2gcl9_b4.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013609
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.foldLeft(0L) { (sum, score) => sum + score }\n        val guessScore\
    \ = guessScores.foldLeft(0L) { (sum, score) => sum + score }\n        val difference\
    \ = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) => (guessScore - gameScore) }\n        differences.map\
    \ { difference => if (difference < 0) difference else difference }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebajxpi3.scala:26)\n\tat Problem.main(tmpebajxpi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ != guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ != gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ < guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ < gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ > gameScoreList.size)\n\
    \        val gameScoreList = gameScoreList.filter(_ == guessesScoreList.size)\n\
    \        val guessesScoreList = guessesScoreList.filter(_ == gameScoreList.size)\n\
    \        val game\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3aqv8njp.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3aqv8njp.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreList\e[0m = gameScoreList.filter(_ > guessesScoreList.size)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3aqv8njp.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.filter(_\
    \ > gameScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3aqv8njp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.filter(_\
    \ < guessesScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3aqv8njp.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.filter(_\
    \ < gameScoreList.size)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val guessesDiff\
    \ = guessesScores.zip(gameScores).map { case (guess, game) => math.abs(guess -\
    \ game) }\n        guessesDiff.zipWithIndex.map { case (diff, index) => diff }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map(x\
    \ => if (x == 0) 0 else x).sum\n        val gameScoreDiffAbs = gameScoreDiff -\
    \ gameScoreSum\n        gameScoreDiffAbs.toList.map(x => if (x == 0) 0 else x).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy_wjg8a1.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        gameScoreDiffAbs.toList.map(\e[36mx\e[0m => \e\
    [33mif\e[0m (x == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList\
    \ is not a member of Long - did you mean gameScoreDiffAbs.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660013607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessesScores = guess.map(_.toLong)\n      \
    \  val guessesDiff = guessesScores.zip(gameScores).map { case (guess, score) =>\
    \ (guess - score) }\n        guessesDiff.map(_.abs).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfwzk5dpd.scala:23)\n\tat Problem.main(tmpfwzk5dpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val guessesWithScores = guessesScores.map { case (score, index) =>\
    \ score -> gameScores(index) }\n        val guessesWithIndexes = guessesWithScores.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSorted\
    \ = guessesWithIndexes.sortBy(_._1).reverse\n        val guessesWithIndexesSortedWithScores\
    \ = guessesWithIndexesSorted.map { case (score, index) => index -> score }\n \
    \       val guessesWithIndexesSortedWithScoresSorted = guessesWithIndexesSortedWithScores.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndex = guessesWithIndexesSortedWithScoresSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndex.sortBy(_._1).reverse\n \
    \       val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore =\
    \ guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore.map { case\
    \ (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSorted\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSorted.sortBy(_._1).reverse\n\
    \        val guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSortedWithScore\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndexSortedWithScoreSorted.map\
    \ { case (score, index) => index -> score }\n        val guessesWithIndexesSortedWithScoresSortedWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2q60puxd.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2q60puxd.scala:26:79\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore\e[0m\
    \ = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore.map { \e\
    [33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m      \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScore\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2q60puxd.scala:27:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted\e\
    [0m = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2q60puxd.scala:28:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex\e\
    [0m = guessesWithIndexesSortedWithScoresSortedWithIndexSortedWithScoreSortedWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => index -> score }\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  guessesWithIndexesSortedWithScoresSortedWithI"
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessesScores = guess.map(_.toLong)\n      \
    \  val guessesDiff = guessesScores.zip(gameScores).map { case (guess, score) =>\
    \ (guess - score) }\n        guessesDiff.map(_.abs).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfwzk5dpd.scala:23)\n\tat Problem.main(tmpfwzk5dpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guessesCorrect = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       guessesCorrect.zipWithIndex.map { case (score, index) => guess(index)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ron28e5.scala:23)\n\tat Problem.main(tmp_ron28e5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val diffs = scores.map(score => Math.abs(score\
    \ - guess(guesses.indexOf(score))))\n        diffs.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa7cgenx6.scala:19:71 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e[0m = scores.map(\e\
    [36mscore\e[0m => Math.abs(score - guess(guesses.indexOf(score))))\n\e[31m\e[31m\
    \   |\e[0m                                                               ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value indexOf is not a member\
    \ of Set[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660013609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => (index, score)\
    \ }\n        val gameScoreSet = gameScores.toSet\n        val guessesScoreSet\
    \ = guessesScores.toSet\n        val gameScoreList = gameScores.toList\n     \
    \   val guessesScoreList = guessesScores.toList\n        val gameScoreSetSize\
    \ = gameScoreSet.size\n        val guessesScoreSetSize = guessesScoreSet.size\n\
    \        val gameScoreListSize = gameScoreList.size\n        val guessesScoreListSize\
    \ = guessesScoreList.size\n        val gameScoreSetSize = gameScoreSetSize\n \
    \       val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = gameScoreListSize\n \
    \       val guessesScoreListSize = guessesScoreListSize\n        val gameScoreSetSize\
    \ = gameScoreSetSize\n        val guessesScoreSetSize = guessesScoreSetSize\n\
    \        val gameScoreListSize = gameScoreListSize\n        val guessesScoreListSize\
    \ = guessesScoreListSize\n        val gameScoreSetSize = gameScoreSetSize\n  \
    \      val guessesScoreSetSize = guessesScoreSetSize\n        val gameScoreListSize\
    \ = gameScoreListSize\n        val guessesScoreListSize = guessesScoreListSize\n\
    \        val gameScoreSetSize = gameScoreSetSize\n        val guessesScoreSetSize\
    \ = guessesScoreSetSize\n        val gameScoreListSize = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4lu1rw2a.scala:57:31 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lu1rw2a.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreSetSize\e[0m = gameScoreSetSize\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreSetSize\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4lu1rw2a.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSetSize\e[0m = guessesScoreSetSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSetSize is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4lu1rw2a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreListSize\e[0m = gameScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgameScoreListSize is already defined as \e[33mvalue\e[0m \e[35mgameScoreListSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4lu1rw2a.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreListSize\e[0m = guessesScoreListSize\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScoreSum = gameScores.sum\n        val gameScoreDiff = gameScores.map\
    \ { case score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbs\
    \ = gameScoreDiff.abs\n        val gameScoreDiffAbsSum = gameScoreDiffAbs.sum\n\
    \        val gameScoreDiffAbsDiff = gameScoreDiffAbs.map { case score => if (score\
    \ < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbs = gameScoreDiffAbsDiff\
    \ - gameScoreSum\n        val gameScoreDiffAbsDiffAbsSum = gameScoreDiffAbsDiffAbs.sum\n\
    \        val gameScoreDiffAbsDiffAbsDiff = gameScoreDiffAbsDiffAbs.map { case\
    \ score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbs\
    \ = gameScoreDiffAbsDiffAbsDiff - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsSum\
    \ = gameScoreDiffAbsDiffAbsDiffAbs.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiff\
    \ = gameScoreDiffAbsDiffAbsDiffAbs.map { case score => if (score < 0) -score else\
    \ score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbs = gameScoreDiffAbsDiffAbsDiffAbsDiff\
    \ - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsSum = gameScoreDiffAbsDiffAbsDiffAbsDiffAbs.sum\n\
    \        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiff = gameScoreDiffAbsDiffAbsDiffAbsDiffAbs.map\
    \ { case score => if (score < 0) -score else score }.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiff - gameScoreSum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsSum\
    \ = gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs.sum\n        val gameScoreDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = gameScoreDiffAbsDiff\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjzf_adn.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsSum\e[0m\
    \ = gameScoreDiffAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \    value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxjzf_adn.scala:22:52 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsDiff\e[0m = gameScoreDiffAbs.map\
    \ { \e[33mcase\e[0m score => \e[33mif\e[0m (score < \e[31m0\e[0m) -score \e[33melse\e\
    [0m score }.sum\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value map is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxjzf_adn.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n        val gameScoreList\
    \ = gameScoreMap.keys.toList\n        val guessScoreList = guessScoreMap.keys.toList\n\
    \        val gameScores = gameScoreList.map{case score => gameScoreMap.get(score)}\n\
    \        val guessScores = guessScoreList.map{case score => guessScoreMap.get(score)}\n\
    \        val gameScoreDiffs = gameScores.map{case score => Math.abs(score - guessScores(0))}\n\
    \        val guessScoreDiffs = guessScores.map{case score => Math.abs(score -\
    \ gameScores(0))}\n        gameScoreDiffs.zip(guessScoreDiffs)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2kwko_he.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreList.map{\e\
    [33mcase\e[0m score => gameScoreMap.get(score)}\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2kwko_he.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreList.map{\e\
    [33mcase\e[0m score => guessScoreMap.get(score)}\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2kwko_he.scala:19:48 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kwko_he.scala:19:70\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \  value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2kwko_he.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._1).mapValues(_.map(_._2)).toMap\n\
    \e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660013612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesCount\
    \ = guess.size\n        val gamesCount = game.size\n        val guessesCount =\
    \ guess.size\n        val gamesCount = game.size\n        val guessesCount = guess.size\n\
    \        val gamesCount = game.size\n        val guessesCount = guess.size\n \
    \       val gamesCount = game.size\n        val guessesCount = guess.size\n  \
    \      val gamesCount = game.size\n        val guessesCount = guess.size\n   \
    \     val gamesCount = game.size\n        val guessesCount = guess.size\n    \
    \    val gamesCount = game.size\n        val guessesCount = guess.size\n     \
    \   val gamesCount = game.size\n        val guessesCount = guess.size\n      \
    \  val gamesCount = game.size\n        val guessesCount = guess.size\n       \
    \ val gamesCount = game.size\n        val guessesCount = guess.size\n        val\
    \ gamesCount = game.size\n        val guessesCount = guess.size\n        val gamesCount\
    \ = game.size\n        val guessesCount = guess.size\n        val gamesCount =\
    \ game.size\n        val guessesCount = guess.size\n        val gamesCount = game.size\n\
    \        val guessesCount = guess.size\n        val gamesCount = game.size\n \
    \       val guessesCount = guess.size\n        val gamesCount = game.size\n  \
    \      val guessesCount = guess.size\n        val gamesCount = game.size\n   \
    \     val guessesCount = guess.size\n        val gamesCount = game.size\n    \
    \    val guessesCount = guess.size\n        val gamesCount = game.size\n     \
    \   val guessesCount = guess.size\n        val gamesCount = game.size\n      \
    \  val guessesCount = guess.size\n        val gamesCount = game.size\n       \
    \ val guessesCount = guess.size\n        val gamesCount = game.size\n        val\
    \ guessesCount = guess.size\n        val gamesCount = game.size\n        val guessesCount\
    \ = guess.size\n        val gamesCount = game.size\n        val guessesCount =\
    \ guess.size\n        val gamesCount = game.size\n        val guessesCount = guess.size\n\
    \        val gamesCount = game.size\n        val guessesCount = guess.size\n \
    \       val gamesCount = game.size\n        val guessesCount = guess.size\n  \
    \      val gamesCount = game.size\n        val guessesCount = guess.size\n   \
    \     val gamesCount = game.size\n        val guessesCount = guess.size\n    \
    \    val gamesCount = game.size\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8g70otf2.scala:77:11 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8g70otf2.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mguessesCount\e[0m = guess.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mguessesCount is already defined as \e[33mvalue\e[0m \e[35mguessesCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8g70otf2.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mgamesCount\e[0m = game.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgamesCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mgamesCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8g70otf2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesCount\e[0m = guess.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesCount is already defined as \e[33mvalue\e[0m \e[35mguessesCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8g70otf2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mgamesCount\e[0m = game.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgamesCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mgamesCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8g70"
  stdout: ''
  timestamp: 1660013612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.map(_.toLong)\n        val guessScores = guess.map(_.toLong)\n        val\
    \ guessesWithScores = guessScores.zip(gameScores)\n        val guessesWithScores\
    \ = guessesWithScores.toList\n        val guessesWithScores = guessesWithScores.sortBy(_._1)\n\
    \        val guessesWithScores = guessesWithScores.reverse\n        val guessesWithScores\
    \ = guessesWithScores.map(x => x._2 - x._1)\n        val guessesWithScores = guessesWithScores.map(x\
    \ => if (x == 0) 0 else x)\n        guessesWithScores\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpburxg1oe.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpburxg1oe.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.sortBy(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpburxg1oe.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e\
    [35mguessesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpburxg1oe.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScores\e[0m =\
    \ guessesWithScores.map(\e[36mx\e[0m => x._2 - x._1)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessesWithScores is already defined as \e[33mvalue\e[0m \e[35mguessesWithScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpburxg1oe.scala:24:12 ----------------"
  stdout: ''
  timestamp: 1660013612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.HashSet[Long]()\n\
    \        val guessesWithScores = guess.zip(game)\n        guessesWithScores.foreach\
    \ { case (guess, score) =>\n            if (guesses.contains(guess)) {\n     \
    \           results.add(score)\n            }\n        }\n        results.toList.map(_.abs)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphjsz59xa.scala:19:26 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val guessesWithScore = guesses.map(x\
    \ => (x, scores(x)))\n        val guessesWithScoreSortedByScore = guessesWithScore.sortBy(_._2)\n\
    \        val guessesWithScoreSortedByScoreWithScore = guessesWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScore.sortBy(_._1)\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScore.map(x => (x._1, x._2))\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScore\
    \ = guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScore.map(x\
    \ => (x._1, x._2))\n        val guessesWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedByScoreWithScoreSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfaltqza2.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfaltqza2.scala:20:61\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreSortedByScore\e[0m = guessesWithScore.sortBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value sortBy is not a member of Set[(Long,\
    \ Boolean)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfaltqza2.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => (index, score) }.toList\n   \
    \     val guessesScores = guess.zipWithIndex.map { case (score, index) => (index,\
    \ score) }.toList\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keySet\n   \
    \     val guessesScoreKeys = guessesScoreMap.keySet\n        val gameScoreValues\
    \ = gameScoreMap.values.toList\n        val guessesScoreValues = guessesScoreMap.values.toList\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessesScoreKeySet\
    \ = guessesScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValues.toSet\n        val gameScoreKeySetSet\
    \ = gameScoreKeySet.toSet\n        val guessesScoreKeySetSet = guessesScoreKeySet.toSet\n\
    \        val gameScoreValueSetSet = gameScoreValueSet.toSet\n        val guessesScoreValueSetSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeySetSetSet = gameScoreKeySetSet.toSet\n\
    \        val guessesScoreKeySetSetSet = guessesScoreKeySetSet.toSet\n        val\
    \ gameScoreValueSetSetSet = gameScoreValueSetSet.toSet\n        val guessesScoreValueSetSetSet\
    \ = guessesScoreValueSetSet.toSet\n        val gameScoreKeySetSetSetSet = gameScoreKeySetSetSet.toSet\n\
    \        val guessesScoreKeySetSetSetSet = guessesScoreKeySetSetSet.toSet\n  \
    \      val gameScoreValueSetSetSetSet = gameScoreValueSetSetSet.toSet\n      \
    \  val guessesScoreValueSetSetSetSet = guessesScoreValueSetSetSet.toSet\n    \
    \    val gameScoreKeySetSetSetSetSet = gameScoreKeySetSetSetSet.toSet\n      \
    \  val guessesScoreKeySetSetSetSetSet = guessesScoreKeySetSetSetSet.toSet\n  \
    \      val gameScoreValueSetSetSetSetSet = gameScoreValueSetSetSetSet.toSet\n\
    \        val guessesScoreValueSetSetSetSetSet = guessesScoreValueSetSetSetSet.toSet\n\
    \        val gameScoreKeySetSetSetSetSetSet = gameScoreKeySetSetSet\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm2b1xe0j.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guessesWithScore\
    \ = game.zip(guess)\n        val guessesWithScoreSortedByScore = guessesWithScore.sortBy(_._1)\n\
    \        val guessesWithScoreSortedByScoreReversed = guessesWithScoreSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScore = guessesWithScoreSortedByScoreReversed.sortBy(_._2)\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversed = guessesWithScoreSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversed.sortBy(_._3)\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversed\
    \ = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \        val guessesWithScoreSortedByScoreReversedSortedByScoreReverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeufofdeo.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeufofdeo.scala:22:154\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore\e\
    [0m = guessesWithScoreSortedByScoreReversedSortedByScoreReversed.sortBy(_._3)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                    ^^^^\e[0m\n\e[31m   |\e[0m         value _3 is not a member\
    \ of (Long, Long) - did you mean _$3._1?\n\e[31m\e[31m-- Error: /tmp/tmpeufofdeo.scala:22:157\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mguessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScore\e\
    [0m = guessesWithScoreSortedByScoreReversedSortedByScoreReversed.sortBy(_._3)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpeufofdeo.scala:24:107 --------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore\e\
    [0m = guessesWithScoreSortedByScoreReversedSortedByScoreReversedSortedByScoreReversedSortedByScore.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithSco"
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessScores = guess.zipWithIndex.map { case (score, index) => score ->\
    \ index }.toMap\n        val guessesWithScores = guess.zip(game).map { case (guess,\
    \ score) => (guess, score) }.toMap\n        val guessesWithScoreAndIndex = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) -> index }.toMap\n        val guessesWithScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndex = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) -> index -> score -> index }.toMap\n\
    \        val guessesWithScoreAndIndexAndScoreAndIndexAndScore = guess.zip(game).map\
    \ { case (guess, score) => (guess, score) -> index -> score -> index -> score\
    \ }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index -> score }.toMap\n        val guessesWithScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zip(game).map { case (guess, score) => (guess, score) -> index -> score\
    \ -> index -> score -> index -> score -> index -> score -> index }.toMap\n   \
    \     val guessesWithScoreAnd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyypeprc9.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyypeprc9.scala:20:102\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithScoreAndIndex\e[0m = guess.zip(game).map { \e[33mcase\e[0m (guess,\
    \ score) => (guess, score) -> index }.toMap\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \               ^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                      Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyypeprc9.scala:21:110 -----------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndScore\e\
    [0m = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => (guess, score) ->\
    \ index -> score }.toMap\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                             \
    \           Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyypeprc9.scala:22:118 -----------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mguessesWithScoreAndIndexAndScoreAndIndex\e[0m\
    \ = guess.zip(game).map { \e[33mcase\e[0m (guess, score) => (guess, score) ->\
    \ index -> score -> index }.toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                            Not found: index\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyypeprc9.scala:22:136 -----------------------\e\
    [0m\e[0m\n\e[31m2"
  stdout: ''
  timestamp: 1660013617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndScores = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc774epi_.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc774epi_.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index -> score -> index \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0mguessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  guessesWithIndexesWithScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScoreAndScores\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m30 |\e\
    [0m    }\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc774epi_.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpc774epi_.scala:22:108 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                        ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when comp"
  stdout: ''
  timestamp: 1660013561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val guessScoreMap\
    \ = guessScores.groupBy(_._2).mapValues(_.map(_._1)).toMap\n        val gameScoreList\
    \ = gameScoreMap.values.toList\n        val guessScoreList = guessScoreMap.values.toList\n\
    \        val gameScoreDiffs = gameScoreList.zip(guessScoreList).map{case (gameScore,\
    \ guessScore) => Math.abs(gameScore - guessScore)}.toList\n        val gameScoreDiffsMap\
    \ = gameScoreDiffs.groupBy(_._1).mapValues(_.map(_._2)).toMap\n        val gameScoreDiffsMap\
    \ = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap =\
    \ gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2\
    \ != 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 !=\
    \ 0).toMap\n        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n\
    \        val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n \
    \       val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n  \
    \      val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n   \
    \     val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n    \
    \    val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n     \
    \   val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n      \
    \  val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n       \
    \ val gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val\
    \ gameScoreDiffsMap = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap\
    \ = gameScoreDiffsMap.filter(_._2 != 0).toMap\n        val gameScoreDiffsMap =\
    \ gameScoreDiffsMap.filter(_._2 != 0).toMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4jc147wf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsMap\e[0m =\
    \ gameScoreDiffsMap.filter(_._2 != \e[31m0\e[0m).toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreDiffsMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffsMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4jc147wf.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsMap\e[0m = gameScoreDiffsMap.filter(_._2\
    \ != \e[31m0\e[0m).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffsMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffsMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4jc147wf.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsMap\e[0m =\
    \ gameScoreDiffsMap.filter(_._2 != \e[31m0\e[0m).toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreDiffsMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreDiffsMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4jc147wf.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffsMap\e[0m = gameScoreDiffsMap.filter(_._2\
    \ != \e[31m0\e[0m).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffsMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffsMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in"
  stdout: ''
  timestamp: 1660013619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSum = gameScoreDiffs.sum\n\
    \        val guessScoreDiffsSum = guessScoreDiffs.sum\n        val gameScoreDiffsSumAbs\
    \ = gameScoreDiffsSum.abs\n        val guessScoreDiffsSumAbs = guessScoreDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiff = gameScoreDiffsSumAbs.diff\n        val\
    \ guessScoreDiffsSumAbsDiff = guessScoreDiffsSumAbs.diff\n        val gameScoreDiffsSumAbsDiffs\
    \ = gameScoreDiffsSumAbsDiff.zipWithIndex.map { case (diff, index) => diff }\n\
    \        val guessScoreDiffsSumAbsDiffs = guessScoreDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff, index) => diff }\n        val gameScoreDiffsSumAbsDiffsSum = gameScoreDiffsSumAbsDiffs.sum\n\
    \        val guessScoreDiffsSumAbsDiffsSum = guessScoreDiffsSumAbsDiffs.sum\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbs = gameScoreDiffsSumAbsDiffsSum.abs\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbs = guessScoreDiffsSumAbsDiffsSum.abs\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiff = gameScoreDiffsSumAbsDiffsSumAbs.diff\n\
    \        val guessScoreDiffsSumAbsDiffsSumAbsDiff = guessScoreDiffsSumAbsDiffsSumAbs.diff\n\
    \        val gameScoreDiffsSumAbsDiffsSumAbsDiffs = gameScoreDiffsSumAbsDiffsSumAbsDiff.zipWithIndex.map\
    \ { case (diff\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9spl1zti.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9spl1zti.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp9spl1zti.scala:21:43 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiff\e[0m = gameScoreCount\
    \ - guessScoreCount\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9spl1zti.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiff\e[0m = guessScoreCount\
    \ - gameScoreCount\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Long => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9spl1zti.scala:48:1 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling wit"
  stdout: ''
  timestamp: 1660013618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zipWithIndex.map { case\
    \ (score, index) => index -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (score, index) => index }.toMap\n        val guessesWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => score -> index }.toMap\n \
    \       val guessesWithIndexesAndScore = guess.zipWithIndex.map { case (score,\
    \ index) => index -> score }.toMap\n        val guessesWithIndexesAndScoreAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score }.toMap\n\
    \        val guessesWithIndexesAndScoreAndScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> score -> index }.toMap\n        val\
    \ guessesWithIndexesAndScoreAndScoreAndIndexAndScore = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> score -> score -> index }.toMap\n\
    \        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndex = guess.zipWithIndex.map\
    \ { case (score, index) => index -> score -> score -> score -> index -> index\
    \ }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScore\
    \ = guess.zipWithIndex.map { case (score, index) => index -> score -> score ->\
    \ score -> index -> index -> index -> index -> index }.toMap\n        val guessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\
    \ = guess.zipWithIndex.map { \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_peubo79.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp_peubo79.scala:20:94 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexes\e[0m\
    \ = guess.zipWithIndex.map { \e[33mcase\e[0m (score, index) => index }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                         Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_peubo79.scala:30:128 -------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesAndScoreAndScoreAndIndexAndScoreAndIndexAndScoreAndIndexAndScoreAndIndex\e\
    [0m = guess.zipWithIndex.map { \n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    Unit\n\e[31m   |\e[0m                       Required: ((Long @uncheckedVariance,\
    \ Int)) => Any\n\e[31m31 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_peubo79.scala:39:1 ---------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:  \
    \  Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp_peubo79.scala:32:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is"
  stdout: ''
  timestamp: 1660013620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index ->\
    \ score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map { case\
    \ (score, index) => index -> score }.toMap\n        val gameScores = gameScoreMap.map\
    \ { case (index, score) => (index, gameScoreMap.get(index) - score) }.toList\n\
    \        val guessScores = guessScoreMap.map { case (index, score) => (index,\
    \ guessScoreMap.get(index) - score) }.toList\n        val gameScores = gameScores.sortBy(_._2).reverse\n\
    \        val guessScores = guessScores.sortBy(_._2).reverse\n        val gameScores\
    \ = gameScores.map { case (index, score) => Math.abs(score) }\n        val guessScores\
    \ = guessScores.map { case (index, score) => Math.abs(score) }\n        gameScores\
    \ ++ guessScores\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbxpw3xga.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScoreMap.map\
    \ { \e[33mcase\e[0m (index, score) => (index, gameScoreMap.get(index) - score)\
    \ }.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxpw3xga.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScoreMap.map\
    \ { \e[33mcase\e[0m (index, score) => (index, guessScoreMap.get(index) - score)\
    \ }.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxpw3xga.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxpw3xga.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mguessScores\e[0m = guessScores.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScores is already defined as \e[33mvalue\e[0m \e[35mguessScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote th"
  stdout: ''
  timestamp: 1660013621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.foldLeft(0L) { (sum, score) => sum + score }\n        val guessesScore\
    \ = guessesScores.foldLeft(0L) { (sum, score) => sum + score }\n        val diffs\
    \ = guessesScores.map { case (score, index) => Math.abs(score - gameScore) }\n\
    \        diffs.zipWithIndex.map { case (diff, index) => diff + gameScores.get(index)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_bwzbzq.scala:21:78 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e[0m = guessesScores.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg_bwzbzq.scala:22:60 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        diffs.zipWithIndex.map { \e[33mcase\e[0m (diff,\
    \ index) => diff + gameScores.get(index) }\n\e[31m\e[31m   |\e[0m            \
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.properties AsScalaMap\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_bwzbzq.scala:22:73\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        diffs.zipWithIndex.map\
    \ { \e[33mcase\e[0m (diff, index) => diff + gameScores.get(index) }\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue get is not a member of List[Long], but could be m"
  stdout: ''
  timestamp: 1660013623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val scoreDiff = scores.toList.zip(guess.toList).map { case (score, guess)\
    \ => abs(score - guess) }\n        val guesseDiff = guesses.toList.zip(scores.toList).map\
    \ { case (guess, score) => abs(guess - score) }\n        guesseDiff.foreach {\
    \ diff =>\n            if (diff == 0) {\n                result ++= scoreDiff\n\
    \            } else {\n                result ++= diff\n            }\n      \
    \  }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr8865tkz.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScoreAndIndex = guess.zipWithIndex.map { case\
    \ (guess, index) => guess -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndex\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score -> index -> score -> index }.toMap\n        val guessesWithIndexesWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScoreAndIndexWithScore\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score -> index ->\
    \ score -> index -> score \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeo_imn1a.scala:39:0 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_imn1a.scala:21:100\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \                     Not found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpeo_imn1a.scala:22:107 -----------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScoreAndIndex\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ -> index }.toMap\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: score\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_imn1a.scala:23:116\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mguessesWithIndexesWithScoreAndIndexWithScore\e[0m = guess.zipWithIndex.map\
    \ { \e[33mcase\e[0m (guess, index) => guess -> score -> index -> score }.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: score\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeo_imn1a.scala:23:134\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660013624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesWithScores = guess.zip(game).map { case\
    \ (guess, score) => guess -> score }.toMap\n        val guessesWithIndexes = guess.zipWithIndex.map\
    \ { case (guess, index) => guess -> index }.toMap\n        val guessesWithIndexesWithScores\
    \ = guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n \
    \       val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guessesWithIndexesWithScores = guess.zipWithIndex.map { case (guess,\
    \ index) => guess -> score }.toMap\n        val guessesWithIndexesWithScores =\
    \ guess.zipWithIndex.map { case (guess, index) => guess -> score }.toMap\n   \
    \     val guesses\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjuuyqw8w.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuuyqw8w.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mguessesWithIndexesWithScores\e[0m = guess.zipWithIndex.map { \e[33mcase\e\
    [0m (guess, index) => guess -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuuyqw8w.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjuuyqw8w.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mguessesWithIndexesWithScores\e\
    [0m = guess.zipWithIndex.map { \e[33mcase\e[0m (guess, index) => guess -> score\
    \ }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesWithIndexesWithScores is already defined as \e[33mvalue\e\
    [0m \e[35mguessesWithIndexesWithScores\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplev"
  stdout: ''
  timestamp: 1660013623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreDiff = gameScoreCount - guessScoreCount\n        val guessScoreDiff\
    \ = guessScoreCount - gameScoreCount\n        val gameScoreDiffs = gameScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffs = guessScoreDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffCount = gameScoreDiffs.count\n\
    \        val guessScoreDiffCount = guessScoreDiffs.count\n        val gameScoreDiffDiff\
    \ = gameScoreDiffCount - guessScoreDiffCount\n        val guessScoreDiffDiff =\
    \ guessScoreDiffCount - gameScoreDiffCount\n        val gameScoreDiffDiffs = gameScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffs = guessScoreDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffCount = gameScoreDiffDiffs.count\n\
    \        val guessScoreDiffDiffCount = guessScoreDiffDiffs.count\n        val\
    \ gameScoreDiffDiffDiff = gameScoreDiffDiffCount - guessScoreDiffDiffCount\n \
    \       val guessScoreDiffDiffDiff = guessScoreDiffDiffCount - gameScoreDiffDiffCount\n\
    \        val gameScoreDiffDiffDiffs = gameScoreDiffDiffDiff.zipWithIndex.map {\
    \ case (score, index) => score }\n        val guessScoreDiffDiffDiffs = guessScoreDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val gameScoreDiffDiffDiffCount = gameScoreDiffDiffDiffs.count\n\
    \        val guessScoreDiffDiffDiffCount = guessScoreDiffDiffDiffs.count\n   \
    \     val gameScoreDiffDiffDiffDiff = gameScoreDiffDiffDiffCount - guessScoreDiffDiffDiffCount\n\
    \        val guessScoreDiffDiffDiffDiff = guessScoreDiffDiffDiffCount - gameScoreDiffDiffDiffCount\n\
    \        val gameScoreDiffDiffDiffDiffs = gameScoreDiffDiffDiffDiff.zipWithIndex.map\
    \ { case (score, index) => score }\n        val guessScoreDiffDiffDiffDiffs =\
    \ guessScoreDiffDiffDiff.zipWithIndex.map { case (score, index) => score }\n \
    \       val gameScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpquyo2dsi.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquyo2dsi.scala:21:43\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreDiff\e[0m = gameScoreCount - guessScoreCount\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is\
    \ not a member of (Long => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquyo2dsi.scala:22:45\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreDiff\e[0m = guessScoreCount - gameScoreCount\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -\
    \ is not a member of (Long => Boolean) => Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpquyo2dsi.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }\n        val\
    \ guessesScores = guess.zipWithIndex.map { case (score, index) => score -> index\
    \ }\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreList = gameScoreMap.values.toList\n\
    \        val guessesScoreList = guessesScoreMap.values.toList\n        val gameScoreSet\
    \ = gameScoreList.toSet\n        val guessesScoreSet = guessesScoreList.toSet\n\
    \        val gameScoreList = gameScoreList.map { case (score, index) => score\
    \ }\n        val guessesScoreList = guessesScoreList.map { case (score, index)\
    \ => score }\n        val gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet\
    \ = guessesScoreSet.toSet\n        val gameScoreList = gameScoreList.map { case\
    \ score => score }\n        val guessesScoreList = guessesScoreList.map { score\
    \ => score }\n        val gameScoreSet = gameScoreSet.toSet\n        val guessesScoreSet\
    \ = guessesScoreSet.toSet\n        val gameScoreList = gameScoreList.map { case\
    \ score => score }\n        val guessesScoreList = guessesScoreList.map { case\
    \ score => score }\n        val gameScoreSet = gameScoreSet.toSet\n        val\
    \ guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList = gameScoreList.map\
    \ { case score => score }\n        val guessesScoreList = guessesScoreList.map\
    \ { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n   \
    \     val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList =\
    \ gameScoreList.map { case score => score }\n        val guessesScoreList = guessesScoreList.map\
    \ { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n   \
    \     val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList =\
    \ gameScoreList.map { case score => score }\n        val guessesScoreList = guessesScoreList.map\
    \ { case score => score }\n        val gameScoreSet = gameScoreSet.toSet\n   \
    \     val guessesScoreSet = guessesScoreSet.toSet\n        val gameScoreList =\
    \ gameScoreList.map { case score => score }\n        val guessesScoreList = guessesScore\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxkmyw528.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkmyw528.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreList\e[0m = guessesScoreList.map\
    \ { \e[33mcase\e[0m (score, index) => score }\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreList is already defined as \e[33mvalue\e[0m \e\
    [35mguessesScoreList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxkmyw528.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScoreSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreSet is already defined as \e[33mvalue\e[0m \e[35mgameScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkmyw528.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreSet\e[0m = guessesScoreSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mguessesScoreSet is already defined as \e[33mvalue\e[0m \e[35mguessesScoreSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxkmyw528.scala:29:12 -------"
  stdout: ''
  timestamp: 1660013623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val difference\
    \ = abs(guess - score)\n            result(i) = difference\n            i += 1\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong,\
    \ -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong,\
    \ 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp24ppk8hh.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp24ppk8hh.scala:30:8 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        val gameScoreDiffCount\
    \ = gameScoreDiff.count\n        val guessScoreDiffCount = guessScoreDiff.count\n\
    \        val gameScoreDiffSum = gameScoreDiff.sum\n        val guessScoreDiffSum\
    \ = guessScoreDiff.sum\n        val gameScoreDiffCount = gameScoreDiff.count\n\
    \        val guessScoreDiffCount = guessScoreDiff.count\n        val gameScoreDiffSum\
    \ = gameScoreDiff.sum\n        val guessScoreDiffSum = guessScoreDiff.sum\n  \
    \      val gameScoreDiffCount = gameScoreDiff.count\n        val guessScoreDiffCount\
    \ = guessScoreDiff.count\n        val gameScoreDiffSum = gameScoreDiff.sum\n \
    \       val guessScoreDiffSum = guessScoreDiff.sum\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffCount\e[0m\
    \ = guessScoreDiff.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreDiffCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffSum\e[0m =\
    \ gameScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mguessScoreDiffSum\e[0m =\
    \ guessScoreDiff.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreDiffSum is already defined as \e[33mvalue\e[0m \e\
    [35mguessScoreDiffSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6hubl__g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffCount\e[0m\
    \ = gameS"
  stdout: ''
  timestamp: 1659798268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map(x => x._1 + x._2)\n        val guessesScores = guess.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val gameScoreMap = gameScores.toMap\n        val guessesScoreMap\
    \ = guessesScores.toMap\n        val gameScoreKeys = gameScoreMap.keys\n     \
    \   val guessesScoreKeys = guessesScoreMap.keys\n        val gameScoreValues =\
    \ gameScoreMap.values\n        val guessesScoreValues = guessesScoreMap.values\n\
    \        val gameScoreKeySet = gameScoreKeys.toSet\n        val guessesScoreKeySet\
    \ = guessesScoreKeys.toSet\n        val gameScoreValueSet = gameScoreValues.toSet\n\
    \        val guessesScoreValueSet = guessesScoreValues.toSet\n        val gameScoreKeysSet\
    \ = gameScoreKeySet.toSet\n        val guessesScoreKeysSet = guessesScoreKeySet.toSet\n\
    \        val gameScoreValuesSet = gameScoreValueSet.toSet\n        val guessesScoreValuesSet\
    \ = guessesScoreValueSet.toSet\n        val gameScoreKeysSet = gameScoreKeysSet.toSet\n\
    \        val guessesScoreKeysSet = guessesScoreKeysSet.toSet\n        val gameScoreValuesSet\
    \ = gameScoreValuesSet.toSet\n        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n\
    \        val gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet\
    \ = guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet =\
    \ guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKeysSet =\
    \ guessesScoreKeysSet.toSet\n        val gameScoreValuesSet = gameScoreValuesSet.toSet\n\
    \        val guessesScoreValuesSet = guessesScoreValuesSet.toSet\n        val\
    \ gameScoreKeysSet = gameScoreKeysSet.toSet\n        val guessesScoreKey\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0kwlv9gv.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0kwlv9gv.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreKeysSet\e[0m = gameScoreKeysSet.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgameScoreKeysSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mgameScoreKeysSet\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0kwlv9gv.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSet\e[0m = guessesScoreKeysSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessesScoreKeysSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0kwlv9gv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgameScoreValuesSet\e[0m\
    \ = gameScoreValuesSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreValuesSet is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0kwlv9gv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreValuesSet\e\
    [0m = guessesScoreValuesSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreValuesSet is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreValuesSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660013624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toSet\n\
    \        val scores = game.toSet\n        val results = new mutable.ListBuffer[Long]()\n\
    \        val correct = scores.toSet.subsetOf(guesses)\n        val wrong = guesses.subsetOf(scores)\n\
    \        val correctCount = correct.size\n        val wrongCount = wrong.size\n\
    \        val correctPercentage = correctCount * 100 / scores.size\n        val\
    \ wrongPercentage = wrongCount * 100 / guesses.size\n        val correctPercentageInt\
    \ = correctPercentage.toInt\n        val wrongPercentageInt = wrongPercentage.toInt\n\
    \        val correctPercentagePercentage = correctPercentageInt * 100 / 100\n\
    \        val wrongPercentagePercentage = wrongPercentageInt * 100 / 100\n    \
    \    val correctPercentagePercentageInt = correctPercentagePercentage.toInt\n\
    \        val wrongPercentagePercentageInt = wrongPercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentage = correctPercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentageInt = wrongPercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentage = correctPercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentage = wrongPercentagePercentageInt\
    \ * 100 / 100\n        val correctPercentagePercentagePercentageInt = correctPercentagePercentagePercentage.toInt\n\
    \        val wrongPercentagePercentagePercentageInt = wrongPercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentage = correctPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentageInt = wrongPercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentage = correctPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentage = wrongPercentagePercentagePercentageInt\
    \ * 100 / 100\n        val correctPercentagePercentagePercentagePercentageInt\
    \ = correctPercentagePercentagePercentagePercentage.toInt\n        val wrongPercentagePercentagePercentagePercentageInt\
    \ = wrongPercentagePercentagePercentagePercentage.toInt\n        val correctPercentagePercentagePercentagePercentagePercentage\
    \ = correctPercentagePercentagePercentagePercentageInt * 100 / 100\n        val\
    \ wrongPercentagePercentagePercentagePercentageInt = wrongPercentagePercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentagePercentage = correctPercentagePercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentageInt =\
    \ wrongPercentagePercentagePercentagePercentage.toInt\n        val correctPercentagePercentagePercentagePercentagePercentage\
    \ = correctPercentagePercentagePercentagePercentageInt * 100 / 100\n        val\
    \ wrongPercentagePercentagePercentagePercentagePercentageInt = wrongPercentagePercentagePercentagePercentagePercentage.toInt\n\
    \        val correctPercentagePercentagePercentagePercentagePercentage = correctPercentagePercentagePercentagePercentageInt\
    \ * 100 / 100\n        val wrongPercentagePercentagePercentagePercentageInt =\
    \ wrongPercentagePercentagePercentage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjkvs9dpe.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mwrongPercentagePercentageInt\e\
    [0m = wrongPercentagePercentage.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwrongPercentagePercentageInt is already defined as \e[33mvalue\e\
    [0m \e[35mwrongPercentagePercentageInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjkvs9dpe.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mcorrectPercentagePercentagePercentage\e\
    [0m = correctPercentagePercentageInt * \e[31m100\e[0m / \e[31m100\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcorrectPercentagePercentagePercentage is already defined as\
    \ \e[33mvalue\e[0m \e[35mcorrectPercentagePercentagePercentage\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjkvs9dpe.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwrongPercentagePercentagePercentageInt\e[0m = wrongPercentagePercentagePercentage.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwrongPercentagePercentagePercentageInt is already defined\
    \ as \e[33mvalue\e[0m \e[35mwrongPercentagePercentagePercentageInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjkvs9dpe.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mcorrectPercentagePercentagePercentagePercentage\e\
    [0m = correctPercentagePercentagePercentageInt * \e[31m100\e[0m / \e[31m100\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map{case (score, index) => score}.toList\n        val guessScores\
    \ = guess.zipWithIndex.map{case (score, index) => score}.toList\n        val gameScoreMap\
    \ = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n        val guessScoreMap\
    \ = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n        val gameScoreMap2\
    \ = gameScoreMap.map{case (score, index) => score.toLong}.toList\n        val\
    \ guessScoreMap2 = guessScoreMap.map{case (score, index) => score.toLong}.toList\n\
    \        val gameScoreMap3 = gameScoreMap2.zipWithIndex.map{case (score, index)\
    \ => score}.toList\n        val guessScoreMap3 = guessScoreMap2.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap4 = gameScoreMap3.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap4 = guessScoreMap3.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap5 = gameScoreMap4.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap5 = guessScoreMap4.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap6 = gameScoreMap5.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap6 = guessScoreMap5.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap7 = gameScoreMap6.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap7 = guessScoreMap6.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap8 = gameScoreMap7.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap8 = guessScoreMap7.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap9 = gameScoreMap8.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val guessScoreMap9 = guessScoreMap8.zipWithIndex.map{case\
    \ (score, index) => score}.toList\n        val gameScoreMap10 = gameScoreMap9.zipWithIndex.map\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18ma0n8n.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18ma0n8n.scala:19:70\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap\e[0m = gameScores.groupBy(_._1).mapValues(_.map(_._2))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                        value _2\
    \ is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18ma0n8n.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\e\
    [31m\e[31m   |\e[0m                                                ^^^^\e[0m\n\
    \e[31m   |\e[0m                                        value _1 is not a member\
    \ of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18ma0n8n.scala:20:72\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mguessScoreMap\e[0m = guessScores.groupBy(_._1).mapValues(_.map(_._2))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \  value _2 is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18ma0n8n.scala:21:74\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mgameScoreMap2\e[0m = gameScoreMap.map{\e[33mcase\e[0m (score, index) => score.toLong}.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not a member of\
    \ Nothing, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660013625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessesScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessesScore = guessesScores.sum\n        val\
    \ diffs = guessesScores.map { case (score, index) => Math.abs(score - gameScore)\
    \ }\n        diffs.zipWithIndex.map { case (diff, index) => diff }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxjcj4_7d.scala:21:78 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdiffs\e[0m = guessesScores.map\
    \ { \e[33mcase\e[0m (score, index) => Math.abs(score - gameScore) }\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Any, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val diffs\
    \ = guessScores.zip(gameScores).map { case (guess, game) => math.abs(guess - game)\
    \ }\n        diffs.toList.zipWithIndex.map { case (diff, index) => diff * gameScores.apply(index)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuag4kyei.scala:25)\n\tat Problem.main(tmpuag4kyei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val difference\
    \ = guessScore - gameScore\n        val differences = guessScores.zip(gameScores).map\
    \ { case (guessScore, gameScore) =>\n            if (guessScore == gameScore)\
    \ 0\n            else Math.abs(guessScore - gameScore)\n        }\n        differences.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.length\n\
    \        val scores = game.length\n        val result = new mutable.ArrayList[Long](guesses)\n\
    \        val guessesSoFar = 0\n        var i = 0\n        while (i < guesses)\
    \ {\n            val guess = guess(i)\n            val score = game(i)\n     \
    \       val diff = Math.abs(guess - score)\n            if (diff < 0)\n      \
    \          result.add(diff)\n            else\n                result.add(i)\n\
    \            guessesSoFar += 1\n            i += 1\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkrs74xm3.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mLong\e[0m](guesses)\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkrs74xm3.scala:23:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mguess\e[0m = guess(i)\n\e[31m\e[31m   |\e[0m                       \
    \ ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e\
    [35mguess\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkrs74xm3.scala:30:25 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m            guessesSoFar += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value += is not a member of Int\
    \ - did you mean guessesSoFar.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660013624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }.toList\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }.toList\n        val\
    \ gameScoreMap = gameScores.groupBy(_._1).map { case (score, index) => index ->\
    \ score }.toMap\n        val guessScoreMap = guessScores.groupBy(_._1).map { case\
    \ (score, index) => index -> score }.toMap\n        val gameScoreArray = gameScores.map\
    \ { case (score, index) => index -> score }.toArray\n        val guessScoreArray\
    \ = guessScores.map { case (score, index) => index -> score }.toArray\n      \
    \  val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map { case (score, index)\
    \ => index -> score }.toMap\n        val guessScoreArrayMap = guessScoreArray.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val gameScoreArrayMap\
    \ = gameScoreArray.groupBy(_._1).map { case (score, index) => index -> score }.toMap\n\
    \        val guessScoreArrayMap = guessScoreArray.groupBy(_._1).map { case (score,\
    \ index) => index -> score }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map\
    \ { case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guessScoreArrayMap\
    \ = guessScoreArray.groupBy(_._1).map { case (score, index) => index -> score\
    \ }.toMap\n        val gameScoreArrayMap = gameScoreArray.groupBy(_._1).map {\
    \ case (score, index) => index -> score }.toMap\n        val guess\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphn_kf5jy.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphn_kf5jy.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgameScoreArrayMap\e[0m = gameScoreArray.groupBy(_._1).map { \e[33mcase\e\
    [0m (score, index) => index -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphn_kf5jy.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreArrayMap\e[0m\
    \ = guessScoreArray.groupBy(_._1).map { \e[33mcase\e[0m (score, index) => index\
    \ -> score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessScoreArrayMap is already defined as \e[33mvalue\e[0m\
    \ \e[35mguessScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphn_kf5jy.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreArrayMap\e[0m =\
    \ gameScoreArray.groupBy(_._1).map { \e[33mcase\e[0m (score, index) => index ->\
    \ score }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreArrayMap is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreArrayMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphn_kf5jy."
  stdout: ''
  timestamp: 1660013626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val gameScores = gameScores.zipWithIndex.map\
    \ { case (score, index) => if (score == 0) 0 else abs(score - gameScore) }\n \
    \       gameScores.toList\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve_6tefa.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mgameScores\e[0m = gameScores.zipWithIndex.map\
    \ { \e[33mcase\e[0m (score, index) => \e[33mif\e[0m (score == \e[31m0\e[0m) \e\
    [31m0\e[0m \e[33melse\e[0m abs(score - gameScore) }\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScores is already defined as \e[33mvalue\e[0m \e[35mgameScores\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score -> index }.toMap\n    \
    \    val guessesScores = guess.zipWithIndex.map { case (score, index) => score\
    \ -> index }.toMap\n        val guessesScoreKeys = guessesScores.keys.toList\n\
    \        val gameScoreKeys = gameScores.keys.toList\n        val guessesScoreKeysSet\
    \ = guessesScoreKeys.toSet\n        val gameScoreKeysSet = gameScoreKeys.toSet\n\
    \        val gameScoreKeysSetSize = gameScoreKeysSet.size\n        val gameScoreKeysSetSize\
    \ = gameScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize\
    \ = guessesScoreKeysSet.size\n        val guessesScoreKeysSetSize = guessesScoreKeysSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8ugv5x1.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mgameScoreKeysSetSize\e[0m\
    \ = gameScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreKeysSetSize is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_8ugv5x1.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSetSize\e\
    [0m = guessesScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8ugv5x1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSetSize\e\
    [0m = guessesScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8ugv5x1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mguessesScoreKeysSetSize\e\
    [0m = guessesScoreKeysSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mguessesScoreKeysSetSize is already defined as \e[33mvalue\e\
    [0m \e[35mguessesScoreKeysSetSize\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8ugv5x1.sca"
  stdout: ''
  timestamp: 1660013625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScore\
    \ = gameScores.sum\n        val guessScore = guessScores.sum\n        val gameScoreDiff\
    \ = gameScore - guessScore\n        val gameScoreDiffAbs = Math.abs(gameScoreDiff)\n\
    \        val gameScoreDiffAbsArray = gameScoreDiffAbs.toArray.map(x => x.toLong)\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArray.length\n    \
    \    val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n\
    \        val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n     \
    \   val gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val\
    \ gameScoreDiffAbsArrayLength = gameScoreDiffAbsArrayLength\n        val gameScoreDiffAbsArrayLength\
    \ = gameScore\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uc5b_tp.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uc5b_tp.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uc5b_tp.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uc5b_tp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffAbsArrayLength\e\
    [0m = gameScoreDiffAbsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffAbsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgameScoreDiffAbsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all b"
  stdout: ''
  timestamp: 1660013626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreCount\
    \ = gameScores.count\n        val guessScoreCount = guessScores.count\n      \
    \  val gameScoreSum = gameScores.sum\n        val guessScoreSum = guessScores.sum\n\
    \        val gameScoreDiff = gameScoreSum - guessScoreSum\n        val guessScoreDiff\
    \ = guessScoreSum - gameScoreSum\n        val gameScoreDiffPercent = gameScoreDiff\
    \ / gameScoreCount * 100\n        val guessScoreDiffPercent = guessScoreDiff /\
    \ guessScoreCount * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ + guessScoreDiffPercent\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent * 100\n     \
    \   val gameScoreDiffPercent = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent\
    \ = gameScoreDiffPercent * 100\n        val gameScoreDiffPercent = gameScoreDiffPercent\
    \ * 100\n        val gameScoreDiffPercent = gameScoreDiff\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong,\
    \ 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn4awj4t2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = gameScoreDiffPercent + guessScoreDiffPercent\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m \e\
    [35mgameScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn4awj4t2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = gameScoreDiffPercent * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn4awj4t2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = gameScoreDiffPercent * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn4awj4t2.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgameScoreDiffPercent\e[0m\
    \ = gameScoreDiffPercent * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgameScoreDiffPercent is already defined as \e[33mvalue\e[0m\
    \ \e[35mgameScoreDiffPercent\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m"
  stdout: ''
  timestamp: 1660013626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score - guess(index) }\n    \
    \    val gameScore = gameScores.sum\n        val guessesWithScore = gameScores.zipWithIndex.map\
    \ { case (score, index) => guess(index) }\n        val guessesWithScoreWithCorrect\
    \ = guessesWithScore.zipWithIndex.map { case (score, index) =>\n            if\
    \ (score == gameScore) 0\n            else abs(score - gameScore)\n        }\n\
    \        guessesWithScoreWithCorrect.map { case (score, index) => guess(index)\
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxahjkiw0.scala:24:71\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        guessesWithScoreWithCorrect.map\
    \ { \e[33mcase\e[0m (score, index) => guess(index) }\n\e[31m\e[31m   |\e[0m  \
    \                                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (index : Any)\n\e[31m   |\e[0m                                            \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = gues\n\
    \        val scores = game\n        val guessesCount = guesses.size\n        val\
    \ scoresCount = scores.size\n        val result = new Array[Long](guessesCount)\n\
    \        var i = 0\n        while (i < guessesCount) {\n            val guess\
    \ = guesses(i)\n            val score = scores(i)\n            val diff = abs(guess\
    \ - score)\n            if (diff > 0) {\n                result(i) = diff\n  \
    \          } else {\n                result(i) = -diff\n            }\n      \
    \      i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong, 0l.toLong, 0l.toLong,\
    \ 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp601kaaoy.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mguesses\e[0m = gues\n\e\
    [31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m          \
    \            Not found: gues\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp601kaaoy.scala:34:8 ---------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[Long])\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // I think we all remember that feeling when the result of some long-awaited\n\
    \    // event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    // definitely worth noting down and comparing.\n    // Your task is\
    \ to determine if a person correctly guessed the results of a number of matches.\n\
    \    // You are given two arrays of scores and guesses of equal length, where\
    \ each index shows a match. \n    // Return an array of the same length denoting\
    \ how far off each guess was. If they have guessed correctly,\n    // the value\
    \ is 0, and if not, the value is the absolute difference between the guess and\
    \ the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong,\
    \ 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong,\
    \ 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game\
    \ : List[Long], guess : List[Long]) : List[Long] = {\n        val gameScores =\
    \ game.zipWithIndex.map { case (score, index) => score }\n        val guessScores\
    \ = guess.zipWithIndex.map { case (score, index) => score }\n        val gameScoreMap\
    \ = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n        val\
    \ gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guessScores.toSet\n\
    \        val gameScoreMap = gameScores.toMap\n        val guessScoreMap = guessScores.toMap\n\
    \        val gameScoreList = gameScores.toList\n        val guessScoreList = guessScores.toList\n\
    \        val gameScoreSet = gameScores.toSet\n        val guessScoreSet = guess\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))));\n    assert(compare((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong)), (List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
    \ 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(compare((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)), (List[Long](-1l.toLong, -2l.toLong, -3l.toLong))).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong))));\n    assert(compare((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 5l.toLong)), (List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 0l.toLong, 0l.toLong, 1l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8caxptq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mgameScoreMap\e[0m = gameScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreMap is already defined as \e[33mvalue\e[0m \e[35mgameScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mguessScoreMap\e[0m = guessScores.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mguessScoreMap is already defined as \e[33mvalue\e[0m \e[35mguessScoreMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mgameScoreList\e[0m = gameScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgameScoreList is already defined as \e[33mvalue\e[0m \e[35mgameScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mguessScoreList\e[0m = guessScores.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mguessScoreList is already defined as \e[33mvalue\e[0m \e[35mguessScoreList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw8caxptq.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgameScoreSet\e[0m = gameScores.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0"
  stdout: ''
  timestamp: 1659798268
