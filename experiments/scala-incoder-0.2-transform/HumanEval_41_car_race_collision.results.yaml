language: scala
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val\
    \ collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n      \
    \  val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft\
    \ = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight =\
    \ mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n\
    \        val collisionsBothBothBothBothBothBothBothBothRight\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyixsp37n.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyixsp37n.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m        \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                              \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyixsp37n.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                  Not found: Car\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyixsp37n.scala:13:54 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m100\e[0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyixsp37n.scala:13:74\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m100\e\
    [0m), Vector.random(\e[31m100\e[0m)))\n\e[31m\e[31m   |\e[0m                 \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue random is not a member of object scala.collection.i"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n \
    \       val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwju61g4a.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwju61g4a.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwju61g4a.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwju61g4a.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n\
    \        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft\
    \ = collisions.toSet\n        val collisionsRight = collisions.toSet\n       \
    \ val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n\
    \        val collisionsLeft = collisions.toSet\n        val collisionsRight =\
    \ collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val\
    \ collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n\
    \        val collisionsRight = collisions.toSet\n        val collisionsLeft =\
    \ collisions.toSet\n        val collisionsRight = collisions.toSet\n        val\
    \ collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n\
    \        val collisionsLeft = collisions.toSet\n        val collisionsRight =\
    \ collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val\
    \ collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n\
    \        val collisionsRight = collisions.toSet\n        val collisionsLeft =\
    \ collisions.toSet\n        val collisionsRight = collisions.toSet\n        val\
    \ collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n\
    \        val collisionsLeft = collisions.toSet\n        val collisionsRight =\
    \ collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val\
    \ collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n\
    \        val collisionsRight = collisions.toSet\n        val collisionsLeft =\
    \ collisions.toSet\n        val collisionsRight = collisions.toSet\n        val\
    \ collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n\
    \        val collisionsLeft = collisions.toSet\n        val collisionsRight =\
    \ collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val\
    \ collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n\
    \        val collisionsRight = collisions.toSet\n        val collisionsLeft =\
    \ collisions.toSet\n        val collisionsRight = collisions.toSet\n        val\
    \ collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n\
    \        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvm1vduc3.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvm1vduc3.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsLeft\e[0m = collisions.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvm1vduc3.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = collisions.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsRight is already defined as \e[33mvalue\e[0m \e[35mcollisionsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvm1vduc3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcollisionsLeft\e[0m = collisions.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsLeft is already defined as \e[33mvalue\e[0m \e[35mcollisionsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvm1vduc3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsRight\e[0m = collisions.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcollisionsRight is already defined as \e[33mvalue\e[0m \e[35mcollisionsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvm1"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n\
    \        val collisions = carsLeft.foldLeft(0)((acc, car) => acc + (carsRight.contains(car)\
    \ ? 1 : 0))\n        collisions\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => i)\n\e[31m\e[31m   |\e[0m           \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    (n : Long)\n\e[31m   |\e[0m                                 \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:14:38\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e\
    [0m = cars.takeRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \       ^\e[0m\n\e[31m   |\e[0m                                      Found:  \
    \  (n : Long)\n\e[31m   |\e[0m                                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:15:39\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e\
    [0m = cars.dropRight(n)\n\e[31m\e[31m   |\e[0m                               \
    \        ^\e[0m\n\e[31m   |\e[0m                                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplxp2jmrd.scala:16:91\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcollisions\e[0m = carsLeft.foldLeft(\e[31m0\e[0m)((\e[36macc\e[0m, \e[36mcar\e\
    [0m) => acc + (carsRight.contains(car) ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \            value ? is not a member of Boolean\n4 errors found\n"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach\
    \ { car =>\n                cars.foreach { car2 =>\n                    if (car.head\
    \ == car2.head && car.tail.head == car2.tail.head) {\n                       \
    \ collisions += car.head + car2.head * car.tail.tail.head * car2.tail.tail.head\n\
    \                    }\n                }\n            }\n        }\n        collisions.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkapmuusn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => mutable.ListBuffer(\e[31m1\e[0m to n).map(\e\
    [36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkapmuusn.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speedsDiff = mutable.ListBuffer[Double]()\n\
    \        val speedsDiffs = mutable.ListBuffer[Double]()\n        val speedsDiffsSum\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSums = mutable.ListBuffer[Double]()\n\
    \        val speedsDiffsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSums\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSum = mutable.ListBuffer[Double]()\n\
    \        val speedsDiffsSumsSumsSums = mutable.ListBuffer[Double]()\n        val\
    \ speedsDiffsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSum =\
    \ mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSums =\
    \ mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphvbziisa.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphvbziisa.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum is already defined\
    \ as \e[33mvalue\e[0m \e[35mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphvbziisa.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphvbziisa.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphvbziisa.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphvbziisa.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m       "
  stdout: ''
  timestamp: 1659793455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9q50m10f.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar\
    \ = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Namin"
  stdout: ''
  timestamp: 1659793193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Car(Vector.random(2), Vector.random(2), Vector.zero))\n        val collided\
    \ = mutable.Set[Car]()\n        val collided2 = mutable.Set[Car]()\n        val\
    \ collided3 = mutable.Set[Car]()\n        val collided4 = mutable.Set[Car]()\n\
    \        val collided5 = mutable.Set[Car]()\n        val collided6 = mutable.Set[Car]()\n\
    \        val collided7 = mutable.Set[Car]()\n        val collided8 = mutable.Set[Car]()\n\
    \        val collided9 = mutable.Set[Car]()\n        val collided10 = mutable.Set[Car]()\n\
    \        val collided11 = mutable.Set[Car]()\n        val collided12 = mutable.Set[Car]()\n\
    \        val collided13 = mutable.Set[Car]()\n        val collided14 = mutable.Set[Car]()\n\
    \        val collided15 = mutable.Set[Car]()\n        val collided16 = mutable.Set[Car]()\n\
    \        val collided17 = mutable.Set[Car]()\n        val collided18 = mutable.Set[Car]()\n\
    \        val collided19 = mutable.Set[Car]()\n        val collided20 = mutable.Set[Car]()\n\
    \        val collided21 = mutable.Set[Car]()\n        val collided22 = mutable.Set[Car]()\n\
    \        val collided23 = mutable.Set[Car]()\n        val collided24 = mutable.Set[Car]()\n\
    \        val collided25 = mutable.Set[Car]()\n        val collided26 = mutable.Set[Car]()\n\
    \        val collided27 = mutable.Set[Car]()\n        val collided28 = mutable.Set[Car]()\n\
    \        val collided29 = mutable.Set[Car]()\n        val collided30 = mutable.Set[Car]()\n\
    \        val collided31 = mutable.Set[Car]()\n        val collided32 = mutable.Set[Car]()\n\
    \        val collided33 = mutable.Set[Car]()\n        val collided34 = mutable.Set[Car]()\n\
    \        val collided35 = mutable.Set[Car]()\n        val collided36\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy7uu19cc.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy7uu19cc.scala:13:35 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e\
    [31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.zero))\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy7uu19cc.scala:13:43 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m =>\
    \ Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.zero))\n\
    \e[31m\e[31m   |\e[0m                                           ^^^\e[0m\n\e[31m\
    \   |\e[0m                                           Not found: Car\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7uu19cc.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Car(Vector.random(\e[31m2\e[0m), Vector.random(\e[31m2\e[0m), Vector.zero))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue random is not a member of object scala.collection.immutable.Vector\
    \ - did you mean Vector.range?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy7uu19cc.scala:13:72\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mcars\e[0m = Vector.tabulate(n)(\e[36mi\e[0m => Car(Vector.random(\e[31m2\e\
    [0m), Vector.random(\e[31m2\e[0m), Vector.zero))\n\e[31m\e[31m   |\e[0m      \
    \                                                           ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue random is not a m"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1\
    \ to n).map(i => new Car(i))\n        val cars2 = mutable.ListBuffer(1 to n).map(i\
    \ => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n      \
    \  val collisions2 = mutable.ListBuffer[Long]()\n        val collisions3 = mutable.ListBuffer[Long]()\n\
    \        val collisions4 = mutable.ListBuffer[Long]()\n        val collisions5\
    \ = mutable.ListBuffer[Long]()\n        val collisions6 = mutable.ListBuffer[Long]()\n\
    \        val collisions7 = mutable.ListBuffer[Long]()\n        val collisions8\
    \ = mutable.ListBuffer[Long]()\n        val collisions9 = mutable.ListBuffer[Long]()\n\
    \        val collisions10 = mutable.ListBuffer[Long]()\n        val collisions11\
    \ = mutable.ListBuffer[Long]()\n        val collisions12 = mutable.ListBuffer[Long]()\n\
    \        val collisions13 = mutable.ListBuffer[Long]()\n        val collisions14\
    \ = mutable.ListBuffer[Long]()\n        val collisions15 = mutable.ListBuffer[Long]()\n\
    \        val collisions16 = mutable.ListBuffer[Long]()\n        val collisions17\
    \ = mutable.ListBuffer[Long]()\n        val collisions18 = mutable.ListBuffer[Long]()\n\
    \        val collisions19 = mutable.ListBuffer[Long]()\n        val collisions20\
    \ = mutable.ListBuffer[Long]()\n        val collisions21 = mutable.ListBuffer[Long]()\n\
    \        val collisions22 = mutable.ListBuffer[Long]()\n        val collisions23\
    \ = mutable.ListBuffer[Long]()\n        val collisions24 = mutable.ListBuffer[Long]()\n\
    \        val collisions25 = mutable.ListBuffer[Long]()\n        val collisions26\
    \ = mutable.ListBuffer[Long]()\n        val collisions27 = mutable.ListBuffer[Long]()\n\
    \        val collisions28 = mutable.ListBuffer[Long]()\n        val collisions29\
    \ = mutable.ListBuffer[Long]()\n        val collisions30 = mutable.ListBuffer[Long]()\n\
    \        val collisions31 = mutable.ListBuffer[Long]()\n        val collisions32\
    \ = mutable.ListBuffer[Long]()\n        val collisions33 = mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer(\e\
    [31m1\e[0m to n).map(\e[36mi\e[0m => \e[33mnew\e[0m \e[35mCar\e[0m(i))\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcars2\e[0m = mutable.ListBuffer(\e[31m1\e[0m to n).map(\e[36mi\e[0m => \e\
    [33mnew\e[0m \e[35mCar\e[0m(i))\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mcollisions2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mcollisions3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not "
  stdout: ''
  timestamp: 1659793455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\
    \        val carsRight = mutable.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659793138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var collisionsCount = 0\n        var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j\
    \ => i + j))\n        var carsCount = cars.length\n        var carsMoved = Vector.tabulate(n)(i\
    \ => 0)\n        var carsMovedCount = carsMoved.length\n        var carsMovedSum\
    \ = carsMoved.sum\n        var carsMovedSumCount = carsMovedSum.count\n      \
    \  var carsMovedSumCount2 = carsMovedSumCount.count\n        var carsMovedSumCount3\
    \ = carsMovedSumCount2.count\n        var carsMovedSumCount4 = carsMovedSumCount3.count\n\
    \        var carsMovedSumCount5 = carsMovedSumCount4.count\n        var carsMovedSumCount6\
    \ = carsMovedSumCount5.count\n        var carsMovedSumCount7 = carsMovedSumCount6.count\n\
    \        var carsMovedSumCount8 = carsMovedSumCount7.count\n        var carsMovedSumCount9\
    \ = carsMovedSumCount8.count\n        var carsMovedSumCount10 = carsMovedSumCount9.count\n\
    \        var carsMovedSumCount11 = carsMovedSumCount10.count\n        var carsMovedSumCount12\
    \ = carsMovedSumCount11.count\n        var carsMovedSumCount13 = carsMovedSumCount12.count\n\
    \        var carsMovedSumCount14 = carsMovedSumCount13.count\n        var carsMovedSumCount15\
    \ = carsMovedSumCount14.count\n        var carsMovedSumCount16 = carsMovedSumCount15.count\n\
    \        var carsMovedSumCount17 = carsMovedSumCount16.count\n        var carsMovedSumCount18\
    \ = carsMovedSumCount17.count\n        var carsMovedSumCount19 = carsMovedSumCount18.count\n\
    \        var carsMovedSumCount20 = carsMovedSumCount19.count\n        var carsMovedSumCount21\
    \ = carsMovedSumCount20.count\n        var carsMovedSumCount22 = carsMovedSumCount21.count\n\
    \        var carsMovedSumCount23 = carsMovedSumCount22.count\n        var carsMovedSumCount24\
    \ = carsMovedSumCount23.count\n        var carsMovedSumCount25 = cars\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n\
    \    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcars\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i\
    \ + j))\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (n : Long)\n\e[31m   |\e\
    [0m                                   Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:15:59 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mvar\e[0m \e[36mcars\e[0m = Vector.tabulate(n)(\e\
    [36mi\e[0m => Vector.tabulate(n)(\e[36mj\e[0m => i + j))\n\e[31m\e[31m   |\e[0m\
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (n : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:17:40\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mcarsMoved\e\
    [0m = Vector.tabulate(n)(\e[36mi\e[0m => \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                           Found:    (n : Long)\n\e[31m   |\e[0m            \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqsollnyw.scala:20:45 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mcarsMovedSumCount\e[0m = carsMovedSum.count\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value count is not a member of Int - did you mean Int.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight\
    \ = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsLeft is already defined as \e[33mvalue\e[0m \e[35mspeedsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mspeedsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspeedsRight is already defined as \e[33mvalue\e[0m \e[35mspeedsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mspeedsLeft\e[0m"
  stdout: ''
  timestamp: 1659793152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n\
    \        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n\
    \        val speeds = mutable.ListBuffer[Double]()\n        val speeds2 = mutable.ListBuffer[Double]()\n\
    \        val speeds3 = mutable.ListBuffer[Double]()\n        val speeds4 = mutable.ListBuffer[Double]()\n\
    \        val speeds5 = mutable.ListBuffer[Double]()\n        val speeds6 = mutable.ListBuffer[Double]()\n\
    \        val speeds7 = mutable.ListBuffer[Double]()\n        val speeds8 = mutable.ListBuffer[Double]()\n\
    \        val speeds9 = mutable.ListBuffer[Double]()\n        val speeds10 = mutable.ListBuffer[Double]()\n\
    \        val speeds11 = mutable.ListBuffer[Double]()\n        val speeds12 = mutable.ListBuffer[Double]()\n\
    \        val speeds13 = mutable.ListBuffer[Double]()\n        val speeds14 = mutable.ListBuffer[Double]()\n\
    \        val speeds15 = mutable.ListBuffer[Double]()\n        val speeds16 = mutable.ListBuffer[Double]()\n\
    \        val speeds17 = mutable.ListBuffer[Double]()\n        val speeds18 = mutable.ListBuffer[Double]()\n\
    \        val speeds19 = mutable.ListBuffer[Double]()\n        val speeds20 = mutable.ListBuffer[Double]()\n\
    \        val speeds21 = mutable.ListBuffer[Double]()\n        val speeds22 = mutable.ListBuffer[Double]()\n\
    \        val speeds23 = mutable.ListBuffer[Double]()\n        val speeds24 = mutable.ListBuffer[Double]()\n\
    \        val speeds25 = mutable.ListBuffer[Double]()\n        val speeds26 = mutable.ListBuffer[Double]()\n\
    \        val speeds27 = mutable.ListBuffer[Double]()\n        val speeds28 = mutable.ListBuffer[Double]()\n\
    \        val speeds29 = mutable.ListBuffer[Double]()\n        val speeds30 = mutable.ListBuffer[Double]()\n\
    \        val speeds31 = mutable.ListBuffer[Double]()\n        val speeds32 = mutable.ListBuffer[Double]()\n\
    \        val speeds33 = mutable.List\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcollisions\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mcars\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mspeed\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mspeeds\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mspeeds2\e[0m = mutable.ListBuffer[\e\
    [35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mspe"
  stdout: ''
  timestamp: 1659793455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed =\
    \ mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight\
    \ = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n\
    \        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft\
    \ = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3e9122c_.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3e9122c_.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3e9122c_.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3e9122c_.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsLeft\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsLeft is already defined as \e[33mvalue\e[0m \e[35mcarsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3e9122c_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsRight\e[0m = mutable.ArrayBuffer.fill(n)(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvalue\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of topl"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => Vector(i, j)))\n        val collisions = mutable.Set.empty[Long]\n\
    \        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar\
    \ = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n      \
    \  val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n       \
    \ val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n   \
    \     val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqrzbwaqh.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqrzbwaqh.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqrzbwaqh.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set.empty[\e[35mLong\e[0m]\n\e[31m\e"
  stdout: ''
  timestamp: 1659793139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n \
    \       var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n\
    \ / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n\
    \        var carsLeft = carsLeft.tail\n        var carsRight = carsRight.tail\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\
    \        var carsLeft = carsLeft.init\n        var carsRight = carsRight.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5a72fkjc.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5a72fkjc.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = carsLeft.tail\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft is\
    \ already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsRight\e[0m = carsRight.tail\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a72fkjc.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mcarsLeft\e[0m = carsLeft.init\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcarsLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mcarsLeft\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcarsRight\e[0m = carsRight.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsRight is already defined as \e[33mvariable\e[0m \e[35mcarsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5a72fkjc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36mc"
  stdout: ''
  timestamp: 1659793456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n\
    \        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft\
    \ = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n\
    \        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight\
    \ = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l))\
    \ == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l))\
    \ == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l))\
    \ == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklyiwgny.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpklyiwgny.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsLeft\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsLeft is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsCollisionsLeft\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcarsCollisionsRight\e[0m\
    \ = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcarsCollisionsRight is already defined as \e[33mvalue\e[0m\
    \ \e[35mcarsC"
  stdout: ''
  timestamp: 1659793332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Imagine a road that's a perfectly straight infinitely long line.\n\
    \    // n cars are driving left to right;  simultaneously, a different set of\
    \ n cars\n    // are driving right to left.   The two sets of cars start out being\
    \ very far from\n    // each other.  All cars move in the same speed.  Two cars\
    \ are said to collide\n    // when a car that's moving left to right hits a car\
    \ that's moving right to left.\n    // However, the cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i\
    \ => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n\
    \        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n\
    \        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val\
    \ collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\
    \ = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l))\
    \ == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l))\
    \ == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined\
    \ as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovzziy13.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already\
    \ defined as \e[33mvalue\e[0m \e[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1659793179
