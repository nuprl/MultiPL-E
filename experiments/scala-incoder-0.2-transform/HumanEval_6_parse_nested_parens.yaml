name: HumanEval_6_parse_nested_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n    // For each of the group, output the deepest\
  \ level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((()))\
  \ () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n\
  \    def parseNestedParens(paren_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
  \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
completions: ["        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        paren_queue.enqueue(paren_string)\n\
    \        while(!paren_queue.isEmpty) {\n            val paren_string = paren_queue.dequeue()\n\
    \            paren_stack.push(paren_string)\n            paren_string match {\n\
    \                case \"(\" => paren_queue.enqueue(paren_stack.pop())\n      \
    \          case \")\" => paren_levels(paren_stack.pop()) = paren_levels(paren_stack.pop())\
    \ + 1\n                case _ => paren_queue.enqueue(paren_string)\n         \
    \   }\n        }\n        paren_levels", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val paren_groups_with_max_depth = paren_groups.foldLeft(List[Long]())((acc,\
    \ x) => {\n            val max_depth = acc.foldRight(0)((max_depth, current_depth)\
    \ => {\n                if (max_depth < current_depth) max_depth else current_depth\n\
    \            })\n            if (max_depth > x.toLong) acc else x :: acc\n   \
    \     })\n        paren_groups_with_max_depth.map(_.toLong)", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_length = paren_groups.length\n\
    \        val paren_groups_map = mutable.Map[String, List[Long]]()\n        var\
    \ paren_groups_count = 0\n        var paren_groups_count_max = 0\n        var\
    \ paren_groups_count_current = 0\n        var paren_groups_count_max = 0\n   \
    \     var paren_groups_count_current = 0\n        var paren_groups_count_max =\
    \ 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_",
  "        val paren_list_string = paren_string.trim\n        val paren_list_list\
    \ = paren_list_string.split(\" \")\n        val paren_list_list_length = paren_list_list.length\n\
    \        val paren_list_list_list_length = paren_list_list_length / 2\n      \
    \  val paren_list_list_list_list_length = paren_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_length = paren_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_length = paren_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_length / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_length / 2\n     \
    \   val paren_list_list_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_length /\
    \ 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, List[Long]]()\n        paren_string.split(\"\\\\s+\"\
    ).foreach(x => {\n            val paren_str = x.trim\n            if (paren_str.length\
    \ == 0) return\n            val paren_str = paren_str.substring(1)\n         \
    \   paren_stack.push(paren_str)\n            val paren_str = paren_str.substring(1)\n\
    \            if (paren_stack_map.contains(paren_str)) {\n                paren_stack_map.get(paren_str).foreach(y\
    \ => paren_stack.pop())\n            }\n            else {\n                paren_stack_map.put(paren_str,\
    \ paren_stack.map(x => x.toLong).toList)\n            }\n        })\n        val\
    \ max_level = paren_stack_map.values.max\n        val max_level_str = max_level.map(x\
    \ => x.toLong).mkString(\",\")\n        val max_level_str = max_level_str.substring(1)\n\
    \        paren_stack_map.values.map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong", "        val paren_stack =\
    \ mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_", "        val paren_chars\
    \ = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_range = paren_chars_count_max\
    \ - paren_chars_count_min\n        val paren_chars_count_range_max = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_min = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid = paren_chars_count_range / 2\n     \
    \   val paren_chars_count_range_mid2 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid3 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid4\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid5 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid6 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid7 = paren_chars_count_range / 2\n    \
    \    val paren_chars_count_range_mid8 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid9 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid10\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid11 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid12 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid13 = paren_chars_count_range / 2\n   \
    \     val paren_chars_count_range_mid14 = paren_chars_count_range / 2\n      \
    \  val paren_chars_count_range_mid15 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid16 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid17\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid18 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid19 = paren_chars_count_range / ",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels.append(0)\n    \
    \    while (paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_level = paren_levels.pop()\n            val paren_level_string\
    \ = paren_level.toString\n            val paren_level_length = paren_level_string.length\n\
    \            val paren_level_chars = paren_level_string.chars\n            val\
    \ paren_level_chars_length = paren_level_chars.length\n            val paren_level_chars_count\
    \ = paren_level_chars.length\n            val paren_level_chars_count_minus_1\
    \ = paren_level_chars_count - 1\n            val paren_level_chars_count_minus_2\
    \ = paren_level_chars_count_minus_1 - 1\n            val paren_level_chars_count_minus_3\
    \ = paren_level_chars_count_minus_2 - 1\n            val paren_level_chars_count_minus_4\
    \ = paren_level_chars_count_minus_3 - 1\n            val paren_level_chars_count_minus_5\
    \ = paren_level_chars_count_minus_4 - 1\n            val paren_level_chars_count_minus_6\
    \ = paren_level_chars_count_minus_5 - 1\n            val paren_level_chars_count_minus_7\
    \ = paren_level_chars_count_minus_6 - 1\n            val paren_level_chars_count_minus_8\
    \ = paren_level_chars_count_minus_7 - 1\n            val paren_level_chars_count_minus_9\
    \ = paren_level_chars_count_minus_8 - 1\n            val paren_level_chars_count_minus_10\
    \ = paren_level_chars_count_minus_9 - 1\n            val paren_level_chars_count_minus_11\
    \ = paren_level_chars_count_minus_10 - 1\n            val paren_level_chars_count_minus_12\
    \ = paren_level_chars_count_minus_11 - 1\n            val paren_level_chars_count_minus_13\
    \ = paren_level_chars_count_minus_12 - 1\n            val paren_level_chars_count_minus_14\
    \ = paren_level_chars_count_minus_13 - 1\n            val paren_level_chars_count_minus_15\
    \ = paren_level_chars_count_minus_14 - 1\n            val paren_level_chars_count_minus_16\
    \ = paren_level_chars_count_minus_15 - 1\n            val paren_level_chars_count_minus_17\
    \ = paren_level_chars_count_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_", "        val paren_list_string = paren_string.split(\"\
    \ \")\n        val paren_list_long = paren_list_string.map(x => x.toLong)\n  \
    \      val paren_list_long_list = paren_list_long.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n", "        val\
    \ paren_stack = mutable.Stack[Long]()\n        val paren_stack_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max = mutable.Stack[Long]()\n        val paren_stack_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n       \
    \ val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n      \
    \  val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n \
    \       val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_levels = paren_groups.foldLeft(0L) { (max_level, group) => if\
    \ (group > max_level) group else max_level }\n        val max_level = max_levels\
    \ + 1\n        val levels = paren_groups.map(_.toLong)\n        val levels_count\
    \ = levels.count(_ > 0)\n        val max_level_with_one = levels.count(_ == 1)\n\
    \        val max_level_with_zero = levels.count(_ == 0)\n        val max_level_with_one_or_zero\
    \ = levels.count(_ == 1) || levels.count(_ == 0)\n        val max_level_with_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n   \
    \     val max_level_with_zero_or_one_or_zero_or_one = levels.count(_ == 0) ||\
    \ levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n     \
    \   val max_level_with_zero_or_one_or_zero_or_one_or_zero = levels.count(_ ==\
    \ 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1) ||\
    \ levels.count(_ == 0)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n\
    \        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(", "        val paren_groups = paren_string.split(\" \")\n \
    \       val paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1\
    \ else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level.map(x => if (x == 0) 1 else 0)\n       \
    \ val paren_groups_with_paren_max_level_with_paren_sum = paren_groups_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level.map(x => if (x == 0)\
    \ 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level.map(x\
    \ => if (x == 0) 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ / paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach { s\
    \ =>\n            val paren_stack_size += s.length\n            paren_stack +=\
    \ s\n            paren_stack_top += s.length\n            paren_stack_top_size\
    \ += s.length\n        }\n\n        val paren_stack_top_size_max = paren_stack_top_size.max\n\
    \        val paren_stack_top_size_max_index = paren_stack_top_size.indexWhere(_\
    \ == paren_stack_top_size_max)\n\n        val paren_stack_top_size_max_index =\
    \ paren_stack_top_size_max_index + 1\n        val paren_stack_top_size_max_value\
    \ = paren_stack_top_size.toList.get(paren_stack_top_size_max_index)\n\n      \
    \  val paren_stack_top_size_max_value_length = paren_stack_top_size_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max = paren_stack_top_size_max_value_length.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_index = paren_stack_top_size_max_value_length_max_index\
    \ + 1\n        val paren_stack_top_size_max_value_length_max_value = paren_stack_top_size_max_value.toList.get(paren_stack_top_size_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length = paren_stack_top_size_max_value_length_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max = paren_stack_top_size_max_value_length_max_value.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_value_length\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index)\n\
    \n        val ", "        val paren_array = paren_string.split(\" \").toList\n\
    \        val paren_array_size = paren_array.size\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size.max\n\
    \        val paren_array_max_value = paren_array(paren_array_max_index)\n    \
    \    val paren_array_max_value_length = paren_array_max_value.length\n       \
    \ val paren_array_max_value_length = paren_array_max_value_length.toLong\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_2 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_3 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_4 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_5\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_6 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_7 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_8 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_9\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_10 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_11 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_12 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_13\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_14 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_15 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_16 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_17\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_18 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_19 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_20 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_21\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_22 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_23 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_24 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_25\
    \ = mutable.Stack[Long]()\n        ", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_list = new mutable.ListBuffer[Long]()\n        var paren_array_level\
    \ = 0\n        var paren_array_index = 0\n        var paren_array_level_count\
    \ = 0\n        while(paren_array_index < paren_array_size) {\n            val\
    \ paren_array_element = paren_array(paren_array_index)\n            val paren_array_element_size\
    \ = paren_array_element.length\n            val paren_array_element_level = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_end = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_level_end\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + paren_chars.map(_.toChar).map(_.toInt).sum\n\
    \        val paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren\
    \ + 1\n        val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren\
    \ + 2\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren\
    \ + 3\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren\
    \ + 4\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren\
    \ + 5\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren\
    \ + 6\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren\
    \ + 7\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren\
    \ + 8\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren\
    \ + 9\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren\
    \ + 10\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren\
    \ + 11\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren\
    \ + 12\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren\
    \ + 13\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren\
    \ + 14\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren\
    \ + 15\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren\
    \ + 16\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren\
    \ + 17\n        val paren_chars_count_with_paren_plus_eighteen = paren_chars_count_with_paren\
    \ + 18\n        val paren_chars_count_with_paren_plus_nineteen = paren_", "  \
    \      val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_levels = paren_chars.foldLeft(mutable.Stack[Long]())((stack, char) =>\
    \ {\n            if (char == '(') stack.push(1L)\n            else if (char ==\
    \ ')') stack.pop()\n            else stack\n        })\n        val max_level\
    \ = paren_levels.foldLeft(0L)((max_level, level) => if (level > max_level) level\
    \ else max_level)\n        val max_level_str = max_level.toString.padLeft(3, \"\
    0\")\n        val max_level_long = max_level_str.map(_.toLong)\n        val max_level_long_list\
    \ = max_level_long.toList\n        val max_level_long_list.reverse", "       \
    \ val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parens_sum\
    \ = paren_groups_with_parens.sum\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens.product\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product.toLong\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product + 1\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens_product - 1\n        val paren_groups_with_", " \
    \       val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(c => if (c == '(') 1 else 0).sum\n     \
    \   val paren_chars_count_max = paren_chars.map(c => if (c == '(') 1 else 0).max\n\
    \        val paren_chars_count_min = paren_chars.map(c => if (c == '(') 1 else\
    \ 0).min\n        val paren_chars_count_sum = paren_chars.map(c => if (c == '(')\
    \ 1 else 0).sum\n        val paren_chars_count_count_max = paren_chars.map(c =>\
    \ if (c == '(') 1 else 0).max\n        val paren_chars_count_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_array_list_size = paren_array_list.size\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_index2\
    \ = paren_array_list_size\n        val paren_array_list_index3 = paren_array_list_size\n\
    \        val paren_array_list_index4 = paren_array_list_size\n        val paren_array_list_index5\
    \ = paren_array_list_size\n        val paren_array_list_index6 = paren_array_list_size\n\
    \        val paren_array_list_index7 = paren_array_list_size\n        val paren_array_list_index8\
    \ = paren_array_list_size\n        val paren_array_list_index9 = paren_array_list_size\n\
    \        val paren_array_list_index10 = paren_array_list_size\n        val paren_array_list_index11\
    \ = paren_array_list_size\n        val paren_array_list_index12 = paren_array_list_size\n\
    \        val paren_array_list_index13 = paren_array_list_size\n        val paren_array_list_index14\
    \ = paren_array_list_size\n        val paren_array_list_index15 = paren_array_list_size\n\
    \        val paren_array_list_index16 = paren_array_list_size\n        val paren_array_list_index17\
    \ = paren_array_list_size\n        val paren_array_list_index18 = paren_array_list_size\n\
    \        val paren_array_list_index19 = paren_array_list_size\n        val paren_array_list_index20\
    \ = paren_array_list_size\n        val paren_array_list_index21 = paren_array_list_size\n\
    \        val paren_array_list_index22 = paren_array_list_size\n        val paren_array_list_index23\
    \ = paren_array_list_size\n        val paren_array_list_index24 = paren_array_list_size\n\
    \        val paren_array_list_index25 = paren_array_list_size\n        val paren_array_list_index26\
    \ = paren_array_list_size\n        val paren_array_list_index27 = paren_array_list_size\n\
    \        val paren_array_list_index28 = paren_array_list_size\n        val paren_array_list_index29\
    \ = paren_array_list_size\n        val paren_array_list_index30 = paren_array_list_size\n\
    \        val paren_array_list_index31 = paren_array_list_size\n        val paren_array_list_index32\
    \ = paren_", "        val paren_array = paren_string.split(\" \")\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_max_size = paren_array_size\
    \ - 1\n        val paren_array_max_index = paren_array_max_size - 1\n        val\
    \ paren_array_max_value = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        ", "        val paren_stack = mutable.Stack[String]()\n       \
    \ val paren_groups = paren_string.split(\" \")\n        val paren_group_lengths\
    \ = paren_groups.map(_.length).toList\n        val paren_group_max_len = paren_group_lengths.max\n\
    \        val paren_group_max_index = paren_group_lengths.indexWhere(x => x ==\
    \ paren_group_max_len)\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)\n        val paren_group_max_index\
    \ = paren_group_max_index + 1\n        val paren_group_max_value = paren_group_lengths(paren_group_max_index)\n\
    \        val paren_group_max_index = paren_group_max_index + 1\n        val paren_group_max_value\
    \ = paren_group_lengths(paren_group_max_index)", "        val paren_list_string\
    \ = paren_string.trim\n        val paren_list_array = paren_list_string.split(\"\
    \ \")\n        val paren_list_array_size = paren_list_array.length\n        val\
    \ paren_list_array_sorted = paren_list_array.sortWith((a, b) => a.compareTo(b)\
    \ == 0)\n        val paren_list_array_sorted_size = paren_list_array_sorted.length\n\
    \        val paren_list_array_sorted_size = paren_list_array_sorted_size.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n\
    \        val paren_list_array_sorted_size_long = paren_list_array_sorted_size_long.toLong\n",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size_array = paren_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_size = paren_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size = paren_array_max_size_array_size\
    \ - 1\n        val paren_array_max_size_array_max_size_array = paren_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size = paren_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array = paren_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_size = paren_array_max_size_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array.length\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size.map(_.toLong).toArray\n\
    \        val paren_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_size\
    \ = paren_array_max_size_array_max_size_array_max_", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_parens = paren_groups.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_parens_map\
    \ = paren_groups_with_parens.map(x => x.split(\"[\").map(y => y.replace(\"]\"\
    , \"\")).map(z => z.map(x => x.toLong)).toMap)\n        val paren_groups_with_parens_map_keys\
    \ = paren_groups_with_parens_map.keys\n        val paren_groups_with_parens_map_values\
    \ = paren_groups_with_parens_map.values\n        val paren_groups_with_parens_map_values_flat\
    \ = paren_groups_with_parens_map_values.flatten\n        val paren_groups_with_parens_map_values_flat_sorted\
    \ = paren_groups_with_parens_map_values_flat.sorted\n        val paren_groups_with_parens_map_values_flat_sorted_length\
    \ = paren_groups_with_parens_map_values_flat_sorted.length\n        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length - 1\n        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1 - 1\n     \
    \   val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1 - 1\n\
    \        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1\
    \ - 1\n        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1\
    \ - 1\n        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ - 1\n        val paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1\
    \ = paren_groups_with_parens_map_values_flat_sorted_length_minus_1_minus_1_min",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        val max_level_group_size = mutable.ListBuffer[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = getNestingLevel(paren_group)\n\
    \            if (paren_group_level > max_level) {\n                max_level =\
    \ paren_group_level\n                max_level_groups = paren_group\n        \
    \        max_level_group_size = paren_group_level\n            } else if (paren_group_level\
    \ == max_level) {\n                max_level_groups += paren_group\n         \
    \       max_level_group_size += paren_group_level\n            }\n        }\n\
    \        max_level_groups.toList", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_groups = List[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(_.length).toList\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_level_groups = paren_group_levels.toList\n            }\n      \
    \  }\n        max_level_groups", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.", "        val paren_array = paren_string.split(\" \")\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_max_size = paren_array_size\
    \ - 1\n        val paren_array_max_size_str = paren_array_max_size.toString\n\
    \        val paren_array_max_size_int = paren_array_max_size_str.asInstanceOf[Int]\n\
    \        val paren_array_max_size_long = paren_array_max_size_int.toLong\n   \
    \     val paren_array_max_size_longs = paren_array_max_size_long.toLong\n    \
    \    val paren_array_max_size_longs_str = paren_array_max_size_longs.toString\n\
    \        val paren_array_max_size_longs_int = paren_array_max_size_longs_str.asInstanceOf[Int]\n\
    \        val paren_array_max_size_longs_long = paren_array_max_size_longs_int.toLong\n\
    \        val paren_array_max_size_longs_longs = paren_array_max_size_longs_long.toLong\n\
    \        val paren_array_max_size_longs_longs_str = paren_array_max_size_longs_longs.toString\n\
    \        val paren_array_max_size_longs_longs_int = paren_array_max_size_longs_longs_str.asInstanceOf[Int]\n\
    \        val paren_array_max_size_longs_longs_long = paren_array_max_size_longs_longs_int.toLong\n\
    \        val paren_array_max_size_longs_longs_longs = paren_array_max_size_longs_longs_long.toLong\n\
    \        val paren_array_max_size_longs_longs_longs_str = paren_array_max_size_longs_longs_longs.toString\n\
    \        val paren_array_max_size_longs_longs_longs_int = paren_array_max_size_longs_longs_longs_str.asInstanceOf[Int]\n\
    \        val paren_array_max_size_longs_longs_longs_long = paren_array_max_size_longs_longs_longs_int.toLong\n\
    \        val paren_array_max_size_longs_longs_longs_longs = paren_array_max_size_longs_longs_longs_long.toLong\n\
    \        val paren_array_max_size_longs_longs_longs_longs_str = paren_array_max_size_longs_longs_longs_longs.toString\n\
    \        val paren_array_max_size_longs_longs_longs_longs_int = paren_array_max_size_longs_longs_longs_longs_str.asInstanceOf[Int]\n\
    \        val paren_array_max_size_longs_longs_longs_longs_long = paren_array_max_size_longs_longs_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_str = x.trim\n            val paren_str_length =\
    \ paren_str.length\n            if (paren_str_length == 0) return\n          \
    \  if (paren_str_length == 1) return\n            if (paren_stack_map.contains(paren_str))\
    \ {\n                paren_stack_map.put(paren_str, paren_stack_map.get(paren_str)\
    \ + 1)\n                return\n            }\n            paren_stack.push(paren_str)\n\
    \            paren_stack_map.put(paren_str, 1l.toLong)\n        })\n        val\
    \ paren_stack_list_length = paren_stack.size\n        val paren_stack_list_map\
    \ = paren_stack_map.toSeq.sortBy(_._2).reverse\n        val paren_stack_list_map_length\
    \ = paren_stack_list_map.size\n        val paren_stack_list_map_sorted = paren_stack_list_map.toSeq.sortBy(_._1)\n\
    \        val paren_stack_list_map_sorted_length = paren_stack_list_map_sorted.size\n\
    \        val paren_stack_list_map_sorted_length = paren_stack_list_map_sorted.size\n\
    \        val paren_stack_list_map_sorted_length_2 = paren_stack_list_map_sorted.take(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_3 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_4 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_5 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_6 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_7 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_8 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_9 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_length\
    \ / 2)\n        val paren_stack_list_map_sorted_length_10 = paren_stack_list_map_sorted.takeRight(paren_stack_list_map_sorted_",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        var paren_group_depth = 0\n        for\
    \ (paren_group <- paren_groups) {\n            paren_group_depth += 1\n      \
    \      if (paren_group.length == paren_group_depth) {\n                paren_groups_with_max_depth\
    \ += paren_group_depth\n            }\n        }\n        paren_groups_with_max_depth.toList",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_copy = paren_array.clone()\n \
    \       val paren_array_copy_size = paren_array_copy.length\n        val paren_array_copy_sorted\
    \ = paren_array_copy.sortWith(_ < _)\n        val paren_array_copy_sorted_size\
    \ = paren_array_copy_sorted.length\n        val paren_array_copy_sorted_sorted\
    \ = paren_array_copy_sorted.toList\n        val paren_array_copy_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted.toList\n        val paren_array_copy_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted.toList\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted.toList\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted.length\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted.toList\n        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted.length\n      \
    \  val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toList\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toList\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.toList\n\
    \        val paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_size\
    \ = paren_array_copy_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.length",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => (x, 1))\n        val paren_groups_with_counts_sorted\
    \ = paren_groups_with_counts.sortBy(_._2)\n        val paren_groups_with_counts_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted.takeWhile(_._2 > 1)\n        val paren_groups_with_counts_sorted_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count.maxBy(_._2)\n        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count_with_max_count.maxBy(_._2)\n\
    \        val paren_groups_with_counts_sorted_with_max_count_with_max_count_with_max_count_with_",
  "        val paren_list_string = paren_string.trim().split(\"\\\\s+\")\n       \
    \ val paren_list_long = paren_list_string.map(_.toLong).toList\n        val paren_list_long\
    \ = paren_list_long.sortBy(-_)\n        val paren_list_long = paren_list_long.reverse\n\
    \        val paren_list_long = paren_list_long.takeWhile(_ < paren_list_long.last)\n\
    \        val paren_list_long = paren_list_long.map(x => paren_list_long.indexOf(x)\
    \ + 1)\n        paren_list_long", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.HashMap[String, List[Long]]()\n       \
    \ paren_string.split(\"\\\\s+\").foreach(x => {\n            val paren_str = x.trim\n\
    \            if (paren_str.length == 0) return\n            if (paren_stack_map.contains(paren_str))\
    \ {\n                paren_stack_map.get(paren_str).foreach(y => paren_stack +=\
    \ paren_str)\n            } else {\n                paren_stack_map.put(paren_str,\
    \ paren_stack.toList)\n                paren_stack += paren_str\n            }\n\
    \        })\n        val max_levels = paren_stack_map.values.map(_.size).max\n\
    \        val max_levels_map = paren_stack_map.map(x => (x._1, x._2.size)).maxBy(_._2)\n\
    \        val max_level = max_levels_map._1\n        val max_level_str = max_levels_map._2\n\
    \        val max_level_long = max_level_str.asInstanceOf[Long]\n        val max_level_long_list\
    \ = max_level_long.toList.asInstanceOf[List[Long]]\n        val max_level_long_list\
    \ = max_level_long_list.filter(x => x > 0)\n        val max_level_long_list =\
    \ max_level_long_list.sortBy(x => -x)\n        val max_level_long_list = max_level_long_list.take(max_level_long_list.size)\n\
    \        val max_level_long_list = max_level_long_list.map(x => x.toLong)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x != 0)\n   \
    \     val max_level_long_list = max_level_long_list.sortBy(x => -x)\n        val\
    \ max_level_long_list = max_level_long_list.take(max_level_long_list.size)\n \
    \       val max_level_long_list = max_level_long_list.map(x => x.toLong)\n   \
    \     val max_level_long_list = max_level_long_list.filter(x => x != 0)\n    \
    \    val max_level_long_list = max_level_long_list.sortBy(x => -x)\n        val\
    \ max_level_long_list = max_level_long_list.take(max_level_long_list.size)\n \
    \       val max_level_long_list = max_level_long_list.map(x => x.toLong)\n   \
    \     val max_level_long_list = max_level_long_list.filter(x => x != 0)\n    \
    \    val max_level_long_list = max_level_long_list.sortBy(x => -x)\n        val\
    \ max_level_long_list = max_level_long_list.take(max_level_long_list.size)\n \
    \       val max_level_long_list = max_level_long_list.map(x => x.toLong)\n   \
    \     val max_level_long_list = max_level_long_list.filter(", "        val paren_groups\
    \ = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_parens = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\", \")\"))\n        val\
    \ paren_groups_with_parens_map = paren_groups_with_parens.map(x => x.split(\"\
    \ \")).map(x => (x(0), x(1)))\n        val paren_groups_with_parens_map_sorted\
    \ = paren_groups_with_parens_map.sortBy(x => x._1).reverse\n        val paren_groups_with_parens_map_sorted_with_parens\
    \ = paren_groups_with_parens_map_sorted.map(x => x._2).map(x => x.replaceAll(\"\
    \\\\(\", \"(\").replaceAll(\"\\\\)\", \")\"))\n        val paren_groups_with_parens_map_sorted_with_parens_map\
    \ = paren_groups_with_parens_map_sorted_with_parens.map(x => x.split(\" \")).map(x\
    \ => (x(0), x(1)))\n        val paren_groups_with_parens_map_sorted_with_parens_map_sorted\
    \ = paren_groups_with_parens_map_sorted_with_parens_map.sortBy(x => x._1).reverse\n\
    \        val paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens\
    \ = paren_groups_with_parens_map_sorted_with_parens_map_sorted.map(x => x._2).map(x\
    \ => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\", \")\"))\n        val\
    \ paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map =\
    \ paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens.map(x\
    \ => x.split(\" \")).map(x => (x(0), x(1)))\n        val paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted\
    \ = paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map.sortBy(x\
    \ => x._1).reverse\n        val paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted_with_parens\
    \ = paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted_with_parens_map.sortBy(x\
    \ => x._1).reverse\n        val paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted\
    \ = paren_groups_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted_with_parens_map_sorted.sortBy(x\
    \ => x._1).reverse\n        val paren_groups_with_parens_map_sorted_with_paren",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        paren_string.split(\"\\\\s+\").foreach(x\
    \ => {\n            val paren_level = paren_stack.size\n            val paren_level_map\
    \ = paren_stack_map.getOrElseUpdate(paren_level, paren_level)\n            val\
    \ paren_level_map_plus_one = paren_level_map + 1\n            paren_stack.push(paren_level_map_plus_one)\n\
    \            paren_stack_map.put(paren_level_map_plus_one, paren_level)\n    \
    \    })\n        val max_level = paren_stack_map.values.max\n        val max_level_map\
    \ = paren_stack_map.maxBy(_._1)\n        val max_level_map_plus_one = max_level_map._1\n\
    \        val max_level_map_plus_two = max_level_map_plus_one + 1\n        val\
    \ max_level_map_plus_three = max_level_map_plus_two + 1\n        val max_level_map_plus_four\
    \ = max_level_map_plus_three + 1\n        val max_level_map_plus_five = max_level_map_plus_four\
    \ + 1\n        val max_level_map_plus_six = max_level_map_plus_five + 1\n    \
    \    val max_level_map_plus_seven = max_level_map_plus_six + 1\n        val max_level_map_plus_eight\
    \ = max_level_map_plus_seven + 1\n        val max_level_map_plus_nine = max_level_map_plus_eight\
    \ + 1\n        val max_level_map_plus_ten = max_level_map_plus_nine + 1\n    \
    \    val max_level_map_plus_eleven = max_level_map_plus_ten + 1\n        val max_level_map_plus_twelve\
    \ = max_level_map_plus_eleven + 1\n        val max_level_map_plus_thirteen = max_level_map_plus_twelve\
    \ + 1\n        val max_level_map_plus_fourteen = max_level_map_plus_thirteen +\
    \ 1\n        val max_level_map_plus_fifteen = max_level_map_plus_fourteen + 1\n\
    \        val max_level_map_plus_sixteen = max_level_map_plus_fifteen + 1\n   \
    \     val max_level_map_plus_seventeen = max_level_map_plus_sixteen + 1\n    \
    \    val max_level_map_plus_eighteen = max_level_map_plus_seventeen + 1\n    \
    \    val max_level_map_plus_nineteen = max_level_map_plus_eighteen + 1\n     \
    \   val max_level_map_plus_twenty = max_level_map_plus_nineteen + 1\n        val\
    \ max_level_map_plus_twenty_one = max_level_map_plus_twenty + 1\n        val max_level_map_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_level_level = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_level_level_size = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_level_level_level_level_level_level_level_level_level_level_level_size\
    \ = mutable.Stack[Long]()\n        val ", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_levels = mutable.Stack[Int]()\n        val paren_levels_count\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index2 = mutable.Stack[Int]()\n        val paren_levels_count_max_index3\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index4 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index5 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index6 = mutable.Stack[Int]()\n        val paren_levels_count_max_index7\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index8 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index9 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index10 = mutable.Stack[Int]()\n        val paren_levels_count_max_index11\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index12 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index13 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index14 = mutable.Stack[Int]()\n        val paren_levels_count_max_index15\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index16 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index17 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index18 = mutable.Stack[Int]()\n        val paren_levels_count_max_index19\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index20 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index21 = mutable.Stack[Int]()\n        val\
    \ paren_levels_count_max_index22 = mutable.Stack[Int]()\n        val paren_levels_count_max_index23\
    \ = mutable.Stack[Int]()\n        val paren_levels_count_max_index24 = mutable.Stack[Int]()\n\
    \        val paren_levels_count_max_index25", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_copy = paren_stack.deep\n        paren_stack_copy +=\
    \ 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0\n       \
    \ paren_stack_copy += 0\n        paren_stack_copy += 0\n        paren_stack_copy\
    \ += 0\n        paren_stack_copy += 0\n        paren_stack_copy += 0", "     \
    \   val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(x => x.split(\"(\"))\n        val paren_groups_with_paren_groups_flattened\
    \ = paren_groups_with_paren_groups.flatten\n        val paren_groups_with_paren_groups_flattened_sorted\
    \ = paren_groups_with_paren_groups_flattened.sortBy(x => x.length)\n        val\
    \ paren_groups_with_paren_groups_flattened_sorted_with_paren_groups = paren_groups_with_paren_groups_flattened_sorted.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flattened_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x ",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size_max = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size_max_index = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index2 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index3 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index4 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index5 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index6 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index7 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index8 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index9 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index10 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index11 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index12 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index13 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index14 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index15 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index16 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index17 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index18 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index19 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index20 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_index21 = mutable.ListBuffer.empty[Long]\n\
    \        val paren_", "        val paren_array = paren_string.split(\" \")\n \
    \       val paren_array_size = paren_array.length\n        val paren_array_list\
    \ = mutable.ArrayBuffer.empty[Long]\n        val paren_array_list_size = paren_array_list.size\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_index_max\
    \ = paren_array_list_size\n        val paren_array_list_index_min = paren_array_list_size\n\
    \        val paren_array_list_index_max_min = 0\n        val paren_array_list_index_max_min_index\
    \ = 0\n        val paren_array_list_index_max_min_index2 = 0\n        val paren_array_list_index_max_min_index3\
    \ = 0\n        val paren_array_list_index_max_min_index4 = 0\n        val paren_array_list_index_max_min_index5\
    \ = 0\n        val paren_array_list_index_max_min_index6 = 0\n        val paren_array_list_index_max_min_index7\
    \ = 0\n        val paren_array_list_index_max_min_index8 = 0\n        val paren_array_list_index_max_min_index9\
    \ = 0\n        val paren_array_list_index_max_min_index10 = 0\n        val paren_array_list_index_max_min_index11\
    \ = 0\n        val paren_array_list_index_max_min_index12 = 0\n        val paren_array_list_index_max_min_index13\
    \ = 0\n        val paren_array_list_index_max_min_index14 = 0\n        val paren_array_list_index_max_min_index15\
    \ = 0\n        val paren_array_list_index_max_min_index16 = 0\n        val paren_array_list_index_max_min_index17\
    \ = 0\n        val paren_array_list_index_max_min_index18 = 0\n        val paren_array_list_index_max_min_index19\
    \ = 0\n        val paren_array_list_index_max_min_index20 = 0\n        val paren_array_list_index_max_min_index21\
    \ = 0\n        val paren_array_list_index_max_min_index22 = 0\n        val paren_array_list_index_max_min_index23\
    \ = 0\n        val paren_array_list_index_max_min_index24 = 0\n        val paren_array_list_index_max_min_index25\
    \ = 0\n        val paren_array_list_index_max_min_index26 = 0\n        val paren_array_list_index_max_min_index27\
    \ = 0\n        val paren_array_list_index_max_min_index28 = 0\n        val paren_array_list_index_max_min_index29\
    \ = 0\n        val paren_array_list_index_max_min_index30 = 0\n        val paren_array_list_index_max_min_index31\
    \ = 0\n        val paren_array_list_index_max_min", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_parens = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_parens_with_depth\
    \ = paren_groups_with_parens.map(x => x.split(\"\\\\(\"))\n        val paren_groups_with_parens_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth.map(x => x.map(y => y.split(\"\\\\)\"\
    )))\n        val paren_groups_with_parens_with_depth_with_depth_with_depth = paren_groups_with_parens_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.split(\"\\\\)\")))\n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth.map(x => x.map(y\
    \ => y.map(z => z.map(w => w.split(\"\\\\)\")))) \n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.split(\"\\\\)\")))) ) \n  \
    \      val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.split(\"\\\\)\"\
    )))) ) \n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.map(y => y.map(z => z.split(\"\
    \\\\)\")))) ) \n        val paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth\
    \ = paren_groups_with_parens_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth_with_depth.map(x\
    \ => x.map(y ", "        val paren_groups = paren_string.split(\" \")\n      \
    \  val paren_groups_with_parentheses = paren_groups.map(x => if (x == \"(\") 1\
    \ else 0)\n        val paren_groups_with_parentheses_sum = paren_groups_with_parentheses.sum\n\
    \        val paren_groups_with_parentheses_count = paren_groups_with_parentheses.count\n\
    \        val paren_groups_with_parentheses_max_count = paren_groups_with_parentheses_count\
    \ - 1\n        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_count\n        val paren_groups_with_parentheses_max_index\
    \ = paren_groups_with_parentheses.indexOf(paren_groups_with_parentheses_max_sum)\n\
    \        val paren_groups_with_parentheses_max_index = if (paren_groups_with_parentheses_max_index\
    \ == -1) paren_groups_with_parentheses_max_index else paren_groups_with_parentheses_max_index\
    \ + 1\n        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_index\n        val paren_groups_with_parentheses_max_count\
    \ = paren_groups_with_parentheses_count - paren_groups_with_parentheses_max_index\n\
    \        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_count\n        val paren_groups_with_parentheses_max_index\
    \ = paren_groups_with_parentheses.indexOf(paren_groups_with_parentheses_max_sum)\n\
    \        val paren_groups_with_parentheses_max_index = if (paren_groups_with_parentheses_max_index\
    \ == -1) paren_groups_with_parentheses_max_index else paren_groups_with_parentheses_max_index\
    \ + 1\n        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_index\n        val paren_groups_with_parentheses_max_count\
    \ = paren_groups_with_parentheses_count - paren_groups_with_parentheses_max_index\n\
    \        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_count\n        val paren_groups_with_parentheses_max_index\
    \ = paren_groups_with_parentheses.indexOf(paren_groups_with_parentheses_max_sum)\n\
    \        val paren_groups_with_parentheses_max_index = if (paren_groups_with_parentheses_max_index\
    \ == -1) paren_groups_with_parentheses_max_index else paren_groups_with_parentheses_max_index\
    \ + 1\n        val paren_groups_with_parentheses_max_sum = paren_groups_with_parentheses_sum\
    \ - paren_groups_with_parentheses_max_index\n        val paren_groups_with_parentheses_max_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach(x =>\
    \ {\n            if (x.equals(\"(\")) {\n                paren_stack.push(x.toLong)\n\
    \                paren_stack_size.push(x.toLong)\n                paren_stack_top.push(x.toLong)\n\
    \                paren_stack_top_size.push(x.toLong)\n            } else if (x.equals(\"\
    )\")) {\n                val paren_stack_top = paren_stack_top.pop()\n       \
    \         val paren_stack_size = paren_stack_size.pop()\n                val paren_stack_top_size\
    \ = paren_stack_top_size.pop()\n                val paren_stack_top_size = paren_stack_top_size\n\
    \                val paren_stack = paren_stack\n                val paren_stack_size\
    \ = paren_stack_size\n                val paren_stack_top = paren_stack_top\n\
    \                val paren_stack_top_size = paren_stack_top_size\n           \
    \     val paren_stack_top_size = paren_stack_top_size\n                val paren_stack\
    \ = paren_stack\n                val paren_stack_size = paren_stack_size\n   \
    \             val paren_stack_top = paren_stack_top\n                val paren_stack_top_size\
    \ = paren_stack_top_size\n                val paren_stack_top_size = paren_stack_top_size\n\
    \                val paren_stack = paren_stack\n                val paren_stack_size\
    \ = paren_stack_size\n                val paren_stack_top = paren_stack_top\n\
    \                val paren_stack_top_size = paren_stack_top_size\n           \
    \     val paren_stack_top_size = paren_stack_top_size\n                val paren_stack\
    \ = paren_stack\n                val paren_stack_size = paren_stack_size\n   \
    \             val paren_stack_top = paren_stack_top\n                val paren_stack_top_size\
    \ = paren_stack_top_size\n                val paren_stack_top_size = paren_stack_top_size\n\
    \                val paren_stack = paren_stack\n                val paren_stack_size\
    \ = paren_stack_size\n                val paren_stack_top = paren_stack_top\n\
    \                val paren_stack_top_size = paren_stack_top_size\n           \
    \     val paren_stack_top_size = paren_stack_top_size\n                val paren_stack\
    \ = paren_stack\n                val paren_stack_size = paren_stack_size\n   \
    \             val paren_stack_top = paren_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexSize = mutable.Stack[Long]()\n       \
    \ val paren_stack_top_count_indexCount = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndex =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren = mutable.Stack[String]()\n \
    \       val paren_stack_with_paren_within_paren_within_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren_within_paren_within_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.", "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountSize =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCount =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_counts = paren_groups.map(x => x.split(\"\
    (\").map(y => y.split(\")\").map(z => (z.length, z.length + 1))).toList\n    \
    \    val paren_groups_with_counts_sorted = paren_groups_with_counts.sortBy(_._1).reverse\n\
    \        val max_count = paren_groups_with_counts_sorted.head._2\n        val\
    \ max_count_index = paren_groups_with_counts_sorted.length - 1\n        val max_count_index\
    \ = paren_groups_with_counts_sorted.length - 1\n        val max_count_index =\
    \ paren_groups_with_counts_sorted.length - 1\n        val max_count_index = paren_groups_with_counts_sorted.length\
    \ - 1\n        val max_count_index = paren_groups_with_counts_sorted.length -\
    \ 1\n        val max_count_index = paren_groups_with_counts_sorted.length - 1\n\
    \        val max_count_index = paren_groups_with_counts_sorted.length - 1\n  \
    \      val max_count_index = paren_groups_with_counts_sorted.length - 1\n    \
    \    val max_count_index = paren_groups_with_counts_sorted.length - 1\n      \
    \  val max_count_index = paren_groups_with_counts_sorted.length - 1\n        val\
    \ max_count_index = paren_groups_with_counts_sorted.length - 1\n        val max_count_index\
    \ = paren_groups_with_counts_sorted.length - 1\n        val max_count_index =\
    \ paren_groups_with_counts_sorted.length - 1\n        val max_count_index = paren_groups_with_counts_sorted.length\
    \ - 1\n        val max_count_index = paren_groups_with_counts_sorted.length -\
    \ 1\n        val max_count_index = paren_groups_with_counts_sorted.length - 1\n\
    \        val max_count_index = paren_groups_with_counts_sorted.length - 1\n  \
    \      val max_count_index = paren_groups_with_counts_sorted.length - 1\n    \
    \    val max_count_index = paren_groups_with_counts_sorted.length - 1\n      \
    \  val max_count_index = paren_groups_with_counts_sorted.length - 1\n        val\
    \ max_count_index = paren_groups_with_counts_sorted.length - 1\n        val max_count_index\
    \ = paren_groups_with_counts_sorted.length - 1\n        val max_count_index =\
    \ paren_groups_with_counts_sorted.length - 1\n        val max_count_index = paren_groups_with_counts_sorted.length\
    \ - 1\n        val max_count_index = paren_groups_with_counts_sorted.length -\
    \ 1\n        val max_count_index = paren_groups_with_counts_sorted.length - 1\n\
    \        val max_count_index = paren_groups_with_", "        val paren_groups\
    \ = paren_string.split(\" \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0l)\
    \ { (max_levels, group) =>\n            val current_levels = max_levels\n    \
    \        val current_level = current_levels + group\n            if (current_level\
    \ > max_levels) max_levels = current_level\n            current_levels\n     \
    \   }\n        val max_levels = max_levels + 1\n        val max_levels_str = max_levels.toString.toLong.toString\n\
    \        val max_levels_str = max_levels_str.substring(0, max_levels_str.length-1)\n\
    \        val max_levels_str = max_levels_str + \")\"\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + ", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_groups = paren_string.split(\"\\\
    \\s+\")\n        val max_level = 0\n        val max_level_groups = mutable.ListBuffer[String]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_level\
    \ = getNestingLevel(paren_group)\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_groups\
    \ = paren_group\n            }\n        }\n        max_level_groups.toList", " \
    \       val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\").map(y => y.split(\")\").map(z => z.split(\"\
    )\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\")\").map(z\
    \ => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\"\
    )\").map(z => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y\
    \ => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\"\
    )\").map(y => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\")\").map(x\
    \ => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\"\
    )\").map(x => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\")\").map(w\
    \ => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\"\
    )\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\")\").map(z\
    \ => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\"\
    )\").map(z => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y\
    \ => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\"\
    )\").map(y => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\")\").map(x\
    \ => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\")\").map(w => w.split(\"\
    )\").map(x => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\")\").map(w\
    \ => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\")\").map(z => z.split(\"\
    )\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\")\").map(z\
    \ => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y => y.split(\"\
    )\").map(z => z.split(\")\").map(w => w.split(\")\").map(x => x.split(\")\").map(y\
    \ => y.split(\")\").", "        val paren_stack = mutable.Stack[String]()\n  \
    \      val paren_levels = mutable.Stack[Int]()\n        paren_string.split(\"\\\
    \\s+\").foreach(x => {\n            val paren_level = x.count(\"(\") - x.count(\"\
    )\")\n            if (paren_level > paren_levels.last) {\n                paren_levels.push(paren_level)\n\
    \            } else if (paren_level < paren_levels.last) {\n                paren_levels.pop()\n\
    \            }\n            val paren_str = x\n            if (paren_level > 0)\
    \ {\n                paren_stack.push(paren_str)\n            } else {\n     \
    \           val paren_str = paren_stack.pop()\n                paren_levels.push(paren_str.count(\"\
    (\") - paren_str.count(\")\"))\n            }\n        })\n        paren_levels.reverse.map(x\
    \ => x.toLong).toList", "        val paren_list_string = paren_string.trim\n \
    \       val paren_list_array = paren_list_string.split(\" \")\n        val paren_list_array_size\
    \ = paren_list_array.length\n        val paren_list_array_max_size = paren_list_array_size\
    \ - 1\n        val paren_list_array_max_size_array = paren_list_array.take(paren_list_array_max_size)\n\
    \        val paren_list_array_max_size_array_size = paren_list_array_max_size_array.length\n\
    \        val paren_list_array_max_size_array_max_size = paren_list_array_max_size_array_size\
    \ - 1\n        val paren_list_array_max_size_array_max_size_array = paren_list_array_max_size_array.take(paren_list_array_max_size_array_max_size)\n\
    \        val paren_list_array_max_size_array_max_size_array_size = paren_list_array_max_size_array_max_size_array.length\n\
    \        val paren_list_array_max_size_array_max_size_array_max_size = paren_list_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_list_array_max_size_array_max_size_array_max_size_array\
    \ = paren_list_array_max_size_array_max_size_array_max_size.take(paren_list_array_max_size_array_max_size_array_max_size_array_size)\n\
    \        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size - 1\n\
    \        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size.take(paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_size)\n\
    \        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ - 1\n        val paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size_array_max_size\
    \ = paren_list_array_max_size_array_max_size_array_max_size_array_max_size_array_max_",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_plus_one\
    \ = paren_chars_count + 1\n        val paren_chars_count_plus_two = paren_chars_count_plus_one\
    \ + 2\n        val paren_chars_count_plus_three = paren_chars_count_plus_two +\
    \ 2\n        val paren_chars_count_plus_four = paren_chars_count_plus_three +\
    \ 2\n        val paren_chars_count_plus_five = paren_chars_count_plus_four + 2\n\
    \        val paren_chars_count_plus_six = paren_chars_count_plus_five + 2\n  \
    \      val paren_chars_count_plus_seven = paren_chars_count_plus_six + 2\n   \
    \     val paren_chars_count_plus_eight = paren_chars_count_plus_seven + 2\n  \
    \      val paren_chars_count_plus_nine = paren_chars_count_plus_eight + 2\n  \
    \      val paren_chars_count_plus_ten = paren_chars_count_plus_nine + 2\n    \
    \    val paren_chars_count_plus_eleven = paren_chars_count_plus_ten + 2\n    \
    \    val paren_chars_count_plus_twelve = paren_chars_count_plus_eleven + 2\n \
    \       val paren_chars_count_plus_thirteen = paren_chars_count_plus_twelve +\
    \ 2\n        val paren_chars_count_plus_fourteen = paren_chars_count_plus_thirteen\
    \ + 2\n        val paren_chars_count_plus_fifteen = paren_chars_count_plus_fourteen\
    \ + 2\n        val paren_chars_count_plus_sixteen = paren_chars_count_plus_fifteen\
    \ + 2\n        val paren_chars_count_plus_seventeen = paren_chars_count_plus_sixteen\
    \ + 2\n        val paren_chars_count_plus_eighteen = paren_chars_count_plus_seventeen\
    \ + 2\n        val paren_chars_count_plus_nineteen = paren_chars_count_plus_eighteen\
    \ + 2\n        val paren_chars_count_plus_twenty = paren_chars_count_plus_nineteen\
    \ + 2\n        val paren_chars_count_plus_twenty_one = paren_chars_count_plus_twenty\
    \ + 1\n        val paren_chars_count_plus_twenty_two = ", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_parentheses = paren_groups.map(x\
    \ => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parentheses_sum\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_product\
    \ = paren_groups_with_parentheses.product\n        val paren_groups_with_parentheses_product\
    \ = paren_groups_with_parentheses_product.toLong\n        val paren_groups_with_parentheses_product_sum\
    \ = (paren_groups_with_parentheses_product * paren_groups_with_parentheses_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_sum = (paren_groups_with_parentheses_product_sum\
    \ * paren_groups_with_parentheses_product_sum).toLong\n        val paren_groups_with_parentheses_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_sum * paren_groups_with_parentheses_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_sum * paren_groups_with_parentheses_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_sum * paren_groups_with_parentheses_product_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_product_sum\
    \ * paren_groups_with_parentheses_product_product_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_product_product_sum\
    \ * paren_groups_with_parentheses_product_product_product_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_product_product_product_sum\
    \ * paren_groups_with_parentheses_product_product_product_product_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_sum\
    \ * paren_groups_with_parentheses_product_product_product_product_product_product_product_product_sum).toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_sum\
    \ = (paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_sum\
    \ * paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_sum",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted = mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse = mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse_sorted = mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse = mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted =\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = mutable.", "        val paren_chars = paren_string.chars\n        val paren_chars_size\
    \ = paren_chars.length\n        val paren_chars_array = paren_chars.toArray\n\
    \        val paren_chars_array_size = paren_chars_array.length\n        val paren_chars_array_copy\
    \ = paren_chars_array.clone()\n        val paren_chars_array_copy_size = paren_chars_array_copy.length\n\
    \        val paren_chars_array_copy_copy_array = paren_chars_array_copy.clone()\n\
    \        val paren_chars_array_copy_copy_array_size = paren_chars_array_copy_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array = paren_chars_array_copy_copy_array.clone()\n\
    \        val paren_chars_array_copy_copy_array_copy_array_size = paren_chars_array_copy_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_size = paren_chars_array_copy_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array.length\n\
    \        val paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_size\
    \ = paren_chars_array_copy_copy_array_copy_array_copy_array_copy_array_copy_array_copy_array_copy_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len = mutable.Stack[Long]()\n   \
    \     val paren_stack_len_len_len_len_len_len_len = mutable.Stack[Long]()\n  \
    \      val paren_stack_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_len_len_", "        val\
    \ paren_chars = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count\
    \ = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren =\
    \ paren_chars.map(_.length + 1).sum\n        val paren_chars_count_with_paren_plus_one\
    \ = paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren_plus_one + 1\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren_plus_two + 1\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren_plus_three + 1\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren_plus_four + 1\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren_plus_five + 1\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren_plus_six + 1\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren_plus_seven + 1\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren_plus_eight + 1\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren_plus_nine + 1\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren_plus_ten + 1\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren_plus_eleven + 1\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren_plus_twelve + 1\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren_plus_thirteen + 1\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren_plus_fourteen + 1\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren_plus_fifteen + 1\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren_plus_sixteen + 1\n        val paren_", "    \
    \    val paren_groups = paren_string.split(\" \")\n        val max_level = 0\n\
    \        val max_level_groups = List[String]()\n        for (paren_group <- paren_groups)\
    \ {\n            val paren_group_levels = paren_group.split(\"\\\\(\").map(_.length).toList\n\
    \            if (paren_group_levels.max > max_level) {\n                max_level\
    \ = paren_group_levels.max\n                max_level_groups = paren_group.split(\"\
    \\\\(\")\n            }\n        }\n        max_level_groups.map(_.length).toList",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_levels = mutable.Map[Long,\
    \ Int]()\n        paren_string.split(\"\\\\s+\").foreach { s =>\n            val\
    \ level = paren_levels.getOrElseUpdate(s.toLong, 0) + 1\n            paren_stack\
    \ += level\n            paren_levels += (s.toLong -> level)\n        }\n     \
    \   val max_level = paren_stack.max\n        val max_level_parens = paren_stack.take(max_level)\n\
    \        val max_level_parens_string = max_level_parens.mkString(\" \")\n    \
    \    val max_level_parens_length = max_level_parens_string.length\n        val\
    \ max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length\n\
    \        val max_level_parens_length = max_level_parens_length + max_level_parens_length",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.length).toList\n\
    \        val paren_groups_with_paren_length_sorted = paren_groups_with_paren.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted.map(x => x.length).toList\n        val\
    \ paren_groups_with_paren_length_sorted_length_sorted = paren_groups_with_paren_length_sorted.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length.sortBy(x => x.length).reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted.sortBy(x => x.length).reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length.sortBy(x => x.length).reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.sortBy(x\
    \ => x.length).reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_copy\
    \ = paren_array.clone()\n        val paren_array_copy_size = paren_array_copy.length\n\
    \        val paren_array_copy_copy = paren_array_copy.clone()\n        val paren_array_copy_copy_copy\
    \ = paren_array_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n       \
    \ val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n  \
    \      val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.clone()\n\
    \        val paren_array_copy_copy_copy_copy_copy_copy_copy_copy_copy_", "   \
    \     val paren_stack = mutable.Stack[String]()\n        val paren_stack_map =\
    \ mutable.HashMap[String, List[Long]]()\n        paren_string.split(\"\\\\s+\"\
    ).foreach(x => {\n            val paren_stack = paren_stack\n            val paren_stack_map\
    \ = paren_stack_map\n            if (paren_stack.nonEmpty) {\n               \
    \ val paren_str = paren_stack.last\n                val paren_stack_map_key =\
    \ paren_str\n                val paren_stack_map_value = paren_stack_map.getOrElseUpdate(paren_str,\
    \ mutable.ListBuffer.empty)\n                val paren_stack_map_value_size =\
    \ paren_stack_map_value.size\n                val paren_stack_map_value_last_element\
    \ = paren_stack_map_value.last\n                val paren_stack_map_value_last_element_size\
    \ = paren_stack_map_value_last_element.size\n                if (paren_stack_map_value_last_element_size\
    \ == paren_stack_map_value_size + 1) {\n                    paren_stack_map_value_last_element\
    \ += x\n                } else {\n                    paren_stack_map_value +=\
    \ x\n                }\n            } else {\n                paren_stack_map\
    \ += x -> 1\n            }\n        })\n        val max_level = paren_stack_map.values.max\n\
    \        val max_level_str = max_level.mkString(\",\")\n        val max_level_long\
    \ = max_level.toLong\n        val max_level_long_list = max_level_long.toString.split(\"\
    ,\")\n        val max_level_long_list = max_level_long_list.map(x => x.toLong)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val max_level_long_list = max_level_long_list.filter(x => x < max_level_long)\n\
    \        val max_level_long_list = max_level_long_list.filter(x => x > 0)\n  \
    \      val ", "        val paren_groups = paren_string.split(\" \")\n        val\
    \ paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1 else 0)\n\
    \        val paren_groups_with_paren_sum = paren_groups_with_paren.sum\n     \
    \   val paren_groups_with_paren_max_index = paren_groups_with_paren.zipWithIndex.maxBy(_._1)._1\n\
    \        val paren_groups_with_paren_max_index_value = paren_groups_with_paren_max_index.toLong\n\
    \        val paren_groups_with_paren_max_index_value_plus_one = paren_groups_with_paren_max_index_value\
    \ + 1\n        val paren_groups_with_paren_max_index_value_minus_one = paren_groups_with_paren_max_index_value\
    \ - 1 \n        val paren_groups_with_paren_max_index_value_plus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_plus_one + 1\n        val paren_groups_with_paren_max_index_value_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_value_minus_one - 1\n        val paren_groups_with_paren_max_index_value_plus_one_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_plus_one_plus_one + 1\n        val\
    \ paren_groups_with_paren_max_index_value_minus_one_minus_one_minus_one = paren_groups_with_paren_max_index_value_minus_one_minus_one\
    \ - 1\n        val paren_groups_with_paren_max_index_value_plus_one_minus_one_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_plus_one_minus_one_plus_one + 1\n\
    \        val paren_groups_with_paren_max_index_value_minus_one_minus_one_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_value_minus_one_minus_one_minus_one - 1\n\
    \        val paren_groups_with_paren_max_index_value_plus_one_minus_one_minus_one_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_plus_one_minus_one_minus_one_plus_one\
    \ + 1\n        val paren_groups_with_paren_max_index_value_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n        val paren_groups_with_paren_max_index_value_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_value_plus_one_minus_one_", "        val\
    \ paren_groups = paren_string.split(\" \")\n        val max_level = 0\n      \
    \  val max_level_groups = mutable.ListBuffer[String]()\n        paren_groups.foreach(group\
    \ => {\n            val group_levels = parseNestedParens(group)\n            if\
    \ (group_levels.size > max_level) {\n                max_level = group_levels.size\n\
    \                max_level_groups = group_levels\n            }\n        })\n\
    \        max_level_groups.toList", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_map = mutable.HashMap[Long, Long]()\n        val paren_stack_map_keys\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_keys = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_values_values = mutable.HashMap[Long, Long]()\n \
    \       val paren_stack_map_values_values_keys = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.HashMap[Long, Long]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_keys = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.HashMap[Long,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys_keys_values\
    \ = mutable.HashMap[Long, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys_keys_keys_values_values\
    \ = mutable.Hash", "        val paren_groups = paren_string.split(\" \")\n   \
    \     val paren_groups_with_paren = paren_groups.map(x => x.replace(\"(\", \"\
    (\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length).toList\n        val paren_groups_with_paren_length_sorted = paren_groups_with_paren_length.sort\n\
    \        val paren_groups_with_paren_length_sorted_length = paren_groups_with_paren_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted = paren_groups_with_paren_length_sorted.reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length = paren_groups_with_paren_length_sorted_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted.reverse\n        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.last\n \
    \       val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted.reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted.reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.reverse\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.last\n\
    \        val paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted\
    \ = paren_groups_with_paren_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted_length_sorted.reverse\n",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_level = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_level_length = mutable.Stack[Long]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Long]()\n        val paren_stack_max_level_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, Long]()\n        val paren_stack_map_size = mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_size_size = mutable.HashMap[String, Long]()\n\
    \        val paren_stack_map_size_size_size= mutable.HashMap[String, Long]()\n\
    \        val paren_stack_map_size_size_size_size= mutable.HashMap[String, Long]()\n\
    \        val paren_stack_map_size_size_size_size_size= mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_size_size_size_size_size_size= mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_size_size_size_size_size_size_size= mutable.HashMap[String,\
    \ Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size=\
    \ mutable.HashMap[String, Long]()\n        val paren_stack_map_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size_size",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(x => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n   \
    \     val paren_groups_with_paren_groups_sorted = paren_groups_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\"))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups.sortBy(x => x.length)\n\
    \        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_", "        val paren_array = paren_string.split(\" \")\n        val\
    \ paren_array_size = paren_array.length\n        val paren_array_max_size = paren_array_size\
    \ - 1\n        val paren_array_max_index = paren_array_max_size - 1\n        val\
    \ paren_array_max_value = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_max_index\
    \ = paren_array_max_value_length - 1\n        val paren_array_max_value_max_value\
    \ = paren_array_max_value(paren_array_max_value_max_index)\n        val paren_array_max_value_max_value_length\
    \ = paren_array_max_value_max_value.length\n        val paren_array_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_length - 1\n        val paren_array_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value(paren_array_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value = paren_array_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value.length\n   \
    \     val paren_array_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_length - 1\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_max_value.length\n\
    \        val paren", "        val paren_groups = paren_string.split(\" \")\n \
    \       val paren_groups_with_paren = paren_groups.map(x => x.replace(\"(\", \"\
    ( \").replace(\")\", \" )\").replaceAll(\"\\\\)\\\\)\", \"))\"))\n        val\
    \ paren_groups_with_paren_length = paren_groups_with_paren.map(x => x.split(\"\
    \ \").length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_group", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_levels = mutable.Map[Long, Int]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val level = paren_levels.getOrElse(x, 0)\n\
    \            paren_levels += x -> level\n            paren_stack += level\n  \
    \      })\n        val max_level = paren_stack.max\n        val max_level_parens\
    \ = paren_stack.take(max_level).mkString(\"(\", \")\")\n        val max_level_parens_count\
    \ = paren_stack.take(max_level).size\n        val max_level_parens_count_str =\
    \ max_level_parens.size match {\n            case 0 => \"0\"\n            case\
    \ 1 => max_level_parens.head.toString\n            case _ => max_level_parens.take(max_level).mkString(\"\
    (\", \")\")\n        }\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" levels\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of nesting\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of string\"\n        val max_level_parens_count_str = max_level_parens_count_str\
    \ + \" of parentheses\"\n        val ", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_map\
    \ = mutable.HashMap[String, List[Long]]()\n        val paren_groups_map_size =\
    \ paren_groups_map.size\n        val paren_groups_map_size_max = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_min = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_mid = paren_groups_map_size + 1\n        val paren_groups_map_size_min\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_max = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_mid = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_min = paren_groups_map_size + 1\n        val paren_groups_map_size_max\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_mid = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_min = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_max = paren_groups_map_size + 1\n        val paren_groups_map_size_mid\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_min = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_max = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_mid = paren_groups_map_size + 1\n        val paren_groups_map_size_min\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_max = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_mid = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_min = paren_groups_map_size + 1\n        val paren_groups_map_size_max\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_mid = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_min = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_max = paren_groups_map_size + 1\n        val paren_groups_map_size_mid\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_min = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_max = paren_groups_map_size + 1\n   \
    \     val paren_groups_map_size_mid = paren_groups_map_size + 1\n        val paren_groups_map_size_min\
    \ = paren_groups_map_size + 1\n        val paren_groups_map_size_max = paren_groups_map_size\
    \ + 1\n        val paren_groups_map_size_mid = paren_groups_map_size + 1\n   \
    \     ", "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"()\").map(x => x.toLong))\n        val paren_groups_with_counts_sorted\
    \ = paren_groups_with_counts.sortBy(x => x._2)\n        val paren_groups_with_counts_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted.takeWhile(x => x._2 > 1).map(x => (x._1, x._2)).toList\n\
    \        val paren_groups_with_counts_sorted_with_max_count_sorted = paren_groups_with_counts_sorted_with_max_count.sortBy(x\
    \ => x._1)\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted.takeWhile(x => x._2\
    \ > 1).map(x => (x._1, x._2)).toList\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count.sortBy(x\
    \ => x._1)\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted.takeWhile(x\
    \ => x._2 > 1).map(x => (x._1, x._2)).toList\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(x\
    \ => x._1)\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.takeWhile(x\
    \ => x._2 > 1).map(x => (x._1, x._2)).toList\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count.sortBy(x\
    \ => x._1)\n        val paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count\
    \ = paren_groups_with_counts_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted_with_max_count_sorted.takeWhile(x\
    \ => x._2 ", "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_copy\
    \ = mutable.Stack[String]()\n        val paren_stack_copy2 = mutable.Stack[String]()\n\
    \        val paren_stack_copy3 = mutable.Stack[String]()\n        val paren_stack_copy4\
    \ = mutable.Stack[String]()\n        val paren_stack_copy5 = mutable.Stack[String]()\n\
    \        val paren_stack_copy6 = mutable.Stack[String]()\n        val paren_stack_copy7\
    \ = mutable.Stack[String]()\n        val paren_stack_copy8 = mutable.Stack[String]()\n\
    \        val paren_stack_copy9 = mutable.Stack[String]()\n        val paren_stack_copy10\
    \ = mutable.Stack[String]()\n        val paren_stack_copy11 = mutable.Stack[String]()\n\
    \        val paren_stack_copy12 = mutable.Stack[String]()\n        val paren_stack_copy13\
    \ = mutable.Stack[String]()\n        val paren_stack_copy14 = mutable.Stack[String]()\n\
    \        val paren_stack_copy15 = mutable.Stack[String]()\n        val paren_stack_copy16\
    \ = mutable.Stack[String]()\n        val paren_stack_copy17 = mutable.Stack[String]()\n\
    \        val paren_stack_copy18 = mutable.Stack[String]()\n        val paren_stack_copy19\
    \ = mutable.Stack[String]()\n        val paren_stack_copy20 = mutable.Stack[String]()\n\
    \        val paren_stack_copy21 = mutable.Stack[String]()\n        val paren_stack_copy22\
    \ = mutable.Stack[String]()\n        val paren_stack_copy23 = mutable.Stack[String]()\n\
    \        val paren_stack_copy24 = mutable.Stack[String]()\n        val paren_stack_copy25\
    \ = mutable.Stack[String]()\n        val paren_stack_copy26 = mutable.Stack[String]()\n\
    \        val paren_stack_copy27 = mutable.Stack[String]()\n        val paren_stack_copy28\
    \ = mutable.Stack[String]()\n        val paren_stack_copy29 = mutable.Stack[String]()\n\
    \        val paren_stack_copy30 = mutable.Stack[String]()\n        val paren_stack_copy31\
    \ = mutable.Stack[String]()\n        val paren_stack_copy32 = mutable.Stack[String]()",
  "        val paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren_sum.max\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.indexOf(paren_groups_with_paren_max)\n        val\
    \ paren_groups_with_paren_max_index_plus_one = paren_groups_with_paren_max_index\
    \ + 1 // +1 because we start from 0\n        val paren_groups_with_paren_max_index_minus_one\
    \ = paren_groups_with_paren_max_index - 1 // -1 because we start from 0\n    \
    \    val paren_groups_with_paren_max_index_plus_one_plus_one = paren_groups_with_paren_max_index_plus_one\
    \ + 1 // +1 because we start from 0\n        val paren_groups_with_paren_max_index_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_minus_one - 1 // -1 because we start from\
    \ 0\n        val paren_groups_with_paren_max_index_plus_one_minus_one = paren_groups_with_paren_max_index_plus_one_minus_one\
    \ + 1 // +1 because we start from 0\n        val paren_groups_with_paren_max_index_minus_one_plus_one\
    \ = paren_groups_with_paren_max_index_minus_one_minus_one - 1 // -1 because we\
    \ start from 0\n        val paren_groups_with_paren_max_index_plus_one_plus_one_plus_one\
    \ = paren_groups_with_paren_max_index_plus_one_minus_one_plus_one + 1 // +1 because\
    \ we start from 0\n        val paren_groups_with_paren_max_index_minus_one_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_minus_one_plus_one_minus_one - 1 // -1 because\
    \ we start from 0\n        val paren_groups_with_paren_max_index_plus_one_minus_one_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_minus_one_minus_one_plus_one_minus_one +\
    \ 1 // +1 because we start from 0\n        val paren_groups_with_paren_max_index_minus_one_plus_one_minus_one_minus_one_minus_one\
    \ = paren_groups_with_paren_max_index_plus_one_minus_one_minus_one_plus_one_minus_one\
    \ - 1 // -1 because we start ", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_pos_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth_depth_pos\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_pos_depth_size_pos_depth_depth_pos_size_depth_pos_depth_size_pos_depth_depth_pos_size\
    \ = ", "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_depth = paren_array_max_size.toLong\n       \
    \ val paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.toInt\n        val paren_array_max_depth\
    \ = paren_array_max_depth.toLong\n        val paren_array_max_depth = paren_array_max_depth.toInt\n\
    \        val paren_array_max_depth = paren_array_max_depth.toLong\n        val\
    \ paren_array_max_depth = paren_array_max_depth.to", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren_groups = paren_groups.map(x\
    \ => x.split(\"(\"))\n        val paren_groups_with_paren_groups_flat = paren_groups_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted = paren_groups_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted.map(x => x.mkString(\"(\", \")\"\
    ))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups.flatten\n   \
    \     val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted.map(x\
    \ => x.mkString(\"(\", \")\"))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups_flat_sorted_with_paren_groups.sortBy(x\
    \ => x.length)", "        val paren_groups = paren_string.split(\" \")\n     \
    \   val paren_groups_with_paren = paren_groups.map(x => x.replace(\"(\", \"(\"\
    ).replace(\")\", \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren_sum.max\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.indexOf(paren_groups_with_paren_max)\n        val\
    \ paren_groups_with_paren_max_index_plus_1 = paren_groups_with_paren_max_index\
    \ + 1\n        val paren_groups_with_paren_max_index_minus_1 = paren_groups_with_paren_max_index\
    \ - 1\n        val paren_groups_with_paren_max_index_plus_2 = paren_groups_with_paren_max_index\
    \ + 2\n        val paren_groups_with_paren_max_index_minus_2 = paren_groups_with_paren_max_index\
    \ - 2\n        val paren_groups_with_paren_max_index_plus_3 = paren_groups_with_paren_max_index\
    \ + 3\n        val paren_groups_with_paren_max_index_minus_3 = paren_groups_with_paren_max_index\
    \ - 3\n        val paren_groups_with_paren_max_index_plus_4 = paren_groups_with_paren_max_index\
    \ + 4\n        val paren_groups_with_paren_max_index_minus_4 = paren_groups_with_paren_max_index\
    \ - 4\n        val paren_groups_with_paren_max_index_plus_5 = paren_groups_with_paren_max_index\
    \ + 5\n        val paren_groups_with_paren_max_index_minus_5 = paren_groups_with_paren_max_index\
    \ - 5\n        val paren_groups_with_paren_max_index_plus_6 = paren_groups_with_paren_max_index\
    \ + 6\n        val paren_groups_with_paren_max_index_minus_6 = paren_groups_with_paren_max_index\
    \ - 6\n        val paren_groups_with_paren_max_index_plus_7 = paren_groups_with_paren_max_index\
    \ + 7\n        val paren_groups_with_paren_max_index_minus_7 = paren_groups_with_paren_max_index\
    \ - 7\n        val paren_groups_with_paren_max_index_plus_8 = paren_groups_with_paren_max_index\
    \ + 8\n        val paren_groups_with_paren_max_index_minus_8 = paren_groups_with_paren_max_index\
    \ - 8\n        val paren_groups_with_paren_max_index_plus_9 = paren_groups_with_paren_max_index\
    \ + 9\n        val paren_groups_with_paren_max_index_minus_9 = paren_groups_with_paren_max_index",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        paren_queue.enqueue(paren_string)\n        paren_stack.push(paren_queue.dequeue)\n\
    \        val max_level = 0\n        while(!paren_stack.isEmpty) {\n          \
    \  val paren_string = paren_stack.dequeue()\n            val paren_level = paren_string.count('(')\
    \ - paren_string.count(')')\n            if(paren_level > max_level) {\n     \
    \           max_level = paren_level\n            }\n            paren_stack.push(paren_string)\n\
    \            paren_queue.enqueue(paren_string)\n        }\n        max_level.toList.map(_.toLong)",
  "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n        val\
    \ paren_groups_with_max_depth = paren_groups.foldLeft(List[Long]())((acc, curr)\
    \ => {\n            val max_depth = acc.foldRight(0)((max_depth, curr_depth) =>\
    \ {\n                if (curr_depth > max_depth)\n                    curr_depth\n\
    \                else\n                    max_depth\n            })\n       \
    \     if (max_depth > curr.length)\n                acc :+ max_depth\n       \
    \     else\n                acc :+ curr\n        })\n        paren_groups_with_max_depth.distinct",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map =\
    \ mutable.Map[Long, Long]()\n        val paren_stack_map_list = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size_max = mutable.ListBuffer.empty[Long]\n    \
    \    val paren_stack_map_list_size_max_index = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_value = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count_index = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count_value = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count_key_value = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count_key_value_count = mutable.ListBuffer.empty[Long]\n\
    \        val paren_stack_map_list_size_max_key_value_count_key_value_count_index\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_value\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count_index\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count_value\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count_key_value\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count_key_value_count\
    \ = mutable.ListBuffer.empty[Long]\n        val paren_stack_map_list_size_max_key_value_count_key_value_count_key_value_count_key_value_count_index\
    \ = mutable.List", "        val paren_array = paren_string.split(\" \")\n    \
    \    val paren_array_size = paren_array.length\n        val paren_array_list =\
    \ mutable.ArrayBuffer(paren_array_size.toLong)\n        var paren_array_index\
    \ = 0\n        var paren_array_level = 0\n        var paren_array_level_sum =\
    \ 0\n        var paren_array_level_max = paren_array_size\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = paren_array_size\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_max_index\
    \ = 0\n        var paren_array_level_max_sum = 0\n        var paren_array_level_",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_max_depth\
    \ = mutable.ListBuffer[Long]()\n        for (paren_group <- paren_groups) {\n\
    \            val paren_group_with_max_depth = paren_group.split(\"\\\\(\").map(x\
    \ => x.split(\"\\\\)\").length).max\n            paren_groups_with_max_depth +=\
    \ paren_group_with_max_depth\n        }\n        paren_groups_with_max_depth.toList",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(paren_group => {\n            val paren_group_with_paren_groups\
    \ = paren_group.split(\"(\")\n            val paren_group_with_paren_groups_size\
    \ = paren_group_with_paren_groups.size\n            val paren_group_with_paren_groups_size_without_paren_groups\
    \ = paren_group_with_paren_groups_size - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups - 1\n            val\
    \ paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ = paren_group_with_paren_groups_size_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups_without_paren_groups\
    \ - 1\n            val paren_group_with_paren_groups_size_without_paren_groups_without_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Int]()\n        val paren_stack_top_count_indexSize\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_indexCount = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountSize = mutable.Stack[Int]()\n   \
    \     val paren_stack_top_count_indexCountIndex = mutable.Stack[Int]()\n     \
    \   val paren_stack_top_count_indexCountIndexSize = mutable.Stack[Int]()\n   \
    \     val paren_stack_top_count_indexCountIndexCount = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountSize = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndex = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexSize = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCount = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountSize = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndex = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCount =\
    \ mutable.Stack[Int]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Int]()\n        val paren_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_depth\
    \ = paren_array_size.toLong\n        val paren_array_max_depth = paren_array_depth.toLong\n\
    \        val paren_array_max_depth_ind = paren_array_max_depth.toLong\n      \
    \  val paren_array_max_depth_ind_ind = paren_array_max_depth_ind.toLong\n    \
    \    val paren_array_max_depth_ind_ind_ind = paren_array_max_depth_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind.toLong\n\
    \        val paren_array_max_depth_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = paren_array_max_depth_ind_ind_ind_", "        val paren_list_string = paren_string.trim\n\
    \        val paren_list_string_array = paren_list_string.split(\" \")\n      \
    \  val paren_list_string_array_length = paren_list_string_array.length\n     \
    \   val paren_list_string_array_length_minus_1 = paren_list_string_array_length\
    \ - 1\n        val paren_list_string_array_length_minus_2 = paren_list_string_array_length_minus_1\
    \ - 1\n        val paren_list_string_array_length_minus_3 = paren_list_string_array_length_minus_2\
    \ - 1\n        val paren_list_string_array_length_minus_4 = paren_list_string_array_length_minus_3\
    \ - 1\n        val paren_list_string_array_length_minus_5 = paren_list_string_array_length_minus_4\
    \ - 1\n        val paren_list_string_array_length_minus_6 = paren_list_string_array_length_minus_5\
    \ - 1\n        val paren_list_string_array_length_minus_7 = paren_list_string_array_length_minus_6\
    \ - 1\n        val paren_list_string_array_length_minus_8 = paren_list_string_array_length_minus_7\
    \ - 1\n        val paren_list_string_array_length_minus_9 = paren_list_string_array_length_minus_8\
    \ - 1\n        val paren_list_string_array_length_minus_10 = paren_list_string_array_length_minus_9\
    \ - 1\n        val paren_list_string_array_length_minus_11 = paren_list_string_array_length_minus_10\
    \ - 1\n        val paren_list_string_array_length_minus_12 = paren_list_string_array_length_minus_11\
    \ - 1\n        val paren_list_string_array_length_minus_13 = paren_list_string_array_length_minus_12\
    \ - 1\n        val paren_list_string_array_length_minus_14 = paren_list_string_array_length_minus_13\
    \ - 1\n        val paren_list_string_array_length_minus_15 = paren_list_string_array_length_minus_14\
    \ - 1\n        val paren_list_string_array_length_minus_16 = paren_list_string_array_length_minus_15\
    \ - 1\n        val paren_list_string_array_length_minus_17 = paren_list_string_array_length_minus_16\
    \ - 1\n        val paren_list_string_array_length_minus_18 = paren_list_string_array_length_minus_17\
    \ - 1\n        val paren_list_string_array_length_minus_19 = paren_list_string_array_length_minus_18\
    \ - 1\n        val paren_list_string_array_length_minus_20 = paren_list_string_array_length_minus_19\
    \ - 1\n        val paren_list_string_array_length_minus_21 = paren_list_string_array_length_minus_20\
    \ - 1\n        val paren_list_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_values_values_values_values_values =\
    \ mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[", "        val paren_groups = paren_string.split(\"\\\\s+\")\n\
    \        val paren_groups_with_parens = paren_groups.map(x => x.replaceAll(\"\\\
    \\(\", \"(\").replaceAll(\"\\\\)\", \")\"))\n        val paren_groups_with_parens_map\
    \ = paren_groups_with_parens.map(x => x.split(\"\\\\(\"))\n        val paren_groups_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map.map(x => x.map(y => y.replaceAll(\"\\\\(\", \"\
    (\").replaceAll(\"\\\\)\", \")\")))\n        val paren_groups_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens.map(x => x.map(y => y.map(z => z.replaceAll(\"\
    \\\\(\", \"(\").replaceAll(\"\\\\)\", \")\")))\n        val paren_groups_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map.map(x => x.map(y => y.map(z =>\
    \ z.map(w => w.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\", \")\"))))\n\
    \        val paren_groups_with_parens_map_with_parens_map_with_parens_map = paren_groups_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\(\", \"(\"\
    ).replaceAll(\"\\\\)\", \")\")))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\(\", \"(\"\
    ).replaceAll(\"\\\\)\", \")\")).map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\
    \\\\)\", \")\")))))\n        val paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map\
    \ = paren_groups_with_parens_map_with_parens_map_with_parens_map_with_parens_map_with_parens.map(x\
    \ => x.map(y => y.map(z => z.map(w => w.map(x => x.replaceAll(\"\\\\(\", \"(\"\
    ).replaceAll(\"\\\\)\", \")\")).map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\
    \\\\)\", \")\")).map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")", "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"()\").map(y => y.toLong).count(_ > 0))\n \
    \       val max_count = paren_groups_with_counts.max\n        val max_count_index\
    \ = paren_groups_with_counts.indexOf(max_count)\n        val max_count_groups\
    \ = paren_groups_with_counts.take(max_count_index)\n        val max_count_groups_with_counts\
    \ = max_count_groups.map(x => x.split(\"()\").map(y => y.toLong).count(_ > 0))\n\
    \        val max_count_groups_with_counts_index = max_count_groups_with_counts.indexOf(max_count_groups.max)\n\
    \        val max_count_groups_with_counts_groups = max_count_groups_with_counts.take(max_count_groups_with_counts_index)\n\
    \        val max_count_groups_with_counts_groups_with_counts = max_count_groups_with_counts_groups.map(x\
    \ => x.split(\"()\").map(y => y.toLong).count(_ > 0))\n        val max_count_groups_with_counts_groups_with_counts_index\
    \ = max_count_groups_with_counts_groups_with_counts.indexOf(max_count_groups_with_counts_groups.max)\n\
    \        val max_count_groups_with_counts_groups_with_counts_groups = max_count_groups_with_counts_groups_with_counts.take(max_count_groups_with_counts_groups_with_counts_index)\n\
    \        val max_count_groups_with_counts_groups_with_counts_groups_with_counts\
    \ = max_count_groups_with_counts_groups_with_counts_groups.map(x => x.split(\"\
    ()\").map(y => y.toLong).count(_ > 0))\n        val max_count_groups_with_counts_groups_with_counts_groups_with_counts_index\
    \ = max_count_groups_with_counts_groups_with_counts_groups_with_counts.indexOf(max_count_groups_with_counts_groups_with_counts_groups.max)\n\
    \        val max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups\
    \ = max_count_groups_with_counts_groups_with_counts_groups_with_counts.take(max_count_groups_with_counts_groups_with_counts_groups_with_counts_index)\n\
    \        val max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts\
    \ = max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups.map(x\
    \ => x.split(\"()\").map(y => y.toLong).count(_ > 0))\n        val max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts_index\
    \ = max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups_with_counts.indexOf(max_count_groups_with_counts_groups_with_counts_groups_with_counts_groups.",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_size\
    \ = paren_groups.length\n        val paren_groups_map = mutable.HashMap[String,\
    \ List[Long]]()\n        val paren_groups_list_size = mutable.ArrayBuffer(0l)\n\
    \        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size,\
    \ 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 1, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 2, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 3, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 4, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 5, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 6, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 7, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 8, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 9, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 10, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 11, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 12, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 13, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 14, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 15, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 16, 0l)\n        val paren_groups_list_size = paren_groups_list_size.updated(paren_groups_size\
    \ - 17, 0l)\n        val paren_groups_list_size = ", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_size = mutable.Stack[Int]()\n        val paren_stack_top_count_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_top_count = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_top_count_size = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_top_count_top_count_top_count_top_count_top_count_size\
    \ = mutable.Stack[Int]()\n        val paren_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_map\
    \ = mutable.Map[Long, List[Long]]()\n        val paren_groups_list_size = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_avg = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_size_min = mutable.ListBuffer[Long]()\n       \
    \ val paren_groups_list_size_max = mutable.ListBuffer[Long]()\n        val paren_groups_list_size_sum\
    \ = mutable.", "        val paren_array = paren_string.split(\" \").toList\n \
    \       val paren_array_size = paren_array.size\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_levels = mutable.Stack[Int]()\n\
    \        val paren_levels_map = mutable.Map[String, Int]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val paren_level = paren_levels.length\n\
    \            val paren_level_str = paren_levels.mkString(\",\")\n            val\
    \ paren_level_int = paren_level.toInt\n            paren_levels_map(x) = paren_level_int\n\
    \            paren_stack += x\n            paren_levels += paren_level\n     \
    \   })\n        val paren_levels_sorted = paren_levels_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_map = paren_levels_sorted.map(x => x._1 -> x._2)\n\
    \        val paren_levels_sorted_map_sorted = paren_levels_sorted_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_map_sorted_map = paren_levels_sorted_map_sorted.map(x\
    \ => x._1 -> x._2)\n        val paren_levels_sorted_map_sorted_map_sorted = paren_levels_sorted_map_sorted_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_map_sorted_map_sorted_map = paren_levels_sorted_map_sorted_map_sorted.map(x\
    \ => x._1 -> x._2)\n        val paren_levels_sorted_map_sorted_map_sorted_map_sorted\
    \ = paren_levels_sorted_map_sorted_map_sorted_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_map_sorted_map_sorted_map_sorted_map = paren_levels_sorted_map_sorted_map_sorted_map_sorted.map(x\
    \ => x._1 -> x._2)\n        val paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted\
    \ = paren_levels_sorted_map_sorted_map_sorted_map_sorted_map.toSeq.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted\
    \ = paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted.map(x\
    \ => x._1 -> x._2)\n        val paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map\
    \ = paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted.map(x\
    \ => x._1 -> x._2)\n        val paren_levels_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted_map_sorted\
    \ = paren_levels_", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_level = paren_groups.foldLeft(0L){\n            (maxLevel, group)\
    \ => if (group > maxLevel) group else maxLevel\n        }\n        val max_level_groups\
    \ = paren_groups.filter(_.toLong == max_level)\n        val max_level_group_size\
    \ = max_level_groups.size\n        val max_level_group_size_str = max_level_groups.map(_.toString.length).max\n\
    \        val max_level_group_size_long = max_level_group_size_str.toLong\n   \
    \     val max_level_group_size_long_str = max_level_group_size_str.toString.length\n\
    \        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_long_str = max_level_group_size_str.toString.padTo(max_level_group_size_long_str,\
    \ \" \")\n        val max_level_group_size_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_size = paren_groups.size\n        val paren_groups_with_parentheses\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parentheses_size\
    \ = paren_groups_with_parentheses.size\n        val paren_groups_with_parentheses_sum\
    \ = paren_groups_with_parentheses.sum\n        val paren_groups_with_parentheses_product\
    \ = paren_groups_with_parentheses_sum.toLong\n        val paren_groups_with_parentheses_product_product\
    \ = paren_groups_with_parentheses_product.toLong\n        val paren_groups_with_parentheses_product_product_product\
    \ = paren_groups_with_parentheses_product_product.toLong\n        val paren_groups_with_parentheses_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product.toLong\n        val\
    \ paren_groups_with_parentheses_product_product_product_product_product = paren_groups_with_parentheses_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_product_product.toLong\n\
    \        val paren_groups_with_parentheses_product_product_product_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parentheses_product_product_product_product_", "       \
    \ val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n        val paren_stack_top_size = paren_stack_top_size\n\
    \        val paren_stack_top_size = paren_stack_top_size\n", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length = paren_groups_with_paren_sum.toLong\n\
    \        val paren_groups_with_paren_length_sum = paren_groups_with_paren_length.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_sum = paren_groups_with_paren_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_sum = paren_groups_with_paren_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_sum.reduce((x,y) => x + y)\n\
    \        val paren_groups_with_paren_length_length_length_length_length_sum =\
    \ paren_groups_with_paren_length_length_length_length_sum.reduce((x,y) => x +\
    \ y)\n        val paren_groups_with_paren_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_sum.reduce((x,y) => x\
    \ + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_length_sum.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_length_length_length_length_length_length_length_length_length_length_length_length_length_sum\
    \ = paren_groups_with_paren_length_length_length_length_length_length_", "   \
    \     val paren_stack = mutable.Stack[Long]()\n        val paren_stack_map = mutable.Map[Long,\
    \ Long]()\n        val paren_stack_map_list = mutable.ListBuffer[Long]()\n   \
    \     val paren_stack_map_list_size = mutable.ListBuffer[Long]()\n        val\
    \ paren_stack_map_list_size_max = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size_value_max\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size_value_max_index\
    \ = mutable.ListBuffer[Long]()\n        val paren_stack_map_list_size_max_index_size_value_max_index_size_value_max_index_size_value_max_index_size\
    \ = mutable.ListBuffer[Long", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_len = mutable.Stack[Int]()\n        val paren_stack_len_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_max_len = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max = mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Int]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Int", "        val paren_stack = mutable.Stack[Long]()\n   \
    \     val paren_stack_max = mutable.Stack[Long]()\n        val paren_stack_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len = mutable.Stack[Long]()\n        val paren_stack_",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max_sum =\
    \ paren_groups_with_paren_sum.max\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_sum.index\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_sum.value\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index.toLong\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value.toLong\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value + 1\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren_max_index + 1\n        val paren_groups_with_paren_max_value\
    \ = paren_groups_with_paren_max_value ", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, Long]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[Long, String]()\n\
    \        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ Long]()\n        val paren_stack_map_values_values_values_values_values = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, Long]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys_values\
    \ = mutable.Map[String, Long]()\n        val paren_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren = mutable.Stack[String]()\n \
    \       val paren_stack_with_paren_within_paren_within_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren_within_paren_within_paren = mutable.Stack[String]()\n\
    \        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.", "        val paren_stack = mutable.Stack[Long]()\n        val paren_levels\
    \ = mutable.ListBuffer[Long]()\n        paren_string.split(\"\\\\s+\").foreach(s\
    \ => {\n            val level = paren_stack.size\n            paren_stack += level\n\
    \            paren_levels += level\n            val paren_level = paren_stack.last\n\
    \            val paren_level_diff = paren_level - paren_levels(paren_level - 1)\n\
    \            if (paren_level_diff > 1) {\n                paren_levels += paren_level_diff\n\
    \                paren_stack += paren_level_diff\n            }\n            if\
    \ (paren_level_diff == 1) {\n                paren_levels += paren_level\n   \
    \             paren_stack += paren_level\n            }\n        })\n        paren_levels.toList",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max = mutable.Stack[Int]()\n\
    \        val paren_stack_top_count_max_size = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_count_max_count = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count_max_count_max_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = ", "        val paren_list_string = paren_string.trim\n        val paren_list_list\
    \ = paren_list_string.split(\" \").map(_.toLong)\n        val paren_list_list_list\
    \ = paren_list_list.grouped(2).toList\n        val paren_list_list_list_list =\
    \ paren_list_list_list.grouped(3).toList\n        val paren_list_list_list_list_list\
    \ = paren_list_list_list_list.grouped(1).toList\n        val paren_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list.grouped(1).toList\n        val paren_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list.grouped(1).toList\n        val paren_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list.grouped(1).toList\n        val paren_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list.grouped(1).toList\n        val\
    \ paren_list_list_list_list_list_list_list_list_list_list = paren_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list = paren_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list.grouped(1).toList\n\
    \        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_count = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_count_size = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_count_count_count_count_count_count_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_count_count_", " \
    \       val paren_stack = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n\
    \        paren_stack.push(0)\n        paren_queue.enqueue(0l)\n        paren_stack.push(0)\n\
    \        paren_queue.en", "        val paren_groups = paren_string.split(\" \"\
    ).map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0l) { (max_level,\
    \ group) => if (group > max_level) group else max_level }\n        val max_level\
    \ = max_levels + 1\n        val levels = paren_groups.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level.toLong\n        val levels = levels.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong)\n\
    \        val max_level = max_level", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_size = paren_groups.size\n        val paren_groups_size_list\
    \ = paren_groups.map(x => x.toLong).toList\n        val paren_groups_size_list2\
    \ = paren_groups_size_list.map(x => x.toLong)\n        val paren_groups_size_list3\
    \ = paren_groups_size_list2.map(x => x.toLong)\n        val paren_groups_size_list4\
    \ = paren_groups_size_list3.map(x => x.toLong)\n        val paren_groups_size_list5\
    \ = paren_groups_size_list4.map(x => x.toLong)\n        val paren_groups_size_list6\
    \ = paren_groups_size_list5.map(x => x.toLong)\n        val paren_groups_size_list7\
    \ = paren_groups_size_list6.map(x => x.toLong)\n        val paren_groups_size_list8\
    \ = paren_groups_size_list7.map(x => x.toLong)\n        val paren_groups_size_list9\
    \ = paren_groups_size_list8.map(x => x.toLong)\n        val paren_groups_size_list10\
    \ = paren_groups_size_list9.map(x => x.toLong)\n        val paren_groups_size_list11\
    \ = paren_groups_size_list10.map(x => x.toLong)\n        val paren_groups_size_list12\
    \ = paren_groups_size_list11.map(x => x.toLong)\n        val paren_groups_size_list13\
    \ = paren_groups_size_list12.map(x => x.toLong)\n        val paren_groups_size_list14\
    \ = paren_groups_size_list13.map(x => x.toLong)\n        val paren_groups_size_list15\
    \ = paren_groups_size_list14.map(x => x.toLong)\n        val paren_groups_size_list16\
    \ = paren_groups_size_list15.map(x => x.toLong)\n        val paren_groups_size_list17\
    \ = paren_groups_size_list16.map(x => x.toLong)\n        val paren_groups_size_list18\
    \ = paren_groups_size_list17.map(x => x.toLong)\n        val paren_groups_size_list19\
    \ = paren_groups_size_list18.map(x => x.toLong)\n        val paren_groups_size_list20\
    \ = paren_groups_size_list19.map(x => x.toLong)\n        val paren_groups_size_list21\
    \ = paren_groups_size_list20.map(x => x.toLong)\n        val paren_groups_size_list22\
    \ = paren_groups_size_list21.map(x => x.toLong)", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_queue = mutable.Queue[String]()\n        paren_queue.enqueue(paren_string)\n\
    \        while(paren_queue.nonEmpty) {\n            val paren_string = paren_queue.dequeue()\n\
    \            val paren_stack_string = paren_stack.last\n            val paren_stack_length\
    \ = paren_stack_string.length\n            val paren_length = paren_string.length\n\
    \            val paren_stack_char = paren_stack_string.charAt(paren_stack_length-1)\n\
    \            val paren_char = paren_string.charAt(paren_length-1)\n          \
    \  if(paren_stack_char == '(' && paren_char == ')') {\n                paren_stack.push(paren_string)\n\
    \            } else if(paren_stack_char == '(' && paren_char == '(') {\n     \
    \           paren_stack.push(paren_string)\n                paren_queue.enqueue(paren_string.substring(0,\
    \ paren_string.length-1))\n            } else if(paren_stack_char == ')' && paren_char\
    \ == ')') {\n                val paren_string = paren_stack.pop()\n          \
    \      val paren_length = paren_string.length\n                val paren_char\
    \ = paren_string.charAt(paren_length-1)\n                if(paren_char == '(')\
    \ {\n                    paren_queue.enqueue(paren_string.substring(0, paren_string.length-1))\n\
    \                }\n            }\n        }\n        paren_stack.toList", " \
    \       val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_parens\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parens_sum\
    \ = paren_groups_with_parens.sum\n        val paren_groups_with_parens_product\
    \ = paren_groups_with_parens.product\n        val paren_groups_with_parens_product2\
    \ = paren_groups_with_parens_product * paren_groups_with_parens_product\n    \
    \    val paren_groups_with_parens_product3 = paren_groups_with_parens_product2\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product4\
    \ = paren_groups_with_parens_product3 * paren_groups_with_parens_product\n   \
    \     val paren_groups_with_parens_product5 = paren_groups_with_parens_product4\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product6\
    \ = paren_groups_with_parens_product5 * paren_groups_with_parens_product\n   \
    \     val paren_groups_with_parens_product7 = paren_groups_with_parens_product6\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product8\
    \ = paren_groups_with_parens_product7 * paren_groups_with_parens_product\n   \
    \     val paren_groups_with_parens_product9 = paren_groups_with_parens_product8\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product10\
    \ = paren_groups_with_parens_product9 * paren_groups_with_parens_product\n   \
    \     val paren_groups_with_parens_product11 = paren_groups_with_parens_product10\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product12\
    \ = paren_groups_with_parens_product11 * paren_groups_with_parens_product\n  \
    \      val paren_groups_with_parens_product13 = paren_groups_with_parens_product12\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product14\
    \ = paren_groups_with_parens_product13 * paren_groups_with_parens_product\n  \
    \      val paren_groups_with_parens_product15 = paren_groups_with_parens_product14\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product16\
    \ = paren_groups_with_parens_product15 * paren_groups_with_parens_product\n  \
    \      val paren_groups_with_parens_product17 = paren_groups_with_parens_product16\
    \ * paren_groups_with_parens_product\n        val paren_groups_with_parens_product18\
    \ = paren_group", "        val paren_stack = mutable.Stack[String]()\n       \
    \ val paren_groups = paren_string.split(\" \")\n        paren_groups.foreach(paren_string\
    \ => {\n            val paren_group_str = paren_string.trim()\n            val\
    \ paren_group_str_length = paren_group_str.length\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren_group_str_length = paren_group_str_length + 1\n \
    \           val paren_group_str_length = paren_group_str_length + 1\n        \
    \    val paren_group_str_length = paren_group_str_length + 1\n            val\
    \ paren_group_str_length = paren_group_str_length + 1\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren_group_str_length = paren_group_str_length + 1\n \
    \           val paren_group_str_length = paren_group_str_length + 1\n        \
    \    val paren_group_str_length = paren_group_str_length + 1\n            val\
    \ paren_group_str_length = paren_group_str_length + 1\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren_group_str_length = paren_group_str_length + 1\n \
    \           val paren_group_str_length = paren_group_str_length + 1\n        \
    \    val paren_group_str_length = paren_group_str_length + 1\n            val\
    \ paren_group_str_length = paren_group_str_length + 1\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren_group_str_length = paren_group_str_length + 1\n \
    \           val paren_group_str_length = paren_group_str_length + 1\n        \
    \    val paren_group_str_length = paren_group_str_length + 1\n            val\
    \ paren_group_str_length = paren_group_str_length + 1\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren_group_str_length = paren_group_str_length + 1\n \
    \           val paren_group_str_length = paren_group_str_length + 1\n        \
    \    val paren_group_str_length = paren_group_str_length + 1\n            val\
    \ paren_group_str_length = paren_group_str_length + 1\n            val paren_group_str_length\
    \ = paren_group_str_length + 1\n            val paren_group_str_length = paren_group_str_length\
    \ + 1\n            val paren", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_top = paren_stack.push(0)\n        val paren_stack_bottom\
    \ = paren_stack.push(0)\n        val paren_stack_len = paren_stack.size\n    \
    \    val paren_stack_max_len = paren_stack_len - 2\n        val paren_stack_max_len_top\
    \ = paren_stack_max_len - 1\n        val paren_stack_max_len_bottom = paren_stack_max_len\
    \ - 2\n        val paren_stack_max_len_top_bottom = paren_stack_max_len - 3\n\
    \        val paren_stack_max_len_top_bottom_left = paren_stack_max_len - 4\n \
    \       val paren_stack_max_len_top_bottom_left_right = paren_stack_max_len -\
    \ 5\n        val paren_stack_max_len_top_bottom_left_right_top = paren_stack_max_len\
    \ - 6\n        val paren_stack_max_len_top_bottom_left_right_top_bottom = paren_stack_max_len\
    \ - 7\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left =\
    \ paren_stack_max_len - 8\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right\
    \ = paren_stack_max_len - 9\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top\
    \ = paren_stack_max_len - 10\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom\
    \ = paren_stack_max_len - 11\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left\
    \ = paren_stack_max_len - 12\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right\
    \ = paren_stack_max_len - 13\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top\
    \ = paren_stack_max_len - 14\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom\
    \ = paren_stack_max_len - 15\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom_left\
    \ = paren_stack_max_len - 16\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right\
    \ = paren_stack_max_len - 17\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top\
    \ = paren_stack_max_len - 18\n        val paren_stack_max_len_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom_left_right_top_bottom\
    \ = paren_stack_max_len - 19\n        val paren_stack_max_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_groups = mutable.ListBuffer[List[Long]]()\n\
    \        paren_string.split(\"\\\\s+\").foreach(x => {\n            val y = x.trim\n\
    \            if (y.isEmpty) return\n            if (y.startsWith(\"(\")) {\n \
    \               paren_stack.push(y)\n            } else if (y.endsWith(\")\"))\
    \ {\n                val paren_str = paren_stack.pop()\n                val paren_group\
    \ = (paren_groups.length, paren_groups.length)\n                paren_groups +=\
    \ paren_group\n                if (paren_str == y) paren_group += (paren_groups.length,\
    \ paren_groups.length)\n                paren_groups += paren_group\n        \
    \    }\n        })\n        paren_groups.toList", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren_stack.push(\"\
    )\")\n        val paren_stack_top = paren_stack.push(\"(\")\n        val paren_stack_bottom\
    \ = paren_stack.push(\")\")\n        val paren_stack_top = paren_stack.push(\"\
    (\")\n        val paren_stack_bottom = paren_stack.push(\")\")\n        val paren_stack_top\
    \ = paren_stack.push(\"(\")\n        val paren_stack_bottom = paren", "      \
    \  val paren_array = paren_string.split(\" \")\n        val paren_array_size =\
    \ paren_array.length\n        val paren_array_max_size = paren_array_size - 1\n\
    \        val paren_array_max_level = paren_array_max_size.toLong\n        val\
    \ paren_array_max_level_array = new Array[Long](paren_array_max_level)\n     \
    \   var paren_array_max_level_array_index = 0\n        var paren_array_max_level_array_value\
    \ = 0\n        var paren_array_max_level_array_index2 = 0\n        var paren_array_max_level_array_value2\
    \ = 0\n        var paren_array_max_level_array_index3 = 0\n        var paren_array_max_level_array_value3\
    \ = 0\n        var paren_array_max_level_array_index4 = 0\n        var paren_array_max_level_array_value4\
    \ = 0\n        var paren_array_max_level_array_index5 = 0\n        var paren_array_max_level_array_value5\
    \ = 0\n        var paren_array_max_level_array_index6 = 0\n        var paren_array_max_level_array_value6\
    \ = 0\n        var paren_array_max_level_array_index7 = 0\n        var paren_array_max_level_array_value7\
    \ = 0\n        var paren_array_max_level_array_index8 = 0\n        var paren_array_max_level_array_value8\
    \ = 0\n        var paren_array_max_level_array_index9 = 0\n        var paren_array_max_level_array_value9\
    \ = 0\n        var paren_array_max_level_array_index10 = 0\n        var paren_array_max_level_array_value10\
    \ = 0\n        var paren_array_max_level_array_index11 = 0\n        var paren_array_max_level_array_value11\
    \ = 0\n        var paren_array_max_level_array_index12 = 0\n        var paren_array_max_level_array_value12\
    \ = 0\n        var paren_array_max_level_array_index13 = 0\n        var paren_array_max_level_array_value13\
    \ = 0\n        var paren_array_max_level_array_index14 = 0\n        var paren_array_max_level_array_value14\
    \ = 0\n        var paren_array_max_level_array_index15 = 0\n        var paren_array_max_level_array_value15\
    \ = 0\n        var paren_array_max_level_array_index16 = 0\n        var paren_array_max_level_array_value16\
    \ = 0\n        var paren_array_max_level_array_index17 = 0\n        var paren_array_max_level_array_value17\
    \ = 0\n        var paren_array_max_level_array_index18 = 0\n        var paren_array_max_level_array_value18\
    \ = 0\n        var paren_array_max_level_array_index19 = 0\n        var paren_array_max_level_array_value19\
    \ = 0\n        var paren_array_max_level_array_index20 = 0\n        var paren_array_max_level_array_value20\
    \ = 0\n        var paren_array_max_level_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_level_groups = List[String]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(_.length).max\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_level_groups = paren_group.split(\"\\\\(\")\n            }\n       \
    \ }\n        max_level_groups.map(_.length).max", "        val paren_groups =\
    \ paren_string.split(\" \")\n        val paren_groups_with_parens = paren_groups.map(x\
    \ => if (x == \"(\") 1 else 0)\n        val paren_groups_with_parens_sum = paren_groups_with_parens.sum\n\
    \        val paren_groups_with_parens_product = paren_groups_with_parens.product\n\
    \        val paren_groups_with_parens_product_sum = paren_groups_with_parens_product.sum\n\
    \        val paren_groups_with_parens_product_product = paren_groups_with_parens_product.product\n\
    \        val paren_groups_with_parens_product_product_sum = paren_groups_with_parens_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product = paren_groups_with_parens_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_sum = paren_groups_with_parens_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product = paren_groups_with_parens_product_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_product_sum = paren_groups_with_parens_product_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product_product\
    \ = paren_groups_with_parens_product_product_product_product.product\n       \
    \ val paren_groups_with_parens_product_product_product_product_product_sum = paren_groups_with_parens_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product\
    \ = paren_groups_with_parens_product_product_product_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parens_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product\
    \ = paren_groups_with_parens_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parens_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parens_product_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product_product_sum\
    \ = paren_groups_with_parens_product_product_product_product_product_product_product_product.sum\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product_product_product\
    \ = paren_groups_with_parens_product_product_product_product_product_product_product_product_product.product\n\
    \        val paren_groups_with_parens_product_product_product_product_product_product_product_product_product_sum\
    \ = ", "        val paren_list_string = paren_string.trim\n        val paren_list_array\
    \ = paren_list_string.split(\" \")\n        val paren_list_array_length = paren_list_array.length\n\
    \        val paren_list_array_max_length = paren_list_array_length.toInt\n   \
    \     val paren_list_array_max_index_length = paren_list_array_max_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_array_max_index_length = paren_list_array_max_index_length.toInt\n\
    \        val paren_list_", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count = mutable.Stack[Long]()\n        val paren_stack_top_count_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index2 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index3 = mutable.Stack[Long]()\n        val paren_stack_top_count_index4\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index5 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index6 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index7 = mutable.Stack[Long]()\n        val paren_stack_top_count_index8\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index9 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index10 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index11 = mutable.Stack[Long]()\n        val paren_stack_top_count_index12\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index13 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index14 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index15 = mutable.Stack[Long]()\n        val paren_stack_top_count_index16\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index17 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index18 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index19 = mutable.Stack[Long]()\n        val paren_stack_top_count_index20\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_index21 = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index22 = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_index23 = mutable.Stack[Long]()\n        val paren_stack_top_count_index24\
    \ = mutable.Stack[Long]()\n        val paren_stack_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_top_size = paren_stack_top_size.push(paren_string.length)\n\
    \        val paren_stack_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_map = mutable.Map[String, List[Long]]()\n        val\
    \ paren_stack_map_keys = mutable.Map[String, Long]()\n        val paren_stack_map_values\
    \ = mutable.Map[Long, String]()\n        val paren_stack_map_values_keys = mutable.Map[Long,\
    \ String]()\n        val paren_stack_map_values_values = mutable.Map[String, String]()\n\
    \        val paren_stack_map_values_values_keys = mutable.Map[String, String]()\n\
    \        val paren_stack_map_values_values_values = mutable.Map[String, String]()\n\
    \        val paren_stack_map_values_values_values_keys = mutable.Map[String, String]()\n\
    \        val paren_stack_map_values_values_values_values = mutable.Map[String,\
    \ String]()\n        val paren_stack_map_values_values_values_values_keys = mutable.Map[String,\
    \ String]()\n        val paren_stack_map_values_values_values_values_values =\
    \ mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_keys\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_values_values_values_values_values_values_values_values\
    \ = mutable.Map[String, String]()\n        val paren_stack_map_values_values_values_values_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len = mutable.Stack[Long]()\n     \
    \   val paren_stack_max_depth_len_max_len_max = mutable.Stack[Long]()\n      \
    \  val paren_stack_max_depth_len_max_len_max_len = mutable.Stack[Long]()\n   \
    \     val paren_stack_max_depth_len_max_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len_max_len_max_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len_max_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_len_max_len_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_len_max_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_len_max_len_max_len_max_len_max_len_max_len_max_",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max_index\
    \ = paren_groups_with_paren.zipWithIndex.maxBy(_._1)._2\n        val paren_groups_with_paren_max_index_sum\
    \ = paren_groups_with_paren_max_index.zipWithIndex.maxBy(_._1)._2\n        val\
    \ paren_groups_with_paren_max_index_max_index = paren_groups_with_paren_max_index_sum.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_sum = paren_groups_with_paren_max_index_max_index.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index = paren_groups_with_paren_max_index_max_index_sum.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_sum = paren_groups_with_paren_max_index_max_index_max_index.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index =\
    \ paren_groups_with_paren_max_index_max_index_max_index_sum.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index_sum\
    \ = paren_groups_with_paren_max_index_max_index_max_index_max_index.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index\
    \ = paren_groups_with_paren_max_index_max_index_max_index_max_index_sum.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index_sum\
    \ = paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index_sum.zipWithIndex.maxBy(_._1)._2\n\
    \        val paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index_max_index_sum\
    \ = paren_groups_with_paren_max_index_max_index_max_index_max_index_max_index_max_index.",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n      \
    \  val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_array = paren_string.split(\" \"\
    )\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n\
    \        val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.max\n        val paren_array_max_size\
    \ = paren_array_max_size.map(_.toLong)\n        val paren_array_max_size = paren_array_max_size.max\n\
    \        val paren_array_max_size = paren_array_max_size.map(_.toLong)\n     \
    \   val paren_array_max_size = paren_array_max_size.", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_queue = mutable.Queue[Long]()\n \
    \       val paren_levels = mutable.Map[Long, Long]()\n        paren_string.split(\"\
    \\\\s+\").foreach(x => {\n            val level = paren_stack.size\n         \
    \   paren_stack += level\n            paren_queue += level\n            paren_levels\
    \ += level -> x.length\n        })\n        val paren_levels_sorted = paren_levels.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_keys = paren_levels_sorted.keys\n        val\
    \ paren_levels_sorted_values = paren_levels_sorted.values\n        val paren_levels_sorted_keys_sorted\
    \ = paren_levels_sorted_keys.sortBy(_._1).reverse\n        val paren_levels_sorted_values_sorted\
    \ = paren_levels_sorted_values.sortBy(_._1).reverse\n        val paren_levels_sorted_keys_sorted_keys\
    \ = paren_levels_sorted_keys_sorted.keys\n        val paren_levels_sorted_keys_sorted_values\
    \ = paren_levels_sorted_keys_sorted.values\n        val paren_levels_sorted_values_sorted_values\
    \ = paren_levels_sorted_values_sorted.values\n        val paren_levels_sorted_keys_sorted_values_sorted\
    \ = paren_levels_sorted_keys_sorted_values.sortBy(_._1).reverse\n        val paren_levels_sorted_keys_sorted_values_sorted_keys\
    \ = paren_levels_sorted_keys_sorted_values_sorted.keys\n        val paren_levels_sorted_keys_sorted_values_sorted_values\
    \ = paren_levels_sorted_keys_sorted_values_sorted.values\n        val paren_levels_sorted_values_sorted_values_sorted\
    \ = paren_levels_sorted_values_sorted_values.sortBy(_._1).reverse\n        val\
    \ paren_levels_sorted_values_sorted_values_sorted_keys = paren_levels_sorted_values_sorted_values_sorted.keys\n\
    \        val paren_levels_sorted_values_sorted_values_sorted_values = paren_levels_sorted_values_sorted_values_sorted.values\n\
    \        val paren_levels_sorted_values_sorted_values_sorted_values_sorted = paren_levels_sorted_values_sorted_values_sorted_values.sortBy(_._1).reverse\n\
    \        val paren_levels_sorted_values_sorted_values_sorted_values_sorted_keys\
    \ = paren_levels_sorted_values_sorted_values_sorted_values_sorted.keys\n     \
    \   val paren_levels_sorted_values_sorted_values_sorted_values_sorted_values =\
    \ paren_levels_sorted_values_sorted_values_sorted_values_sorted.values\n     \
    \   val paren_levels_sorted_values_sorted_values_sorted_values_sorted_values_sorted\
    \ = paren_levels_sorted_values_sorted_values_sorted_values_sorted_values.sortBy(_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_with_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren =\
    \ mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.Stack[String]()\n        val paren_stack_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = mutable.", "        val paren_groups = paren_string.split(\" \")\n       \
    \ val paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1 else 0)\n\
    \        val paren_groups_with_paren_sum = paren_groups_with_paren.sum\n     \
    \   val paren_groups_with_paren_max_index = paren_groups_with_paren_sum.max\n\
    \        val paren_groups_with_paren_max_index_index = paren_groups_with_paren_max_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index = paren_groups_with_paren_max_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index = paren_groups_with_paren_max_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index = paren_groups_with_paren_max_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index.toLong\n \
    \       val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index.toLong\n\
    \        val paren_groups_with_paren_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = paren_groups_with_paren_max_index_index_index_index_index_index_index_index_",
  "        val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n        val\
    \ paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(", "        val paren_groups\
    \ = paren_string.split(\" \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0)(_\
    \ + _)\n        val max_levels_map = paren_groups.foldLeft(0)((acc, x) => if (acc\
    \ > x) acc else x)\n        val max_levels_map_list = max_levels_map.toList.map(_.toLong)\n\
    \        val max_levels_map_list_sorted = max_levels_map_list.sortBy(-_)\n   \
    \     val max_levels_map_list_sorted_reversed = max_levels_map_list_sorted.reverse\n\
    \        val max_levels_map_list_sorted_reversed_map = max_levels_map_list_sorted_reversed.foldLeft(0)((acc,\
    \ x) => if (acc > x) acc else x)\n        val max_levels_map_list_sorted_reversed_map_list\
    \ = max_levels_map_list_sorted_reversed_map.toList.map(_.toLong)\n        val\
    \ max_levels_map_list_sorted_reversed_map_list_sorted = max_levels_map_list_sorted_reversed_map_list.sortBy(-_)\n\
    \        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed = max_levels_map_list_sorted_reversed_map_list_sorted.reverse\n\
    \        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed.foldLeft(0)((acc,\
    \ x) => if (acc > x) acc else x)\n        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map.toList.map(_.toLong)\n\
    \        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list.sortBy(-_)\n\
    \        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed.reverse\n\
    \        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed_map\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed_map.foldLeft(0)((acc,\
    \ x) => if (acc > x) acc else x)\n        val max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed_map_list\
    \ = max_levels_map_list_sorted_reversed_map_list_sorted_reversed_map_list_sorted_reversed_map_list.sortBy(-_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_counter\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter2 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter3 = mutable.Stack[Long]()\n        val paren_stack_counter4\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter5 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter6 = mutable.Stack[Long]()\n        val paren_stack_counter7\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter8 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter9 = mutable.Stack[Long]()\n        val paren_stack_counter10\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter11 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter12 = mutable.Stack[Long]()\n        val paren_stack_counter13\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter14 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter15 = mutable.Stack[Long]()\n        val paren_stack_counter16\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter17 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter18 = mutable.Stack[Long]()\n        val paren_stack_counter19\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter20 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter21 = mutable.Stack[Long]()\n        val paren_stack_counter22\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter23 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter24 = mutable.Stack[Long]()\n        val paren_stack_counter25\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter26 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter27 = mutable.Stack[Long]()\n        val paren_stack_counter28\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter29 = mutable.Stack[Long]()\n\
    \        val paren_stack_counter30 = mutable.Stack[Long]()\n        val paren_stack_counter31\
    \ = mutable.Stack[Long]()\n        val paren_stack_counter32 = mutable.Stack[Long]",
  "        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_max_size = paren_array_size -\
    \ 1\n        val paren_array_max_index = paren_array_size - 1\n        val paren_array_max_value\
    \ = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_max_index\
    \ = paren_array_max_value_length - 1\n        val paren_array_max_value_max_value\
    \ = paren_array_max_value(paren_array_max_value_max_index)\n        val paren_array_max_value_max_value_length\
    \ = paren_array_max_value_max_value.length\n        val paren_array_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_length - 1\n        val paren_array_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value(paren_array_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value = paren_array_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_length = paren_array_max_value_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_index = paren_array_max_value_max_value_max_value_max_value_length\
    \ - 1\n        val paren_array_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value.length\n   \
    \     val paren_array_max_value_max_value_max_value_max_value_max_value_max_index\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_length - 1\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value\
    \ = paren_array_max_value_max_value_max_value(paren_array_max_value_max_value_max_value_max_value_max_value_max_index)\n\
    \        val paren_array_max_value_max_value_max_value_max_value_max_value_max_value_length\
    \ = paren_array_max_value_max_value_max_value_max_value_max_value_max_value.length\n\
    \        val paren_array_max_value_max_", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + 1\n        val\
    \ paren_chars_count_with_paren_plus_1 = paren_chars_count_with_paren + 1\n   \
    \     val paren_chars_count_with_paren_plus_2 = paren_chars_count_with_paren_plus_1\
    \ + 1\n        val paren_chars_count_with_paren_plus_3 = paren_chars_count_with_paren_plus_2\
    \ + 1\n        val paren_chars_count_with_paren_plus_4 = paren_chars_count_with_paren_plus_3\
    \ + 1\n        val paren_chars_count_with_paren_plus_5 = paren_chars_count_with_paren_plus_4\
    \ + 1\n        val paren_chars_count_with_paren_plus_6 = paren_chars_count_with_paren_plus_5\
    \ + 1\n        val paren_chars_count_with_paren_plus_7 = paren_chars_count_with_paren_plus_6\
    \ + 1\n        val paren_chars_count_with_paren_plus_8 = paren_chars_count_with_paren_plus_7\
    \ + 1\n        val paren_chars_count_with_paren_plus_9 = paren_chars_count_with_paren_plus_8\
    \ + 1\n        val paren_chars_count_with_paren_plus_10 = paren_chars_count_with_paren_plus_9\
    \ + 1\n        val paren_chars_count_with_paren_plus_11 = paren_chars_count_with_paren_plus_10\
    \ + 1\n        val paren_chars_count_with_paren_plus_12 = paren_chars_count_with_paren_plus_11\
    \ + 1\n        val paren_chars_count_with_paren_plus_13 = paren_chars_count_with_paren_plus_12\
    \ + 1\n        val paren_chars_count_with_paren_plus_14 = paren_chars_count_with_paren_plus_13\
    \ + 1\n        val paren_chars_count_with_paren_plus_15 = paren_chars_count_with_paren_plus_14\
    \ + 1\n        val paren_chars_count_with_paren_plus_16 = paren_chars_count_with_paren_plus_15\
    \ + 1\n        val paren_chars_count_with_paren_plus_17 = paren_chars_count_with_paren_plus_16\
    \ + 1\n        val paren_chars_count_with_paren_plus_18 = paren_chars_count_with_paren_plus_17\
    \ + 1\n        val paren_chars_count_with_paren_plus_19 = paren_chars_count_with_paren_plus_18\
    \ + 1\n", "        val paren_list_string = paren_string.trim\n        val paren_list_array\
    \ = paren_list_string.split(\" \")\n        val paren_list_array_length = paren_list_array.length\n\
    \        val paren_list_array_length_long = paren_list_array_length.toLong\n \
    \       val paren_list_array_length_long2 = paren_list_array_length_long * 2\n\
    \        val paren_list_array_length_long3 = paren_list_array_length_long * 3\n\
    \        val paren_list_array_length_long4 = paren_list_array_length_long * 4\n\
    \        val paren_list_array_length_long5 = paren_list_array_length_long * 5\n\
    \        val paren_list_array_length_long6 = paren_list_array_length_long * 6\n\
    \        val paren_list_array_length_long7 = paren_list_array_length_long * 7\n\
    \        val paren_list_array_length_long8 = paren_list_array_length_long * 8\n\
    \        val paren_list_array_length_long9 = paren_list_array_length_long * 9\n\
    \        val paren_list_array_length_long10 = paren_list_array_length_long * 10\n\
    \        val paren_list_array_length_long11 = paren_list_array_length_long * 11\n\
    \        val paren_list_array_length_long12 = paren_list_array_length_long * 12\n\
    \        val paren_list_array_length_long13 = paren_list_array_length_long * 13\n\
    \        val paren_list_array_length_long14 = paren_list_array_length_long * 14\n\
    \        val paren_list_array_length_long15 = paren_list_array_length_long * 15\n\
    \        val paren_list_array_length_long16 = paren_list_array_length_long * 16\n\
    \        val paren_list_array_length_long17 = paren_list_array_length_long * 17\n\
    \        val paren_list_array_length_long18 = paren_list_array_length_long * 18\n\
    \        val paren_list_array_length_long19 = paren_list_array_length_long * 19\n\
    \        val paren_list_array_length_long20 = paren_list_array_length_long * 20\n\
    \        val paren_list_array_length_long21 = paren_list_array_length_long * 21\n\
    \        val paren_list_array_length_long22 = paren_list_array_length_long * 22\n\
    \        val paren_list_array_length_long23 = paren_list_array_length_long * 23\n\
    \        val paren_list_array_length_long24 = paren_list_array_length_long * 24\n\
    \        val paren_list_array_length_long25 = paren_list_array_length_long * 25\n\
    \        val paren_list_array_length_long26 = paren_list_array_length_", "   \
    \     val paren_groups = paren_string.split(\"\\\\s+\")\n        val max_level\
    \ = 0\n        val max_level_list: List[Long] = Nil\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_level = (paren_group.length()\
    \ - paren_group.indexOf(\"(\")).toLong\n            if (paren_group_level > max_level)\
    \ {\n                max_level = paren_group_level\n                max_level_list\
    \ = Nil\n            }\n            if (paren_group_level == max_level) {\n  \
    \              max_level_list = max_level_list :+ paren_group_level\n        \
    \    }\n        }\n        max_level_list", "        val paren_groups = paren_string.split(\"\
    \\\\s+\")\n        val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(_.length).max\n            if (paren_group_levels\
    \ > max_level) {\n                max_level = paren_group_levels\n           \
    \     max_levels += paren_group_levels\n            }\n        }\n        max_levels.toList",
  "        val paren_chars = paren_string.split(\" \").map(_.toChar)\n        val\
    \ paren_chars_count = paren_chars.map(_.length).sum\n        val paren_chars_count_with_paren\
    \ = paren_chars_count + paren_chars.map(_.toString.length).sum\n        val paren_chars_count_with_paren_plus_one\
    \ = paren_chars_count_with_paren + 1\n        val paren_chars_count_with_paren_plus_two\
    \ = paren_chars_count_with_paren + 2\n        val paren_chars_count_with_paren_plus_three\
    \ = paren_chars_count_with_paren + 3\n        val paren_chars_count_with_paren_plus_four\
    \ = paren_chars_count_with_paren + 4\n        val paren_chars_count_with_paren_plus_five\
    \ = paren_chars_count_with_paren + 5\n        val paren_chars_count_with_paren_plus_six\
    \ = paren_chars_count_with_paren + 6\n        val paren_chars_count_with_paren_plus_seven\
    \ = paren_chars_count_with_paren + 7\n        val paren_chars_count_with_paren_plus_eight\
    \ = paren_chars_count_with_paren + 8\n        val paren_chars_count_with_paren_plus_nine\
    \ = paren_chars_count_with_paren + 9\n        val paren_chars_count_with_paren_plus_ten\
    \ = paren_chars_count_with_paren + 10\n        val paren_chars_count_with_paren_plus_eleven\
    \ = paren_chars_count_with_paren + 11\n        val paren_chars_count_with_paren_plus_twelve\
    \ = paren_chars_count_with_paren + 12\n        val paren_chars_count_with_paren_plus_thirteen\
    \ = paren_chars_count_with_paren + 13\n        val paren_chars_count_with_paren_plus_fourteen\
    \ = paren_chars_count_with_paren + 14\n        val paren_chars_count_with_paren_plus_fifteen\
    \ = paren_chars_count_with_paren + 15\n        val paren_chars_count_with_paren_plus_sixteen\
    \ = paren_chars_count_with_paren + 16\n        val paren_chars_count_with_paren_plus_seventeen\
    \ = paren_chars_count_with_paren + 17\n        val paren_chars_count_with_paren_plus_eighteen\
    \ = paren_chars_count_with_paren + 18\n        val paren_chars_count_with_paren_plus_nineteen\
    \ = paren_chars_count_with_", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0L) { (max_level,\
    \ group) => if (group > max_level) group else max_level }\n        val max_level\
    \ = max_levels + 1\n        val max_levels = max_level.toLong\n        val max_levels_str\
    \ = max_levels.toString\n        val max_levels_str = max_levels_str.substring(0,\
    \ max_levels_str.length - 1)\n        val max_levels_str = max_levels_str + \"\
    )\"\n        val max_levels_str = max_levels_str + max_levels_str\n        val\
    \ max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        val max_levels_str = max_levels_str + max_levels_str\n        val max_levels_str\
    \ = max_levels_str + max_levels_str\n        val max_levels_str = max_levels_str\
    \ + max_levels_str\n        val max_levels_str = max_levels_str + max_levels_str\n\
    \        ", "        val paren_groups = paren_string.split(\" \")\n        val\
    \ paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1 else 0)\n\
    \        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_int\
    \ = paren_groups_with_paren_max_level.toInt\n        val paren_groups_with_paren_max_level_long\
    \ = paren_groups_with_paren_max_level_int.toLong\n        val paren_groups_with_paren_max_level_longs\
    \ = paren_groups_with_paren_max_level_long.toLong\n        val paren_groups_with_paren_max_level_longs_int\
    \ = paren_groups_with_paren_max_level_longs.toInt\n        val paren_groups_with_paren_max_level_longs_long\
    \ = paren_groups_with_paren_max_level_longs_int.toLong\n        val paren_groups_with_paren_max_level_longs_longs\
    \ = paren_groups_with_paren_max_level_longs_long.toLong\n        val paren_groups_with_paren_max_level_longs_longs_int\
    \ = paren_groups_with_paren_max_level_longs_longs.toInt\n        val paren_groups_with_paren_max_level_longs_longs_long\
    \ = paren_groups_with_paren_max_level_longs_longs_int.toLong\n        val paren_groups_with_paren_max_level_longs_longs_longs\
    \ = paren_groups_with_paren_max_level_longs_longs_long.toLong\n        val paren_groups_with_paren_max_level_longs_longs_longs_int\
    \ = paren_groups_with_paren_max_level_longs_longs_longs.toInt\n        val paren_groups_with_paren_max_level_longs_longs_longs_long\
    \ = paren_groups_with_paren_max_level_longs_longs_longs_int.toLong\n        val\
    \ paren_groups_with_paren_max_level_longs_longs_longs_longs = paren_groups_with_paren_max_level_longs_longs_longs_long.toLong\n\
    \        val paren_groups_with_paren_max_level_longs_longs_longs_longs_int = paren_groups_with_paren_max_level_longs_longs_longs_longs.toInt\n\
    \        val paren_groups_with_paren_max_level_longs_longs_longs_longs_long =\
    \ paren_groups_with_paren_max_level_longs_longs_longs_longs_int.toLong\n     \
    \   ", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n \
    \       val max_level = paren_groups.foldLeft(0l) { (max_level, paren_group) =>\n\
    \            val max_level_with_paren_group = max_level + paren_group\n      \
    \      if (max_level_with_paren_group > max_level) max_level_with_paren_group\
    \ else max_level\n        }\n        paren_groups.map(_.toLong).take(max_level)",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_len = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_len = mutable.Stack[Int]()\n        val paren_stack_max_level_len\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_", "        val paren_stack\
    \ = mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level = mutable.Stack[Long]()\n        val paren_stack_level_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_size = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val\
    \ paren_stack_level_max_index_value = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value\
    \ = mutable.Stack[Long]()\n        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n\
    \        val paren_stack_level_max_index_value = mutable.Stack[Long]()\n     \
    \   val paren_stack_level_max_index_value = mutable.Stack[Long]", "        val\
    \ paren_groups = paren_string.split(\"\\\\s+\")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.map(x => x.length)\n        val max_paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.max\n        val max_paren_groups_with_paren\
    \ = paren_groups_with_paren.max\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_top\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = paren_stack_size.push(paren_stack_size.size)\n\
    \        val paren_stack_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Int]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Int]()\n   \
    \     val paren_stack_top_top_top_top_top_top = mutable.Stack[Int]()\n       \
    \ val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Int]()\n      \
    \  val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Int]()\n      \
    \  val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n \
    \       val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_", "        val\
    \ paren_array = paren_string.split(\" \").map(_.toLong).toList\n        val paren_array_size\
    \ = paren_array.size\n        val paren_array_max_size = paren_array_size.toLong\n\
    \        val paren_array_max_index = paren_array_size - 1\n        val paren_array_max_element\
    \ = paren_array(paren_array_max_index)\n        val paren_array_max_element_index\
    \ = paren_array_max_index - 1\n        val paren_array_max_element_size = paren_array(paren_array_max_element_index).size\n\
    \        val paren_array_max_element_size = paren_array_max_element_size.toLong\n\
    \        val paren_array_max_element_index = paren_array_max_element_index - 1\n\
    \        val paren_array_max_element_element = paren_array(paren_array_max_element_index)\n\
    \        val paren_array_max_element_element_index = paren_array_max_element_index\
    \ - 1\n        val paren_array_max_element_element_size = paren_array(paren_array_max_element_element_index).size\n\
    \        val paren_array_max_element_element_size = paren_array_max_element_element_size.toLong\n\
    \        val paren_array_max_element_element_element = paren_array(paren_array_max_element_element_index)\n\
    \        val paren_array_max_element_element_element_index = paren_array_max_element_element_index\
    \ - 1\n        val paren_array_max_element_element_element_size = paren_array(paren_array_max_element_element_element_index).size\n\
    \        val paren_array_max_element_element_element_size = paren_array_max_element_element_element_size.toLong\n\
    \        val paren_array_max_element_element_element_element = paren_array(paren_array_max_element_element_element_index)\n\
    \        val paren_array_max_element_element_element_element_index = paren_array_max_element_element_element_index\
    \ - 1\n        val paren_array_max_element_element_element_element_size = paren_array(paren_array_max_element_element_element_element_index).size\n\
    \        val paren_array_max_element_element_element_element_size = paren_array_max_element_element_element_element_size.toLong\n\
    \        val paren_array_max_element_element_element_element_element = paren_array(paren_array_max_element_element_element_element_index)\n\
    \        val paren_array_max_element_element_element_element_element_index = paren_array_max_element_element_element_element_index\
    \ - 1\n        val paren_array_max_element_element_element_element_element_size\
    \ = paren_array(paren_array_max_element_element_element_element_element_index).size\n\
    \        val paren_array_max_element_element_element_element_element_size = paren_array_max_element_element_element_element_element_element_size.toLong\n\
    \        val paren_array_max_element_element_element_element_element_element_element\
    \ = paren_array(paren_array_", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(c => if (c\
    \ == '(') 1 else 0).sum\n        val paren_chars_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_sum = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).sum\n        val paren_chars_count_count_count_count_count_count_max\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).max\n        val paren_chars_count_count_count_count_count_count_min\
    \ = paren_chars.map(c => if (c == '(') 1 else 0).min\n        val paren_chars_count_count_count_count_count_count_sum\
    \ = paren_chars.map(c => if (c == '", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_size = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n       \
    \ val paren_stack_max_depth_max_depth_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_depth_depth_depth_depth_depth_depth",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_counts\
    \ = paren_groups.map(x => x.split(\"(\").map(y => y.split(\")\").map(z => z.split(\"\
    )\").length.toLong).max)\n        val max_count = paren_groups_with_counts.max\n\
    \        val max_count_index = paren_groups_with_counts.indexWhere(_ == max_count)\n\
    \        val max_count_groups = paren_groups(max_count_index)\n        val max_count_groups_with_counts\
    \ = max_count_groups.map(x => x.split(\"(\").map(y => y.split(\")\").map(z =>\
    \ z.split(\")\").length.toLong).max)\n        val max_count_group_index = max_count_groups_with_counts.indexWhere(_\
    \ == max_count_groups_with_counts.max)\n        val max_count_group_groups = max_count_groups(max_count_group_index)\n\
    \        val max_count_group_groups_with_counts = max_count_group_groups.map(x\
    \ => x.split(\"(\").map(y => y.split(\")\").map(z => z.split(\")\").length.toLong).max)\n\
    \        val max_count_group_group_index = max_count_group_groups_with_counts.indexWhere(_\
    \ == max_count_group_groups_with_counts.max)\n        val max_count_group_group_groups\
    \ = max_count_group_groups(max_count_group_group_index)\n        val max_count_group_group_groups_with_counts\
    \ = max_count_group_group_groups.map(x => x.split(\"(\").map(y => y.split(\")\"\
    ).map(z => z.split(\")\").length.toLong).max)\n        val max_count_group_group_group_index\
    \ = max_count_group_group_groups_with_counts.indexWhere(_ == max_count_group_group_groups_with_counts.max)\n\
    \        val max_count_group_group_group_groups = max_count_group_group_groups(max_count_group_group_group_index)\n\
    \        val max_count_group_group_group_groups_with_counts = max_count_group_group_group_groups.map(x\
    \ => x.split(\"(\").map(y => y.split(\")\").map(z => z.split(\")\").length.toLong).max)\n\
    \        val max_count_group_group_group_group_index = max_count_group_group_group_groups_with_counts.indexWhere(_\
    \ == max_count_group_group_groups_with_counts.max)\n        val max_count_group_group_group_group_groups\
    \ = max_count_group_group_group_group_groups(max_count_group_group_group_group_index)\n\
    \        val max_count_group_group_group_group_groups_with_counts = max_count_group_group_group_group_groups.map(x\
    \ => x.split(\"(\").map(y => y.split(\")\").map(z => z.split(\")\").length.toLong).max)\n\
    \        val max_count_group_group_group_group_group_index = max_count_group_group_group_group_groups_with_counts.indexWhere(_\
    \ == max_count_group_group_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val max_level = 0\n        val max_levels = mutable.ListBuffer[Long]()\n\
    \        for (paren_group <- paren_groups) {\n            val paren_group_levels\
    \ = paren_group.split(\"\\\\(\").map(_.length.toLong)\n            if (paren_group_levels.max\
    \ > max_level) {\n                max_level = paren_group_levels.max\n       \
    \         max_levels += paren_group_levels.max\n            }\n        }\n   \
    \     max_levels", "        val paren_groups = paren_string.split(\" \")\n   \
    \     val paren_groups_with_paren = paren_groups.map(x => x.replace(\"(\", \"\
    (\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren.length\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val ", "        val paren_groups = paren_string.split(\" \")\n      \
    \  val paren_groups_with_paren = paren_groups.map(x => if (x.equals(\"(\")) \"\
    (\" + x else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => if (x.equals(\"(\")) 1 else 0)\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.map(x => if (x == 0) 0 else x)\n        val\
    \ paren_groups_with_paren_length = paren_groups_with_paren_length.map(x => if\
    \ (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) 0 else x)\n        val paren_groups_with_paren_length = paren_groups_with_paren_length.map(x\
    \ => if (x == 0) ", "        val paren_list_string = paren_string.trim\n     \
    \   val paren_list_list = paren_list_string.split(\" \")\n        val paren_list_list_length\
    \ = paren_list_list.length\n        val paren_list_list_list_length = paren_list_list_length\
    \ / 2\n        val paren_list_list_list_list_length = paren_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_length = paren_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_length = paren_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_length / 2\n        val paren_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_length / 2\n     \
    \   val paren_list_list_list_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_length /\
    \ 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_", "        val paren_list_string\
    \ = paren_string.trim\n        val paren_list_array = paren_list_string.split(\"\
    \ \")\n        val paren_list_array_size = paren_list_array.length\n        val\
    \ paren_list_array_sorted = paren_list_array.sortWith(_ < _)\n        val paren_list_array_sorted_size\
    \ = paren_list_array_sorted.length\n        val paren_list_array_sorted_size =\
    \ paren_list_array_sorted_size.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_array_sorted_size_long\
    \ = paren_list_array_sorted_size_long.toLong\n        val paren_list_", "    \
    \    val paren_array = paren_string.split(\" \")\n        val paren_array_size\
    \ = paren_array.length\n        val paren_array_list = mutable.ArrayBuffer.empty[Long]\n\
    \        var paren_array_index = 0\n        var paren_array_level = 0\n      \
    \  var paren_array_max_level = 0\n        while(paren_array_index < paren_array_size)\
    \ {\n            val paren_array_element = paren_array(paren_array_index)\n  \
    \          val paren_array_element_size = paren_array_element.size\n         \
    \   val paren_array_element_level = paren_array_element.indexOf(\"(\")\n     \
    \       val paren_array_element_max_level = paren_array_element.indexOf(\")\"\
    )\n            if(paren_array_element_level == -1) {\n                paren_array_list.add(paren_array_element)\n\
    \                paren_array_index += 1\n            } else {\n              \
    \  if(paren_array_element_level > paren_array_max_level) {\n                 \
    \   paren_array_max_level = paren_array_element_level\n                }\n   \
    \             if(paren_array_element_level == paren_array_max_level) {\n     \
    \               paren_array_list.add(paren_array_element)\n                  \
    \  paren_array_index += 1\n                } else {\n                    if(paren_array_element_level\
    \ == paren_array_max_level + 1) {\n                        paren_array_list.add(paren_array_element)\n\
    \                        paren_array_index += 1\n                    } else {\n\
    \                        paren_array_list.add(paren_array_element)\n         \
    \               paren_array_list.add(paren_array_element.substring(0, paren_array_element_level))\n\
    \                        paren_array_index += 1\n                    }\n     \
    \           }\n            }\n        }\n        paren_array_list.map(_.toLong).toList",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => if (x == \"(\") 1 else 0)\n        val paren_groups_with_paren_sum\
    \ = paren_groups_with_paren.sum\n        val paren_groups_with_paren_max_level\
    \ = paren_groups_with_paren_sum / paren_groups_with_paren_sum.max\n        val\
    \ paren_groups_with_paren_max_level_int = paren_groups_with_paren_max_level.toInt\n\
    \        val paren_groups_with_paren_max_level_long = paren_groups_with_paren_max_level_int.toLong\n\
    \        val paren_groups_with_paren_max_level_longs = paren_groups_with_paren_max_level_long.toLong\n\
    \        val paren_groups_with_paren_max_level_longs_array = paren_groups_with_paren_max_level_longs.toArray\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted = paren_groups_with_paren_max_level_longs_array.sort\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed = paren_groups_with_paren_max_level_longs_array_sorted.reverse\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed.sort\n     \
    \   val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted.reverse\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed.sort\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed.sort\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val paren_groups_with_paren_max_level_longs_array_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = paren_group", "        val paren_groups = paren_string.split(\" \")\n    \
    \    val paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1 else\
    \ 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,\
    \ y) => x + y)\n        val paren_groups_with_paren_sum_with_paren = paren_groups_with_paren_sum\
    \ + paren_groups_with_paren.last\n        val paren_groups_with_paren_sum_with_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren - paren_groups_with_paren.last\n  \
    \      val paren_groups_with_paren_sum_with_paren_within_paren_within_paren =\
    \ paren_groups_with_paren_sum_with_paren_within_paren - paren_groups_with_paren.last\n\
    \        val paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren_within_paren_within_paren - paren_groups_with_paren.last\n\
    \        val paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren\
    \ - paren_groups_with_paren.last\n        val paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ - paren_groups_with_paren.last\n        val paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ - paren_groups_with_paren.last\n        val paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ = paren_groups_with_paren_sum_with_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren_within_paren\
    \ - paren_groups_with_paren.last\n        val paren_groups_with_paren_sum_with_paren",
  "        val paren_array = paren_string.split(\" \").toList\n        val paren_array_size\
    \ = paren_array.size\n        val paren_array_max_size = paren_array_size - 1\n\
    \        val paren_array_max_index = paren_array_max_size - 1\n        val paren_array_max_value\
    \ = paren_array(paren_array_max_index)\n        val paren_array_max_value_length\
    \ = paren_array_max_value.length\n        val paren_array_max_value_length = paren_array_max_value_length\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value.charAt(paren_array_max_value_length)\n\
    \        val paren_array_max_value_char = paren_array_max_value_char - 1\n   \
    \     val paren_array_max_value_char = paren_array_max_value_char - 1\n      \
    \  val paren_array_max_value_char = paren_array_max_value_char - 1\n        val\
    \ paren_array_max_value_char = paren_array_max_value_char - 1\n        val paren_array_max_value_char\
    \ = paren_array_max_value_char - 1\n        val paren_array_max_value_char = paren_array_max_value_char\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value_char - 1\n\
    \        val paren_array_max_value_char = paren_array_max_value_char - 1\n   \
    \     val paren_array_max_value_char = paren_array_max_value_char - 1\n      \
    \  val paren_array_max_value_char = paren_array_max_value_char - 1\n        val\
    \ paren_array_max_value_char = paren_array_max_value_char - 1\n        val paren_array_max_value_char\
    \ = paren_array_max_value_char - 1\n        val paren_array_max_value_char = paren_array_max_value_char\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value_char - 1\n\
    \        val paren_array_max_value_char = paren_array_max_value_char - 1\n   \
    \     val paren_array_max_value_char = paren_array_max_value_char - 1\n      \
    \  val paren_array_max_value_char = paren_array_max_value_char - 1\n        val\
    \ paren_array_max_value_char = paren_array_max_value_char - 1\n        val paren_array_max_value_char\
    \ = paren_array_max_value_char - 1\n        val paren_array_max_value_char = paren_array_max_value_char\
    \ - 1\n        val paren_array_max_value_char = paren_array_max_value_char - 1\n\
    \        val paren_array_max_value_char = paren_array_max_value_char - 1\n   \
    \     val paren_array_max_value_char = paren_array_max_value_char - 1\n      \
    \  val paren_array_max_value_char = paren_array_max_value_char - 1\n        val\
    \ paren_array_max_value_char = paren_", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_size\
    \ - 1\n        val paren_array_max_value = paren_array_max_index.toLong\n    \
    \    val paren_array_max_value_plus_1 = paren_array_max_value + 1\n        val\
    \ paren_array_max_value_minus_1 = paren_array_max_value - 1\n        val paren_array_max_value_minus_2\
    \ = paren_array_max_value - 2\n        val paren_array_max_value_minus_3 = paren_array_max_value\
    \ - 3\n        val paren_array_max_value_minus_4 = paren_array_max_value - 4\n\
    \        val paren_array_max_value_minus_5 = paren_array_max_value - 5\n     \
    \   val paren_array_max_value_minus_6 = paren_array_max_value - 6\n        val\
    \ paren_array_max_value_minus_7 = paren_array_max_value - 7\n        val paren_array_max_value_minus_8\
    \ = paren_array_max_value - 8\n        val paren_array_max_value_minus_9 = paren_array_max_value\
    \ - 9\n        val paren_array_max_value_minus_10 = paren_array_max_value - 10\n\
    \        val paren_array_max_value_minus_11 = paren_array_max_value - 11\n   \
    \     val paren_array_max_value_minus_12 = paren_array_max_value - 12\n      \
    \  val paren_array_max_value_minus_13 = paren_array_max_value - 13\n        val\
    \ paren_array_max_value_minus_14 = paren_array_max_value - 14\n        val paren_array_max_value_minus_15\
    \ = paren_array_max_value - 15\n        val paren_array_max_value_minus_16 = paren_array_max_value\
    \ - 16\n        val paren_array_max_value_minus_17 = paren_array_max_value - 17\n\
    \        val paren_array_max_value_minus_18 = paren_array_max_value - 18\n   \
    \     val paren_array_max_value_minus_19 = paren_array_max_value - 19\n      \
    \  val paren_array_max_value_minus_20 = paren_array_max_value - 20\n        val\
    \ paren_array_max_value_minus_21 = paren_array_max_value - 21\n        val paren_array_max_value_minus_22\
    \ = paren_array_max_value - 22\n        val paren_array_max_value_minus_23 = paren_array_max_value\
    \ - 23\n        val paren_array_max_value_minus_24", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_list = mutable.ArrayBuffer.empty[Long]\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren_array_list.length\n        val paren_array_list_index = paren_array_list_size\n\
    \        val paren_array_list_size = paren_array_list.length\n        val paren_array_list_index\
    \ = paren_array_list_size\n        val paren_array_list_size = paren_array_list.length\n\
    \        val paren_array_list_index = paren_array_list_size\n        val paren_array_list_size\
    \ = paren", "        val paren_groups = paren_string.split(\" \")\n        val\
    \ max_level = 0\n        val max_level_groups = List[Long]()\n        for (paren_group\
    \ <- paren_groups) {\n            val paren_group_levels = paren_group.split(\"\
    \\\\(\").map(_.toLong)\n            val max_level_of_this_group = paren_group_levels.max\n\
    \            if (max_level_of_this_group > max_level) {\n                max_level\
    \ = max_level_of_this_group\n                max_level_groups = paren_group_levels.toList\n\
    \            }\n        }\n        max_level_groups", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.map(x => x.length)\n        val max_paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.max\n        val max_paren_groups_with_paren\
    \ = paren_groups_with_paren.max\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_map\
    \ = mutable.Map[String, List[Long]]()\n        val paren_groups_list_size = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map = mutable.Map[Long, List[Long]]()\n       \
    \ val paren_groups_list_map_size = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_value = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map_key_size = mutable.ListBuffer[Long]()\n   \
    \     val paren_groups_list_map_value_size = mutable.ListBuffer[Long]()\n    \
    \    val paren_groups_list_map_key_value = mutable.ListBuffer[Long]()\n      \
    \  val paren_groups_list_map_key_value_size = mutable.ListBuffer[Long]()\n   \
    \     val paren_groups_list_map_key_value_size_value = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map_key_value_size_value_size = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map_key_value_size_value_size_value = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map_key_value_size_value_size_value_size = mutable.ListBuffer[Long]()\n\
    \        val paren_groups_list_map_key_value_size_value_size_value_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value_size_value_size\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value_size_value_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value_size_value_size_value_size_value_size_value_size_value_size_value\
    \ = mutable.ListBuffer[Long]()\n        val paren_groups_list_map_key_value_size_value",
  "        val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_map = paren_groups.map(x => x.toLong).toMap\n      \
    \  val paren_groups_list_size = paren_groups_map.size\n        val paren_groups_list_map\
    \ = paren_groups_map.map(x => x._2.toLong).toList\n        val paren_groups_list_map_size\
    \ = paren_groups_list_map.size\n        val paren_groups_list_map_sum = paren_groups_list_map.sum\n\
    \        val paren_groups_list_map_max_size = paren_groups_list_map_sum / paren_groups_list_map_size\n\
    \        val paren_groups_list_map_max_index = paren_groups_list_map_max_size.indexOfMax\n\
    \        val paren_groups_list_map_max_value = paren_groups_list_map_max_index.toLong\n\
    \        val paren_groups_list_map_max_key = paren_groups_list_map_max_index.toInt\n\
    \        val paren_groups_list_map_max_key_value = paren_groups_list_map_max_key.toLong\n\
    \        val paren_groups_list_map_max_key_index = paren_groups_list_map_max_key_value.toInt\n\
    \        val paren_groups_list_map_max_key_key_value = paren_groups_list_map_max_key_index.toLong\n\
    \        val paren_groups_list_map_max_key_key_index = paren_groups_list_map_max_key_key_value.toInt\n\
    \        val paren_groups_list_map_max_key_key_key_value = paren_groups_list_map_max_key_key_index.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_index = paren_groups_list_map_max_key_key_key_value.toInt\n\
    \        val paren_groups_list_map_max_key_key_key_key_value = paren_groups_list_map_max_key_key_key_key_index.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_key_key_value = paren_groups_list_map_max_key_key_key_key_key_value.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_key_key_key_value = paren_groups_list_map_max_key_key_key_key_key_key_value.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_key_key_key_key_value = paren_groups_list_map_max_key_key_key_key_key_key_key_key_value.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_key_key_key_key_key_key_value\
    \ = paren_groups_list_map_max_key_key_key_key_key_key_key_key_key_key_value.toLong\n\
    \        val paren_groups_list_map_max_key_key_key_key_key_key_key_key_key_key_key_value\
    \ = paren_groups_list_map_max_key_key_key_key_key_key_key_", "        val paren_groups\
    \ = paren_string.split(\" \").map(_.toLong)\n        val max_levels = paren_groups.foldLeft(0l)\
    \ { (max_levels, group) => if (group > max_levels) group else max_levels }\n \
    \       val max_levels_str = max_levels.toString\n        val max_levels_long\
    \ = max_levels.toLong\n        val max_levels_longStr = max_levels_long.toString\n\
    \        val max_levels_longStrToInt = max_levels_longStr.toInt\n        val max_levels_longStrToLong\
    \ = max_levels_longStr.toLong\n        val max_levels_longStrToLongStr = max_levels_longStr.toLong.toString\n\
    \        val max_levels_longStrToLongStrToInt = max_levels_longStrToInt.toLong\n\
    \        val max_levels_longStrToLongStrToLong = max_levels_longStrToLong.toString\n\
    \        val max_levels_longStrToLongStrToLongStr = max_levels_longStrToLongStr.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToInt = max_levels_longStrToLongStrToInt.toLong\n\
    \        val max_levels_longStrToLongStrToLongStrToLong = max_levels_longStrToLongStrToLong.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStr = max_levels_longStrToLongStrToLongStr.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToInt = max_levels_longStrToLongStrToLongStrToInt.toLong\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToLong = max_levels_longStrToLongStrToLongStrToLong.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToLongStr = max_levels_longStrToLongStrToLongStrToLongStrToLongStr.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToLongStrToInt = max_levels_longStrToLongStrToLongStrToLongStrToLongStrToInt.toLong\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToLongStrToLong = max_levels_longStrToLongStrToLongStrToLongStrToLongStrToLong.toString\n\
    \        val max_levels_longStrToLongStrToLongStrToLongStrToLongStr", "      \
    \  val paren_groups = paren_string.split(\" \")\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\(\", \"(\").replaceAll(\"\\\\)\"\
    , \")\"))\n        val paren_groups_with_paren_length = paren_groups_with_paren.map(x\
    \ => x.length)\n        val max_paren_groups_with_paren_length = paren_groups_with_paren_length.max\n\
    \        val max_paren_groups_with_paren = paren_groups_with_paren.max\n     \
    \   val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_groups_with_paren_length.toLong\n\
    \        val max_paren_groups_with_paren_length = max_paren_", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_with_paren = paren_groups.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.map(x => x.length)\n        val max_paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.max\n        val max_paren_groups_with_paren\
    \ = paren_groups_with_paren.max\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong", "        val paren_stack = mutable.Stack[Long]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_", "        val paren_list_string = paren_string.trim\n   \
    \     val paren_list_array = paren_list_string.split(\" \")\n        val paren_list_array_length\
    \ = paren_list_array.length\n        val paren_list_array_length_long = paren_list_array_length.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toInt\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = paren_list_array_length_long.toLong\n\
    \        val paren_list_array_length_long = ", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.map(x => x.length).max\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toInt\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.toLong\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.to", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val max_level = paren_groups.foldLeft(0l) { (max,\
    \ group) => if (group > max) group else max }\n        val max_level_groups =\
    \ paren_groups.filter(_.toLong == max_level)\n        val max_level_group_size\
    \ = max_level_groups.size\n        val max_level_group_size_str = max_level_groups.map(_.toString.length).max\n\
    \        val max_level_group_size_long = max_level_group_size_str.toLong\n   \
    \     val max_level_group_size_long_str = max_level_group_size_str.toString.length\n\
    \        val max_level_group_size_long_str2 = max_level_group_size_str.toString.length\
    \ + max_level_group_size_long_str\n        val max_level_group_size_long_str3\
    \ = max_level_group_size_str.toString.length + max_level_group_size_long_str +\
    \ max_level_group_size_long_str2\n        val max_level_group_size_long_str4 =\
    \ max_level_group_size_str.toString.length + max_level_group_size_long_str + max_level_group_size_long_str2\
    \ + max_level_group_size_long_str3\n        val max_level_group_size_long_str5\
    \ = max_level_group_size_str.toString.length + max_level_group_size_long_str +\
    \ max_level_group_size_long_str2 + max_level_group_size_long_str3 + max_level_group_size_long_str4\n\
    \        val max_level_group_size_long_str6 = max_level_group_size_str.toString.length\
    \ + max_level_group_size_long_str + max_level_group_size_long_str2 + max_level_group_size_long_str3\
    \ + max_level_group_size_long_str4 + max_level_group_size_long_str5\n        val\
    \ max_level_group_size_long_str7 = max_level_group_size_str.toString.length +\
    \ max_level_group_size_long_str + max_level_group_size_long_str2 + max_level_group_size_long_str3\
    \ + max_level_group_size_long_str4 + max_level_group_size_long_str5 + max_level_group_size_long_str6\n\
    \        val max_level_group_size_long_str8 = max_level_group_size_str.toString.length\
    \ + max_level_group_size_long_str + max_level_group_size_long_str2 + max_level_group_size_long_str3\
    \ + max_level_group_size_long_str4 + max_level_group_size_long_str5 + max_level_group_size_long_str6\
    \ + max_level_group_size_long_str7\n        val max_level_group_size_long_str9\
    \ = max_level_group_size_str.toString.length + max_level_group_size_long_str +\
    \ max_level_group_size_long_str2 + max_level_group_size_long_str3 + max_level_group_size_long_str4\
    \ + max_level_group_size_long_str5 + max_level_group_size_", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top = mutable.Stack[Long]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top_size = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_map\
    \ = mutable.Map[Long, List[Long]]()\n        var paren_group_index = 0\n     \
    \   while(paren_group_index < paren_groups_count) {\n            val paren_group\
    \ = paren_groups(paren_group_index)\n            val paren_group_list = paren_groups_map.getOrElseUpdate(paren_group.toLong,\
    \ mutable.List())\n            paren_group_list.push(paren_group_index)\n    \
    \        paren_group_index += 1\n        }\n        val max_level_of_nesting =\
    \ paren_groups_map.values.max\n        val max_level_of_nesting_list = max_level_of_nesting.toList\n\
    \        val max_level_of_nesting_list_index = max_level_of_nesting_list.indexOf(max_level_of_nesting.max)\n\
    \        val max_level_of_nesting_list_index_plus_1 = max_level_of_nesting_list_index\
    \ + 1\n        val max_level_of_nesting_list_index_minus_1 = max_level_of_nesting_list_index\
    \ - 1\n        val max_level_of_nesting_list_index_minus_2 = max_level_of_nesting_list_index\
    \ - 2\n        val max_level_of_nesting_list_index_minus_3 = max_level_of_nesting_list_index\
    \ - 3\n        val max_level_of_nesting_list_index_minus_4 = max_level_of_nesting_list_index\
    \ - 4\n        val max_level_of_nesting_list_index_minus_5 = max_level_of_nesting_list_index\
    \ - 5\n        val max_level_of_nesting_list_index_minus_6 = max_level_of_nesting_list_index\
    \ - 6\n        val max_level_of_nesting_list_index_minus_7 = max_level_of_nesting_list_index\
    \ - 7\n        val max_level_of_nesting_list_index_minus_8 = max_level_of_nesting_list_index\
    \ - 8\n        val max_level_of_nesting_list_index_minus_9 = max_level_of_nesting_list_index\
    \ - 9\n        val max_level_of_nesting_list_index_minus_10 = max_level_of_nesting_list_index\
    \ - 10\n        val max_level_of_nesting_list_index_minus_11 = max_level_of_nesting_list_index\
    \ - 11\n        val max_level_of_nesting_list_index_minus_12 = max_level_of_nesting_list_index\
    \ - 12\n        val max_level_of_nesting_list_index_minus_13 = max_level_of_nesting_list_index\
    \ - 13\n        val max_level_of_nesting_list_index_minus_14 = max_level_of_nesting_list_index\
    \ - 14\n        val max_level_of_nesting_list_index_min", "        val paren_stack\
    \ = mutable.Stack[Long]()\n        val paren_stack_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_max_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_max_depth = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_depth_max_size\
    \ = mutable.Stack[Long]()\n", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_top\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_size = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_top_top_top = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_size = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top = mutable.Stack[Long]()\n     \
    \   val paren_stack_top_top_top_top_top_top_size = mutable.Stack[Long]()\n   \
    \     val paren_stack_top_top_top_top_top_top_top = mutable.Stack[Long]()\n  \
    \      val paren_stack_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_top_top_top_top_top_top_top_top_top_top_size = mutable.Stack[Long]()\n\
    \        val paren_stack_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_paren_groups = paren_groups.map(x => x.split(\"\
    (\"))\n        val paren_groups_with_paren_groups_flat = paren_groups_with_paren_groups.flatten\n\
    \        val paren_groups_with_paren_groups_flat_sorted = paren_groups_with_paren_groups_flat.sortBy(x\
    \ => x.length)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted.map(x => (x.head.toLong, x.tail))\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups.sortBy(x => x._1)\n\
    \        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted.map(x\
    \ => (x._2, x._1))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => (x._2, x._1))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.map(x\
    \ => (x._2, x._1))\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted\
    \ = paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_paren_groups_sorted_with_paren_groups_sorted.sortBy(x\
    \ => x._1)\n        val paren_groups_with_paren_groups_flat_sorted_with_paren_groups_sorted_with_",
  "        val paren_stack = mutable.Stack[Long]()\n        val paren_stack_size =\
    \ mutable.Stack[Long]()\n        val paren_stack_top = mutable.Stack[Long]()\n\
    \        val paren_stack_top_size = mutable.Stack[Long]()\n        val paren_stack_top_count\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_size = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_index = mutable.Stack[Long]()\n        val\
    \ paren_stack_top_count_indexSize = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountSize =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCount = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndex = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexSize = mutable.Stack[Long]()\n\
    \        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCount =\
    \ mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndex\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexSize\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCount\
    \ = mutable.Stack[Long]()\n        val paren_stack_top_count_indexCountIndexCountIndexCountIndexCountIndexCountSize\
    \ = mutable.Stack[Long]()\n        val paren_", "        val paren_groups = paren_string.split(\"\
    \ \")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    (\", \"( \").replace(\")\", \" ) \"))\n        val paren_groups_with_paren_length\
    \ = paren_groups_with_paren.map(x => x.length)\n        val max_paren_groups_with_paren_length\
    \ = paren_groups_with_paren_length.max\n        val max_paren_groups_with_paren\
    \ = paren_groups_with_paren.max\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length.toLong\n        val max_paren_groups_with_paren_length\
    \ = max_paren_groups_with_paren_length", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.size\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size\
    \ - 1\n        val paren_array_max_value = paren_array(paren_array_max_index)\n\
    \        val paren_array_max_value_length = paren_array_max_value.length\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length.toLong\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = "]
stop_tokens:
- "\n    }\n"
