name: HumanEval_6_parse_nested_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n    // For each of the group, output the deepest\
  \ level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((()))\
  \ () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n\
  \    def parseNestedParens(paren_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseNestedParens((\"\
  (()()) ((())) () ((())()())\")).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong,\
  \ 3l.toLong))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(parseNestedParens((\"(()(())((())))\"\
  )).equals((List[Long](4l.toLong))));\n    }\n\n}\n"
completions: ["        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_level = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_level_limit\
    \ = mutable.Stack[Int]()\n        val paren_stack_level_limit = mutable.Stack[Int]()\n\
    \        val paren_stack_level_limit = mutable.Stack[Int]()\n        val paren_stack_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_queue = mutable.Queue[String]()\n\
    \        val paren_levels = mutable.Map[String, Long]()\n        paren_queue.enqueue(paren_string)\n\
    \        while(!paren_queue.isEmpty) {\n            val paren_string = paren_queue.dequeue()\n\
    \            paren_stack.push(paren_string)\n            paren_string match {\n\
    \                case \"(\" => paren_queue.enqueue(paren_stack.pop())\n      \
    \          case \")\" => paren_levels(paren_stack.pop()) = paren_levels(paren_stack.pop())\
    \ + 1\n                case _ => paren_queue.enqueue(paren_string)\n         \
    \   }\n        }\n        paren_levels", "        val paren_groups = paren_string.split(\"\
    \ \").map(_.toLong)\n        val paren_groups_with_max_depth = paren_groups.foldLeft(List[Long]())((acc,\
    \ x) => {\n            val max_depth = acc.foldRight(0)((max_depth, current_depth)\
    \ => {\n                if (max_depth < current_depth) max_depth else current_depth\n\
    \            })\n            if (max_depth > x.toLong) acc else x :: acc\n   \
    \     })\n        paren_groups_with_max_depth.map(_.toLong)", "        val paren_groups\
    \ = paren_string.split(\" \")\n        val paren_groups_length = paren_groups.length\n\
    \        val paren_groups_map = mutable.Map[String, List[Long]]()\n        var\
    \ paren_groups_count = 0\n        var paren_groups_count_max = 0\n        var\
    \ paren_groups_count_current = 0\n        var paren_groups_count_max = 0\n   \
    \     var paren_groups_count_current = 0\n        var paren_groups_count_max =\
    \ 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_count_max\
    \ = 0\n        var paren_groups_count_current = 0\n        var paren_groups_",
  "        val paren_list_string = paren_string.trim\n        val paren_list_list\
    \ = paren_list_string.split(\" \")\n        val paren_list_list_length = paren_list_list.length\n\
    \        val paren_list_list_list_length = paren_list_list_length / 2\n      \
    \  val paren_list_list_list_list_length = paren_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_length = paren_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_length = paren_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_length = paren_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_length / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_length / 2\n     \
    \   val paren_list_list_list_list_list_list_list_list_list_list_list_length =\
    \ paren_list_list_list_list_list_list_list_list_list_list_list_length / 2\n  \
    \      val paren_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_length /\
    \ 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ = paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_length\
    \ / 2\n        val paren_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_list_",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_map\
    \ = mutable.HashMap[String, List[Long]]()\n        paren_string.split(\"\\\\s+\"\
    ).foreach(x => {\n            val paren_str = x.trim\n            if (paren_str.length\
    \ == 0) return\n            val paren_str = paren_str.substring(1)\n         \
    \   paren_stack.push(paren_str)\n            val paren_str = paren_str.substring(1)\n\
    \            if (paren_stack_map.contains(paren_str)) {\n                paren_stack_map.get(paren_str).foreach(y\
    \ => paren_stack.pop())\n            }\n            else {\n                paren_stack_map.put(paren_str,\
    \ paren_stack.map(x => x.toLong).toList)\n            }\n        })\n        val\
    \ max_level = paren_stack_map.values.max\n        val max_level_str = max_level.map(x\
    \ => x.toLong).mkString(\",\")\n        val max_level_str = max_level_str.substring(1)\n\
    \        paren_stack_map.values.map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).map(x => x.toLong", "        val paren_stack =\
    \ mutable.Stack[String]()\n        val paren_stack_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top_size = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_", "        val paren_chars\
    \ = paren_string.split(\" \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).sum\n        val paren_chars_count_max = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).max\n        val paren_chars_count_min = paren_chars.map(c\
    \ => if (c == '(') 1 else 0).min\n        val paren_chars_count_range = paren_chars_count_max\
    \ - paren_chars_count_min\n        val paren_chars_count_range_max = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_min = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid = paren_chars_count_range / 2\n     \
    \   val paren_chars_count_range_mid2 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid3 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid4\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid5 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid6 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid7 = paren_chars_count_range / 2\n    \
    \    val paren_chars_count_range_mid8 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid9 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid10\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid11 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid12 = paren_chars_count_range / 2\n\
    \        val paren_chars_count_range_mid13 = paren_chars_count_range / 2\n   \
    \     val paren_chars_count_range_mid14 = paren_chars_count_range / 2\n      \
    \  val paren_chars_count_range_mid15 = paren_chars_count_range / 2\n        val\
    \ paren_chars_count_range_mid16 = paren_chars_count_range / 2\n        val paren_chars_count_range_mid17\
    \ = paren_chars_count_range / 2\n        val paren_chars_count_range_mid18 = paren_chars_count_range\
    \ / 2\n        val paren_chars_count_range_mid19 = paren_chars_count_range / ",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_levels = mutable.ListBuffer[Long]()\n\
    \        paren_stack.push(paren_string)\n        paren_levels.append(0)\n    \
    \    while (paren_stack.nonEmpty) {\n            val paren_string = paren_stack.pop()\n\
    \            val paren_level = paren_levels.pop()\n            val paren_level_string\
    \ = paren_level.toString\n            val paren_level_length = paren_level_string.length\n\
    \            val paren_level_chars = paren_level_string.chars\n            val\
    \ paren_level_chars_length = paren_level_chars.length\n            val paren_level_chars_count\
    \ = paren_level_chars.length\n            val paren_level_chars_count_minus_1\
    \ = paren_level_chars_count - 1\n            val paren_level_chars_count_minus_2\
    \ = paren_level_chars_count_minus_1 - 1\n            val paren_level_chars_count_minus_3\
    \ = paren_level_chars_count_minus_2 - 1\n            val paren_level_chars_count_minus_4\
    \ = paren_level_chars_count_minus_3 - 1\n            val paren_level_chars_count_minus_5\
    \ = paren_level_chars_count_minus_4 - 1\n            val paren_level_chars_count_minus_6\
    \ = paren_level_chars_count_minus_5 - 1\n            val paren_level_chars_count_minus_7\
    \ = paren_level_chars_count_minus_6 - 1\n            val paren_level_chars_count_minus_8\
    \ = paren_level_chars_count_minus_7 - 1\n            val paren_level_chars_count_minus_9\
    \ = paren_level_chars_count_minus_8 - 1\n            val paren_level_chars_count_minus_10\
    \ = paren_level_chars_count_minus_9 - 1\n            val paren_level_chars_count_minus_11\
    \ = paren_level_chars_count_minus_10 - 1\n            val paren_level_chars_count_minus_12\
    \ = paren_level_chars_count_minus_11 - 1\n            val paren_level_chars_count_minus_13\
    \ = paren_level_chars_count_minus_12 - 1\n            val paren_level_chars_count_minus_14\
    \ = paren_level_chars_count_minus_13 - 1\n            val paren_level_chars_count_minus_15\
    \ = paren_level_chars_count_minus_14 - 1\n            val paren_level_chars_count_minus_16\
    \ = paren_level_chars_count_minus_15 - 1\n            val paren_level_chars_count_minus_17\
    \ = paren_level_chars_count_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Int]()\n        val paren_stack_level\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_length = mutable.Stack[Int]()\n        val\
    \ paren_stack_max_level_length = mutable.Stack[Int]()\n        val paren_stack_max_level_length\
    \ = mutable.Stack[Int]()\n        val paren_stack_max_level_length = mutable.Stack[Int]()\n\
    \        val paren_stack_max_level_", "        val paren_list_string = paren_string.split(\"\
    \ \")\n        val paren_list_long = paren_list_string.map(x => x.toLong)\n  \
    \      val paren_list_long_list = paren_list_long.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n        val paren_list_long_list\
    \ = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list = paren_list_long_list.takeWhile(x\
    \ => x < paren_list_long_list.length)\n        val paren_list_long_list = paren_list_long_list.map(x\
    \ => x.toLong)\n        val paren_list_long_list = paren_list_long_list.distinct\n\
    \        val paren_list_long_list = paren_list_long_list.sortBy(x => x)\n    \
    \    val paren_list_long_list = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n\
    \        val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n\
    \        val paren_list_long_list = paren_list_long_list.distinct\n        val\
    \ paren_list_long_list = paren_list_long_list.sortBy(x => x)\n        val paren_list_long_list\
    \ = paren_list_long_list.takeWhile(x => x < paren_list_long_list.length)\n   \
    \     val paren_list_long_list = paren_list_long_list.map(x => x.toLong)\n   \
    \     val paren_list_long_list = paren_list_long_list.distinct\n", "        val\
    \ paren_stack = mutable.Stack[Long]()\n        val paren_stack_len = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max = mutable.Stack[Long]()\n        val paren_stack_len_max_len\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max = mutable.Stack[Long]()\n       \
    \ val paren_stack_len_max_len_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max = mutable.Stack[Long]()\n        val\
    \ paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n      \
    \  val paren_stack_len_max_len_max_max_max_max_max = mutable.Stack[Long]()\n \
    \       val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max = mutable.Stack[Long]()\n\
    \        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max =\
    \ mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack[Long]()\n        val paren_stack_len_max_len_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = mutable.Stack", "        val paren_groups = paren_string.split(\" \").map(_.toLong)\n\
    \        val max_levels = paren_groups.foldLeft(0L) { (max_level, group) => if\
    \ (group > max_level) group else max_level }\n        val max_level = max_levels\
    \ + 1\n        val levels = paren_groups.map(_.toLong)\n        val levels_count\
    \ = levels.count(_ > 0)\n        val max_level_with_one = levels.count(_ == 1)\n\
    \        val max_level_with_zero = levels.count(_ == 0)\n        val max_level_with_one_or_zero\
    \ = levels.count(_ == 1) || levels.count(_ == 0)\n        val max_level_with_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n   \
    \     val max_level_with_zero_or_one_or_zero_or_one = levels.count(_ == 0) ||\
    \ levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n     \
    \   val max_level_with_zero_or_one_or_zero_or_one_or_zero = levels.count(_ ==\
    \ 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_ == 1) ||\
    \ levels.count(_ == 0)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\n\
    \        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(_ == 1)\n        val max_level_with_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero_or_one_or_zero\
    \ = levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0) || levels.count(_\
    \ == 1) || levels.count(_ == 0) || levels.count(_ == 1) || levels.count(_ == 0)\
    \ || levels.count(", "        val paren_groups = paren_string.split(\" \")\n \
    \       val paren_groups_with_paren = paren_groups.map(x => if (x == \"(\") 1\
    \ else 0)\n        val paren_groups_with_paren_sum = paren_groups_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level = paren_groups_with_paren_sum\
    \ / paren_groups_with_paren.size\n        val paren_groups_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level.map(x => if (x == 0) 1 else 0)\n       \
    \ val paren_groups_with_paren_max_level_with_paren_sum = paren_groups_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level.map(x => if (x == 0)\
    \ 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_sum / paren_groups_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level.map(x\
    \ => if (x == 0) 1 else 0)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.reduce((x,y)\
    \ => x + y)\n        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_max_level\
    \ = paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren_sum\
    \ / paren_groups_with_paren_max_level_with_paren_max_level_with_paren_max_level_with_paren.size\n\
    \        val paren_groups_with_paren_max_level_with_paren_max_level_with_paren",
  "        val paren_stack = mutable.Stack[String]()\n        val paren_stack_size\
    \ = mutable.Stack[Int]()\n        val paren_stack_top = mutable.Stack[Int]()\n\
    \        val paren_stack_top_size = mutable.Stack[Int]()\n        val paren_stack_top_size\
    \ = paren_stack_top_size\n\n        paren_string.split(\"\\\\s+\").foreach { s\
    \ =>\n            val paren_stack_size += s.length\n            paren_stack +=\
    \ s\n            paren_stack_top += s.length\n            paren_stack_top_size\
    \ += s.length\n        }\n\n        val paren_stack_top_size_max = paren_stack_top_size.max\n\
    \        val paren_stack_top_size_max_index = paren_stack_top_size.indexWhere(_\
    \ == paren_stack_top_size_max)\n\n        val paren_stack_top_size_max_index =\
    \ paren_stack_top_size_max_index + 1\n        val paren_stack_top_size_max_value\
    \ = paren_stack_top_size.toList.get(paren_stack_top_size_max_index)\n\n      \
    \  val paren_stack_top_size_max_value_length = paren_stack_top_size_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max = paren_stack_top_size_max_value_length.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_index = paren_stack_top_size_max_value_length_max_index\
    \ + 1\n        val paren_stack_top_size_max_value_length_max_value = paren_stack_top_size_max_value.toList.get(paren_stack_top_size_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length = paren_stack_top_size_max_value_length_max_value.length\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max = paren_stack_top_size_max_value_length_max_value.toInt\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_index)\n\
    \n        val paren_stack_top_size_max_value_length_max_value_length_max_value_length\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toInt\n\n\
    \        val paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index\
    \ = paren_stack_top_size_max_value_length_max_value_length_max_value.toList.get(paren_stack_top_size_max_value_length_max_value_length_max_value_length_max_index)\n\
    \n        val ", "        val paren_array = paren_string.split(\" \").toList\n\
    \        val paren_array_size = paren_array.size\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_index = paren_array_max_size.max\n\
    \        val paren_array_max_value = paren_array(paren_array_max_index)\n    \
    \    val paren_array_max_value_length = paren_array_max_value.length\n       \
    \ val paren_array_max_value_length = paren_array_max_value_length.toLong\n   \
    \     val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_value_length = paren_array_max_value_length.toInt\n\
    \        val paren_array_max_", "        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_stack_size = mutable.Stack[Long]()\n        val paren_stack_depth\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth = mutable.Stack[Long]()\n\
    \        val paren_stack_max_size = mutable.Stack[Long]()\n        val paren_stack_max_depth_size\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_2 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_3 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_4 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_5\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_6 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_7 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_8 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_9\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_10 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_11 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_12 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_13\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_14 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_15 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_16 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_17\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_18 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_19 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_20 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_21\
    \ = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_22 = mutable.Stack[Long]()\n\
    \        val paren_stack_max_depth_size_23 = mutable.Stack[Long]()\n        val\
    \ paren_stack_max_depth_size_24 = mutable.Stack[Long]()\n        val paren_stack_max_depth_size_25\
    \ = mutable.Stack[Long]()\n        ", "        val paren_array = paren_string.split(\"\
    \ \")\n        val paren_array_size = paren_array.length\n        val paren_array_max_size\
    \ = paren_array_size - 1\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(0)\n        val paren_array_max_size\
    \ = paren_array_max_size.max(0)\n        val paren_array_max_size = paren_array_max_size.max(0)\n\
    \        val paren_array_max_size = paren_array_max_size.max(", "        val paren_array\
    \ = paren_string.split(\" \")\n        val paren_array_size = paren_array.length\n\
    \        val paren_array_list = new mutable.ListBuffer[Long]()\n        var paren_array_level\
    \ = 0\n        var paren_array_index = 0\n        var paren_array_level_count\
    \ = 0\n        while(paren_array_index < paren_array_size) {\n            val\
    \ paren_array_element = paren_array(paren_array_index)\n            val paren_array_element_size\
    \ = paren_array_element.length\n            val paren_array_element_level = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_end = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end = paren_array_element.indexOf(\"\
    (\")\n            val paren_array_element_level_start_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_size = paren_array_element.indexOf(\"\
    )\")\n            val paren_array_element_level_start_end_level_end_level_end\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n            val paren_array_element_level_start_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_level_end_size\
    \ = paren_array_element.indexOf(\")\")\n", "        val paren_chars = paren_string.split(\"\
    \ \").map(_.toChar)\n        val paren_chars_count = paren_chars.map(_.length).sum\n\
    \        val paren_chars_count_with_paren = paren_chars_count + paren_chars.map(_.toChar).map(_.toInt).sum\n\
    \        val paren_chars_count_with_paren_plus_one = paren_chars_count_with_paren\
    \ + 1\n        val paren_chars_count_with_paren_plus_two = paren_chars_count_with_paren\
    \ + 2\n        val paren_chars_count_with_paren_plus_three = paren_chars_count_with_paren\
    \ + 3\n        val paren_chars_count_with_paren_plus_four = paren_chars_count_with_paren\
    \ + 4\n        val paren_chars_count_with_paren_plus_five = paren_chars_count_with_paren\
    \ + 5\n        val paren_chars_count_with_paren_plus_six = paren_chars_count_with_paren\
    \ + 6\n        val paren_chars_count_with_paren_plus_seven = paren_chars_count_with_paren\
    \ + 7\n        val paren_chars_count_with_paren_plus_eight = paren_chars_count_with_paren\
    \ + 8\n        val paren_chars_count_with_paren_plus_nine = paren_chars_count_with_paren\
    \ + 9\n        val paren_chars_count_with_paren_plus_ten = paren_chars_count_with_paren\
    \ + 10\n        val paren_chars_count_with_paren_plus_eleven = paren_chars_count_with_paren\
    \ + 11\n        val paren_chars_count_with_paren_plus_twelve = paren_chars_count_with_paren\
    \ + 12\n        val paren_chars_count_with_paren_plus_thirteen = paren_chars_count_with_paren\
    \ + 13\n        val paren_chars_count_with_paren_plus_fourteen = paren_chars_count_with_paren\
    \ + 14\n        val paren_chars_count_with_paren_plus_fifteen = paren_chars_count_with_paren\
    \ + 15\n        val paren_chars_count_with_paren_plus_sixteen = paren_chars_count_with_paren\
    \ + 16\n        val paren_chars_count_with_paren_plus_seventeen = paren_chars_count_with_paren\
    \ + 17\n        val paren_chars_count_with_paren_plus_eighteen = paren_chars_count_with_paren\
    \ + 18\n        val paren_chars_count_with_paren_plus_nineteen = paren_"]
stop_tokens:
- "\n    }\n"
