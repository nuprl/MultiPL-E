name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val intValue = value.toInt\n        val closestValue = intValue\
    \ - (intValue % 10)\n        closestValue", "        val nums = value.split(\"\
    \\\\.\").map(_.toInt)\n        val min = math.min(nums)\n        val max = math.max(nums)\n\
    \        val diff = max - min\n        if (diff == 0) return min\n        if (diff\
    \ < 0) return min + diff\n        if (diff > 0) return max - diff", "        val\
    \ numbers = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val rounded = smallest + difference\n        rounded.toLong", "     \
    \   val nums = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)", "     \
    \   val parts = value.split(\"\\\\.\") // split into two parts separated by \"\
    .\"\n        val part1 = parts(0)\n        val part2 = parts(1)\n        val part1Int\
    \ = part1.toInt\n        val part2Int = part2.toInt\n        val part1Abs = Math.abs(part1Int)\n\
    \        val part2Abs = Math.abs(part2Int)\n        val part1Diff = part1Abs -\
    \ part2Abs\n        if (part1Diff < 0)\n            part1Int + part2Abs\n    \
    \    else\n            part1Int - part2Abs", "        val numbers = value.split(\"\
    \\\\.\").map(_.toInt)\n        val difference = numbers.zip(numbers).map { case\
    \ (first, second) => math.abs(first - second) }\n        val closestDifference\
    \ = difference.min\n        val closestNumber = difference.find(_ == closestDifference).get\n\
    \        closestNumber", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n\
    \        val min = math.min(nums)\n        val max = math.max(nums)\n        val\
    \ diff = max - min\n        val closest = (diff + min) / 2\n        val closestInt\
    \ = math.round(closest)\n        closestInt", "        val parts = value.split(\"\
    \\\\.\").map(_.toInt)\n        val closest = (parts diff parts.last).min\n   \
    \     val difference = parts.last - closest\n        val rounded = closest + difference\n\
    \        rounded", "        val num = value.toDouble\n        val nums = value.split(\"\
    \\\\.\").map(_.toDouble)\n        val diffs = nums.zip(nums.tail).map { case (first,\
    \ second) => (first - second) }\n        val closestDiff = diffs.min\n       \
    \ val closestDiffIndex = diffs.indexOf(closestDiff)\n        val closestDiffDiffToZero\
    \ = diffs(closestDiffIndex) - diffs(closestDiffIndex - 1)\n        val closestDiffToZeroIndex\
    \ = diffs.indexOf(closestDiffToZero)\n        val closestDiffToZeroToZero = diffs(closestDiffToZeroIndex)\
    \ - diffs(closestDiffToZeroIndex - 1)\n        val closestDiffToZeroToZeroIndex\
    \ = diffs.indexOf(closestDiffToZeroToZero)\n        val closestDiffToZeroToZeroToZero\
    \ = diffs(closestDiffToZeroToZeroIndex) - diffs(closestDiffToZeroToZeroIndex -\
    \ 1)\n        val closestDiffToZeroToZeroToZeroIndex = diffs.indexOf(closestDiffToZeroToZeroToZero)\n\
    \        val closestDiffToZeroToZeroToZeroToZero = diffs(closestDiffToZeroToZeroToZeroIndex)\
    \ - diffs(closestDiffToZeroToZeroToZeroIndex - 1)\n        val closestDiffToZeroToZeroToZeroToZeroIndex\
    \ = diffs.indexOf(closestDiffToZeroToZeroToZeroToZero)\n        val closestDiffToZeroToZeroToZeroToZeroToZero\
    \ = diffs(closestDiffToZeroToZeroToZeroToZeroIndex) - diffs(closestDiffToZeroToZeroToZeroToZeroIndex\
    \ - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroIndex = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZero)\n\
    \        val closestDiffToZeroToZeroToZeroToZeroToZeroTo = diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex)\
    \ - diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroToIndex\
    \ = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZeroTo)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroTo\
    \ = diffs(closestDiffToZeroToZeroToZeroToZeroToZeroToIndex) - diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex\
    \ - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroToIndex = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZero",
  "        val num = value.toLong\n        val nums = List(\"10\", \"15.3\", \"14.5\"\
    , \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"\
    , \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\"\
    , \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\"\
    , \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\"\
    , \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\"\
    , \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\"\
    , \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\"\
    , \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\"\
    , \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"\
    103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\"\
    , \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\"\
    , \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\"\
    , \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\"\
    , \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\"\
    , \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\"\
    , \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\"\
    , \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\"\
    , \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\"\
    , \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\"\
    , \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\"\
    , \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\"\
    , \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\"\
    , \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\"\
    , \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\"\
    , \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\"\
    , \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\"\
    , \"256\", \"257\", \"258\", \"259", "        val num = value.toLong\n       \
    \ val nums = List(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\")\n        val numsLen = nums.size\n        val numsSum = nums.sum\n \
    \       val numsSumLen = numsSum.size\n        val numsSumLen2 = numsSumLen *\
    \ numsSumLen\n        val numsSumLen3 = numsSumLen2 * numsSumLen\n        val\
    \ numsSumLen4 = numsSumLen3 * numsSumLen\n        val numsSumLen5 = numsSumLen4\
    \ * numsSumLen\n        val numsSumLen6 = numsSumLen5 * numsSumLen\n        val\
    \ numsSumLen7 = numsSumLen6 * numsSumLen\n        val numsSumLen8 = numsSumLen7\
    \ * numsSumLen\n        val numsSumLen9 = numsSumLen8 * numsSumLen\n        val\
    \ numsSumLen10 = numsSumLen9 * numsSumLen\n        val numsSumLen11 = numsSumLen10\
    \ * numsSumLen\n        val numsSumLen12 = numsSumLen11 * numsSumLen\n       \
    \ val numsSumLen13 = numsSumLen12 * numsSumLen\n        val numsSumLen14 = numsSumLen13\
    \ * numsSumLen\n        val numsSumLen15 = numsSumLen14 * numsSumLen\n       \
    \ val numsSumLen16 = numsSumLen15 * numsSumLen\n        val numsSumLen17 = numsSumLen16\
    \ * numsSumLen\n        val numsSumLen18 = numsSumLen17 * numsSumLen\n       \
    \ val numsSumLen19 = numsSumLen18 * numsSumLen\n        val numsSumLen20 = numsSumLen19\
    \ * numsSumLen\n        val numsSumLen21 = numsSumLen20 * numsSumLen\n       \
    \ val numsSumLen22 = numsSumLen21 * numsSumLen\n        val numsSumLen23 = numsSumLen22\
    \ * numsSumLen\n        val numsSumLen24 = numsSumLen23 * numsSumLen\n       \
    \ val numsSumLen25 = numsSumLen24 * numsSumLen\n        val numsSumLen26 = numsSumLen",
  "        val nums = value.split(\"\\\\.\").map(_.toInt)\n        val minDiff = math.abs(nums.min\
    \ - nums.max)\n        val closestNum = nums.min + minDiff\n        closestNum",
  "        val intValue = value.asInstanceOf[String]\n        val intValueAsLong =\
    \ intValue.asInstanceOf[Long]\n        val intValueAsDouble = intValue.asInstanceOf[Double]\n\
    \        val intValueAsFloat = intValue.asInstanceOf[Float]\n        val intValueAsInt\
    \ = intValue.asInstanceOf[Int]\n        val intValueAsShort = intValue.asInstanceOf[Short]\n\
    \        val intValueAsByte = intValue.asInstanceOf[Byte]\n        val intValueAsChar\
    \ = intValue.asInstanceOf[Char]\n        val intValueAsBoolean = intValue.asInstanceOf[Boolean]\n\
    \        val intValueAsLongLong = intValue.asInstanceOf[LongLong]\n        val\
    \ intValueAsDoubleDouble = intValue.asInstanceOf[DoubleDouble]\n        val intValueAsFloatFloat\
    \ = intValue.asInstanceOf[FloatFloat]\n        val intValueAsIntInt = intValue.asInstanceOf[IntInt]\n\
    \        val intValueAsShortShort = intValue.asInstanceOf[ShortShort]\n      \
    \  val intValueAsByteByte = intValue.asInstanceOf[ByteByte]\n        val intValueAsCharChar\
    \ = intValue.asInstanceOf[CharChar]\n        val intValueAsBooleanBoolean = intValue.asInstanceOf[BooleanBoolean]\n\
    \        val intValueAsLongLongLong = intValue.asInstanceOf[LongLongLong]\n  \
    \      val intValueAsDoubleDoubleDouble = intValue.asInstanceOf[DoubleDoubleDouble]\n\
    \        val intValueAsFloatFloatFloat = intValue.asInstanceOf[FloatFloatFloat]\n\
    \        val intValueAsIntIntInt = intValue.asInstanceOf[IntIntInt]\n        val\
    \ intValueAsShortShortShort = intValue.asInstanceOf[ShortShortShort]\n       \
    \ val intValueAsByteByteByte = intValue.asInstanceOf[ByteByteByte]\n        val\
    \ intValueAsCharCharChar = intValue.asInstanceOf[CharCharChar]\n        val intValueAsBooleanBooleanBoolean\
    \ = intValue.asInstanceOf[BooleanBooleanBoolean]\n        val intValueAsLongLongLongLong\
    \ = intValue.asInstanceOf[LongLongLongLong]\n        val intValueAsDoubleDoubleDoubleDouble\
    \ = intValue.asInstanceOf[DoubleDoubleDoubleDouble]\n        val intValueAsFloatFloatFloatFloat\
    \ = intValue.asInstanceOf[FloatFloatFloatFloat]\n        val ", "        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val ints = numbers.map(_.toInt)\n \
    \       val min = ints.min\n        val max = ints.max\n        val diff = (max\
    \ - min).abs\n        val closest = (min + max) / 2\n        if (diff < closest)\
    \ {\n            closest\n        } else {\n            diff\n        }", "  \
    \      val nums = value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums)\n\
    \        val max = math.max(nums)\n        val diff = max - min\n        if (diff\
    \ < 0)\n            min - diff\n        else\n            max + diff", "     \
    \   val nums = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n\
    \        val max = math.max(nums)\n        val mid = math.round(min + (max - min)\
    \ / 2)\n        val diff = math.abs(mid - min)\n        if (diff < math.abs(mid\
    \ - max)) {\n            mid\n        } else {\n            math.round(mid - diff)\n\
    \        }", "        val nums = value.split(\"\\\\.\").map(_.toInt)\n       \
    \ val min = math.min(nums.map(_.toDouble))\n        val max = math.max(nums.map(_.toDouble))\n\
    \        val diff = (max - min).toInt\n        val closest = (min + diff) / 2\n\
    \        val closestLong = closest.toLong\n        closestLong", "        val\
    \ nums = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        closestLong", "        val intValue = value.toInt\n        val intArray\
    \ = intValue.toString.split(\"\\\\.\").map(_.toInt)\n        val intArrayLength\
    \ = intArray.length\n        val intArrayLength = intArrayLength - 1\n       \
    \ val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArray",
  "        val intValue = value.toInt\n        val difference = abs(intValue - intValue)\n\
    \        val closestInteger = intValue + difference\n        closestInteger"]
stop_tokens:
- "\n    }\n"
