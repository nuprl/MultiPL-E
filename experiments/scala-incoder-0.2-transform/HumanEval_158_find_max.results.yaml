language: scala
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val maxChars = chars.max\n        val maxWord = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.toCharArray.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed.reverse\n   \
    \     val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zxbgh1t.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1zxbgh1t.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(x => x).mapValues(_.size)\n        val maxCount =\
    \ counts.max\n        val maxKey = counts.maxBy(_._1)._1\n        val maxValue\
    \ = counts.maxBy(_._1)._2\n        val maxWord = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCount = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue))\n        val maxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount))\n        val maxWordWithMaxCountWithMaxValueWithMaxKey\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWord = words.filter(x\
    \ => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord))\n        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv65l14g.scala:26:299 --------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue) && x.toCharArray.map(_.toInt).contains(maxCount)\
    \ && x.toCharArray.map(_.toInt).contains(maxKey) && \n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcv65l14g.scala:22:196\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValue\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    (maxCount : (Char,\
    \ Int))\n\e[31m   |\e[0m                                      Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcv65l14g.scala:23:206\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValueWithMaxKey\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).con"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            maxChars\
    \ += char -> uniqueChars.count(_ == char)\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.filter(word\
    \ => maxChars(word) == maxValue).head\n        val maxWordWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw55xfm0n.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw55xfm0n.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:28:92 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(\e[36mword\e[0m => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:30:109 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstWithMaxChars\e\
    [0m = words.filter(\e[36mword\e[0m => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:32:126\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\e[0m = words.filte"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(x => x.toCharArray.map(x => x.toInt).count(_\
    \ == 1))\n        val maxCount = counts.max\n        val maxChars = counts.filter(x\
    \ => x == maxCount).max\n        val maxWord = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount).min\n        val maxWords = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount)\n        val maxWordsSorted = maxWords.sortWith((x,\
    \ y) => x.toCharArray.count(_ == y.toCharArray.max) - y.toCharArray.count(_ ==\
    \ x.toCharArray.max))\n        val maxWordsSortedFirst = maxWordsSorted.head\n\
    \        val maxWordsSortedFirstChars = maxWordsSortedFirst.toCharArray.max\n\
    \        val maxWordsSortedFirstCharsCount = maxWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWord = maxWordsSortedFirstCharsCount.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSorted = maxWordsSortedFirstCharsCountInWords.sortWith((x,\
    \ y) => x - y)\n        val maxWordsSortedFirstCharsCountInWordsSortedFirst =\
    \ maxWordsSortedFirstCharsCountInWordsSorted.head\n        val maxWordsSortedFirstCharsCountInWordsSortedFirstChars\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirst.toCharArray.max\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount = maxWordsSortedFirstCharsCountInWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord =\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount.toInt\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((x,\
    \ y) => x - y)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmn37bnq.scala:20:57\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsSorted\e\
    [0m = maxWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toCharArray.count(_\
    \ == y.toCharArray.max) - y.toCharArray.count(_ == x.toCharArray.max))\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmn37bnq.scala:26:94\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordsSortedFirstCharsCountInWordsSorted\e[0m = maxWordsSortedFirstCharsCountInWords.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value sortWith is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprmn37bnq.scala:32:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\e\
    [0m = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmn37bnq.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n        val maxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n        val maxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w\
    \ => w.toCharArray.forall(c => c == maxChar) && w.count(_ == maxChar) == maxCount\
    \ && w.maxBy(_._2)._1 == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 ==\
    \ maxWordWithMaxCount.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkft_fbjf.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(\e\
    [36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar) && w.count(_\
    \ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && w.maxBy(_._2)._2 ==\
    \ maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 == maxWordWithMaxCount.maxBy(_._2)._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but\
    \ 'val' found\n\e[31m\e[31m-- Error: /tmp/tmpkft_fbjf.scala:20:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCount\e[0m\
    \ = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount)\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types\
    \ Int and (Char, Int) cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpkft_fbjf.scala:21:106 ----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxChar\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Values of types Int and (Char, Int) cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkft_fbjf.scala:21:153\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCountWithMaxChar\e[0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e\
    [36mc\e[0m => c == maxChar) && w.count(_ == maxChar) == maxCount"
  stdout: 'java.lang.AssertionError: assertion failed: TS[1, 0] attempted to take
    ownership of B which is already owned by committable TS[130809, 1, 0] while compiling
    /tmp/tmpkft_fbjf.scala

    '
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = maxWord.sortWith((a,\
    \ b) => a.compareTo(b) > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicalOrder\
    \ = maxWordWithMaxUniqueChars.sortWith((a, b) => a.compareTo(b) < 0).head\n  \
    \      maxWordWithMaxUniqueCharsLexicographicalOrder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rno1lwp.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        maxWordWithMaxUniqueCharsLexicographicalOrder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (maxWordWithMaxUniqueCharsLexicographicalOrder\
    \ : Char)\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            val count\
    \ = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n \
    \       })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 < _._2)\n\
    \        val maxCharsSorted = maxCharsSorted.toSeq.sortWith(_._1 < _._1)\n   \
    \     maxCharsSorted.head._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprepaytpj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSorted\e[0m = maxCharsSorted.toSeq.sortWith(_._1\
    \ < _._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxCharsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmprepaytpj.scala:15:26 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprepaytpj.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n  \
    \      val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head ==\
    \ words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLexInLexInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcviyysmo.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:19:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max)\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:20:52 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max &&\
    \ words.toList.sortWith(_.toString < _.toString).head == words.toList.sortWith(_.toString\
    \ < _.toString).last)\n\e[31m\e[31m   |\e[0m                                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:21:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLex\e[0m = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.s"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _ == maxWord(0))\n        val maxWordWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxChars(0))\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirst(1))\n \
    \       val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(1))\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder(1))\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:18:47 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(_.length == maxChars && _ == maxWord(\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:19:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirst\e[0m = words.filter(_.length == maxChars && _\
    \ == maxWordWithMaxChars(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:20:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e[0m = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxCharsFirst(\e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:21:96 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\e\
    [0m = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:22:11"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWords = words.filter(_.toCharArray.contains(maxChars))\n      \
    \  val maxWord = maxWords.head\n        val maxCharCount = maxWords.map(_.toCharArray).map(_.length).max\n\
    \        val maxCharCountWord = words.filter(_.toCharArray.contains(maxCharCount)).head\n\
    \        val maxCharCountWordLength = maxCharCountWord.toCharArray.map(_.length).max\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59kf8kj_.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharCountWordLength\e[0m = maxCharCountWordLength.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defin"
  stdout: ''
  timestamp: 1659798792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_\
    \ == 'a')\n        if (maxWordCount == maxCount) {\n            maxWord\n    \
    \    } else {\n            words.filter(word => word.count(_ == 'a') == maxWordCount).head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwu3m96wk.scala:26)\n\tat Problem.main(tmpwu3m96wk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length ==\
    \ maxChars && w.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrgnd5_h.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmrgnd5_h.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n      \
    \  val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3hzu699.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg3hzu699.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        unique.find(_ == maxCount) match {\n            case Some(count) => maxWord\n\
    \            case None => words.head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeeeakpau.scala:25)\n\tat Problem.main(tmpeeeakpau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0)((count, word) => count\
    \ + word.distinct().length)\n        val maxWord = words.filter(word => word.distinct().length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpul1ic1ea.scala:15:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.distinct().length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmpul1ic1ea.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount).head\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.HashSet[String]()\n        val maxCount\
    \ = 0\n        val maxWord = word(0)\n        words.foreach(word => {\n      \
    \      val count = unique.count(_ == word)\n            if (count > maxCount)\
    \ {\n                maxCount = count\n                maxWord = word\n      \
    \      }\n            unique += word\n        })\n        maxWord\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcgqd8rbf.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcgqd8rbf.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = word(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpcgqd8rbf.scala:21:25 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                maxCount = count\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcgqd8rbf.scala:22:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxWord\
    \ = word\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxWord\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduce(_ ++ _)\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size\
    \ == maxCount).sortBy(x => x.toSet).head\n        maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkx539b8n.scala:17:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == maxCount).sortBy(\e[36mx\e[0m => x.toSet).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for Set[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with\
    \ constraint >: Char\n\e[31m   |\e[0m..\n\e[31m   |\e[0mI found:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mSet[B]\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Set[B]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Set[B]].\n1 error found\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsAndFirstChar = maxWordWithMaxChars.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstChar.zip(maxWordWithMaxCharsAndFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstChar).map(_._2)\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWord.sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord.zip(maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).map(_._2)\n   \
    \     val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnd_smh80.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnd_smh80.scala:19:72\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsAndFirstChar\e[0m = maxWordWithMaxChars.map(_.charAt(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                  value charAt is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnd_smh80.scala:26:146 -----------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\e\
    [0m = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd_smh80.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                if (uniqueChars.contains(c)) {\n                    uniqueChars\
    \ -= c\n                } else {\n                    uniqueChars += c\n     \
    \           }\n            })\n        })\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                if (maxChars.contains(c)) {\n\
    \                    maxChars -= c\n                } else {\n               \
    \     maxChars += c\n                }\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    if (maxChars.contains(c)) {\n                       \
    \ maxWord = word :: maxWord\n                    } else {\n                  \
    \      maxWord = word :: maxWord\n                    }\n                } else\
    \ {\n                    if (maxChars.contains(c)) {\n                       \
    \ maxWord = word :: maxWord\n                    } else {\n                  \
    \      maxWord = word :: maxWord\n                    }\n                }\n \
    \           })\n        })\n        maxWord.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:50:32 -----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                        maxWord = word :: maxWord\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Reassignment to val maxWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:52:32 -----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                        maxWord = word :: maxWord\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Reassignment to val maxWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:56:32 -----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        "
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxChars = maxWord.sortBy(_.length)\n\
    \        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val\
    \ maxWordWithMaxCharsFirstIndex = maxWordWithMaxChars.indexOf(0)\n        val\
    \ maxWordWithMaxCharsFirstChar = maxWordWithMaxCharsFirst.charAt(0)\n        val\
    \ maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n  \
    \      val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val maxWordWithMaxCharsFirstCharIndex = maxWordWithMaxCharsFirst.indexOf(0)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ovffc21.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ovffc21.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharIndex\e[0m = maxWordWithMaxCharsFirst.indexOf(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ovffc21.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharIndex\e[0m = maxWordWithMaxCharsFirst.indexOf(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ovffc21.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharIndex\e[0m = maxWordWithMaxCharsFirst.indexOf(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ovffc21.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e["
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(c => {\n                uniqueChars.getOrElse(c, 0) + 1\n\
    \            })\n        })\n        uniqueChars.toList.sortWith((a, b) => b._2\
    \ - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezt71rjt.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpezt71rjt.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last +\n        \
    \    words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsnlktyw_.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsnlktyw_.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(char => {\n                uniqueChars += (char -> 1)\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                val count = uniqueChars(char).asInstanceOf[Int]\n    \
    \            if (count > maxChar(char).asInstanceOf[Int]) {\n                \
    \    maxChar(char) = count\n                }\n            })\n        })\n  \
    \      maxChar.keys.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6i5yf9ps.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6i5yf9ps.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(char => {\n                uniqueChars += (char -> 1)\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                val count = uniqueChars(char)\n                if (count\
    \ > maxChar(char)) {\n                    maxChar(char) = count\n            \
    \    }\n            })\n        })\n        val maxCharCount = maxChar.maxBy(_._2)\n\
    \        words.find(word => uniqueChars(word.charAt(0)) == maxCharCount(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jjdqn13.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4jjdqn13.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4jjdqn13.scala:31:18 --------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        words.find(\e[36mword\e[0m => uniqueChars(word.charAt(\e[31m0\e\
    [0m)) == maxCharCount(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val uniqueChars = chars.toList\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        val maxWord = maxWords.head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordChars = maxWord.map(_.toChar).count(_ == maxChars)\n     \
    \   if (maxWordChars > maxWordLength) {\n            findMax(maxWords)\n     \
    \   } else {\n            maxWord\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppi8gb3y3.scala:30)\n\tat Problem.main(tmppi8gb3y3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxUnique = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n \
    \       val maxWord = words(maxIndex)\n        val maxChar = maxWord.distinct\n\
    \        val maxCharIndex = unique.indexOf(maxChar)\n        val maxCharWord =\
    \ words(maxCharIndex)\n        if (maxCharWord.length > maxWord.length) maxWord\n\
    \        else maxCharWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.findMax(tmpm06z5xxo.scala:21)\n\tat Problem$.main(tmpm06z5xxo.scala:26)\n\
    \tat Problem.main(tmpm06z5xxo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars += c -> (maxChars.getOrElse(c, 0) + 1)\n            })\n     \
    \   })\n        uniqueChars.maxBy(maxChars)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqoyiu43w.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqoyiu43w.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugis54xc.scala:22)\n\tat Problem.main(tmpugis54xc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        words.take(maxWordIndex).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ez5gxu3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e\
    [0m (maxWordIndex == \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 > _._2)\n        val\
    \ maxCharsSortedWithCount = maxCharsSorted.map(_._1)\n        val maxCharsSortedWithCountReversed\
    \ = maxCharsSortedWithCount.reverse\n        val maxCharsSortedWithCountReversedWithMax\
    \ = maxCharsSortedWithCountReversed.filter(_._2 == maxCharsSortedWithCountReversed.max)\n\
    \        val maxCharsSortedWithCountReversedWithMaxWithFirst = maxCharsSortedWithCountReversedWithMax.head\n\
    \        val maxCharsSortedWithCountReversedWithMaxWithFirstIndex = maxCharsSortedWithCountReversedWithMaxWithFirst.indexOf(_._1)\n\
    \        val maxCharsSortedWithCountReversedWithMaxWithFirstChar = maxCharsSortedWithCountReversedWithMaxWithFirst.charAt(maxCharsSortedWithCountReversedWithMaxWithFirstIndex)\n\
    \        val maxCharsSortedWithCountReversedWithMaxWithFirstCharAsString = maxCharsSortedWithCountReversedWithMaxWithFirstChar.toString\n\
    \        maxCharsSortedWithCountReversedWithMaxWithFirstCharAsString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpq5xxv6.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpq5xxv6.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toChar).distinct\n        val\
    \ maxChars = chars.max\n        val maxWord = words.filter(_.toChar == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.toChar == maxChars)\n      \
    \  val maxWordWithMaxCharsSortedByLex = maxWordWithMaxChars.sortBy(_.toString.toLowerCase)\n\
    \        val maxWordWithMaxCharsSortedByLexFirst = maxWordWithMaxCharsSortedByLex.head\n\
    \        val maxWordWithMaxCharsSortedByLexLast = maxWordWithMaxCharsSortedByLex.last\n\
    \        val maxWordWithMaxCharsSortedByLexFirstChar = maxWordWithMaxCharsSortedByLexFirst.toString.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByLexLastChar = maxWordWithMaxCharsSortedByLexLast.toString.charAt(0)\n\
    \        if (maxWordWithMaxCharsSortedByLexFirstChar > maxWordWithMaxCharsSortedByLexLastChar)\
    \ {\n            maxWordWithMaxCharsSortedByLexFirstChar\n        } else {\n \
    \           maxWordWithMaxCharsSortedByLexLastChar\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4k1_k96h.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = words.map(_.toChar).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              value toChar is not a member of String\n\e[31m\e\
    [31m-- Error: /tmp/tmp4k1_k96h.scala:16:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = chars.max\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4k1_k96h.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(_.toChar\
    \ == maxChars)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4k1_k96h.scala:18:49\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxChars\e[0m = words.filter(_.toChar == maxChars)\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value toChar is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4k1_k96h.scala:25:12 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            maxWordWithMaxCharsSortedByLexFirstChar\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    (maxWordWithMaxCharsSortedByLexFirstChar\
    \ : Char)\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4k1_k"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(words.indexOf(\"\
    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph9_oe9mw.scala:20:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex.min(words.indexOf(\"\
    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                                 unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmph9_oe9mw.scala:22:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph9_oe9mw.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph9_oe9mw.scala:22:4 -------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mA"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct).map(_.size).toList\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.distinct\n\
    \        val maxWordCharsIndex = maxWord.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsIndex\
    \ = words.indexOf(maxWordChars.head)\n        val maxWordCharsLength = maxWordChars.length\n\
    \        val maxWordCharsIndex = words.indexOf(maxWordChars.head)\n        val\
    \ maxWordCharsLength = maxWordChars.length\n        val maxWordChar\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy75b5u2y.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy75b5u2y.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordCharsIndex\e[0m = words.indexOf(maxWordChars.head)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxWordCharsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordCharsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy75b5u2y.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsLength\e[0m = maxWordChars.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxWordCharsLength is already defined as \e[33mvalue\e[0m \e[35mmaxWordCharsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy75b5u2y.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsIndex\e[0m = words.indexOf(maxWordChars.head)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy75b5u2y.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsLength\e[0m\
    \ = maxWordChars.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxWordCharsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ov"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.foldLeft(Map[Char, Int]())((map, word)\
    \ => {\n            val chars = word.map(c => c.toInt)\n            val count\
    \ = chars.foldLeft(0)((count, c) => count + c)\n            map + (chars.maxBy(_\
    \ == 0) -> (count + 1))\n        })\n        val max = unique.maxBy(_._2)._1\n\
    \        words.find(w => w.toInt == max).getOrElse(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph6s6thp5.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            map + (chars.maxBy(_\
    \ == \e[31m0\e[0m) -> (count + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        Found:    (\e[1m\e[31mInt\e[0m, Int)\n\e[31m   |\e[0m               \
    \    Required: (\e[1m\e[32mChar\e[0m, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars += c -> 1\n            })\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        words.find(word => uniqueChars.size\
    \ == word.length && uniqueChars.forall(c => word.contains(c))).getOrElse(maxKey)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1pof0v7.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1pof0v7.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(char => {\n                uniqueChars += char\n    \
    \        })\n        })\n        uniqueChars.foreach(char => {\n            val\
    \ count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count +\
    \ 1\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.contains(maxKey))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6je5z_a.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6je5z_a.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw6je5z_a.scala:27:18 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.find(\e[36mword\e[0m => word.contains(maxKey))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ match {\n                    case Some(count) => uniqueChars(char) match {\n\
    \                        case Some(count) => count + 1\n                     \
    \   case None => 1\n                    }\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1\n                }\n            })\n        })\n   \
    \     uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6u76s0lp.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6u76s0lp.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        \e\
    [33mcase\e[0m Some(count) => count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                                       ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                  Not found: count\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n              \
    \  maxChars += c -> 1\n            })\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        words.find(word => uniqueChars.size\
    \ == word.length && uniqueChars.forall(c => word.contains(c))).getOrElse(maxKey)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1pk18nj.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_1pk18nj.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.find(_.toString.toCharArray.mkString(\"\") ==\
    \ maxChars)\n        if (maxWord.isEmpty) \"\" else maxWord.get\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3f56cv0x.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_._2\
    \ == maxCount).map(_._1).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values\
    \ of types Int and (Char, Int) cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = maxWord.head\n \
    \       val maxWordWithMaxUniqueCharsFirstChar = maxWordWithMaxUniqueChars.charAt(0)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = maxWordWithMaxUniqueCharsFirstCharIndex\
    \ + 1\n        val maxWordWithMaxUniqueCharsFirstChar = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n\
    \        val maxWordWithMaxUniqueCharsFirstChar = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = maxWordWithMaxUniqueCharsFirstCharIndex\
    \ + 1\n        val maxWordWithMaxUniqueCharsFirstChar = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n\
    \        val maxWordWithMaxUniqueCharsFirstChar = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = maxWordWithMaxUniqueCharsFirstCharIndex\
    \ + 1\n        val maxWordWithMaxUniqueCharsFirstChar = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n\
    \        val maxWordWithMaxUniqueCharsFirstChar = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = maxWordWithMaxUniqueCharsFirstCharIndex\
    \ + 1\n        val maxWordWithMaxUniqueCharsFirstChar = words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n\
    \        val maxWordWithMaxUniqueCharsFirstChar = maxWordWithMaxUniqueCharsFirstChar.charAt(0)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \        val maxWordWithMaxUniqueCharsFirstCharIndex = maxWordWithMaxUnique\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6lnil713.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxUniqueCharsFirstCharIndex\e\
    [0m = maxWordWithMaxUniqueCharsFirstCharIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxUniqueCharsFirstCharIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordWithMaxUniqueCharsFirstCharIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6lnil713.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxUniqueCharsFirstChar\e[0m =\
    \ words.apply(maxWordWithMaxUniqueCharsFirstCharIndex)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxUniqueCharsFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxUniqueCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6lnil713.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxUniqueCharsFirstChar\e[0m = maxWordWithMaxUniqueCharsFirstChar.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxUniqueCharsFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxUniqueCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6lnil713.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxUniqueCharsFirstCharIndex\e[0m = words.indexOf(maxWordWithMaxUniqueCharsFirstChar)\n\
    \e"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_\
    \ == word(0)) == maxChars(maxChar))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rxc_5nw.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rxc_5nw.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5rxc_5nw.scala:24:18 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        words.find(\e[36mword\e[0m => uniqueChars.count(_\
    \ == word(\e[31m0\e[0m)) == maxChars(maxChar))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).head\n        val max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6oxt18o8.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6oxt18o8.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\e\
    [0m = words.filter(_.length == maxChars).sortWith(_ < _).head\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirst\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6oxt18o8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\e\
    [0m = words.filter(_.length == maxChars).sortWith(_ < _).head\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirst\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6oxt18o8.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedWithFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFirstAndFi"
  stdout: ''
  timestamp: 1660009394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.distinct.length == maxCount).sortBy(word => word.distinct).head\n  \
    \      val maxWordWithCountWithMaxCount = words.filter(word => word.distinct.length\
    \ == maxCount).sortBy(word => word.distinct).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n  \
    \      val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount =\
    \ words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.distinct.length == maxCount).sortBy(word => word.distinct).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcp4zjwka.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcp4zjwka.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xk9u2r6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xk9u2r6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xk9u2r6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xk9u2r6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1660009403
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.distinct).flatten\n    \
    \    val maxCount = unique.map(x => x.size).max\n        val maxWord = unique.filter(x\
    \ => x.size == maxCount).head\n        unique.filter(x => x.size == maxCount).sortWith(_\
    \ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprfrucnv0.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = unique.map(\e\
    [36mx\e[0m => x.size).max\n\e[31m\e[31m   |\e[0m                             \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ size is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmprfrucnv0.scala:16:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxCount\e[0m = unique.map(\e[36mx\e[0m => x.size).max\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprfrucnv0.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = unique.filter(\e\
    [36mx\e[0m => x.size == maxCount).head\n\e[31m\e[31m   |\e[0m                \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value size is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmprfrucnv0.scala:18:29 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        unique.filter(\e[36mx\e[0m => x.size == maxCount).sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value size is not a member of Char\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == -1) 0 else maxWordIndex\n    \
    \    val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph14ijzmy.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph14ijzmy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex == -\e[31m1\e[0m) words.size\
    \ \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph14ijzmy.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph14ijzmy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == -\e[31m1\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph14ijzmy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m maxWordIndex\n\e[3"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(c => c._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithCount = words.filter(w => w.toCharArray.forall(c => c\
    \ == maxChars && w.count(_ == c) == maxCount)).head\n        val maxWordWithCountWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max)).head\n\
    \        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord = words.filter(w\
    \ => w.toCharArray.forall(c => c == maxChars && w.count(_ == c) == maxCount &&\
    \ w.max == w.max && w.head == w.max && w.max == w.max && w.max == w.max)).head\n\
    \        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max && w.max\
    \ == w.max && w.max == w.max)).head\n        val maxWordWithCountWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChars && w.count(_ ==\
    \ c) == maxCount && w.max == w.max && w.head == w.max && w.max == w.max && w.max\
    \ == w.max && w.max == w.max && w.max == w.max)).head\n        val maxWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppvrdhlph.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmppvrdhlph.scala:18:42\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(\e[36mc\e[0m => c._2 == maxCount).map(_._1).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types Int and (Char, Int)\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmppvrdhlph.scala:19:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e\
    [36mc\e[0m => c == maxChars)).head\n\e[31m\e[31m   |\e[0m                    \
    \                                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmppvrdhlph.scala:20:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m =\
    \ words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChars\
    \ && w.count(_ == c) == maxCount)).head\n\e[31m\e[31m   |\e[0m               \
    \                                                            ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmppvrdhlph.scala:20:92 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m =\
    \ words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChars\
    \ && w.count(_ == c) == maxCount)).head\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types Int and\
    \ (Char, Int) cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmppvrdhlph.scala:21:87\
    \ ------------"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordString = words.filter(word => word.distinct.length == maxCount).map(word\
    \ => word + \",\").mkString(\"\")\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        words.filter(word => word.distinct.length == maxCount).map(word => word\
    \ + \",\").mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp95xd5ntn.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWordString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length ==\
    \ maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst = words.filter(w\
    \ => w.length == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w < maxWordWithMaxCharsFirstWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w\
    \ < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = words.filter(w\
    \ => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst && w\
    \ < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars && w < maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w > maxWord && w < maxWordWithMaxChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8zg1d7_m.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8zg1d7_m.scala:18:80 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m = words.filter(\e[36mw\e\
    [0m => w.length == maxChars && w < maxWord)\n\e[31m\e[31m   |\e[0m           \
    \                                                                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (maxWord :\
    \ List[String])\n\e[31m   |\e[0m                                      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8zg1d7_m.scala:19:85\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(\e[36mw\e[0m => w.length == maxChars && w > maxWord)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \            Found:    (maxWord : List[String])\n\e[31m   |\e[0m             \
    \                         Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8zg1d7_m.scala:20:97 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstWithMaxChars\e\
    [0m = words.filter(\e[36mw\e[0m => w.length == maxChars && w > maxWord && w <\
    \ maxWordWithMaxChars)\n\e[31m\e[31m   |\e[0m                                \
    \                                                                 ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    (maxWord : List[String])\n\
    \e[31m   |\e[0m                                      Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex < 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex < 0) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ < 0) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex < 0) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0437xpr8.scala:47:26 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp0437xpr8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e\
    [0m (maxWordIndex < \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0437xpr8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(_.length\
    \ == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0437xpr8.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ < \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0437xpr8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33m"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        val maxCharsCount = maxChars.values.max\n        val maxCharsKey = maxChars.keys.max\n\
    \        val maxCharsValue = maxChars(maxCharsKey)\n        val maxCharsKeyString\
    \ = maxCharsKey.toString\n        val maxCharsValueString = maxCharsValue.toString\n\
    \        val maxCharsKeyInt = maxCharsKey.toInt\n        val maxCharsValueInt\
    \ = maxCharsValue.toInt\n        val maxCharsKeyLong = maxCharsKey.toLong\n  \
    \      val maxCharsValueLong = maxCharsValue.toLong\n        val maxCharsKeyFloat\
    \ = maxCharsKey.toFloat\n        val maxCharsValueFloat = maxCharsValue.toFloat\n\
    \        val maxCharsKeyDouble = maxCharsKey.toDouble\n        val maxCharsValueDouble\
    \ = maxCharsValue.toDouble\n        val maxCharsKeyChar = maxCharsKey.toChar\n\
    \        val maxCharsValueChar = maxCharsValue.toChar\n        val maxCharsKeyString\
    \ = maxCharsKey.toString\n        val maxCharsValueString = maxCharsValue.toString\n\
    \        val maxCharsKeyInt = maxCharsKey.toInt\n        val maxCharsValueInt\
    \ = maxCharsValue.toInt\n        val maxCharsKeyLong = maxCharsKey.toLong\n  \
    \      val maxCharsValueLong = maxCharsValue.toLong\n        val maxCharsKeyFloat\
    \ = maxCharsKey.toFloat\n        val maxCharsValueFloat = maxCharsValue.toFloat\n\
    \        val maxCharsKeyDouble = maxCharsKey.toDouble\n        val maxCharsValueDouble\
    \ = maxCharsValue.toDouble\n        val maxCharsKeyChar = maxCharsKey.toChar\n\
    \        val maxCharsValueChar = maxCharsValue.toChar\n        val maxCharsKeyString\
    \ = maxCharsKey.toString\n        val maxCharsValueString = maxCharsValue.toString\n\
    \        val maxCharsKeyInt = maxCharsKey.toInt\n        val maxCharsValueInt\
    \ = maxCharsValue\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2l3enlcz.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsKeyString\e[0m =\
    \ maxCharsKey.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsKeyString is already defined as \e[33mvalue\e[0m \e\
    [35mmaxCharsKeyString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2l3enlcz.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsValueString\e[0m\
    \ = maxCharsValue.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsValueString is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCharsValueString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2l3enlcz.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsKeyInt\e[0m = maxCharsKey.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxCharsKeyInt is already defined as \e[33mvalue\e[0m \e[35mmaxCharsKeyInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2l3enlcz.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsValueInt\e[0m = maxCharsValue.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxCharsValueInt is already defined as \e[33mvalue\e[0m \e[35mmaxCharsValueInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2l3enlcz.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsKeyLong\e[0m = maxCharsKey.toLo"
  stdout: ''
  timestamp: 1660009405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxChars.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirstChar.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.apply(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstChar\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9gjsopw5.scala:39:42 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChar\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gjsopw5.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharIndex\e[0m = maxWordWithMaxCharsFirstCharIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gjsopw5.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstChar\e[0m = words.apply(maxWordWithMaxCharsFirstCharIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gjsopw5.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChar\e\
    [0m = maxWordWithMaxCharsFirstChar.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that o"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars += char\n        })\n        maxChars.foreach(char\
    \ => {\n            val word = words.filter(w => w.contains(char))\n         \
    \   if (word.length > maxWord.size) {\n                maxWord = word\n      \
    \      }\n        })\n        maxWord.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfx0uaqr.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzfx0uaqr.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzfx0uaqr.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856470qm.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856470qm.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856470qm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp856470qm.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1660009406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(word => word.distinct).reduceLeft(_\
    \ ++ _)\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        if (maxWord.isEmpty) \"\"\n    \
    \    else maxWord.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvgmmyo_p.scala:23)\n\tat Problem.main(tmpvgmmyo_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_ == maxCount).map(_\
    \ => words.find(_ == _)).get\n        val maxWordWithCount = words.find(_ == maxWord).get\n\
    \        val maxWordWithCountWithMaxCount = words.find(_ == maxWordWithCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.find(_ == maxWordWithCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.find(_\
    \ == maxWordWithCountWithMaxCountWithMaxCount).get\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount).get\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(_ == maxWordWithCountWithMaxCountWith\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp73eq3clj.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp73eq3clj.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = words.find(_ == maxWordWithCountWithMaxCountWith\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp73eq3clj.scala:17:69 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = counts.find(_\
    \ == maxCount).map(_ => words.find(_ == _)).get\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- Error: /tmp/tmp73eq3clj.scala:18:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m =\
    \ words.find(_ == maxWord).get\n\e[31m\e[31m   |\e[0m                        \
    \                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types String and\
    \ Option[String] cannot be compared with == or !=\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp73eq3clj.scala:22:95 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e"
  stdout: ''
  timestamp: 1660009407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n       \
    \ val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsAndMaxWords = words.filter(_.length == maxChars).sortBy(_.length).head\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordsAndMaxWords = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last\n  \
    \      val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last\n      \
    \  val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords =\
    \ words.filter(_.length == maxChars).sortBy(_.length).head +\n            words.filter(_.length\
    \ == maxChars).sortBy(_.length).last +\n            words.filter(_.length == maxChars).sortBy(_.length).last\
    \ +\n            words.filter(_.length == maxChars).sortBy(_.length).last +\n\
    \            words.filter(_.length == maxChars).sortBy(_.length).last +\n    \
    \        words.filter(_.length == maxChars).sortBy(_.length).last\n        val\
    \ maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp121apxia.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp121apxia.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(0))\n\
    \        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdt4_6td_.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt4_6td_.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt4_6td_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex.max(maxWordWithMaxCharsIndex.indexOf(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt4_6td_.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex.min(maxWordWithMaxCharsIndex.indexOf(\e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdt4_6td_.scala:23:12 "
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1 \n            maxChars += c -> count\n        })\n        val maxCharsSorted\
    \ = maxChars.toSeq.sortWith(_.value > _.value).last\n        val maxCharsSortedKey\
    \ = maxCharsSorted._1 \n        val maxCharsSortedValue = maxCharsSorted._2 \n\
    \        words.find(word => word.toSet.size == uniqueChars.size).map(word => word.toSet.contains(maxCharsSortedKey)).getOrElse(false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7i5_jiis.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp7i5_jiis.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7i5_jiis.scala:29:125 -------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        words.find(\e[36mword\e[0m => word.toSet.size\
    \ == uniqueChars.size).map(\e[36mword\e[0m => word.toSet.contains(maxCharsSortedKey)).getOrElse(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(w => w.length\
    \ == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n       \
    \ val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w < maxWord)\n\
    \        val maxWordWithMaxCharsWithMaxChars = maxWordWithMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxChars = maxWordWithMaxCharsWithMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxChars = maxWordWithMaxCharsWithMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars\
    \ = maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxCharsAndMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsWithMaxCharsAndMaxCharsAndMax\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp11gom4n2.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11gom4n2.scala:21:98\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsWithMaxCharsAndMaxChars\e[0m = maxWordWithMaxCharsWithMaxChars.sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              value length is not a member of Char\n\e[31m\e\
    [31m-- Error: /tmp/tmp11gom4n2.scala:21:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsWithMaxCharsAndMaxChars\e\
    [0m = maxWordWithMaxCharsWithMaxChars.sortBy(_.length).head\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                               ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp11gom4n2.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_\
    \ == c)\n        })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp444sbx8p.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp444sbx8p.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex + 1\n    \
    \    val maxWords = words.filter(_ != maxWord)\n        val maxWordsIndex = words.indexOf(maxWords)\n\
    \        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n       \
    \ val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex\
    \ + 1\n        val maxWordsIndex = maxWordsIndex + 1\n        val maxWordsIndex\
    \ = maxWordsIndex + 1\n        val maxWordsIndex = maxWordsIndex + 1\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjea54js.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjea54js.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWords\e[0m = words.filter(_ != maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWords is already defined as \e[33mvalue\e[0m \e[35mmaxWords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjea54js.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsIndex\e[0m = maxWordsIndex +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjea54js.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsIndex\e[0m = maxWordsIndex +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjea54js.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsIndex\e[0m = maxWordsIndex +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.foldLeft(Map[Char, Int]()){\n     \
    \       case (acc, word) =>\n                val chars = word.map(c => c.toInt)\n\
    \                val count = chars.foldLeft(0)(_ + _)\n                (chars.toMap,\
    \ count)\n        }\n        val maxCount = counts.max\n        val maxChars =\
    \ counts.filter(_._2 == maxCount).map(_._1)\n        val maxWord = words.filter(_._2.toInt\
    \ == maxCount).map(_._1)\n        val maxWords = if (maxWord.size == 1) maxWord\
    \ else maxWord.sortWith((a, b) => a.compareTo(b) < 0)\n        val maxWordString\
    \ = maxWords.mkString(\"\")\n        val maxWordChars = maxChars.mkString(\"\"\
    )\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWordChars else maxWordString + maxWordChars\n        val maxWordString =\
    \ if (maxWordString.isEmpty) maxWordChars else maxWordString + maxWordChars\n\
    \        val maxWordString = if (maxWordString.isEmpty) maxWordChars else maxWordString\
    \ + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty) maxWordChars\
    \ else maxWordString + maxWordChars\n        val maxWordString = if (maxWordString.isEmpty)\
    \ maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42h15ad5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = \e\
    [33mif\e[0m (maxWordString.isEmpty) maxWordChars \e[33melse\e[0m maxWordString\
    \ + maxWordChars\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp42h15ad5.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = \e[33mif\e[0m (maxWordString.isEmpty)\
    \ maxWordChars \e[33melse\e[0m maxWordString + maxWordChars\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp42h15ad5.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = \e[33mif\e[0m (maxWordString.isEmpty)\
    \ maxWordChars \e[33melse\e[0m maxWordString + maxWordChars\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp42h15ad5.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = \e[33mif\e[0m (maxWordString.isEmpty)\
    \ maxWordChars \e[33melse\e[0m maxWordString + maxWordChars\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct).groupBy(identity).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_._2 ==\
    \ maxCount).get._1\n        val maxWords = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxWordsSorted = maxWords.sortWith(_ < _)\n        if (maxWordsSorted.length\
    \ == 1) maxWordsSorted.head else maxWordsSorted.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpulvf7u5b.scala:17:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = counts.find(_._2\
    \ == maxCount).get._1\n\e[31m\e[31m   |\e[0m                                 \
    \ ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  Values of types Int and (String, Int)\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpulvf7u5b.scala:18:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWords\e[0m = counts.filter(_._2 == maxCount).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  Values of types Int and (String, Int) cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpulvf7u5b.scala:19:38\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordsSorted\e[0m = maxWords.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m    \
    \                         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value\
    \ sortWith is not a member of scala.collection.View[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1660009410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            val count\
    \ = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n \
    \       })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => a._2\
    \ < b._2)\n        val maxCharsSortedFirst = maxCharsSorted.head._1\n        val\
    \ maxCharsSortedLast = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirst)\n        val maxCharsSortedLastIndex =\
    \ words.indexOf(maxCharsSortedLast)\n        val maxCharsSortedFirstChar = maxCharsSortedFirst.charAt(0)\n\
    \        val maxCharsSortedLastChar = maxCharsSortedLast.charAt(0)\n        if\
    \ (maxCharsSortedFirstIndex < maxCharsSortedLastIndex) {\n            words.take(maxCharsSortedFirstIndex\
    \ + 1)\n        } else if (maxCharsSortedFirstIndex > maxCharsSortedLastIndex)\
    \ {\n            words.drop(maxCharsSortedLastIndex + 1)\n        } else {\n \
    \           words\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzovp95k.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzovp95k.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmzovp95k.scala:34:22 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            words.take(maxCharsSortedFirstIndex + \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmzovp95k.scala:36:22 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            words.drop(maxCharsSortedLastIndex + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmzovp95k.scala:38:12 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            words\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (words : List[String])\n\e[31m   |\e\
    [0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when com"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars(c).max(uniqueChars(c))\n            })\n       \
    \ })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word =>\
    \ word.count(_ == maxChar) == uniqueChars.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1adg_d1.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo1adg_d1.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1adg_d1.scala:24:18 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxChar) == uniqueChars.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.distinct).flatten\n    \
    \    val maxCount = unique.map(x => x.size).max\n        val maxWord = unique.filter(x\
    \ => x.size == maxCount).head\n        unique.filter(x => x.size == maxCount).sortBy(x\
    \ => x.head).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1irgkrg8.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = unique.map(\e\
    [36mx\e[0m => x.size).max\n\e[31m\e[31m   |\e[0m                             \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m                                      value\
    \ size is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmp1irgkrg8.scala:16:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxCount\e[0m = unique.map(\e[36mx\e[0m => x.size).max\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1irgkrg8.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = unique.filter(\e\
    [36mx\e[0m => x.size == maxCount).head\n\e[31m\e[31m   |\e[0m                \
    \                         ^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \               value size is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1irgkrg8.scala:18:29 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        unique.filter(\e[36mx\e[0m => x.size == maxCount).sortBy(\e\
    [36mx\e[0m => x.head).head\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value size is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1irgkrg8.scala:18:61 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        unique.filter(\e[36mx\e[0m => x.size == maxCount).sortBy(\e\
    [36mx\e[0m => x.head).head\n\e[31m\e[31m   |\e[0m                            \
    \                               ^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                     value head is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp1irgkrg8.scala:18:66 -----------------------"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.last\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,maxWordWithMaxCharsString.length-1)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkte8dpv3.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkte8dpv3.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkte8dpv3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString + words.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkte8dpv3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString.substring(\e[31m0\e[0m,maxWordWithMaxCharsString.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkte8dpv3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp7lbheuq.scala:54:26 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpp7lbheuq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7lbheuq.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinct.length == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7lbheuq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp7lbheuq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660009415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduce(_ ++ _)\n\
    \        val maxCount = words.map(x => x.toSet).reduce(_.size)\n        val maxWord\
    \ = words.filter(x => x.toSet.size == unique).sortBy(x => x.toSet.size).head\n\
    \        val maxWordCount = words.filter(x => x.toSet.size == unique).map(x =>\
    \ x.toSet.size).max\n        val maxWordCountIndex = words.filter(x => x.toSet.size\
    \ == unique).map(x => x.toSet.size).indexOf(maxWordCount)\n        val maxWordCountIndexInWords\
    \ = words.indexOf(maxWord, maxWordCountIndex)\n        val maxWordInWords = words.indexOf(maxWord,\
    \ maxWordCountIndexInWords)\n        val maxWordInWordsIndex = words.indexOf(maxWordInWords)\n\
    \        val maxWordInWordsIndexInWords = words.indexOf(maxWordInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWords = words.indexOf(maxWordInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWords = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndex = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords =\
    \ words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex\
    \ = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWords\
    \ = words.indexOf(maxWordInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndexInWordsIndex)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmph8vr6wq1.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmph8vr6wq1.scala:16:54 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.map(\e\
    [36mx\e[0m => x.toSet).reduce(_.size)\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 2\n\e[31m\e[31m--\
    \ Error: /tmp/tmph8vr6wq1.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == unique).sortBy(\e[36mx\e[0m => x.toSet.size).head\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Values of types Int and Set[Char] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmph8vr6wq1.scala:18:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCount\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == unique).map(\e[36mx\e[0m => x.toSet.size).max\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Values of types Int and Set[Char] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmph8vr6wq1.scala:19:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCountIndex\e[0m =\
    \ words.filter(\e[36mx\e[0m => x.toSet.size == unique).map(\e[36mx\e[0m => x.toSet.size).indexOf(maxWordCount)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Values of types Int and Set[Char] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph8vr6wq1.scala:25:67\
    \ ---------------------------\e[0m\e[0m"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1 \n            maxChars += c -> count\n        })\n        val maxCharsSorted\
    \ = maxChars.toSeq.sortWith(_.value > _.value)\n        val maxCharsSortedFirst\
    \ = maxCharsSorted.head\n        val maxCharsSortedFirstKey = maxCharsSortedFirst._1\n\
    \        val maxCharsSortedFirstValue = maxCharsSortedFirst._2\n        val maxCharsSortedFirstIndex\
    \ = words.indexOf(maxCharsSortedFirstKey)\n        val maxCharsSortedFirstWord\
    \ = words(maxCharsSortedFirstIndex)\n        if (maxCharsSortedFirstValue == words.size)\
    \ {\n            maxCharsSortedFirstWord\n        } else {\n            findMax(words)\
    \ //recurse\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdah_v_sd.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdah_v_sd.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val unique = chars.distinct\n        val count = unique.toSet.size\n       \
    \ if (count > 1) unique.max\n        else words.min\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmtmaylhw.scala:18:23\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (count\
    \ > \e[31m1\e[0m) unique.max\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    Char\n\e[31m   |\e[0m   \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_\
    \ == c)\n        })\n        uniqueChars.toList.sortWith(_.compareTo(_) > 0).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kzjg2od.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6kzjg2od.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(c => {\n                uniqueChars.getOrElse(c, 0) + 1\n\
    \            })\n        })\n        uniqueChars.toSeq.sortWith(_._2 > _._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxg5nm7j.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxg5nm7j.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ uniqueChars(c) + 1)\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19ib2x5z.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            if (maxChars.contains(c)) {\n                maxWord.clear()\n\
    \                maxWord.add(c)\n            }\n            else {\n         \
    \       maxChars += c\n            }\n        })\n        if (maxWord.size ==\
    \ 1) {\n            maxWord.head\n        }\n        else {\n            maxWord.headOption.getOrElse(\"\
    \")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2j_vf_q.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv2j_vf_q.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpv2j_vf_q.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.distinct).distinct\n   \
    \     val maxCount = unique.max\n        unique.find(x => x.size == maxCount).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjxhu5fm5.scala:17:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        unique.find(\e[36mx\e[0m => x.size == maxCount).head\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ - 1\n        val maxWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeda9iz9g.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeda9iz9g.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeda9iz9g.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsStringLength\e\
    [0m = maxWordWithMaxCharsStringLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeda9iz9g.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsStringLength\e[0m = maxWordWithMaxCharsStringLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeda9iz9g.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsStringLength\e[0m = maxWordWithMaxCharsString"
  stdout: ''
  timestamp: 1660009417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_\
    \ == 'a')\n        if (maxWordCount == maxCount) {\n            maxWord\n    \
    \    } else {\n            val maxWordWithCount = words.filter(word => word.count(_\
    \ == 'a') == maxWordCount).head\n            val maxWordWithCountCount = maxWordWithCount.count(_\
    \ == 'a')\n            if (maxWordWithCountCount == maxCount) {\n            \
    \    maxWordWithCount\n            } else {\n                words.filter(word\
    \ => word.count(_ == 'a') == maxWordWithCountCount).head\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphm5s3lp8.scala:32)\n\tat Problem.main(tmphm5s3lp8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n\
    \        val maxCount = words.map(x => x.distinct).flatten.toSet.max\n       \
    \ val maxWord = words.filter(x => x.distinct.size == maxCount).min\n        val\
    \ maxWordIndex = words.indexOf(maxWord)\n        words(maxWordIndex)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\
    \tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\
    \tat Problem$.findMax(tmpd35b2j6e.scala:17)\n\tat Problem$.main(tmpd35b2j6e.scala:22)\n\
    \tat Problem.main(tmpd35b2j6e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.HashSet[Char]()\n        val maxWord\
    \ = mutable.ListBuffer[String]()\n        for (word <- words) {\n            val\
    \ uniqueChars = word.distinct\n            uniqueChars.foreach(unique.add(_))\n\
    \            if (uniqueChars.size > max.size) {\n                maxWord.append(word)\n\
    \            }\n        }\n        if (maxWord.size == 1) {\n            maxWord.head\n\
    \        } else {\n            maxWord.sortWith((x, y) => x.size < y.size)\n \
    \                   .head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5161wx7.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw5161wx7.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmpw5161wx7.scala:20:35 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (uniqueChars.size > max.size)\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x:\
    \ Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e\
    [31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\
    \e[31m   |\e[0mmatch expected type ?{ size: ? }\n3 errors found\n"
  stdout: ''
  timestamp: 1660009416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n   \
    \     val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed =\
    \ words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0yefao58.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0yefao58.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = words.reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0yefao58.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString + words.drop\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl9_8a4qy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl9_8a4qy.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl9_8a4qy.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString + words.take(maxWordWithMaxCharsIndex).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl9_8a4qy.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString + words.drop(maxWordWithMaxCharsIndex).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1660009419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = maxWord.sortWith((a,\
    \ b) => a.compareTo(b) > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicallyFirst\
    \ = maxWordWithMaxUniqueChars.sortWith((a, b) => a.compareTo(b) > 0).head\n  \
    \      maxWordWithMaxUniqueCharsLexicographicallyFirst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgt6hv7ci.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        maxWordWithMaxUniqueCharsLexicographicallyFirst\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    (maxWordWithMaxUniqueCharsLexicographicallyFirst\
    \ : Char)\n\e[31m   |\e[0m      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n\
    \        val max = unique.max\n        val index = unique.indexOf(max)\n     \
    \   words(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jijml5c.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = unique.indexOf(max)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value indexOf is not a member of Set[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \  })\n        })\n        uniqueChars.foreach(c => {\n            val count =\
    \ maxChars.getOrElse(c, 0) + 1\n            maxChars = maxChars + (c -> count)\n\
    \        })\n        val maxKey = maxChars.maxBy(_._2)\n        words.find(word\
    \ => word.toSet.size == uniqueChars.size).map(word => word.toSet.contains(maxKey)).getOrElse(false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1a1rs5h.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1a1rs5h.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl1a1rs5h.scala:27:114 -------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.find(\e[36mword\e[0m => word.toSet.size\
    \ == uniqueChars.size).map(\e[36mword\e[0m => word.toSet.contains(maxKey)).getOrElse(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6a0uq2_5.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6a0uq2_5.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex == \e[31m0\e[0m) words.size\
    \ \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6a0uq2_5.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinct.length == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6a0uq2_5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6a0uq2_5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduce(_|)\n    \
    \    val maxUnique = unique.max\n        val maxIndex = unique.indexOf(maxUnique)\n\
    \        words(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphsvpy2yx.scala:15:54 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = words.map(\e\
    [36mx\e[0m => x.toSet).reduce(_|)\n\e[31m\e[31m   |\e[0m                     \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m')'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphsvpy2yx.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = unique.indexOf(maxUnique)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value indexOf is not a member of Set[Char]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val unique = chars.distinct\n        val count = unique.length\n        if (count\
    \ > 1) {\n            val maxCount = unique.max\n            val maxIndex = unique.indexOfMax\n\
    \            unique.take(maxIndex).mkString(\"\")\n        } else {\n        \
    \    unique.mkString(\"\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9m84dxvr.scala:20:34 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmaxIndex\e[0m = unique.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue indexOfMax is not a member of List[Char] - did you mean unique.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars.getOrElse(c, 0) + 1 \n            })\n        })\n\
    \        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_\
    \ == word(0)) == maxChars(maxChar))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8p8yfb_h.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8p8yfb_h.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8p8yfb_h.scala:24:18 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        words.find(\e[36mword\e[0m => uniqueChars.count(_\
    \ == word(\e[31m0\e[0m)) == maxChars(maxChar))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(char => {\n                uniqueChars += char\n    \
    \        })\n        })\n        uniqueChars.foreach(char => {\n            maxChars(char)\
    \ = uniqueChars.count(_ == char)\n        })\n        uniqueChars.toList.sortWith(_.compareTo(_)\
    \ < 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwro4bnq.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwro4bnq.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).min\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).max\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length\
    \ == maxChars).max max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.length ==\
    \ maxChars).max max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).max max maxWord max maxWord max maxWord\
    \ max maxWord max maxWord max maxWord max maxWord\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1rwzniz6.scala:19:87\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWord\e\
    [0m = words.filter(_.length == maxChars).max max maxWord\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \        Found:    (maxWord : String)\n\e[31m   |\e[0m                       \
    \                     Required: Ordering[Char]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1rwzniz6.scala:20:97 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWordAndMaxWord\e\
    [0m = words.filter(_.length == maxChars).max max maxWord max maxWord\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                              Found:    (maxWord : String)\n\e[31m   |\e[0m \
    \                                           Required: Ordering[Char]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1rwzniz6.scala:20:109 -------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWordAndMaxWord\e\
    [0m = words.filter(_.length == maxChars).max max maxWord max maxWord\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                             ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                          Found:    (maxWord : String)\n\e[31m\
    \   |\e[0m                                            Required: Char\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1rwzniz6.scala:21:107 -------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\e"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n  \
    \      val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n    \
    \    if (maxWordCount == 1) {\n            maxWord\n        } else {\n       \
    \     val maxWords = words.filter(_.toCharArray.contains(maxChars))\n        \
    \    val maxWordsCount = maxWords.count(_.toCharArray.contains(maxChars))\n  \
    \          if (maxWordsCount == 1) {\n                maxWords.head\n        \
    \    } else {\n                val maxWordsSortedByCount = maxWords.sortBy(_.toCharArray.count(_.toCharArray.contains(maxChars)))\n\
    \                maxWordsSortedByCount.head\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4fhcvelg.scala:28:82 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mmaxWordsSortedByCount\e\
    [0m = maxWords.sortBy(_.toCharArray.count(_.toCharArray.contains(maxChars)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toCharArray is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        for (word <- words) {\n            val uniqueCharsCount = word.count(c\
    \ => uniqueChars.contains(c))\n            val maxCharsCount = word.count(c =>\
    \ maxChars.contains(c))\n            if (uniqueCharsCount > maxCharsCount) {\n\
    \                maxChars ++= word.toSet\n                maxWord += word\n  \
    \          } else if (uniqueCharsCount == maxCharsCount) {\n                maxWord\
    \ += word\n            }\n            uniqueChars ++= word.toSet\n        }\n\
    \        if (maxWord.size == 1) {\n            maxWord.head\n        } else {\n\
    \            maxWord.sortWith((a, b) => a.compareTo(b) < 0).head\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hl7a2tw.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hl7a2tw.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2hl7a2tw.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.head\n    \
    \    val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsp7ugj3g.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsp7ugj3g.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpsp7ugj3g.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = words.sortBy(_.length).reverse.reverse.reverse.reverse.reverse.reverse.reverse.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of "
  stdout: ''
  timestamp: 1660009426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMax\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp47va5zg7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsWithFirstChar\e\
    [0m = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _).head\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp47va5zg7.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsWithFirstChar\e[0m = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp47va5zg7.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsWithFirstChar\e[0m = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp47va5zg7.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsWithFirstChar\e[0m = maxWordWithMaxCharsWithFirstChar.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars += c -> 0\n            })\n        })\n        uniqueChars.maxBy(maxChars)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2m6mk6o.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2m6mk6o.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWords = words.filter(w => w.toCharArray.distinct.size == maxChars)\n\
    \        val maxWord = maxWords.head\n        val maxWordChars = maxWord.map(_.toCharArray).flatten\n\
    \        val maxWordCharsCount = maxWordChars.distinct\n        val maxWordCharsCount\
    \ = maxWordCharsCount.size\n        if (maxWordCharsCount == maxChars) {\n   \
    \         maxWord\n        } else {\n            val maxWordCharsCountDesc = maxWordCharsCount.sortWith(_\
    \ < _)\n            val maxWordCharsCountDesc = maxWordCharsCountDesc.last\n \
    \           maxWord.take(maxWordCharsCountDesc)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ifi4u4o.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsCount\e[0m =\
    \ maxWordCharsCount.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9ifi4u4o.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordChars\e[0m = maxWord.map(_.toCharArray).flatten\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toCharArray is not a member\
    \ of Char\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ifi4u4o.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharsCountDesc\e\
    [0m = maxWordCharsCountDesc.last\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsCountDesc is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordCharsCountDesc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsLast = words.filter(_.length == maxChars && words.indexOf(_)\
    \ > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLast = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ < words.indexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.indexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.indexOf(_) && words.indexOf(_) > words.indexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxChars = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ < words.indexOf(_) && words.indexOf(_) > words.indexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqi_cp_2s.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqi_cp_2s.scala:18:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqi_cp_2s.scala:19:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirst\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                             \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqi_cp_2s.scala:20:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsLast\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ > words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                             \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpqi_cp_2s.scala:21:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstLast\e[0m = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) > words.lastIndexOf(_))\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1 \n            maxChars += c -> count\n        })\n        val maxKey\
    \ = maxChars.maxBy(_._2)._1\n        words.find(word => word.toList.contains(maxKey))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_dip7l83.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_dip7l83.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_dip7l83.scala:27:18 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.find(\e[36mword\e[0m => word.toList.contains(maxKey))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.foldLeft(Set.empty[Char])((acc,\
    \ word) => acc ++ word.map(c => c.toChar))\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.count(_ == maxChars) == w.size)\n \
    \       val maxWordWithMaxChars = words.filter(w => w.count(_ == maxChars) ==\
    \ w.size && w.count(_ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversed\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar = words.filter(w\
    \ => w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_\
    \ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size\
    \ && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size)\n \
    \       val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size\
    \ && w.count(_ == maxChars) == w.size && w.count(_ == maxChars) == w.size && w.count(_\
    \ == maxChars) == w.size)\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = words.filter(w => w.count(_ == maxChars) == w.size && w.count(_ == maxChars)\
    \ == w.size && w.count(_ == maxChars) == w.size && \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvsestzy5.scala:24:234 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\e\
    [0m = words.filter(\e[36mw\e[0m => w.count(_ == maxChars) == w.size && w.count(_\
    \ == maxChars) == w.size && w.count(_ == maxChars) == w.size && \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvsestzy5.scala:25:5 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirst)\n        val maxWordWithMaxCharsFirstString\
    \ = words.take(maxWordWithMaxCharsFirstIndex).mkString(\"\")\n        val maxWordWithMaxCharsFirstStringLength\
    \ = maxWordWithMaxCharsFirstString.length\n        if (maxWordWithMaxCharsFirstStringLength\
    \ > maxChars) {\n            maxWordWithMaxCharsFirstString\n        } else {\n\
    \            maxWordWithMaxCharsFirst\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1knktnie.scala:34)\n\tat Problem.main(tmp1knktnie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0) { (maxCount, word) =>\n\
    \            val count = word.count('a')\n            if (count > maxCount) count\
    \ else maxCount\n        }\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') === maxCount).minBy(_.length)\n        words.filter(word => word.count(_\
    \ == 'a') === maxCount).minBy(_.length).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1f_8_fj.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e\
    [36mcount\e[0m = word.count(\e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                           \
    \        Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                 Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx1f_8_fj.scala:19:64 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.count(_ == \e[31m'a'\e[0m) === maxCount).minBy(_.length)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value === is not a member of Int - did you\
    \ mean Int.==?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx1f_8_fj.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mword\e\
    [0m => word.count(_ == \e[31m'a'\e[0m) === maxCount).minBy(_.length).head\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 value === is not a member of Int - did you mean\
    \ Int.==?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWord = words.filter(word => word.count(_ == maxChars) > 1)\n  \
    \      val maxWordWithMaxChars = maxWord.filter(word => word.count(_ == maxChars)\
    \ == 1)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n   \
    \     val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toCharArray).flatten.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsCount = maxWordWithMaxCharsFirstChars.count(_\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstCharsIndex = maxWordWithMaxCharsFirstChars.indexOfMax\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n        val maxWordWithMaxCharsFirstCharsIndex\
    \ = if (maxWordWithMaxCharsFirstCharsIndex == -1) -1 else maxWordWithMaxCharsFirstCharsIndex\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = if (maxWordWithMaxCharsFirstCharsIndex\
    \ == -1) -1 else maxWordWithMaxCharsFirstChars\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouz9w7k4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsIndex\e\
    [0m = \e[33mif\e[0m (maxWordWithMaxCharsFirstCharsIndex == -\e[31m1\e[0m) -\e\
    [31m1\e[0m \e[33melse\e[0m maxWordWithMaxCharsFirstCharsIndex\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouz9w7k4.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsIndex\e[0m = \e[33mif\e[0m (maxWordWithMaxCharsFirstCharsIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m maxWordWithMaxCharsFirstCharsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpouz9w7k4.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsIndex\e[0m = \e[33mif\e[0m (maxWordWithMaxCharsFirstCharsIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m maxWordWithMaxCharsFirstCharsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1660009432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.foldLeft(Map[Char, Int]())((map, word)\
    \ => {\n            val uniqueChars = word.distinct\n            uniqueChars.foreach(c\
    \ => map += ((c, map.getOrElse(c, 0) + 1)));\n            map\n        })\n  \
    \      val maxKey = unique.maxBy(_._2)._1\n        words.find(word => word.count(_\
    \ == maxKey) == unique.count(_ == maxKey))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfsqjtxks.scala:21:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxKey) == unique.count(_ == maxKey))\n\e[31m\e[31m   |\e[0m               \
    \                                                    ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m   Values of types (Char, Int) and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(word => word.distinct).reduceLeft(_\
    \ ++ _)\n        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars))\n        val maxWordWithMaxCharsFirst = words.filter(word => word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_ == maxChars)).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirstWithMaxChars = words.filter(word =>\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars)).sortWith(_ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _)\n    \
    \    val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == word.count(_\
    \ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < _).take(1).sortWith(_\
    \ < _).take(1)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == word.count(_ == maxChars)).sortWith(_ < _).take(1).sortWith(_ < \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfx5ns4g1.scala:25:237 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == \e[31m1\e[0m\
    \ && word.count(_ == maxChars) == word.count(_ == maxChars)).sortWith(_ < _).take(\e\
    [31m1\e[0m).sortWith(_ < \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfx5ns4g1.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \  })\n        })\n        uniqueChars.foreach(c => {\n            val count =\
    \ maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n        })\n\
    \        val maxKey = maxChars.maxBy(_._2)\n        words.find(word => word.toSet.size\
    \ == uniqueChars.size).head\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa99ktqol.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpa99ktqol.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            val count\
    \ = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n \
    \       })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.contains(maxChar))\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0cumffe.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0cumffe.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0cumffe.scala:27:18 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.find(\e[36mword\e[0m => word.contains(maxChar))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.distinct).flatten.toSet\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(x => x.distinct.size\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(x => x.distinct.size\
    \ == maxCount).sortBy(x => x.distinct).head\n        val maxWordWithCountWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last\n\
    \        val maxWordWithCountWithMaxWithMax = words.filter(x => x.distinct.size\
    \ == maxCount).sortBy(x => x.distinct).last.last\n        val maxWordWithCountWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMax = words.filter(x =>\
    \ x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last\n \
    \       val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(x\
    \ => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last.last\n\
    \        val maxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(x => x.distinct.size == maxCount).sortBy(x => x.distinct).last.last.last.last.last.last.last.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi4p__mhu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = words.filter(\e[36mx\e[0m => x.distinct.size == maxCount).sortBy(\e[36mx\e\
    [0m => x.distinct).last.last.last.last.last.last.last\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi4p__mhu.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = words.filter(\e[36mx\e[0m => x.distinct.size == maxCount).sortBy(\e[36mx\e\
    [0m => x.distinct).last.last.last.last.last.last.last\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi4p__mhu.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = words.filter(\e[36mx\e[0m => x.distinct.size == maxCount).sortBy(\e[36mx\e\
    [0m => x.distinct).last.last.last.last.last.last.last.last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _ == maxWord.head)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirst.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirst.last.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\
    \        val maxWordWithMaxCharsSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwbpy6wc8.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwbpy6wc8.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\e[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwbpy6wc8.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwbpy6wc8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1660009435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ (uniqueChars(c) match {\n                    case Some(x) => x + 1\n       \
    \             case None => 1\n                }))\n            })\n        })\n\
    \        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjseoxoq4.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLength\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.sortBy(_.length).reverse.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedByLengthReversedSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkvnoodid.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkvnoodid.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxCount = words.foldLeft(0) { (max, word) =>\n            val uniqueCharsCount\
    \ = word.map(c => c to uniqueChars(c)).foldLeft(0) { (max, count) =>\n       \
    \         if (count > max) count else max\n            }\n            if (uniqueCharsCount\
    \ > max) uniqueCharsCount else max\n        }\n        words.find(word => uniqueChars.size\
    \ == word.length).map(word => word + uniqueChars.toList.sorted.mkString(\"\"))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphcmb2fu1.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphcmb2fu1.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (count > max) count \e\
    [33melse\e[0m max\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue > is not a member of scala.collection.immutable.NumericRange.Inclusive[Char],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcmb2fu1.scala:18:33 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (count > max) count \e\
    [33melse\e[0m max\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (count : scala.collection.immutable.NumericRange.Inclusive[Char])\n\
    \e[31m   |\e[0mRequired: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphcmb2fu1.scala:22:63 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        words.find(\e[36mword\e[0m => uniqueChars.size == word.length).map(\e\
    [36mword\e[0m => word + uniqueChars.toList.sorted.mkString(\e[31m\"\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compi"
  stdout: ''
  timestamp: 1660009436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            for(c <- word.toCharArray) {\n                chars(c) match\
    \ {\n                    case Some(count) => chars(c) = count + 1\n          \
    \          case None => chars(c) = 1\n                }\n            }\n     \
    \   })\n        chars.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxbjzzpq.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n        val\
    \ maxWordWithCountWithMaxCountWithMaxCount = words.filter(word => word.count(_\
    \ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n        val\
    \ maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).sortBy(word => word.count(_ == 'a')).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count(_\
    \ == 'a')).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpscevazcu.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpscevazcu.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(c => {\n                uniqueChars += (c -> 1)\n        \
    \    })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                maxChar += (c -> 1)\n            })\n        })\n    \
    \    val maxKey = maxChar.keys.max\n        val maxValue = maxChar.max\n     \
    \   words.find(word => uniqueChars(word) == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9b5m9xnk.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9b5m9xnk.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9b5m9xnk.scala:29:18 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        words.find(\e[36mword\e[0m => uniqueChars(word) == maxValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars(c) = maxChars(c).max(uniqueChars(c))\n            })\n       \
    \ })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => a._2 > b._2)\n\
    \        val maxCharsSortedKey = maxCharsSorted.head._1\n        val maxCharsSortedValue\
    \ = maxCharsSorted.head._2\n        words.find(word => maxCharsSortedValue ==\
    \ uniqueChars(word)).getOrElse(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4ywb0zd.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4ywb0zd.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWord = words.filter(w => w.toCharArray.size == maxChars)\n    \
    \    val maxWordWithMaxChars = words.filter(w => w.toCharArray.size == maxChars\
    \ && w.toCharArray.sorted == maxWord.toCharArray.sorted)\n        val maxWordWithMaxCharsSortedInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxChars.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar = words.filter(w\
    \ => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar.toCharArray.sorted)\n\
    \        val maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar\
    \ = words.filter(w => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxCharWithMaxChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvtm7sbqy.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvtm7sbqy.scala:19:118\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxChars\e[0m = words.filter(\e[36mw\e[0m => w.toCharArray.size\
    \ == maxChars && w.toCharArray.sorted == maxWord.toCharArray.sorted)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value toCharArray is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvtm7sbqy.scala:20:124 -----------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedInLexicographicalOrder\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.sorted == maxWordWithMaxChars.toCharArray.sorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value toCharArray is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvtm7sbqy.scala:21:115\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar\e[0m = words.filter(\e\
    [36mw\e[0m => w.toCharArray.sorted == maxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar.toCharArray.sorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedInLexicographicalOrderWithMaxChar\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvtm7sbqy.scala:22:126\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36m"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxChars.charAt(0)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = maxWordWithMaxCharsFirstCharIndex + 1\n        val maxWordWithMaxCharsFirstChar\
    \ = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = words.indexOf(maxWordWithMaxCharsFirstChar)\n        val maxWordWithMaxCharsFirstCharIndex\
    \ = max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpij5_wm16.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharIndex\e\
    [0m = maxWordWithMaxCharsFirstCharIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpij5_wm16.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstChar\e[0m = words.charAt(maxWordWithMaxCharsFirstCharIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpij5_wm16.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharIndex\e\
    [0m = words.indexOf(maxWordWithMaxCharsFirstChar)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharIndex is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpij5_wm16.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharIndex\e[0m = maxWordWithMaxCharsFirstCharIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.HashSet[Char]()\n        val maxCount\
    \ = 0\n        val maxWord = word(0)\n        for(word <- words) {\n         \
    \   for(c <- word) {\n                if(unique.contains(c)) {\n             \
    \       unique.remove(c)\n                } else {\n                    unique.add(c)\n\
    \                }\n            }\n            if(unique.size == maxCount) {\n\
    \                maxCount = unique.size\n                maxWord = word\n    \
    \        }\n        }\n        maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9pqt8wg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt9pqt8wg.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = word(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpt9pqt8wg.scala:27:25 -----------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                maxCount = unique.size\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Reassignment to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpt9pqt8wg.scala:28:24 -----------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m                maxWord = word\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            val count\
    \ = uniqueChars.count(_ == char)\n            if (count > maxChars(char)) {\n\
    \                maxChars(char) = count\n            }\n        })\n        val\
    \ maxCharsSorted = maxChars.toSeq.sortWith(_._2 < _._2)\n        val maxCharsSortedKey\
    \ = maxCharsSorted.last._1\n        val maxCharsSortedValue = maxCharsSorted.last._2\n\
    \        val maxCharsSortedKeyIndex = words.indexOf(maxCharsSortedKey)\n     \
    \   val maxCharsSortedValueIndex = words.indexOf(maxCharsSortedValue)\n      \
    \  words(maxCharsSortedKeyIndex)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ccjg47o.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ccjg47o.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n\
    \        val maxCount = unique.max\n        val maxWord = unique.filter(x => x\
    \ == maxCount).head\n        val maxWords = unique.filter(x => x == maxCount).sortWith(_\
    \ < _)\n        val maxWordsString = maxWords.mkString(\" \")\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        val maxWordsString\
    \ = maxWordsString.substring(0, maxWordsString.length - 1)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0mt6xig.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsString\e[0m = maxWordsString.substring(\e\
    [31m0\e[0m, maxWordsString.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsString is already defined as \e[33mvalue\e[0m \e[35mmaxWordsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0mt6xig.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsString\e[0m = maxWordsString.substring(\e\
    [31m0\e[0m, maxWordsString.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsString is already defined as \e[33mvalue\e[0m \e[35mmaxWordsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0mt6xig.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsString\e[0m = maxWordsString.substring(\e\
    [31m0\e[0m, maxWordsString.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsString is already defined as \e[33mvalue\e[0m \e[35mmaxWordsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0mt6xig.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsString\e[0m = maxWordsString.substring(\e\
    [31m0\e[0m, maxWordsString.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordsString is already defined as \e[33mvalue\e[0m \e[35mmaxWo"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).head\n        val maxWordWithMaxCharsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord)).head\n     \
    \   val maxWordWithMaxCharsAndMaxWordsAndMaxWords = words.filter(_.length == maxChars\
    \ && words.contains(maxWord) && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord)).head\n        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(_.length == maxChars && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)\
    \ && words.contains(maxWord) && words.contains(maxWord) && words.contains(maxWord)).head\n\
    \        val maxWordWithMaxCharsAndMaxWordsAndMaxWordsAndMaxWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3dsj94c0.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3dsj94c0.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n              \
    \  maxChars += c -> 0\n            })\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpi0ed9q.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpi0ed9q.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.foldLeft(Set.empty[Char])((s,\
    \ word) => s ++ word.map(c => c.toChar))\n        val maxChar = uniqueChars.max\n\
    \        words.find(word => word.count(_ == maxChar) == uniqueChars.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7nc9tkd0.scala:17:67 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxChar) == uniqueChars.length)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \    value length is not a member of scala.collection.mutable.Set[Char]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n   \
    \     val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWordString)\n        val maxWordString\
    \ = words.filter(x => x.toSet.size == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWordString)\n        val maxWordString = words.filter(x =>\
    \ x.toSet.size == maxCount).head\n        val maxWordIndex = words.indexOf(maxWordString)\n\
    \        val maxWordString = words.filter(x => x.toSet.size == maxCount).head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpih0v2ue3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWordString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpih0v2ue3.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpih0v2ue3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWordString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpih0v2ue3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpih0v2ue3.scala:24:12 -----------"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxCharsIndex)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWith\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3309kh4j.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3309kh4j.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = words.indexOf(maxWordWithMaxCharsIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3309kh4j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxCharsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3309kh4j.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxCharsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3309kh4j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxCharsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \        val maxWord = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c)))\n\
    \        val maxWordWithMaxChars = words.filter(w => w.toCharArray.forall(c =>\
    \ maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount))\n        val\
    \ maxWordWithMaxCharsAndMaxCount = words.filter(w => w.toCharArray.forall(c =>\
    \ maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount))\n        val\
    \ maxWordWithMaxCharsAndMaxCountAndFirst = words.filter(w => w.toCharArray.forall(c\
    \ => maxChars.contains(c) && w.toCharArray.count(_ == c) == maxCount) && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted)\n        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirstAndFirst\
    \ = words.filter(w => w.toCharArray.forall(c => maxChars.contains(c) && w.toCharArray.count(_\
    \ == c) == maxCount) && w.toCharArray.takeWhile(_ == maxChars.head).sorted &&\
    \ w.toCharArray.takeWhile(_ == maxChars.head).sorted && w.toCharArray.takeWhile(_\
    \ == maxChars.head).sorted && w.toCharArray.takeWhile(_ == maxChars.head).sorted)\n\
    \        val maxWordWithMaxCharsAndMaxCountAndFirstAndFirstAndFirst\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbdi6quvq.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpbdi6quvq.scala:18:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    Values of types Int and (Char, Int) cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbdi6quvq.scala:22:165\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxCountAndFirst\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => maxChars.contains(c)\
    \ && w.toCharArray.count(_ == c) == maxCount) && w.toCharArray.takeWhile(_ ==\
    \ maxChars.head).sorted)\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Array[Char]\n\e[31m   |\e[0m                                            \
    \       Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbdi6quvq.scala:23:173 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxCountAndFirstAndFirst\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => maxChars.contains(c)\
    \ && w.toCharArray.count(_ == c) == maxCount) && w.toCharArray.takeWhile(_ ==\
    \ maxChars.head).sorted && w.toCharArray.takeWhile(_ == maxChars.head).sorted)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                         ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009446
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(Map[Char, Int]()){\n   \
    \         case (acc, word) =>\n                val count = acc.getOrElse(word.charAt(0),\
    \ 0)\n                val newCount = count + 1\n                acc.updated(word.charAt(0),\
    \ newCount)\n        }\n        val maxKey = maxCount.keys.max\n        val maxValue\
    \ = maxCount.values.max\n        words.find(word => word.count(_ == maxKey) ==\
    \ maxValue).getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu8fbrc2u.scala:27)\n\tat Problem.main(tmpu8fbrc2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(char => {\n                uniqueChars += char\n    \
    \        })\n        })\n        uniqueChars.foreach(char => {\n            val\
    \ count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count +\
    \ 1\n        })\n        val maxChar = maxChars.maxBy(_._2)\n        words.find(word\
    \ => word.count(_ == maxChar._1))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfaq1ejkt.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfaq1ejkt.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfaq1ejkt.scala:27:37 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxChar._1))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    Int\n\e[31m   |\e[0m\
    \                           Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \        val maxWord = words.filter(_.toCharArray.forall(maxChars.contains)).head\n\
    \        val maxWordWithCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount))\n        val maxWordWithCountSorted = maxWordWithCount.sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountSortedWithMaxCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.head\n        val maxWordWithCountSortedWithMaxCountSorted\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCount = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).head\n    \
    \    val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSorted = words.filter(_.toCharArray.forall(maxChars.contains)).map(w\
    \ => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCount\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).sortBy(_._2).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCountSorted\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount)).sortBy(_._2).reverse.sortBy(_._1).sortBy(_._2).sortBy(_._1).sortBy(_._2).sortBy(_._1).head\n\
    \        val maxWordWithCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCountSortedWithMaxCount\
    \ = words.filter(_.toCharArray.forall(maxChars.contains)).map(w => (w, maxCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi8ozsdt0.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpi8ozsdt0.scala:18:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_._2 == maxCount).map(_._1).sorted\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m    Values of types Int and (Char, Int) cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8ozsdt0.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortWith(_\
    \ < _)\n        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars).sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxChars).sortWith(_ < _).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars).sortWith(_ < _).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsj9sc6c0.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsj9sc6c0.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n       \
    \ val maxWordWithMaxChars = maxWords.filter(_.length == maxChars)\n        val\
    \ maxWordWithMaxCharsSortedByLength = maxWordWithMaxChars.sortBy(_.length)\n \
    \       val maxWordWithMaxCharsSortedByLengthHead = maxWordWithMaxCharsSortedByLength.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTail = maxWordWithMaxCharsSortedByLength.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailHead = maxWordWithMaxCharsSortedByLengthTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTail = maxWordWithMaxCharsSortedByLengthTail.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailHead = maxWordWithMaxCharsSortedByLengthTailTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTail = maxWordWithMaxCharsSortedByLengthTailTail.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailHead = maxWordWithMaxCharsSortedByLengthTailTailTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTail = maxWordWithMaxCharsSortedByLengthTailTailTail.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailHead = maxWordWithMaxCharsSortedByLengthTailTailTailTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTail = maxWordWithMaxCharsSortedByLengthTailTailTailTail.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailHead = maxWordWithMaxCharsSortedByLengthTailTailTailTailTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTail = maxWordWithMaxCharsSortedByLengthTailTailTailTailTail.tail\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailHead = maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailTail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailTail = maxWordWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pxd_4qn.scala:34:76 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByLengthTailTailTailTailTailTailTail\e\
    [0m = maxWordWith\n\e[31m\e[31m   |\e[0m                                     \
    \                                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                              Not found: maxWordWith\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pxd_4qn.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduceLeft(_ ++ _)\n\
    \        val max = unique.max\n        val index = unique.indexOf(max)\n     \
    \   words(index)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jijml5c.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = unique.indexOf(max)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    value indexOf is not a member of Set[Char]\n1 error found\n"
  stdout: ''
  timestamp: 1660009420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxCount = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = uniqueChars.count(_\
    \ == c)\n            if (maxCount.getOrElse(c, count) > count) {\n           \
    \     maxCount.update(c, count)\n            }\n        })\n        val maxKey\
    \ = maxCount.keys.max\n        val maxValue = maxCount.values.max\n        words.find(word\
    \ => word.count(_ == maxKey) == maxValue).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyk2izdw.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpcyk2izdw.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.foldLeft(Map[Char, Int]()){\n     \
    \       case (acc, word) => word.count(_ == 'a') +: acc ++ word.count(_ == 'a')\n\
    \        }\n        val maxKey = counts.maxBy(_._2)._1\n        words.find(word\
    \ => word(maxKey) == maxKey)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmpmk21erin.scala:16:56 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, word) => word.count(_\
    \ == \e[31m'a'\e[0m) +: acc ++ word.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                        ^\e[0m\n\e[31m\
    \   |\e[0m+: (which is right-associative) and ++ (which is left-associative) have\
    \ same precedence and may not be mixed\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmk21erin.scala:19:18 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        words.find(\e[36mword\e[0m => word(maxKey) == maxKey)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey =\
    \ maxChars.maxBy(_._2)\n        val maxValue = maxChars(maxKey)\n        val maxWord\
    \ = words.find(word => word.count(_ == maxKey) == maxValue)\n        maxWord.getOrElse(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg6gdwo_.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprg6gdwo_.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += (char, uniqueChars(char)\
    \ + 1)\n            })\n        })\n        words.foreach(word => {\n        \
    \    word.foreach(char => {\n                maxChars += (char, maxChars(char)\
    \ + 1)\n            })\n        })\n        val maxKey = maxChars.keys.max\n \
    \       val maxValue = maxChars.values.max\n        val maxWord = words.find(word\
    \ => word.contains(maxKey))\n        if (maxWord.isDefined) {\n            val\
    \ maxWordWithMaxChars = maxWord.get\n            val maxCharsWithMaxValue = maxChars.find(_._1\
    \ == maxKey).get._2\n            val maxWordWithMaxCharsWithMaxValue = maxWordWithMaxChars.find(word\
    \ => word.contains(maxCharsWithMaxValue))\n            if (maxWordWithMaxCharsWithMaxValue.isDefined)\
    \ {\n                val maxWordWithMaxCharsWithMaxValueWithMaxValue = maxWordWithMaxCharsWithMaxValue.get\n\
    \                val maxCharsWithMaxValueWithMaxValue = maxChars.find(_._1 ==\
    \ maxCharsWithMaxValue).get._2\n                val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValue.find(word => word.contains(maxCharsWithMaxValueWithMaxValue))\n\
    \                if (maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue.isDefined)\
    \ {\n                    val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue.get\n            \
    \        val maxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue = maxChars.find(_._1\
    \ == maxCharsWithMaxValueWithMaxValueWithMaxValue).get._2\n                  \
    \  val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue.find(word\
    \ => word.contains(maxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue))\n\
    \                    if (maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValue.isDefined)\
    \ {\n                        val maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValueWithMaxValue\
    \ = maxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValueWithMaxValueWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr0v7fz2c.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0v7fz2c.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36muniqueChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr0v7fz2c.scala:16:23 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr0v7fz2c.scala:33:88 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36mmaxWordWithMaxCharsWithMaxValue\e\
    [0m = maxWordWithMaxChars.find(\e[36mword\e[0m => word.contains(maxCharsWithMaxValue))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpr0v7fz2c.scala:37:122 -----------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m                \e[33mval\e[0m \e[36mmaxWordWithMaxCharsWithMaxValueWithMaxValueWithMaxValue\e\
    [0m = maxWordWithMaxCharsWithMaxValueWithMaxValue.find(\e[36mword\e[0m => word.contains(maxCharsWithMaxValueWithMaxValue))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value find is not a member\
    \ of Char\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0v7fz2c.scal"
  stdout: ''
  timestamp: 1660009447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3jqw4ulp.scala:22)\n\tat Problem.main(tmp3jqw4ulp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val maxChars = chars.max\n        val maxWords = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWord = maxWords.head\n        val maxCharCount\
    \ = maxWords.map(_.toCharArray.size).max\n        val maxWordWithMaxCharCount\
    \ = maxWords.find(_.toCharArray.size == maxCharCount)\n        val maxWordWithMaxCharCountIndex\
    \ = maxWordWithMaxCharCount.index\n        val maxWordWithMaxCharCountValue =\
    \ maxWordWithMaxCharCount.toList\n        val maxWordWithMaxCharCountValueIndex\
    \ = maxWordWithMaxCharCountValue.index\n        val maxWordWithMaxCharCountValueValue\
    \ = maxWordWithMaxCharCountValue.toList\n        val maxWordWithMaxCharCountValueValueIndex\
    \ = maxWordWithMaxCharCountValueValue.index\n        val maxWordWithMaxCharCountValueValueValue\
    \ = maxWordWithMaxCharCountValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n        val maxWordWithMaxCharCountValueValueValueValue\
    \ = maxWordWithMaxCharCountValueValueValue.toList\n        val maxWordWithMaxCharCountValueValueValueIndex\
    \ = maxWordWithMaxCharCountValueValueValue.index\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmpdiidw4.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharCountValueValueValueIndex\e\
    [0m = maxWordWithMaxCharCountValueValueValue.index\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharCountValueValueValueIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharCountValueValueValueIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmpdiidw4.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharCountValueValueValueValue\e\
    [0m = maxWordWithMaxCharCountValueValueValue.toList\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharCountValueValueValueValue is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharCountValueValueValueValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmpdiidw4.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharCountValueValueValueIndex\e\
    [0m = maxWordWithMaxCharCountValueValueValue.index\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharCountValueValueValueIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharCountValueValueValueIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmpdiidw4.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharCountValueValueValueV"
  stdout: ''
  timestamp: 1660009450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.getOrElse(c,\
    \ 0) == 0) uniqueChars += (c -> 1)\n                else uniqueChars(c) += 1\n\
    \            })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfkreg4du.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkreg4du.scala:23:18\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        words.find(\e[36mword\e\
    [0m => word.count(_ == maxChar) == uniqueChars(maxChar))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count\n\
    \        val maxChar = uniqueChars.max\n        val maxWord = words.filter(w =>\
    \ w.toCharArray.contains(maxChar))\n        if (maxCount == uniqueChars.length)\n\
    \            maxWord.head\n        else\n            words.filter(w => w.toCharArray.contains(maxChar)).sortWith((a,\
    \ b) => a.compareTo(b)).head\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp65yaban8.scala:20:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (maxCount == uniqueChars.length)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mValues of types (Char => Boolean) => Int and Int cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65yaban8.scala:23:93\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            words.filter(\e[36mw\e\
    [0m => w.toCharArray.contains(maxChar)).sortWith((\e[36ma\e[0m, \e[36mb\e[0m)\
    \ => a.compareTo(b)).head\n\e[31m\e[31m   |\e[0m                             \
    \                                                     ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                       Found:   \
    \ Int\n\e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet < _.toSet).head\
    \ < words.toList.sortWith(_.toSet < _.toSet).last)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWord\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWordWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last < words.toList.sortWith(_.toSet < _.toSet).last)\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last && words.toList.sortWith(_.toSet\
    \ < _.toSet).last \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuqjkfixe.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuqjkfixe.scala:18:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max)\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuqjkfixe.scala:19:52 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max &&\
    \ words.toList.sortWith(_.toSet < _.toSet).head < words.toList.sortWith(_.toSet\
    \ < _.toSet).last)\n\e[31m\e[31m   |\e[0m                                    \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuqjkfixe.scala:20:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e[0m = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toSet\
    \ < _.toSet).head < words.toList.sortWith(_.toSet < _.toSet).last)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpuqjkfixe.scala:21:85\
    \ -------"
  stdout: ''
  timestamp: 1660009449
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toArray\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = maxWord.count(_\
    \ == 'a')\n        val maxWordCharsIndex = maxWordIndex + maxWordLength\n    \
    \    val maxWordCharsLength = maxWordChars\n        if (maxWordCharsIndex < words.length)\
    \ findMax(words.drop(maxWordIndex))\n        else maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3aj4nnf0.scala:27)\n\tat Problem.main(tmp3aj4nnf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n              \
    \  maxChars(c) = maxChars(c).max(uniqueChars(c))\n            })\n        })\n\
    \        uniqueChars.maxBy(maxChars)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbthie1i.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbthie1i.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.HashSet[Char]()\n        val maxCount\
    \ = 0\n        words.foreach(word => {\n            word.foreach(c => {\n    \
    \            unique.add(c)\n            })\n        })\n        unique.foreach(c\
    \ => {\n            if (unique.count(_ == c) > maxCount) {\n                maxCount\
    \ = unique.count(_ == c)\n            }\n        })\n        val maxWord = words.find(word\
    \ => unique.count(_ == word(0)) == maxCount)\n        if (maxWord.isEmpty) {\n\
    \            \"\"\n        } else {\n            maxWord(0)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2x8obgs5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp2x8obgs5.scala:31:12 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            maxWord(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0) { (max, word) =>\n  \
    \          val count = word.count(_ == 'a')\n            if (count > max) count\
    \ else max\n        }\n        val maxWord = words.filter(word => word.count(_\
    \ == 'a') == maxCount).head\n        val maxWordWithCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).head\n     \
    \   val maxWordWithCountWithMaxCount = words.filter(word => word.count(_ == 'a')\
    \ == maxCount).sortBy(word => word.count).last\n        val maxWordWithCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n     \
    \   val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.filter(word\
    \ => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n     \
    \   val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(word => word.count(_ == 'a') == maxCount).sortBy(word => word.count).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcc5npz0l.scala:30:164 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = words.filter(\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpcc5npz0l.scala:20:112 ----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m =\
    \ words.filter(\e[36mword\e[0m => word.count(_ == \e[31m'a'\e[0m) == maxCount).sortBy(\e\
    [36mword\e[0m => word.count).head\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for ((Char\
    \ => Boolean) => Int)..\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m    scala.math.Ordering.ordered[\e[35m((Char => Boolean) => Int)\e[0m](\n\e\
    [31m   |\e[0m      /* missing */\n\e[31m   |\e[0m        summon[scala.math.Ordering.AsComparable[(Char\
    \ => Boolean) => Int]]\n\e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut\
    \ no implicit values were found that match type scala.math.Ordering.AsComparable[(Char\
    \ => Boolean) => Int].\n\e[31m\e[31m-- Error: /tmp/tmpcc5npz0l.scala:21:124 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCount\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == \e[31m'a'\e[0m) == maxCount).sortBy(\e\
    [36mword\e[0m => word.count).last\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                           ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for ((Char => Boolean) "
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size)\n \
    \       val maxWordWithMaxCharsFirst = maxWordWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head\
    \ == maxChars && _.toSet.head == uniqueChars.size && _.toSet.head == uniqueChars.size\
    \ && _.toSet.head == uniqueChars.size)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.min\n\
    \        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpousccwl9.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpousccwl9.scala:19:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.size)\n\e[31m\e[31m   |\e[0m                                \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpousccwl9.scala:21:64 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstWithMaxChars\e\
    [0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.size &&\
    \ _.toSet.head == maxChars)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpousccwl9.scala:23:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\e[0m = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.size && _.toSet.head == maxChars\
    \ && _.toSet.head == uniqueChars.size)\n\e[31m\e[31m   |\e[0m                \
    \                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpousccwl9.scala:25:98\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\e\
    [0m = words.filter(_."
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo4653vu4.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo4653vu4.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\e\
    [0m = words.filter(_.length == maxChars).sortBy(_.length).head\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpo4653vu4.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \  })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c)\
    \ = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => maxChars(a) < maxChars(b)).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv8h1u8xw.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpv8h1u8xw.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars += char\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.count(_ == char)\n            if (count\
    \ > maxWord.count(_ == char)) {\n                maxWord = maxWord.updated(char,\
    \ char)\n            }\n        })\n        maxWord.headOption\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgj95p7fs.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgj95p7fs.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgj95p7fs.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(char => {\n                if (uniqueChars.contains(char))\
    \ {\n                    uniqueChars(char) += 1\n                } else {\n  \
    \                  uniqueChars(char) = uniqueChars(char) + 1\n               \
    \ }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnaqncx8.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnaqncx8.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.map(_.length).max\n        val maxWord\
    \ = words.filter(_.length == maxCount).sortBy(_.length).head\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordWithUniqueChars = words.filter(_.length\
    \ == maxWordLength).map(_.toUpperCase).distinct\n        val maxWordWithUniqueCharsLength\
    \ = maxWordWithUniqueChars.length\n        val maxWordWithUniqueCharsSortedByLength\
    \ = maxWordWithUniqueChars.sortBy(_.length)\n        val maxWordWithUniqueCharsSortedByLengthLength\
    \ = maxWordWithUniqueCharsSortedByLength.length\n        val maxWordWithUniqueCharsSortedByLengthFirst\
    \ = maxWordWithUniqueCharsSortedByLength.head\n        val maxWordWithUniqueCharsSortedByLengthFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirst.length\n        val maxWordWithUniqueCharsSortedByLengthFirstFirst\
    \ = maxWordWithUniqueCharsSortedByLengthFirst.head\n        val maxWordWithUniqueCharsSortedByLengthFirstFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirst.length\n        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirst\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirst.head\n        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirstFirst.length\n        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirstFirst.head\n        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.length\n        val\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength =\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.length\n        val\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.head\n\
    \        val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirstLength\
    \ = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst.length\n   \
    \     val maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirstFirst =\
    \ maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_wv4df_g.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_wv4df_g.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength\e\
    [0m = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_wv4df_g.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst\e\
    [0m = maxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirst.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordWithUniqueCharsSortedByLengthFirstFirstFirstFirstFirst\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp_wv4df_g.scala:25:114 -----------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithUniqueCharsSortedByLengthFirstFirstLength\e\
    [0m = maxWordWithUniqueCharsSortedByLengthFirstFirst.length\n\e[31m\e[31m   |\e\
    [0m                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1\n            maxChars += c -> count\n        })\n        val maxKey =\
    \ maxChars.maxBy(_._2)\n        val maxValue = maxChars.find(_._2 == maxChars.maxBy(_._2))._1\n\
    \        words.find(word => word.contains(maxKey))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bdq9nuj.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bdq9nuj.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bdq9nuj.scala:28:18 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        words.find(\e[36mword\e[0m => word.contains(maxKey))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ match {\n                    case Some(count) => uniqueChars(char) = count +\
    \ 1\n                    case None => uniqueChars(char) = uniqueChars(char) +\
    \ 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_fcni8e4.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(x => x).mapValues(_.size)\n        val maxCount =\
    \ counts.max\n        val maxChars = counts.filter(x => x._2 == maxCount).keys\n\
    \        val maxCharsCount = maxChars.map(_.size).max\n        val maxCharsIndex\
    \ = maxChars.zipWithIndex.filter(x => x._2 == maxCharsCount).head._1\n       \
    \ val maxCharsIndex = maxCharsIndex.toString.toInt\n        val maxCharsString\
    \ = maxChars(maxCharsIndex)\n        val maxCharsString = maxCharsString.toChar\n\
    \        val maxCharsString = maxCharsString.toUpperCase\n        val maxCharsString\
    \ = maxCharsString.toLower\n        val maxCharsString = maxCharsString.replaceAll(\"\
    [^A-Z]\", \"\")\n        val maxCharsString = maxCharsString.replaceAll(\"[^a-z]\"\
    , \"\")\n        val maxCharsString = maxCharsString.replaceAll(\"[^0-9]\", \"\
    \")\n        val maxCharsString = maxCharsString.replaceAll(\"[^a-zA-Z]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\w]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\s]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\W]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\D]\", \"\")\n\
    \        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{L}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{N}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{Z}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{C}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{M}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{P}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{S}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{Z}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll(\"[^\\\\p{C}]\", \"\"\
    )\n        val maxCharsString = maxCharsString.replaceAll\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp57a1b010.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsIndex\e[0m = maxCharsIndex.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsIndex is already defined as \e[33mvalue\e[0m \e[35mmaxCharsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57a1b010.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsString\e[0m = maxCharsString.toChar\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxCharsString is already defined as \e[33mvalue\e[0m \e[35mmaxCharsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57a1b010.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsString\e[0m = maxCharsString.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsString is already defined as \e[33mvalue\e[0m \e[35mmaxCharsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57a1b010.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsString\e[0m = maxCharsString.toLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxCharsString is already defined as \e[33mvalue\e[0m \e[35mmaxCharsString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp57a1b010.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsString\e[0m = maxCharsString.replaceA"
  stdout: ''
  timestamp: 1660009457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxWord = mutable.ListBuffer[String]()\n        words.foreach(word => {\n  \
    \          word.foreach(c => {\n                uniqueChars += c\n           \
    \ })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n\
    \            val index = uniqueChars.indexOf(c)\n            if (index != -1)\
    \ {\n                val word = words.filter(w => w.contains(c))\n           \
    \     if (word.length > 0) {\n                    val wordWithMaxChars = word(0)\n\
    \                    val wordWithMaxCharsCount = wordWithMaxChars.count(c => uniqueChars.contains(c))\n\
    \                    if (wordWithMaxCharsCount > maxWord.count(w => w.contains(c)))\
    \ {\n                        maxWord.clear()\n                        maxWord.append(wordWithMaxChars)\n\
    \                    }\n                    maxWord.append(wordWithMaxChars)\n\
    \                }\n            }\n        })\n        if (maxWord.isEmpty) {\n\
    \            \"\"\n        } else {\n            maxWord.sortWith(_ < _).head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwy5ysir.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfwy5ysir.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.foldLeft(Set.empty[String])((s, word)\
    \ => s ++ Set(word))\n        val maxCount = unique.max\n        val maxWord =\
    \ unique.find(s => s == maxCount)\n        if (maxCount == 1) maxWord else findMax(words.filter(w\
    \ => w < maxWord))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpscgpoqyb.scala:18:12 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (maxCount == \e[31m1\e[0m) maxWord\
    \ \e[33melse\e[0m findMax(words.filter(\e[36mw\e[0m => w < maxWord))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of\
    \ types String and Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpscgpoqyb.scala:18:27 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (maxCount == \e[31m1\e[0m) maxWord \e\
    [33melse\e[0m findMax(words.filter(\e[36mw\e[0m => w < maxWord))\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Found:    (maxWord : Option[String])\n\e[31m   |\e[0m       \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpscgpoqyb.scala:18:70 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (maxCount == \e[31m1\e[0m) maxWord \e\
    [33melse\e[0m findMax(words.filter(\e[36mw\e[0m => w < maxWord))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                    Found:  \
    \  (maxWord : Option[String])\n\e[31m   |\e[0m                               \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsString.length\n\
    \        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsStringLength = maxWordWithMaxCharsStringLength\
    \ + 1\n        val maxWordWithMaxCharsString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb0u55j8m.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0u55j8m.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0u55j8m.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsStringLength\e\
    [0m = maxWordWithMaxCharsStringLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0u55j8m.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsStringLength\e[0m = maxWordWithMaxCharsStringLength\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0u55j8m.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsStringLength\e[0m = maxWordWithMaxCharsString"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \  })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c)\
    \ = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7f9ez4u.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7f9ez4u.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val count = words.map(_.toCharArray).flatten.toSet.size\n        val maxChar\
    \ = chars.max\n        val maxCount = words.map(_.toCharArray).flatten.toSet.count(maxChar)\n\
    \        val maxWord = if (maxCount > 1) words.filter(_.toCharArray.contains(maxChar)).head\
    \ else words.head\n        val maxWordCount = words.map(_.toCharArray).flatten.toSet.count(maxWord)\n\
    \        val maxWordChar = maxWord.toCharArray\n        val maxWordCharCount =\
    \ words.map(_.toCharArray).flatten.toSet.count(maxWordChar)\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordCharCount = if (maxWordCharCount >\
    \ 1) maxWordCharCount else maxWordCharCount + 1\n        val maxWordChar = if\
    \ (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount\
    \ + 1\n        val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordCharCount = if (maxWordCharCount >\
    \ 1) maxWordCharCount else maxWordCharCount + 1\n        val maxWordChar = if\
    \ (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n        val maxWordCharCount\
    \ = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount + 1\n   \
    \     val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else maxWordCharCount\
    \ + 1\n        val maxWordChar = if (maxWordCharCount > 1) maxWordChar else maxWordChar.head\n\
    \        val maxWordCharCount = if (maxWordCharCount > 1) maxWordCharCount else\
    \ maxWordCharCount + 1\n        val maxWordChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8_8ccad4.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8_8ccad4.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordCharCount\e[0m = \e[33mif\e[0m (maxWordCharCount > \e[31m1\e[0m)\
    \ maxWordCharCount \e[33melse\e[0m maxWordCharCount + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8_8ccad4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordChar\e[0m = \e[33mif\e\
    [0m (maxWordCharCount > \e[31m1\e[0m) maxWordChar \e[33melse\e[0m maxWordChar.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordChar is already defined as \e[33mvalue\e[0m \e[35mmaxWordChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8_8ccad4.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharCount\e[0m = \e[33mif\e[0m\
    \ (maxWordCharCount > \e[31m1\e[0m) maxWordCharCount \e[33melse\e[0m maxWordCharCount\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharCount is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8_8ccad4.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 "
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max)\n        val maxWordWithMaxCharsFirst =\
    \ words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_ <\
    \ _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_ <\
    \ _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_\
    \ < _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n     \
    \   val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_m97z3c2.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_m97z3c2.scala:18:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max)\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_m97z3c2.scala:19:52 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max &&\
    \ words.toList.sortWith(_ < _).head == words.toList.sortWith(_ > _).head)\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_m97z3c2.scala:20:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e[0m = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_ <\
    \ _).head == words.toList.sortWith(_ > _).head).sortWith(_ < _).head\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_m97z3c2.scala:21:86\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmax"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord =\
    \ words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = if (maxWordIndex == -1) words.size\
    \ else maxWordIndex\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordIndex = if (maxWordIndex == -1) words.size else maxWordIndex\n\
    \        val maxWord = words.filter(_.length == maxCount).head\n        val maxWordIndex\
    \ = if (maxWordIndex == -1) words.size else maxWordIndex\n        val maxWord\
    \ = words.filter(_.length == maxCount).head\n        val maxWordIndex = if (maxWordIndex\
    \ == -1) words.size else maxWordIndex\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordIndex = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3a79p5df.scala:47:26 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3a79p5df.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e\
    [0m (maxWordIndex == -\e[31m1\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3a79p5df.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(_.length\
    \ == maxCount).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3a79p5df.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == -\e[31m1\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3a79p5df.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m     "
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            maxChars(c) = uniqueChars.count(_\
    \ == c)\n        })\n        uniqueChars.maxBy(maxChars)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhyi2v1a.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyhyi2v1a.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.foldLeft(Map[Char, Int]())((map, word)\
    \ => {\n            val chars = word.map(c => c.toInt)\n            val count\
    \ = chars.foldLeft(0)((count, c) => count + c)\n            val key = chars.max\n\
    \            map + (key -> (count + 1))\n        })\n        val maxKey = unique.keys.max\n\
    \        val maxCount = unique(maxKey)\n        val maxWord = words.find(word\
    \ => unique.keys.contains(word.map(_.toInt).max))\n        val maxWordString =\
    \ maxWord.getOrElse(\"\")\n        if (maxCount > unique.keys.max) maxWordString\n\
    \        else findMax(words.filter(word => unique.keys.contains(word.map(_.toInt).max)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfarxqdwf.scala:19:19\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            map + (key -> (count\
    \ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    (\e[1m\e[31mInt\e[0m, Int)\n\e\
    [31m   |\e[0m                   Required: (\e[1m\e[32mChar\e[0m, Int)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfarxqdwf.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.find(\e\
    [36mword\e[0m => unique.keys.contains(word.map(_.toInt).max))\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue contains is not a member of Iterable[Char], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import collection.convert.ImplicitConversions.collection asJava\n\e[31m   |\e\
    [0m  import collection.convert.ImplicitConversionsToJava.collection asJava\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfarxqdwf.scala:26:54\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m findMax(words.filter(word\
    \ => unique.keys.contains(word.map(_.toInt).max)))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue contains is not a member of Iterable[Char], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.collection\
    \ asJava\n\e[31m   |\e[0m  import collection.convert.ImplicitConversionsToJava.collection\
    \ asJava\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex).mkString(\"\
    \")\n        val maxWordWithMaxCharsString = words.take(maxWordWithMaxCharsIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpos342e63.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpos342e63.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpos342e63.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = words.take(maxWordWithMaxCharsIndex).mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpos342e63.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = words.take(maxWordWithMaxCharsIndex).mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpos342e63.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = words.take(maxWordWithM"
  stdout: ''
  timestamp: 1660009460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxKey = counts.keys.toList.sortBy(identity).head\n\
    \        val maxValue = counts(maxKey)\n        val maxWord = words.filter(w =>\
    \ w.toCharArray.size == maxValue).sortBy(identity).head\n        val maxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValue = words.filter(w => w.toCharArray.size\
    \ == maxValue).sortBy(identity).head\n        val maxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord = words.filter(w\
    \ => w.toCharArray.size == maxValue).sortBy(identity).head\n        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValue\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKey\
    \ = words.filter(w => w.toCharArray.size == maxValue).sortBy(identity).head\n\
    \        val maxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWordWithMaxCountAndMaxValueAndMaxKeyAndMaxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoitsc7f5.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoitsc7f5.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n  \
    \      val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength =\
    \ maxWord.length\n        val maxWordChars = maxWord.toCharArray\n        val\
    \ maxWordUniqueChars = uniqueChars.filter(_.toCharArray.contains(maxWordChars)).max\n\
    \        val maxWordMaxChars = maxWordUniqueChars.toCharArray\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxChars)\n        val maxWordMaxCharsLength = maxWordMaxChars.length\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.indexOf(maxWordMaxCharsIndex)\n        val maxWordMaxCharsLength = maxWordMaxCharsIndex\n\
    \        val maxWordMaxCharsIndex = words.indexOf(maxWordMaxCharsIndex)\n    \
    \    val maxWordMaxCharsLength = maxWordMaxCharsIndex\n        val maxWordMaxCharsIndex\
    \ = words.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaj8pnuc1.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpaj8pnuc1.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordMaxCharsIndex\e[0m = words.indexOf(maxWordMaxCharsIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordMaxCharsIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxWordMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaj8pnuc1.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWordMaxCharsLength\e\
    [0m = maxWordMaxCharsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordMaxCharsLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordMaxCharsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaj8pnuc1.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordMaxCharsIndex\e[0m\
    \ = words.indexOf(maxWordMaxCharsIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordMaxCharsIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxWordMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpaj8pnuc1.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmaxWordMaxCharsLength\e\
    [0m = maxWordMaxCharsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordMaxCharsLength is already defined as \e[33mvalue\e"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(w => w.toCharArray.forall(c => c == maxChars)).head\n\
    \        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb8eaqerz.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_._2\
    \ == maxCount).map(_._1).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                                 ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values\
    \ of types Int and (Char, Int) cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmpb8eaqerz.scala:19:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChars)).head\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ max = unique.max\n        val index = unique.indexOfMax\n        words(index)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9jawuoe.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = unique.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue indexOfMax is not a member of List[Int] - did you mean unique.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase == maxWord.toLowerCase\
    \ && words.to\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpglglgkds.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpglglgkds.scala:19:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerCase == maxWords.toLowerCase && words.toLowerCase\
    \ == maxWord.toLowerCase && words.toLowerC"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_.value == maxCount).keys.toList\n\
    \        val maxWord = words.filter(_.toCharArray.forall(c => maxChars.contains(c))).head\n\
    \        maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpno3yunwm.scala:18:39 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_.value\
    \ == maxCount).keys.toList\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m     value value is not a member of (Char,\
    \ Int) - did you mean _$3.take?\n1 error found\n"
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                unique.getOrElseUpdate(c,\
    \ 0) + 1\n            })\n        })\n        unique.maxBy(_._2)._1\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp78418u9d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxLength\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ = words.filter(_.length == maxChars).sortBy(_.length).last\n        val maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwtdxn9x1.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwtdxn9x1.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\e\
    [0m = words.filter(_.length == maxChars).sortBy(_.length).last\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpwtdxn9x1.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\e\
    [0m = words.filter(_.length == maxChars).sortBy(_.length).last\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsAndMaxLengthAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMaxAndMax\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwtdxn9x1.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _ == maxWord)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirst.sortWith(_ < _)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars.head\n        val\
    \ maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder.head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpmc8x2ipw.scala:19:47 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(_.length == maxChars && _ == maxWord)\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmc8x2ipw.scala:24:100\
    \ --------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\e\
    [0m = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder.head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmc8x2ipw.scala:25:112 --------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\e\
    [0m = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars.head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpmc8x2ipw.scala:26:117 --------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographical"
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \  })\n        })\n        uniqueChars.foreach(c => {\n            maxChars(c)\
    \ = uniqueChars.count(_ == c)\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => maxChars(b).compareTo(maxChars(a)))(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmput36_2pa.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmput36_2pa.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordString = words.filter(_.length == maxChars).mkString(\"\")\n  \
    \      if (maxWordIndex == 0) maxWordString\n        else words.take(maxWordIndex).mkString(\"\
    \") + maxWordString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8zg3uuyf.scala:24)\n\tat Problem.main(tmp8zg3uuyf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0) { (max, word) =>\n  \
    \          val count = word.distinct.length\n            if (count > max) count\
    \ else max\n        }\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2cnogts.scala:24)\n\tat Problem.main(tmpt2cnogts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordLength = maxWord.length\n        val maxWordWithMaxLength\
    \ = words.filter(_.length == maxWordLength).sortBy(_.length).head\n        val\
    \ maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n        val maxWordWithMaxLengthLengthLength\
    \ = maxWordWithMaxLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLengthLength\
    \ = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n        val maxWordWithMaxLengthLengthLengthLengthLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnd29oyyo.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnd29oyyo.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxLengthLengthLengthLengthLength\e[0m = maxWordWithMaxLengthLengthLengthLengthLength.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxLengthLengthLengthLengthLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordWithMaxLengthLengthLengthLengthLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnd29oyyo.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxLengthLengthLengthLengthLengthLength\e\
    [0m = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxLengthLengthLengthLengthLengthLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxLengthLengthLengthLengthLengthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnd29oyyo.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxLengthLengthLengthLengthLengthLength\e\
    [0m = maxWordWithMaxLengthLengthLengthLengthLengthLength.length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxLengthLengthLengthLengthLengthLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxLengthLengthLengthLen"
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _ == maxWord)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstIndex = words.indexOf(maxWordWithMaxCharsFirst)\n\
    \        val maxWordWithMaxCharsFirstChars = words.map(_.charAt(maxWordWithMaxCharsFirstIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCount = maxWordWithMaxCharsFirstChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsIndex = words.indexOf(maxWordWithMaxCharsFirstChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCount = maxWordWithMaxCharsFirstCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCount = maxWordWithMaxCharsFirstCharsCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsChars = words.map(_.charAt(maxWordWithMaxCharsFirstCharsCharsCharsIndex))\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsCount = maxWordWithMaxCharsFirstCharsCharsCharsChars.distinct().length\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsIndex = words.indexOf(maxWordWithMaxCharsFirstCharsCharsCharsChars.min())\n\
    \        val maxWordWithMaxCharsFirstCharsCharsCharsCharsChars = words.map(_.charAt(maxWordWithMaxChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd2z03qjb.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpd2z03qjb.scala:19:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _ == maxWord)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpd2z03qjb.scala:23:87 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsCount\e\
    [0m = maxWordWithMaxCharsFirstChars.distinct().length\n\e[31m\e[31m   |\e[0m \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m \e[35mLinearSeqOps\e[0m: (n: Int): Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpd2z03qjb.scala:24:96 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxCharsFirstChars.min())\n\e[31m\e[31m   |\e[0m\
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e\
    [35mmin\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m: (\e[33mimplicit \e\
    [0mord: Ordering[B]): Char\n\e[31m\e[31m-- Error: /tmp/tmpd2z03qjb.scala:26:97\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsCharsCount\e[0m = maxWordWithMaxCharsFirstCharsChars.distinct().length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter n of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mtrait\e[0m "
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(char => {\n                uniqueChars += (char -> 1)\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                val count = uniqueChars(char)\n                if (count\
    \ > maxChar(char)) {\n                    maxChar.update(char, count)\n      \
    \          }\n            })\n        })\n        val maxCharList = maxChar.keys.toList.sortWith(_\
    \ < _)\n        val maxCharString = maxCharList.toList.mkString\n        words.find(word\
    \ => maxChar(word.charAt(0)) == maxChar(word.charAt(0))).get\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9n7jn_5d.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9n7jn_5d.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.filter(word => word.distinct.length == maxCount).take(maxWordIndex).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcu6aebj7.scala:23)\n\tat Problem.main(tmpcu6aebj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars += c -> 1\n            })\n        })\n        uniqueChars.maxBy(maxChars)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplbdcufui.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplbdcufui.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c,\
    \ 0) + 1\n            maxChars += c -> count\n        })\n        val maxCharsSorted\
    \ = maxChars.toSeq.sortBy(_._2).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n\
    \        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_ == maxCharsSortedFirst._1)\n\
    \        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_ ==\
    \ maxCharsSortedFirst._2)\n        val maxCharsSortedFirstKeyValue = maxCharsSortedFirst._1\
    \ -> maxCharsSortedFirst._2\n        val maxCharsSortedFirstKeyValueString = maxCharsSortedFirst._1\
    \ -> maxCharsSortedFirst._2.toString\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\",\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"(\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\")\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"[\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"]\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"{\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"}\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"'\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"\\\"\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"<\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\">\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"?\", \"\")\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValueString.replace(\"!\", \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg602v1y7.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstKeyValueString\e\
    [0m = maxCharsSortedFirstKeyValueString.replace(\e[31m\",\"\e[0m, \e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKeyValueString is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstKeyValueString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg602v1y7.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstKeyValueString\e[0m = maxCharsSortedFirstKeyValueString.replace(\e\
    [31m\"(\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKeyValueString is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstKeyValueString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg602v1y7.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstKeyValueString\e[0m = maxCharsSortedFirstKeyValueString.replace(\e\
    [31m\")\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKeyValueString is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstKeyValueString\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg602v1y7.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstKeyValueString\e[0m = maxCharsSortedFirstKeyValueStri"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvum662rx.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.distinct).map(_.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \        val maxWordCount = words.filter(word => word.distinct.length == maxCount).length\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordCount)\n        val maxWord = words.filter(word => word.distinct.length\
    \ == maxCount).apply(maxWordIndex)\n        val maxWordCount = words.filter(word\
    \ => word.distinct.length == maxCount).length\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordCount)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).apply(maxWordIndex)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ntrlicy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex.min(maxWordCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ntrlicy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinct.length == maxCount).apply(maxWordIndex)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ntrlicy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCount\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct.length == maxCount).length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCount is already defined as \e[33mvalue\e[0m \e[35mmaxWordCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ntrlicy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val count = chars.toSeq.groupBy(identity).mapValues(_.size).toSeq.sortBy(-_._2).head\n\
    \        count.map(_._1).headOption.getOrElse(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpxqxni02h.scala:17:18 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        count.map(_._1).headOption.getOrElse(\e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => _$4._1.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcwhuqkdw.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcwhuqkdw.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstChar\e[0m = maxWordWithMaxCharsFirst.map(_.length)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcwhuqkdw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChar\e\
    [0m = maxWordWithMaxCharsFirst.map(_.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcwhuqkdw.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChar\e\
    [0m = maxWordWithMaxCharsFirst.map(_.length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstChar is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsFirstChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcwhuqkdw.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChar\e\
    [0m = maxWordWithMaxCharsFirst.map(_."
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_.size == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(_.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithCount = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w\
    \ => (w, counts.get(w).size))\n        val maxWordWithCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars)).map(w => (w, counts.get(w).size)).sortBy(_._2).reverse.head\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.toCharArray.forall(c => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpry96s3p8.scala:28:165 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = words.filter(_.toCharArray.forall(\e[36mc\e[0m => \n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpry96s3p8.scala:18:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_.size == maxCount).map(_._1).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Tuple.Size[(Char, Int)] and (Char, Int) cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpry96s3p8.scala:19:61\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(_.toCharArray.forall(\e[36mc\e\
    [0m => c == maxChars)).head\n\e[31m\e[31m   |\e[0m                           \
    \                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Values of types Char and String cannot be compared with == or !=\n\e[31m\e[31m--\
    \ Error: /tmp/tmpry96s3p8.scala:20:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m =\
    \ words.filter(_.toCharArray.forall(\e[36mc\e[0m => c == maxChars)).map(\e[36mw\e\
    [0m => (w, counts.get(w).size))\n\e[31m\e[31m   |\e[0m                       \
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpry96s3p8.scala:20:110 -------------------\e\
    [0m\e[0m\n\e[31m20 "
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1)\n     \
    \   val maxWordWithMaxCharsFirst = words.filter(word => word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxCharsFirst2 = words.filter(word => word.count(_ ==\
    \ maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst3\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst4 = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst5\
    \ = words.filter(word => word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst6 = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirst7 = words.filter(word\
    \ => word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_\
    \ == maxChars) == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars)\
    \ == 1 && word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == 1 &&\
    \ word.count(_ == maxChars) == 1 && word.count(_ == maxChars) == \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3ppvcj1o.scala:25:361 --------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst7\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == \e[31m1\e[0m\
    \ && word.count(_ == maxChars) == \e[31m1\e[0m && word.count(_ == maxChars) ==\
    \ \e[31m1\e[0m && word.count(_ == maxChars) == \e[31m1\e[0m && word.count(_ ==\
    \ maxChars) == \e[31m1\e[0m && word.count(_ == maxChars) == \e[31m1\e[0m && word.count(_\
    \ == maxChars) == \e[31m1\e[0m && word.count(_ == maxChars) == \e[31m1\e[0m &&\
    \ word.count(_ == maxChars) == \n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ppvcj1o.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordWithCountWithUniqueChars = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueChars = words.filter(_.length\
    \ == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueChars\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \        val maxWordWithCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueCharsWithMaxCountWithUniqueChars\
    \ = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).sortBy(_.toString.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpevs2bjar.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpevs2bjar.scala:19:128\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e\
    [33mval\e[0m \e[36mmaxWordWithCountWithUniqueChars\e[0m = words.filter(_.length\
    \ == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).head\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0mNo implicit Ordering defined for Array[Char]..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mArray[Char]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Array[Char]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Array[Char]].\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpevs2bjar.scala:20:140 ----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithUniqueCharsWithMaxCount\e\
    [0m = words.filter(_.length == maxCount).sortBy(_.length).sortBy(_.toString.toCharArray).sortBy(_.toString.toCharArray).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Array[Char]..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mArray[Char]\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Array[Char]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Array[Char]].\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpevs2bjar.scala:21:155 ----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithUniqueCharsWithMaxCountWithUniqueChars\e\
    [0m = wor"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).min\n\
    \        val maxWordLength = maxWord.length\n        val maxWordString = maxWord.mkString(\"\
    \")\n        val maxWordLength = maxWordLength.toInt\n        val maxWordString\
    \ = maxWordString.substring(0, maxWordLength)\n        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \        val maxWordString = maxWordString.substring(0,maxWordString.length-1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpej9pxln0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordLength\e[0m = maxWordLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordLength is already defined as \e[33mvalue\e[0m \e[35mmaxWordLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpej9pxln0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.substring(\e\
    [31m0\e[0m, maxWordLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpej9pxln0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.substring(\e\
    [31m0\e[0m,maxWordString.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpej9pxln0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.substring(\e\
    [31m0\e[0m,maxWordString.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming "
  stdout: ''
  timestamp: 1660009470
