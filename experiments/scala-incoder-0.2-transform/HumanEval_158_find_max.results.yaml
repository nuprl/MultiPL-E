language: scala
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n \
    \       val maxChars = chars.max\n        val maxWord = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.toCharArray.size\
    \ == maxChars)\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.toCharArray.head)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed = maxWordWithMaxCharsSortedByFirstCharReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversed.reverse\n   \
    \     val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1zxbgh1t.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByFirstCharReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1zxbgh1t.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(x => x).mapValues(_.size)\n        val maxCount =\
    \ counts.max\n        val maxKey = counts.maxBy(_._1)._1\n        val maxValue\
    \ = counts.maxBy(_._1)._2\n        val maxWord = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCount = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue))\n        val maxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount))\n        val maxWordWithMaxCountWithMaxValueWithMaxKey\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWord = words.filter(x\
    \ => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord))\n        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCount\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxWord) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \        val maxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\
    \ = words.filter(x => x.toCharArray.map(_.toInt).contains(maxKey) && x.toCharArray.map(_.toInt).contains(maxValue)\
    \ && x.toCharArray.map(_.toInt).contains(maxCount) && x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv65l14g.scala:26:299 --------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValueWithMaxKeyAndMaxWordWithMaxCountWithMaxValue\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue) && x.toCharArray.map(_.toInt).contains(maxCount)\
    \ && x.toCharArray.map(_.toInt).contains(maxKey) && \n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcv65l14g.scala:22:196\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValue\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).contains(maxValue) && x.toCharArray.map(_.toInt).contains(maxCount))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    (maxCount : (Char,\
    \ Int))\n\e[31m   |\e[0m                                      Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcv65l14g.scala:23:206\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxValueWithMaxKey\e\
    [0m = words.filter(\e[36mx\e[0m => x.toCharArray.map(_.toInt).contains(maxKey)\
    \ && x.toCharArray.map(_.toInt).con"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            maxChars\
    \ += char -> uniqueChars.count(_ == char)\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.filter(word\
    \ => maxChars(word) == maxValue).head\n        val maxWordWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(word\
    \ => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(word => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw55xfm0n.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpw55xfm0n.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:28:92 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(\e[36mword\e[0m => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWord))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:30:109 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstWithMaxChars\e\
    [0m = words.filter(\e[36mword\e[0m => maxChars(word) == maxValue).sortWith(_.compareToIgnoreCase(maxWordWithMaxCharsFirst))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw55xfm0n.scala:32:126\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\e[0m = words.filte"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(x => x.toCharArray.map(x => x.toInt).count(_\
    \ == 1))\n        val maxCount = counts.max\n        val maxChars = counts.filter(x\
    \ => x == maxCount).max\n        val maxWord = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount).min\n        val maxWords = words.filter(x => x.toCharArray.count(_\
    \ == maxChars) == maxCount)\n        val maxWordsSorted = maxWords.sortWith((x,\
    \ y) => x.toCharArray.count(_ == y.toCharArray.max) - y.toCharArray.count(_ ==\
    \ x.toCharArray.max))\n        val maxWordsSortedFirst = maxWordsSorted.head\n\
    \        val maxWordsSortedFirstChars = maxWordsSortedFirst.toCharArray.max\n\
    \        val maxWordsSortedFirstCharsCount = maxWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWord = maxWordsSortedFirstCharsCount.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSorted = maxWordsSortedFirstCharsCountInWords.sortWith((x,\
    \ y) => x - y)\n        val maxWordsSortedFirstCharsCountInWordsSortedFirst =\
    \ maxWordsSortedFirstCharsCountInWordsSorted.head\n        val maxWordsSortedFirstCharsCountInWordsSortedFirstChars\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirst.toCharArray.max\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount = maxWordsSortedFirstCharsCountInWordsSortedFirstChars.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord =\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCount.toInt\n        val\
    \ maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWords = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWord.toInt\n\
    \        val maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\
    \ = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((x,\
    \ y) => x - y)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmn37bnq.scala:20:57\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordsSorted\e\
    [0m = maxWords.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.toCharArray.count(_\
    \ == y.toCharArray.max) - y.toCharArray.count(_ == x.toCharArray.max))\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprmn37bnq.scala:26:94\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordsSortedFirstCharsCountInWordsSorted\e[0m = maxWordsSortedFirstCharsCountInWords.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value sortWith is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprmn37bnq.scala:32:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\e\
    [0m = maxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordsSortedFirstCharsCountInWordsSortedFirstCharsCountInWordsSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmn37bnq.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n_jngh6.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1659798519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChar = counts.maxBy(_._2)._1\n        val maxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar))\n        val maxWordWithMaxCount\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount)\n        val maxWordWithMaxCountWithMaxChar = words.filter(w\
    \ => w.toCharArray.forall(c => c == maxChar) && w.count(_ == maxChar) == maxCount\
    \ && w.maxBy(_._2)._1 == maxChar)\n        val maxWordWithMaxCountWithMaxCharWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 ==\
    \ maxWordWithMaxCount.maxBy(_._2)._2)\n        val maxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(w => w.toCharArray.forall(c => c == maxChar) && w.count(_ ==\
    \ maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(w => w.toCharArray.forall(c\
    \ => c == maxChar) && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 ==\
    \ maxChar && w.maxBy(_._2)._2 == maxWord.maxBy(_._2)._2 && w.maxBy(\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkft_fbjf.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxCharWithMaxWordWithMaxWord\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && words.filter(\e\
    [36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar) && w.count(_\
    \ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar && w.maxBy(_._2)._2 ==\
    \ maxWord.maxBy(_._2)._2 && w.maxBy(_._2)._2 == maxWordWithMaxCount.maxBy(_._2)._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but\
    \ 'val' found\n\e[31m\e[31m-- Error: /tmp/tmpkft_fbjf.scala:20:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCount\e[0m\
    \ = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount)\n\e[31m\e[31m   |\e[0m               \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types\
    \ Int and (Char, Int) cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpkft_fbjf.scala:21:106 ----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCountWithMaxChar\e\
    [0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e[36mc\e[0m => c == maxChar)\
    \ && w.count(_ == maxChar) == maxCount && w.maxBy(_._2)._1 == maxChar)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Values of types Int and (Char, Int) cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkft_fbjf.scala:21:153\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCountWithMaxChar\e[0m = words.filter(\e[36mw\e[0m => w.toCharArray.forall(\e\
    [36mc\e[0m => c == maxChar) && w.count(_ == maxChar) == maxCount"
  stdout: 'java.lang.AssertionError: assertion failed: TS[1, 0] attempted to take
    ownership of B which is already owned by committable TS[130809, 1, 0] while compiling
    /tmp/tmpkft_fbjf.scala

    '
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxUniqueChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxUniqueChars)\n        val maxWordWithMaxUniqueChars = maxWord.sortWith((a,\
    \ b) => a.compareTo(b) > 0).head\n        val maxWordWithMaxUniqueCharsLexicographicalOrder\
    \ = maxWordWithMaxUniqueChars.sortWith((a, b) => a.compareTo(b) < 0).head\n  \
    \      maxWordWithMaxUniqueCharsLexicographicalOrder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7rno1lwp.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        maxWordWithMaxUniqueCharsLexicographicalOrder\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (maxWordWithMaxUniqueCharsLexicographicalOrder\
    \ : Char)\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(char => {\n                uniqueChars += char\n        \
    \    })\n        })\n        uniqueChars.foreach(char => {\n            val count\
    \ = maxChars.getOrElse(char, 0)\n            maxChars += char -> count + 1\n \
    \       })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 < _._2)\n\
    \        val maxCharsSorted = maxCharsSorted.toSeq.sortWith(_._1 < _._1)\n   \
    \     maxCharsSorted.head._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprepaytpj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSorted\e[0m = maxCharsSorted.toSeq.sortWith(_._1\
    \ < _._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxCharsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmprepaytpj.scala:15:26 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmprepaytpj.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max)\n  \
    \      val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head ==\
    \ words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n        val maxWordWithMaxCharsFirstInLexInLexInLex\
    \ = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString < _.toString).last)\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString\
    \ < _.toString).head == words.toList.sortWith(_.toString \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcviyysmo.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:19:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && _.toSet.size\
    \ == uniqueChars.max)\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:20:52 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && _.toSet.size == uniqueChars.max &&\
    \ words.toList.sortWith(_.toString < _.toString).head == words.toList.sortWith(_.toString\
    \ < _.toString).last)\n\e[31m\e[31m   |\e[0m                                 \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.scala:21:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLex\e[0m = words.filter(_.length == maxChars\
    \ && _.toSet.size == uniqueChars.max && words.toList.sortWith(_.toString < _.toString).head\
    \ == words.toList.sortWith(_.toString < _.toString).last)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpcviyysmo.s"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && _ == maxWord(0))\n        val maxWordWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxChars(0))\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirst(1))\n \
    \       val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(1))\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder(1))\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:18:47 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(_.length == maxChars && _ == maxWord(\e[31m0\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:19:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirst\e[0m = words.filter(_.length == maxChars && _\
    \ == maxWordWithMaxChars(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m               \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:20:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e[0m = words.filter(_.length\
    \ == maxChars && _ == maxWordWithMaxCharsFirst(\e[31m1\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:21:96 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\e\
    [0m = words.filter(_.length == maxChars && _ == maxWordWithMaxCharsFirstInLexicographicalOrder(\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpre35hgnu.scala:22:11"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val chars = words.map(_.toCharArray).flatten\n       \
    \ val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n \
    \       val maxWords = words.filter(_.toCharArray.contains(maxChars))\n      \
    \  val maxWord = maxWords.head\n        val maxCharCount = maxWords.map(_.toCharArray).map(_.length).max\n\
    \        val maxCharCountWord = words.filter(_.toCharArray.contains(maxCharCount)).head\n\
    \        val maxCharCountWordLength = maxCharCountWord.toCharArray.map(_.length).max\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxCharCountWordLength\
    \ = maxCharCountWordLength.toInt\n        val maxCharCountWordLength = maxCharCountWordLength.toInt\n\
    \        val maxCharCountWordLength = maxCharCountWordLength.toInt\n        val\
    \ maxCharCountWordLength = maxCharCountWordLength.toInt\n        val maxChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59kf8kj_.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharCountWordLength\e[0m = maxCharCountWordLength.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharCountWordLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp59kf8kj_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCountWordLength\e\
    [0m = maxCharCountWordLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharCountWordLength is already defin"
  stdout: ''
  timestamp: 1659798792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val counts = words.map(word => word.count(_ == 'a')).toList\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.count(_ == 'a') == maxCount).head\n        val maxWordCount = maxWord.count(_\
    \ == 'a')\n        if (maxWordCount == maxCount) {\n            maxWord\n    \
    \    } else {\n            words.filter(word => word.count(_ == 'a') == maxWordCount).head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwu3m96wk.scala:26)\n\tat Problem.main(tmpwu3m96wk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(w => w.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(w => w.length ==\
    \ maxChars && w.toSet.size == uniqueChars.size)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirst = words.filter(w => w.length\
    \ == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n   \
    \     val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w.toSet.size == uniqueChars.size && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head)\n\
    \        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w.toSet.size == uniqueChars.size\
    \ && w.toSet.head < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head\
    \ < uniqueChars.head && w.toSet.head > uniqueChars.head && w.toSet.head < uniqueChars.head\
    \ && w.toSet.head > uniqueChars.head)\n        val maxWordWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirstWithMaxCharsFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrgnd5_h.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmrgnd5_h.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLength\
    \ = words.sortBy(_.length).head\n        val maxWordWithMaxCharsSortedByLengthReversed\
    \ = words.sortBy(_.length).reverse.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.head\n        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.head\n        val\
    \ maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.head\n      \
    \  val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg3hzu699.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = words.sortBy(_.length).reverse.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByLengthReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpg3hzu699.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(_.length).distinct\n        val\
    \ maxCount = unique.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        unique.find(_ == maxCount) match {\n            case Some(count) => maxWord\n\
    \            case None => words.head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeeeakpau.scala:25)\n\tat Problem.main(tmpeeeakpau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCount = words.foldLeft(0)((count, word) => count\
    \ + word.distinct().length)\n        val maxWord = words.filter(word => word.distinct().length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   words.take(maxWordIndex).reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpul1ic1ea.scala:15:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.distinct().length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter\
    \ i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmpul1ic1ea.scala:16:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount).head\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659798789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = mutable.HashSet[String]()\n        val maxCount\
    \ = 0\n        val maxWord = word(0)\n        words.foreach(word => {\n      \
    \      val count = unique.count(_ == word)\n            if (count > maxCount)\
    \ {\n                maxCount = count\n                maxWord = word\n      \
    \      }\n            unique += word\n        })\n        maxWord\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcgqd8rbf.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36munique\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpcgqd8rbf.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = word(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    Not found: word\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpcgqd8rbf.scala:21:25 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                maxCount = count\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpcgqd8rbf.scala:22:24\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxWord\
    \ = word\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val maxWord\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unique = words.map(x => x.toSet).reduce(_ ++ _)\n\
    \        val maxCount = unique.max\n        val maxWord = words.filter(x => x.toSet.size\
    \ == maxCount).sortBy(x => x.toSet).head\n        maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkx539b8n.scala:17:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mx\e[0m => x.toSet.size == maxCount).sortBy(\e[36mx\e[0m => x.toSet).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined\
    \ for Set[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with\
    \ constraint >: Char\n\e[31m   |\e[0m..\n\e[31m   |\e[0mI found:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mSet[B]\e[0m](\n\e[31m\
    \   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Set[B]]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Set[B]].\n1 error found\n"
  stdout: ''
  timestamp: 1659798792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = words.map(_.length).distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsAndFirstChar = maxWordWithMaxChars.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstChar.zip(maxWordWithMaxCharsAndFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstChar).map(_._2)\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWord.sortWith(_ < _).head\n       \
    \ val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWord.zip(maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).filter(_._1\
    \ == maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstChar).map(_._2)\n   \
    \     val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.map(_.charAt(0))\n\
    \        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\
    \ = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnd_smh80.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnd_smh80.scala:19:72\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsAndFirstChar\e[0m = maxWordWithMaxChars.map(_.charAt(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                  value charAt is not a member of Char\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnd_smh80.scala:26:146 -----------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstChar\e\
    [0m = maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxWordWithMaxCharsAndFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWordWithFirstCharAndFirstWord\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnd_smh80.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                maxChars += c\n     \
    \       })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                if (uniqueChars.contains(c)) {\n                    uniqueChars\
    \ -= c\n                } else {\n                    uniqueChars += c\n     \
    \           }\n            })\n        })\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                if (maxChars.contains(c)) {\n\
    \                    maxChars -= c\n                } else {\n               \
    \     maxChars += c\n                }\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    if (maxChars.contains(c)) {\n                       \
    \ maxWord = word :: maxWord\n                    } else {\n                  \
    \      maxWord = word :: maxWord\n                    }\n                } else\
    \ {\n                    if (maxChars.contains(c)) {\n                       \
    \ maxWord = word :: maxWord\n                    } else {\n                  \
    \      maxWord = word :: maxWord\n                    }\n                }\n \
    \           })\n        })\n        maxWord.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:16:23 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmochrj8_.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:50:32 -----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                        maxWord = word :: maxWord\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Reassignment to val maxWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:52:32 -----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                        maxWord = word :: maxWord\n\e\
    [31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Reassignment to val maxWord\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmochrj8_.scala:56:32 -----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        "
  stdout: ''
  timestamp: 1659798789
