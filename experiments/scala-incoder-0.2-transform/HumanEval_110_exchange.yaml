name: HumanEval_110_exchange
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this problem, you will implement a function that takes two lists of numbers,\n\
  \    // and determines whether it is possible to perform an exchange of elements\n\
  \    // between them to make lst1 a list of only even numbers.\n    // There is\
  \ no limit on the number of exchanged elements between lst1 and lst2.\n    // If\
  \ it is possible to exchange elements between the lst1 and lst2 to make\n    //\
  \ all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return\
  \ \"NO\".\n    // For example:\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n\
  \    // (\"YES\")\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    //\
  \ (\"NO\")\n    // It is assumed that the input lists will be non-empty.\n    def\
  \ exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(exchange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)),\
  \ (List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong))).equals((\"YES\")));\n\
  \    assert(exchange((List[Long](5l.toLong, 7l.toLong, 3l.toLong)), (List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong))).equals((\"YES\")));\n    assert(exchange((List[Long](5l.toLong,\
  \ 7l.toLong, 3l.toLong)), (List[Long](2l.toLong, 6l.toLong, 3l.toLong))).equals((\"\
  NO\")));\n    assert(exchange((List[Long](3l.toLong, 2l.toLong, 6l.toLong, 1l.toLong,\
  \ 8l.toLong, 9l.toLong)), (List[Long](3l.toLong, 5l.toLong, 5l.toLong, 1l.toLong,\
  \ 1l.toLong, 1l.toLong))).equals((\"NO\")));\n    assert(exchange((List[Long](100l.toLong,\
  \ 200l.toLong)), (List[Long](200l.toLong, 200l.toLong))).equals((\"YES\")));\n \
  \   }\n\n}\n"
completions: ["        // Your code here\n        val lst3 = lst1.filter(_ % 2 ==\
    \ 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1 == _._1).map(_._2)\n        if(lst3.isEmpty)\
    \ \"\"\n        else lst3.foldLeft(\"\")(_ + _)", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven =\
    \ evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.inter",
  '        // Your code goes here', '        // Your code goes here', '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0).toList\n   \
    \     val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd =\
    \ even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n      \
    \  val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd\
    \ = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndO",
  "        val lst1Even = lst1.filter(x => x % 2 == 0)\n        val lst2Even = lst2.filter(x\
    \ => x % 2 == 0)\n        val lst1Odd = lst1.filter(x => x % 2 != 0)\n       \
    \ val lst2Odd = lst2.filter(x => x % 2 != 0)\n        val lst1EvenOdd = lst1Even.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOdd = lst2Even.filter(x => x % 2 != 0)\n\
    \        val lst1EvenOddOdd = lst1EvenOdd.filter(x => x % 2 != 0)\n        val\
    \ lst2EvenOddOdd = lst2EvenOdd.filter(x => x % 2 != 0)\n        val lst1EvenOddEvenOdd\
    \ = lst1EvenOddOdd.filter(x => x % 2 != 0)\n        val lst2EvenOddEvenOdd = lst2EvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddOdd = lst1EvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddOdd = lst2EvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOdd = lst1EvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOdd = lst2EvenOddEvenOddOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOddOdd = lst1EvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOddOdd = lst2EvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOddEvenOddEvenOdd = lst1EvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst2EvenOddEvenOddEvenOddEvenOdd = lst2EvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOddEvenOdd", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenOdd = even.zip(odd).filter(x => x._1 == x._2)\n        val evenOddList\
    \ = evenOdd.map(x => x._1)\n        val evenOddList2 = evenOdd.map(x => x._2)\n\
    \        val evenOddList3 = evenOdd.map(x => x._1)\n        val evenOddList4 =\
    \ evenOdd.map(x => x._2)\n        val evenOddList5 = evenOdd.map(x => x._1)\n\
    \        val evenOddList6 = evenOdd.map(x => x._2)\n        val evenOddList7 =\
    \ evenOdd.map(x => x._1)\n        val evenOddList8 = evenOdd.map(x => x._2)\n\
    \        val evenOddList9 = evenOdd.map(x => x._1)\n        val evenOddList10\
    \ = evenOdd.map(x => x._2)\n        val evenOddList11 = evenOdd.map(x => x._1)\n\
    \        val evenOddList12 = evenOdd.map(x => x._2)\n        val evenOddList13\
    \ = evenOdd.map(x => x._1)\n        val evenOddList14 = evenOdd.map(x => x._2)\n\
    \        val evenOddList15 = evenOdd.map(x => x._1)\n        val evenOddList16\
    \ = evenOdd.map(x => x._2)\n        val evenOddList17 = evenOdd.map(x => x._1)\n\
    \        val evenOddList18 = evenOdd.map(x => x._2)\n        val evenOddList19\
    \ = evenOdd.map(x => x._1)\n        val evenOddList20 = evenOdd.map(x => x._2)\n\
    \        val evenOddList21 = evenOdd.map(x => x._1)\n        val evenOddList22\
    \ = evenOdd.map(x => x._2)\n        val evenOddList23 = evenOdd.map(x => x._1)\n\
    \        val evenOddList24 = evenOdd.map(x => x._2)\n        val evenOddList25\
    \ = evenOdd.map(x => x.", "        val lst1Copy = lst1.toList\n        val lst2Copy\
    \ = lst2.toList\n        val lst1Copy2 = lst1Copy.filter(_ % 2 == 0)\n       \
    \ val lst2Copy2 = lst2Copy.filter(_ % 2 == 0)\n        val lst1Copy3 = lst1Copy2.filter(_\
    \ % 3 == 0)\n        val lst2Copy3 = lst2Copy2.filter(_ % 3 == 0)\n        val\
    \ lst1Copy4 = lst1Copy3.filter(_ % 4 == 0)\n        val lst2Copy4 = lst2Copy3.filter(_\
    \ % 4 == 0)\n        val lst1Copy5 = lst1Copy4.filter(_ % 5 == 0)\n        val\
    \ lst2Copy5 = lst2Copy4.filter(_ % 5 == 0)\n        val lst1Copy6 = lst1Copy5.filter(_\
    \ % 6 == 0)\n        val lst2Copy6 = lst2Copy5.filter(_ % 6 == 0)\n        val\
    \ lst1Copy7 = lst1Copy6.filter(_ % 7 == 0)\n        val lst2Copy7 = lst2Copy6.filter(_\
    \ % 7 == 0)\n        val lst1Copy8 = lst1Copy7.filter(_ % 8 == 0)\n        val\
    \ lst2Copy8 = lst2Copy7.filter(_ % 8 == 0)\n        val lst1Copy9 = lst1Copy8.filter(_\
    \ % 9 == 0)\n        val lst2Copy9 = lst2Copy8.filter(_ % 9 == 0)\n        val\
    \ lst1Copy10 = lst1Copy9.filter(_ % 10 == 0)\n        val lst2Copy10 = lst2Copy9.filter(_\
    \ % 10 == 0)\n        val lst1Copy11 = lst1Copy10.filter(_ % 11 == 0)\n      \
    \  val lst2Copy11 = lst2Copy10.filter(_ % 11 == 0)\n        val lst1Copy12 = lst1Copy11.filter(_\
    \ % 12 == 0)\n        val lst2Copy12 = lst2Copy11.filter(_ % 12 == 0)\n      \
    \  val lst1Copy13 = lst1Copy12.filter(_ % 13 == 0)\n        val lst2Copy13 = lst2Copy12.filter(_\
    \ % 13 == 0)\n        val lst1Copy14 = lst1Copy13.filter(_ % 14 == 0)\n      \
    \  val lst2Copy14 = lst2Copy13.filter(_ % 14 == 0)\n        val lst1Copy15 = lst1Copy14.filter(_\
    \ % 15 == 0)\n        val lst2Copy15 = lst2Copy14.filter(_ % 15 == 0)\n      \
    \  val lst1Copy16 = lst1Copy15.filter", "        val lst3 = lst1.filter(_ % 2\
    \ == 0).filter(_ != lst2(0))\n        val lst4 = lst2.filter(_ % 2 == 0).filter(_\
    \ != lst1(1))\n        if(lst3.isEmpty) \"\"\n        else if(lst4.isEmpty) \"\
    \"\n        else exchange(lst3, lst4)", '        // Your code here', "       \
    \ // Your code here\n        val lst3 = lst1.filter(_ % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1)\n        if(lst3.isEmpty) \"\"\n        else lst3.map(x => lst1.remove(x)).toList.mkString(\"\
    ,\")", "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd\
    \ = lst2.filter(x => x % 2 == 1).length\n        if (even == odd) {\n        \
    \    if (even == lst1.length) {\n                return \"YES\"\n            }\
    \ else {\n                return \"NO\"\n            }\n        } else {\n   \
    \         return \"NO\"\n        }", "        val even = lst1.filter(_ % 2 ==\
    \ 0).toList\n        val odd = lst2.filter(_ % 2 == 1).toList\n        val evenAndOdd\
    \ = even ++ odd\n        val evenAndOddLength = evenAndOdd.length\n        val\
    \ evenAndOddSet = evenAndOdd.toSet\n        val evenAndOddSetLength = evenAndOddSet.length\n\
    \        val evenAndOddSetSet = evenAndOddSet.toSet\n        val evenAndOddSetSetLength\
    \ = evenAndOddSetSet.length\n        val evenAndOddSetSetSet = evenAndOddSetSet.toSet\n\
    \        val evenAndOddSetSetSetLength = evenAndOddSetSetSet.length\n        val\
    \ evenAndOddSetSetSetSet = evenAndOddSetSetSet.toSet\n        val evenAndOddSetSetSetSetLength\
    \ = evenAndOddSetSetSetSet.length\n        val evenAndOddSetSetSetSetLength =\
    \ evenAndOddSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetLength =\
    \ evenAndOddSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSetSetSetSetSetSet.length\n        val evenAndOddSetSetSetSetSetSetSetSetSetLength\
    \ = evenAndOddSetSetSetSetSet", "        val lst1Size = lst1.size\n        val\
    \ lst2Size = lst2.size\n        val lst1Even = lst1.filter(x => x % 2 == 0).size\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0).size\n        if (lst1Size\
    \ == 0 || lst2Size == 0 || lst1Even == 0 || lst2Even == 0) {\n            return\
    \ \"NO\"\n        }\n        val lst1EvenList = lst1.filter(x => x % 2 == 0)\n\
    \        val lst2EvenList = lst2.filter(x => x % 2 == 0)\n        val lst1EvenListSize\
    \ = lst1EvenList.size\n        val lst2EvenListSize = lst2EvenList.size\n    \
    \    val lst1EvenListSize = lst1EvenList.size\n        val lst2EvenListSize =\
    \ lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n      \
    \  val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n\
    \        val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize\
    \ = lst1EvenList.size\n        val lst2EvenListSize = lst2EvenList.size\n    \
    \    val lst1EvenListSize = lst1EvenList.size\n        val lst2EvenListSize =\
    \ lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n      \
    \  val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n\
    \        val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize\
    \ = lst1EvenList.size\n        val lst2EvenListSize = lst2EvenList.size\n    \
    \    val lst1EvenListSize = lst1EvenList.size\n        val lst2EvenListSize =\
    \ lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n      \
    \  val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n\
    \        val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize\
    \ = lst1EvenList.size\n        val lst2EvenListSize = lst2EvenList.size\n    \
    \    val lst1EvenListSize = lst1EvenList.size\n        val lst2EvenListSize =\
    \ lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.size\n      \
    \  val lst2EvenListSize = lst2EvenList.size\n        val lst1EvenListSize = lst1EvenList.",
  '        // Your code here', "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndOddAndEven = evenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n    \
    \    val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\n",
  "        val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even == odd) {\n            if (lst1.size\
    \ == lst2.size) {\n                val even = lst1.filter(x => x % 2 == 0).length\n\
    \                if (even == lst1.size) {\n                    return \"YES\"\n\
    \                } else {\n                    return \"NO\"\n               \
    \ }\n            } else {\n                return \"NO\"\n            }\n    \
    \    } else {\n            return \"NO\"\n        }", "        val lst1Even =\
    \ lst1.filter(x => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x =>\
    \ x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n\
    \        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd\
    \ = lst1Even.zip(lst1Odd)\n        val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOdd = lst1EvenAndOdd.zip(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd = lst1EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst",
  "        // Your code goes here\n        val even = lst1.filter(_ % 2 == 0).length\n\
    \        val odd = lst2.filter(_ % 2 == 1).length\n        if(even == odd) {\n\
    \            if(even == lst1.length) {\n                return \"YES\"\n     \
    \       }\n            if(even == lst2.length) {\n                return \"YES\"\
    \n            }\n        }\n        return \"NO\"", "        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n        val evenOdd =\
    \ even.zip(odd)\n        val evenOddMap = evenOdd.toMap\n        val evenOddMapKeys\
    \ = evenOddMap.keys\n        val evenOddMapValues = evenOddMap.values\n      \
    \  val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val evenOddMapKeysSet = evenOddMapKeys.toSet\n        val evenOddMapValuesSet\
    \ = evenOddMapValues.toSet\n        val evenOddMapKeysSet = evenOddMapKeys.toSet\n\
    \        val evenOddMapValuesSet = evenOddMapValues.toSet\n        val evenOddMapKeysSet\
    \ = evenOddMapKeys.toSet\n        val evenOddMapValuesSet = evenOddMapValues.toSet\n\
    \        val even", "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenOdd =\
    \ even.zip(odd).filter(_._1 == _._2).map(_._1)\n        if(evenOdd.isEmpty) \"\
    NO\" else \"YES\"", '        // Your code here', "        val evens = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odds = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenOdds = evens.zip(odds)\n        val evenOddsSet = evenOdds.toSet\n\
    \        val evenOddsSetSize = evenOddsSet.size\n        if (evenOddsSetSize ==\
    \ 0) {\n            return \"NO\"\n        }\n        if (evenOddsSetSize == evens.size)\
    \ {\n            return \"YES\"\n        }\n        val evenOddsSetIterator =\
    \ evenOddsSet.iterator\n        val evenOddsSetIteratorNext = evenOddsSetIterator.next\n\
    \        val evenOddsSetIteratorNextValue = evenOddsSetIteratorNext.get\n    \
    \    val evenOddsSetIteratorNextNext = evenOddsSetIteratorNext.next\n        val\
    \ evenOddsSetIteratorNextNextValue = evenOddsSetIteratorNextNext.get\n       \
    \ val evenOddsSetIteratorNextNextNext = evenOddsSetIteratorNextNextNext.next\n\
    \        val evenOddsSetIteratorNextNextNextValue = evenOddsSetIteratorNextNextNext.get\n\
    \        val evenOddsSetIteratorNextNextNextNext = evenOddsSetIteratorNextNextNextNext.next\n\
    \        val evenOddsSetIteratorNextNextNextNextValue = evenOddsSetIteratorNextNextNextNext.get\n\
    \        val evenOddsSetIteratorNextNextNextNextNext = evenOddsSetIteratorNextNextNextNextNext.next\n\
    \        val evenOddsSetIteratorNextNextNextNextNextValue = evenOddsSetIteratorNextNextNextNextNext.get\n\
    \        val evenOddsSetIteratorNextNextNextNextNextNext = evenOddsSetIteratorNextNextNextNextNextNext.next\n\
    \        val evenOddsSetIteratorNextNextNextNextNextNextValue = evenOddsSetIteratorNextNextNextNextNextNext.get\n\
    \        val evenOddsSetIteratorNextNextNextNextNextNextNext = evenOddsSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val evenOddsSetIteratorNextNextNextNextNextNextNextValue = evenOddsSetIteratorNextNextNextNextNextNextNextNext.get\n\
    \        val evenOddsSetIteratorNextNextNextNextNextNextNextNext = evenOddsSetIteratorNextNext",
  '        // Your code here', '        // Your code here', '        // Your code
    goes here', "        // Your code here\n        val lst1Copy = lst1.toList\n \
    \       val lst2Copy = lst2.toList\n        val evenList = lst1Copy.filter(x =>\
    \ x % 2 == 0).toList\n        val oddList = lst2Copy.filter(x => x % 2 == 1).toList\n\
    \        val evenList2 = evenList.zip(oddList).filter(_._1 == _._2).toList\n \
    \       val evenList3 = evenList2.filter(_._1 == 0).toList\n        val evenList4\
    \ = evenList3.filter(_._1 == 1).toList\n        val evenList5 = evenList4.filter(_._1\
    \ == 2).toList\n        val evenList6 = evenList5.filter(_._1 == 3).toList\n \
    \       val evenList7 = evenList6.filter(_._1 == 4).toList\n        val evenList8\
    \ = evenList7.filter(_._1 == 5).toList\n        val evenList9 = evenList8.filter(_._1\
    \ == 6).toList\n        val evenList10 = evenList9.filter(_._1 == 7).toList\n\
    \        val evenList11 = evenList10.filter(_._1 == 8).toList\n        val evenList12\
    \ = evenList11.filter(_._1 == 9).toList\n        val evenList13 = evenList12.filter(_._1\
    \ == 10).toList\n        val evenList14 = evenList13.filter(_._1 == 11).toList\n\
    \        val evenList15 = evenList14.filter(_._1 == 12).toList\n        val evenList16\
    \ = evenList15.filter(_._1 == 13).toList\n        val evenList17 = evenList16.filter(_._1\
    \ == 14).toList\n        val evenList18 = evenList17.filter(_._1 == 15).toList\n\
    \        val evenList19 = evenList18.filter(_._1 == 16).toList\n        val evenList20\
    \ = evenList19.filter(_._1 == 17).toList\n        val evenList21 = evenList20.filter(_._1\
    \ == 18).toList\n        val evenList22 = evenList21.filter(_._1 == 19).toList\n\
    \        val evenList23 = evenList22.filter(_._1 == 20).toList\n        val evenList24\
    \ = evenList23.filter(_._1 == 21).toList\n        val evenList25 = evenList24.filter(_._1\
    \ == 22).toList\n        val evenList26 = evenList25.filter(_._1 == 23).toList\n\
    \        val evenList27 = evenList26.filter(_._1 == 24).toList\n        val evenList28\
    \ = evenList27.filter(_._1 == ", "        val lst1Len = lst1.size\n        val\
    \ lst2Len = lst2.size\n        val lst1Set = lst1.toSet\n        val lst2Set =\
    \ lst2.toSet\n        val lst1Set2 = lst1Set.intersect(lst2Set)\n        if (lst1Set2.isEmpty)\
    \ {\n            return \"NO\"\n        }\n        val lst1Set3 = lst1Set.diff(lst1Set2)\n\
    \        val lst2Set3 = lst2Set.diff(lst2Set)\n        val lst1Set4 = lst1Set.diff(lst1Set3)\n\
    \        val lst2Set4 = lst2Set.diff(lst2Set3)\n        if (lst1Set4.isEmpty)\
    \ {\n            return \"NO\"\n        }\n        val lst1Set5 = lst1Set.intersect(lst1Set4)\n\
    \        val lst2Set5 = lst2Set.intersect(lst2Set4)\n        val lst1Set6 = lst1Set.diff(lst1Set5)\n\
    \        val lst2Set6 = lst2Set.diff(lst2Set5)\n        val lst1Set7 = lst1Set.diff(lst1Set6)\n\
    \        val lst2Set7 = lst2Set.diff(lst2Set6)\n        val lst1Set8 = lst1Set.intersect(lst1Set7)\n\
    \        val lst2Set8 = lst2Set.intersect(lst2Set7)\n        val lst1Set9 = lst1Set.diff(lst1Set8)\n\
    \        val lst2Set9 = lst2Set.diff(lst2Set8)\n        val lst1Set10 = lst1Set.diff(lst1Set9)\n\
    \        val lst2Set10 = lst2Set.diff(lst2Set9)\n        val lst1Set11 = lst1Set.intersect(lst1Set10)\n\
    \        val lst2Set11 = lst2Set.intersect(lst2Set10)\n        val lst1Set12 =\
    \ lst1Set.diff(lst1Set11)\n        val lst2Set12 = lst2Set.diff(lst2Set11)\n \
    \       val lst1Set13 = lst1Set.diff(lst1Set12)\n        val lst2Set13 = lst2Set.diff(lst2Set12)\n\
    \        val lst1Set14 = lst1Set.intersect(lst1Set13)\n        val lst2Set14 =\
    \ lst2Set.intersect(lst2Set13)\n        val lst1Set15 = lst1Set.diff(lst1Set14)\n\
    \        val lst2Set15 = lst2Set.diff(lst2Set14)\n        val lst1Set16 = lst1Set.diff(lst1",
  '        // Your code here', "        val lst1Len = lst1.length\n        val lst2Len\
    \ = lst2.length\n        val lst1Even = lst1.filter(x => x % 2 == 0).length\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0).length\n        if (lst1Even\
    \ != lst2Even) {\n            return \"NO\"\n        }\n        val lst1EvenList\
    \ = lst1.filter(x => x % 2 == 0)\n        val lst2EvenList = lst2.filter(x =>\
    \ x % 2 == 0)\n        val lst1EvenListLen = lst1EvenList.length\n        val\
    \ lst2EvenListLen = lst2EvenList.length\n        val lst1EvenListSet = lst1EvenList.map(x\
    \ => x.toLong)\n        val lst2EvenListSet = lst2EvenList.map(x => x.toLong)\n\
    \        val lst1EvenListSetLen = lst1EvenListSet.length\n        val lst2EvenListSetLen\
    \ = lst2EvenListSet.length\n        val lst1EvenListSetSet = lst1EvenListSet.intersect(lst2EvenListSet)\n\
    \        val lst2EvenListSetSet = lst2EvenListSet.intersect(lst1EvenListSet)\n\
    \        val lst1EvenListSetSetLen = lst1EvenListSetSet.length\n        val lst2EvenListSetSetLen\
    \ = lst2EvenListSetSet.length\n        val lst1EvenListSetSetSet = lst1EvenListSet.intersect(lst2EvenListSet)\n\
    \        val lst2EvenListSetSet = lst2EvenListSet.intersect(lst1EvenListSet)\n\
    \        val lst1EvenListSetSetLen = lst1EvenListSetSet.length\n        val lst2EvenListSetSetLen\
    \ = lst2EvenListSetSet.length\n        val lst1EvenListSetSetSet = lst1EvenListSet.intersect(lst2EvenListSet)\n\
    \        val lst2EvenListSetSet = lst2EvenListSet.intersect(lst1EvenListSet)\n\
    \        val lst1EvenListSetSetLen = lst1EvenListSetSet.length\n        val lst2EvenListSetSetLen\
    \ = lst2EvenListSetSet.length\n        val lst1EvenListSetSetSet = lst1EvenListSet.intersect(lst2EvenListSet)\n\
    \        val lst2EvenListSetSet = lst2EvenListSet.intersect(lst1EvenListSet)\n\
    \        val lst1EvenListSet", '        // Your code here', "        val even\
    \ = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_ % 2 == 1).toList\n\
    \        val evenAndOdd = even.zip(odd)\n        val evenAndOddSet = evenAndOdd.toSet\n\
    \        if (evenAndOddSet.size == lst1.size && evenAndOddSet.size == lst2.size)\
    \ {\n            val evenAndOddSet = evenAndOdd.toSet\n            val evenAndOddSet2\
    \ = evenAndOddSet.filter(_ != evenAndOddSet)\n            if (evenAndOddSet2.size\
    \ == lst1.size) {\n                return \"YES\"\n            } else {\n    \
    \            return \"NO\"\n            }\n        } else {\n            return\
    \ \"NO\"\n        }", "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n    \
    \    val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd\
    \ = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\n\
    \        val evenAnd", "        val lst3 = lst1.toList\n        val lst4 = lst2.toList\n\
    \        val lst5 = lst3.filter(_ % 2 == 0)\n        val lst6 = lst4.filter(_\
    \ % 2 == 0)\n        val lst7 = lst5.filter(_ % 2 == 0)\n        val lst8 = lst6.filter(_\
    \ % 2 == 0)\n        val lst9 = lst7.filter(_ % 2 == 0)\n        val lst10 = lst8.filter(_\
    \ % 2 == 0)\n        val lst11 = lst9.filter(_ % 2 == 0)\n        val lst12 =\
    \ lst10.filter(_ % 2 == 0)\n        val lst13 = lst11.filter(_ % 2 == 0)\n   \
    \     val lst14 = lst12.filter(_ % 2 == 0)\n        val lst15 = lst13.filter(_\
    \ % 2 == 0)\n        val lst16 = lst14.filter(_ % 2 == 0)\n        val lst17 =\
    \ lst15.filter(_ % 2 == 0)\n        val lst18 = lst16.filter(_ % 2 == 0)\n   \
    \     val lst19 = lst17.filter(_ % 2 == 0)\n        val lst20 = lst18.filter(_\
    \ % 2 == 0)\n        val lst21 = lst19.filter(_ % 2 == 0)\n        val lst22 =\
    \ lst20.filter(_ % 2 == 0)\n        val lst23 = lst21.filter(_ % 2 == 0)\n   \
    \     val lst24 = lst22.filter(_ % 2 == 0)\n        val lst25 = lst23.filter(_\
    \ % 2 == 0)\n        val lst26 = lst24.filter(_ % 2 == 0)\n        val lst27 =\
    \ lst25.filter(_ % 2 == 0)\n        val lst28 = lst26.filter(_ % 2 == 0)\n   \
    \     val lst29 = lst27.filter(_ % 2 == 0)\n        val lst30 = lst28.filter(_\
    \ % 2 == 0)\n        val lst31 = lst29.filter(_ % 2 == 0)\n        val lst32 =\
    \ lst30.filter(_ % 2 == 0)\n        val lst33 = lst31.filter(_ % 2 == 0)\n   \
    \     val lst34 = lst32.filter(_ % 2 == 0)\n        val lst35 = lst33.filter(_\
    \ % 2 == 0)\n        val lst36 = lst34.filter(_ % 2 == 0)\n        val lst37 =\
    \ lst35.filter(_ % 2 == 0)\n        val lst38 = lst36.filter(_ % 2 == 0)\n   \
    \     val lst39 = lst37.filter(_ % 2 == 0)\n        val lst40 = lst38.filter(_\
    \ % 2 == 0)\n        val lst41 = lst39.filter(_ % 2 == 0)\n        val lst42 =\
    \ lst40.filter(_ % 2 == 0)\n        val lst43 = lst", '        // Your code here',
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even",
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenOdd = even.zip(odd).filter(x => x._1\
    \ == x._2)\n        val evenOddList = evenOdd.map(x => x._1)\n        val evenOddSet\
    \ = evenOddList.distinct\n        val evenOddSetSize = evenOddSet.size\n     \
    \   if (evenOddSetSize == evenOddList.size) {\n            evenOddSet.map(x =>\
    \ x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong)\
    \ x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x => if (x\
    \ == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(x => if (x == x.toLong) x else x.toLong).map(x\
    \ => if (x == x.toLong) x else x.toLong).map(", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven =\
    \ evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.inter",
  '        // Your code here', "        val even = lst1.filter(x => x % 2 == 0).length\n\
    \        val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd)\
    \ {\n            return \"NO\"\n        } else {\n            return \"YES\"\n\
    \        }", "        val lst1Size = lst1.size\n        val lst2Size = lst2.size\n\
    \        val lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x =>\
    \ x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n\
    \        val lst1EvenEven = lst1Even.intersect(lst2Even).toList\n        val lst2EvenEven\
    \ = lst2Even.intersect(lst1Even).toList\n        val lst1EvenOdd = lst1Even.intersect(lst2Odd).toList\n\
    \        val lst2EvenOdd = lst2Even.intersect(lst1Odd).toList\n        val lst1OddEven\
    \ = lst1Odd.intersect(lst2Even).toList\n        val lst2OddEven = lst2Odd.intersect(lst1Even).toList\n\
    \        val lst1OddOdd = lst1Odd.intersect(lst2Odd).toList\n        val lst2OddOdd\
    \ = lst2Odd.intersect(lst1Odd).toList\n        val lst1OddEvenEven = lst1OddEven.intersect(lst2EvenEven).toList\n\
    \        val lst2OddEvenEven = lst2OddEven.intersect(lst1EvenEven).toList\n  \
    \      val lst1OddEvenOdd = lst1OddEven.intersect(lst2OddEven).toList\n      \
    \  val lst2OddEvenOdd = lst2OddEven.intersect(lst1OddOdd).toList\n        val\
    \ lst1OddOddEven = lst1OddOdd.intersect(lst2EvenEven).toList\n        val lst2OddOddEven\
    \ = lst2OddOdd.intersect(lst1EvenEven).toList\n        val lst1OddOddOdd = lst1OddOdd.intersect(lst2OddEven).toList\n\
    \        val lst2OddOddOdd = lst2OddOdd.intersect(lst1OddOdd).toList\n       \
    \ val lst1OddOddEvenEven = lst1OddOddEven.intersect(lst2", "        val even =\
    \ lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x => x %\
    \ 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2\
    \ = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd6 = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7\
    \ = evenAndOdd6.filter(x => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n  \
    \      val evenAndOdd11 = evenAndOdd10.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd12 = evenAndOdd11.filter(x => x._1 == x._2)\n        val evenAndOdd13\
    \ = evenAndOdd12.filter(x => x._1 == x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd15 = evenAndOdd14.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd17 = evenAndOdd16.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd18 = evenAndOdd17.filter(x => x._1 == x._2)\n        val evenAndOdd19\
    \ = evenAndOdd18.filter(x => x._1 == x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd21 = evenAndOdd20.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd22 = evenAndOdd21.filter(x => x._", "        val\
    \ even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  if (evenAndOdd.isEmpty) {\n            \"NO\"\n        } else {\n         \
    \   \"YES\"\n        }", "        val lst1Even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd\
    \ = lst1.filter(x => x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x =>\
    \ x % 2 != 0).toList\n        val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n\
    \        val lst2EvenAndOdd = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBoth\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x => !lst1EvenAndOdd.contains(x)\
    \ && !lst2EvenAndOdd.contains(x))\n        if (lst1EvenAndOddAndNotBoth.isEmpty)\
    \ {\n            return \"NO\"\n        }\n        return \"YES\"", '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0).toList\n   \
    \     val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd =\
    \ even.intersect(odd)\n        val evenAndOddAndEven = evenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n    \
    \    val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.inter",
  '        // Your code here', '        // Your code here', "        val even = lst1.filter(_\
    \ % 2 == 0).toList\n        val odd = lst2.filter(_ % 2 == 0).toList\n       \
    \ val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty) \"NO\"\
    \ else \"YES\"", "        val lst3 = lst1.zip(lst2).filter(_._1 % 2 == 0).map(_._1)\n\
    \        if(lst3.size == lst1.size) \n            \"YES\"\n        else\n    \
    \        \"NO\"", "        val evens = lst1.filter(_ % 2 == 0).toList\n      \
    \  val odds = lst2.filter(_ % 2 == 1).toList\n        val evensAndOdds = evens\
    \ ++ odds\n        val evensAndOddsSet = evensAndOdds.toSet\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        if (evensAndOddsSetSize == evensAndOddsSet.size)\
    \ {\n            evensAndOddsSet.forall(evensAndOddsSetSet(_))\n        } else\
    \ {\n            evensAndOddsSet.forall(evensAndOddsSetSet(_) || evensAndOddsSetSet(_))\n\
    \        }", '        // Your code here', '        // Your code here', "     \
    \   val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndOddAndEven = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(odd)\n        if (evenAndOddAndEvenAndOdd.isEmpty)\
    \ {\n            \"NO\"\n        } else {\n            \"YES\"\n        }", " \
    \       val even = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_\
    \ % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n        val\
    \ evenAndEven = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndEvenAndOdd = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndEvenAndOddAndEven = evenAndOddAndEvenAndEvenAndOdd.intersect(evenAndOddAndEvenAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndEvenAndOddAndEvenAndEvenAndOdd = evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndEvenAndOddAndEvenAndEvenAndOddAndEven = evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndEvenAndOddAndEvenAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOdd", "        val evens = lst1.filter(_ % 2 == 0)\n     \
    \   val odds = lst2.filter(_ % 2 == 1)\n        val evensOdds = evens.zip(odds)\n\
    \        val evensOddsOdds = evensOdds.filter(_._1 % 2 == 1)\n        val evensOddsEvens\
    \ = evensOdds.filter(_._1 % 2 == 0)\n        val evensOddsOddsEvens = evensOddsEvens.filter(_._2\
    \ % 2 == 0)\n        val evensOddsEvensOdds = evensOddsEvens.filter(_._2 % 2 ==\
    \ 1)\n        val evensOddsEvensEvens = evensOddsEvens.filter(_._3 % 2 == 0)\n\
    \        val evensOddsEvensEvensOdds = evensOddsEvensEvens.filter(_._3 % 2 ==\
    \ 1)\n        val evensOddsEvensEvensEvensOdds = evensOddsEvensEvensEvens.filter(_._4\
    \ % 2 == 0)\n        val evensOddsEvensEvensEvensEvensOdds = evensOddsEvensEvensEvensEvensOdds.filter(_._4\
    \ % 2 == 1)\n        val evensOddsEvensEvensEvensEvensEvensOdds = evensOddsEvensEvensEvensEvensEvensOdds.filter(_._5\
    \ % 2 == 0)\n        val evensOddsEvensEvensEvensEvensEvensEvensOdds = evensOddsEvensEvensEvensEvensEvensEvensOdds.filter(_._5\
    \ % 2 == 1)\n        val evensOddsEvensEvensEvensEvensEvensEvensEvensOdds = evensOddsEvensEvensEvensEvensEvensEvensEvensEvensOdds.filter(_._6\
    \ % 2 == 0)\n        val evensOddsEvensEvensEvensEvensEvensEvensEvensEvensOdds\
    \ = evensOddsEvensEvensEvensEvensEvensEvensEvensEvensEvensEvensOdds.filter(_._6\
    \ % 2 == 1)\n        val evensOddsEvensEvensEvensEvensEvensEvensEvensEvensEvensEvensOdds\
    \ = ", '        // Your code here', "        val even = lst1.filter(x => x % 2\
    \ == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n      \
    \  if (even > odd) {\n            return \"NO\"\n        } else if (even < odd)\
    \ {\n            return \"YES\"\n        } else {\n            val evenList =\
    \ lst1.filter(x => x % 2 == 0)\n            val oddList = lst2.filter(x => x %\
    \ 2 == 1)\n            val evenList = evenList.sortWith(_ < _)\n            val\
    \ oddList = oddList.sortWith(_ < _)\n            val evenList = evenList.take(even)\n\
    \            val oddList = oddList.take(odd)\n            val newList = evenList\
    \ ++ oddList\n            newList.map(x => x.toLong).mkString(\",\")\n       \
    \ }", "        // Your code goes here\n        val even = lst1.filter(x => x %\
    \ 2 == 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n    \
    \    if (even == odd) {\n            return \"YES\"\n        } else {\n      \
    \      return \"NO\"\n        }", "        val lst1Even = lst1.filter(x => x %\
    \ 2 == 0).toList\n        val lst2Even = lst2.filter(x => x % 2 == 0).toList\n\
    \        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd = lst1Even.intersect(lst2Even)\n\
    \        val lst2EvenAndOdd = lst2Even.intersect(lst1Even)\n        val lst1EvenAndOddAndOdd\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n        val lst2EvenAndOddAndOdd\
    \ = lst2EvenAndOdd.intersect(lst1EvenAndOdd)\n        val lst1EvenAndOddAndOddAndOdd\
    \ = lst1EvenAndOddAndOdd.intersect(lst2EvenAndOddAndOdd)\n        val lst2EvenAndOddAndOddAndOdd\
    \ = lst2EvenAndOddAndOdd.intersect(lst1EvenAndOddAndOdd)\n        val lst1EvenAndOddAndOddAndOddAndOdd\
    \ = lst1EvenAndOddAndOddAndOdd.intersect(lst2EvenAndOddAndOddAndOdd)\n       \
    \ val lst2EvenAndOddAndOddAndOddAndOdd = lst2EvenAndOddAndOddAndOdd.intersect(lst1EvenAndOddAndOddAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOddAndOddAndOdd = lst1EvenAndOddAndOddAndOddAndOdd.intersect(lst2EvenAndOddAndOddAndOddAndOdd)\n\
    \        val lst2EvenAndOddAndOddAndOddAndOddAndOdd = lst2EvenAndOddAndOddAndOddAndOdd.intersect(lst1EvenAndOddAndOddAndOddAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOddAndOddAndOddAndOdd = lst1EvenAndOddAndOddAndOddAndOddAndOdd.intersect(",
  '        // Your code here', "        val lst3 = lst1.toSet ++ lst2.toSet\n    \
    \    if (lst3.size == lst1.size + lst2.size) {\n            val lst4 = lst3.toList\n\
    \            val lst5 = lst4.sortWith(_ < _)\n            val lst6 = lst5.take(lst4.size\
    \ - lst5.size)\n            val lst7 = lst6.filter(_ % 2 == 0)\n            if\
    \ (lst7.size == lst4.size) {\n                return \"YES\"\n            } else\
    \ {\n                return \"NO\"\n            }\n        } else {\n        \
    \    return \"NO\"\n        }", '        // Your code here', "        val even\
    \ = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x => x\
    \ % 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2\
    \ = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd6 = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7\
    \ = evenAndOdd6.filter(x => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n  \
    \      val evenAndOdd11 = evenAndOdd10.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd12 = evenAndOdd11.filter(x => x._1 == x._2)\n        val evenAndOdd13\
    \ = evenAndOdd12.filter(x => x._1 == x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd15 = evenAndOdd14.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd17 = evenAndOdd16.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd18 = evenAndOdd17.filter(x => x._1 == x._2)\n        val evenAndOdd19\
    \ = evenAndOdd18.filter(x => x._1 == x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd21 = evenAndOdd20.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd22 = evenAndOdd21.filter(x => x._", '        //
    Your code here', "        val even = lst1.filter(x => x % 2 == 0).toList\n   \
    \     val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd =\
    \ even.zip(odd)\n        val evenAndOddList = evenAndOdd.toList\n        val evenAndOddList2\
    \ = evenAndOddList.map(x => x._1 + x._2)\n        val evenAndOddList3 = evenAndOddList2.toList\n\
    \        val evenAndOddList4 = evenAndOddList3.map(x => x.toLong)\n        val\
    \ evenAndOddList5 = evenAndOddList4.filter(x => x % 2 == 0).toList\n        val\
    \ evenAndOddList6 = evenAndOddList5.map(x => x.toLong)\n        val evenAndOddList7\
    \ = evenAndOddList6.filter(x => x % 2 == 0).toList\n        val evenAndOddList8\
    \ = evenAndOddList7.map(x => x.toLong)\n        val evenAndOddList9 = evenAndOddList8.filter(x\
    \ => x % 2 == 0).toList\n        val evenAndOddList10 = evenAndOddList9.map(x\
    \ => x.toLong)\n        val evenAndOddList11 = evenAndOddList10.filter(x => x\
    \ % 2 == 0).toList\n        val evenAndOddList12 = evenAndOddList11.map(x => x.toLong)\n\
    \        val evenAndOddList13 = evenAndOddList12.filter(x => x % 2 == 0).toList\n\
    \        val evenAndOddList14 = evenAndOddList13.map(x => x.toLong)\n        val\
    \ evenAndOddList15 = evenAndOddList14.filter(x => x % 2 == 0).toList\n       \
    \ val evenAndOddList16 = evenAndOddList15.map(x => x.toLong)\n        val evenAndOddList17\
    \ = evenAndOddList16.filter(x => x % 2 == 0).toList\n        val evenAndOddList18\
    \ = evenAndOddList17.map(x => x.toLong)\n        val evenAndOddList19 = evenAndOddList18.filter(x\
    \ => x % 2 == 0).toList\n        val evenAndOddList20 = evenAndOddList19.map(x\
    \ => x.toLong)\n        val evenAndOddList21 = evenAndOddList", "        val even\
    \ = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x => x\
    \ % 2 == 1).length\n        if (even > odd) \n            \"NO\"\n        else\
    \ if (even < odd)\n            \"YES\"\n        else\n            exchange(lst1.filter(x\
    \ => x % 2 == 0), lst2.filter(x => x % 2 == 1))", '        // Your code goes here',
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  if (evenAndOdd.isEmpty) \"NO\" else \"YES\"", "        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x => x % 2 == 0).toList\n\
    \        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n\
    \        val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOdd.zip(lst2EvenAndOdd)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst",
  "        // Your code here\n        val lst1Copy = lst1.toList\n        val lst2Copy\
    \ = lst2.toList\n        val lst1Copy2 = lst1Copy.filter(_ % 2 == 0)\n       \
    \ val lst2Copy2 = lst2Copy.filter(_ % 2 == 0)\n        val lst1Copy3 = lst1Copy2.filter(_\
    \ % 3 == 0)\n        val lst2Copy3 = lst2Copy2.filter(_ % 3 == 0)\n        val\
    \ lst1Copy4 = lst1Copy3.filter(_ % 4 == 0)\n        val lst2Copy4 = lst2Copy3.filter(_\
    \ % 4 == 0)\n        val lst1Copy5 = lst1Copy4.filter(_ % 5 == 0)\n        val\
    \ lst2Copy5 = lst2Copy4.filter(_ % 5 == 0)\n        val lst1Copy6 = lst1Copy5.filter(_\
    \ % 6 == 0)\n        val lst2Copy6 = lst2Copy5.filter(_ % 6 == 0)\n        val\
    \ lst1Copy7 = lst1Copy6.filter(_ % 7 == 0)\n        val lst2Copy7 = lst2Copy6.filter(_\
    \ % 7 == 0)\n        val lst1Copy8 = lst1Copy7.filter(_ % 8 == 0)\n        val\
    \ lst2Copy8 = lst2Copy7.filter(_ % 8 == 0)\n        val lst1Copy9 = lst1Copy8.filter(_\
    \ % 9 == 0)\n        val lst2Copy9 = lst2Copy8.filter(_ % 9 == 0)\n        val\
    \ lst1Copy10 = lst1Copy9.filter(_ % 10 == 0)\n        val lst2Copy10 = lst2Copy9.filter(_\
    \ % 10 == 0)\n        val lst1Copy11 = lst1Copy10.filter(_ % 11 == 0)\n      \
    \  val lst2Copy11 = lst2Copy10.filter(_ % 11 == 0)\n        val lst1Copy12 = lst1Copy11.filter(_\
    \ % 12 == 0)\n        val lst2Copy12 = lst2Copy11.filter(_ % 12 == 0)\n      \
    \  val lst1Copy13 = lst1Copy12.filter(_ % 13 == 0)\n        val lst2Copy13 = lst2Copy12.filter(_\
    \ % 13 == 0)\n        val lst1Copy14 = lst1Copy13.filter(_ % 14 == 0)\n      \
    \  val lst2Copy14 = lst2Copy13.filter(_ % 14 == 0)\n        val lst1Copy15 = lst1Copy14.filter(_\
    \ % 15 == 0)\n        val lst2Copy15 = lst2Copy14.filter(_ % 15 == 0)\n      \
    \  val lst1Copy16 = ", "        val lst1Even = lst1.filter(x => x % 2 == 0).length\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0).length\n        if (lst1Even\
    \ == lst2Even) {\n            return \"YES\"\n        } else {\n            return\
    \ \"NO\"\n        }", "        val lst3 = lst1.toList\n        val lst4 = lst2.toList\n\
    \        val lst5 = lst3.toList\n        val lst6 = lst4.toList\n        val lst7\
    \ = lst5.toList\n        val lst8 = lst6.toList\n        val lst9 = lst7.toList\n\
    \        val lst10 = lst8.toList\n        val lst11 = lst9.toList\n        val\
    \ lst12 = lst10.toList\n        val lst13 = lst11.toList\n        val lst14 =\
    \ lst12.toList\n        val lst15 = lst13.toList\n        val lst16 = lst14.toList\n\
    \        val lst17 = lst15.toList\n        val lst18 = lst16.toList\n        val\
    \ lst19 = lst17.toList\n        val lst20 = lst18.toList\n        val lst21 =\
    \ lst19.toList\n        val lst22 = lst20.toList\n        val lst23 = lst21.toList\n\
    \        val lst24 = lst22.toList\n        val lst25 = lst23.toList\n        val\
    \ lst26 = lst24.toList\n        val lst27 = lst25.toList\n        val lst28 =\
    \ lst26.toList\n        val lst29 = lst27.toList\n        val lst30 = lst28.toList\n\
    \        val lst31 = lst29.toList\n        val lst32 = lst30.toList\n        val\
    \ lst33 = lst31.toList\n        val lst34 = lst32.toList\n        val lst35 =\
    \ lst33.toList\n        val lst36 = lst34.toList\n        val lst37 = lst35.toList\n\
    \        val lst38 = lst36.toList\n        val lst39 = lst37.toList\n        val\
    \ lst40 = lst38.toList\n        val lst41 = lst39.toList\n        val lst42 =\
    \ lst40.toList\n        val lst43 = lst41.toList\n        val lst44 = lst42.toList\n\
    \        val lst45 = lst43.toList\n        val lst46 = lst44.toList\n        val\
    \ lst47 = lst45.toList\n        val lst48 = lst46.toList\n        val lst49 =\
    \ lst47.toList\n        val lst50 = lst48.toList\n        val lst51 = lst49.toList\n\
    \        val lst52 = lst50.toList\n        val lst53 = lst51.toList\n        val\
    \ lst54 = lst5", "        // Your code here\n        val lst3 = lst1.filter(_\
    \ % 2 == 0).filter(_ != lst1(0))\n        val lst4 = lst2.filter(_ % 2 == 0).filter(_\
    \ != lst2(0))\n        if (lst3.size == lst4.size) {\n            val lst5 = lst3.zip(lst4).filter(_._1\
    \ == _._2)\n            if (lst5.size == lst1.size) {\n                val lst6\
    \ = lst5.map(x => x._1)\n                val lst7 = lst5.map(x => x._2)\n    \
    \            val lst8 = lst5.filter(_._1 == _._2)\n                if (lst6.size\
    \ == lst7.size) {\n                    val lst9 = lst6.zip(lst7).filter(_._1 ==\
    \ _._2)\n                    if (lst9.size == lst1.size) {\n                 \
    \       val lst10 = lst9.map(x => x._1)\n                        val lst11 = lst9.map(x\
    \ => x._2)\n                        val lst12 = lst9.filter(_._1 == _._2)\n  \
    \                      if (lst10.size == lst11.size) {\n                     \
    \       val lst13 = lst10.zip(lst11).filter(_._1 == _._2)\n                  \
    \          if (lst13.size == lst1.size) {\n                                val\
    \ lst14 = lst13.map(x => x._1)\n                                val lst15 = lst13.map(x\
    \ => x._2)\n                                val lst16 = lst13.filter(_._1 == _._2)\n\
    \                                if (lst14.size == lst15.size) {\n           \
    \                         val lst17 = lst14.zip(lst15).filter(_._1 == _._2)\n\
    \                                    if (lst17.size == lst1.size) {\n        \
    \                                val lst18 = lst17.map(x => x._1)\n          \
    \                              val lst19 = lst17.map(x => x._2)\n            \
    \                            val lst20 = lst17.filter(_._1 == _._2)\n        \
    \                                if (lst18.size == lst19.size) {\n           \
    \                                 val lst21 = lst18.zip(lst19).filter(_._1 ==\
    \ _._2)\n                                            if (lst21.size == lst1.size)\
    \ {\n                                                val lst22 = lst21.map(x =>\
    \ x._1)\n                                                val lst23 = lst21.map(x\
    \ => x._2)\n                                                val lst24 = lst21.filter(_._1\
    \ == _._2)\n                                                if (lst22.size ==\
    \ lst23.size) {\n                                                    val lst25\
    \ = lst22.zip(lst23).filter(_._1 == _._2)\n                                  \
    \                  if (lst25.size == lst1.size) {\n                          \
    \                              val lst26 = lst25.map(x => x._1)\n            \
    \                                            val lst27 = lst25.map(x => x._2)\n\
    \                                                        val lst28 = lst25.filter(_._1\
    \ == _._2)\n                                                        if (lst26.",
  "        // Your code here\n        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n\
    \        val lst5 = lst3.intersect(lst4)\n        if(lst5.isEmpty){\n        \
    \    \"NO\"\n        }else{\n            \"YES\"\n        }", "        val even\
    \ = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 ==\
    \ 0)\n        val evenAndOdd = even.intersect(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndO", "        val even\
    \ = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x => x\
    \ % 2 == 1).toList\n        val evenodd = even.intersect(odd)\n        val eveneven\
    \ = even.intersect(evenodd)\n        if(eveneven.size == even.size)\n        \
    \    \"YES\"\n        else\n            \"NO\"", '        // Your code here',
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddList\
    \ = evenAndOdd.toList\n        val evenAndOddList2 = evenAndOddList.map(x => x._1\
    \ + x._2)\n        val evenAndOddList3 = evenAndOddList2.filter(x => x % 2 ==\
    \ 0)\n        val evenAndOddList4 = evenAndOddList3.map(x => x._1 + x._2)\n  \
    \      val evenAndOddList5 = evenAndOddList4.filter(x => x % 2 == 1)\n       \
    \ val evenAndOddList6 = evenAndOddList5.map(x => x._1 + x._2)\n        val evenAndOddList7\
    \ = evenAndOddList6.filter(x => x % 2 == 0)\n        val evenAndOddList8 = evenAndOddList7.map(x\
    \ => x._1 + x._2)\n        val evenAndOddList9 = evenAndOddList8.filter(x => x\
    \ % 2 == 1)\n        val evenAndOddList10 = evenAndOddList9.map(x => x._1 + x._2)\n\
    \        val evenAndOddList11 = evenAndOddList10.filter(x => x % 2 == 0)\n   \
    \     val evenAndOddList12 = evenAndOddList11.map(x => x._1 + x._2)\n        val\
    \ evenAndOddList13 = evenAndOddList12.filter(x => x % 2 == 1)\n        val evenAndOddList14\
    \ = evenAndOddList13.map(x => x._1 + x._2)\n        val evenAndOddList15 = evenAndOddList14.filter(x\
    \ => x % 2 == 0)\n        val evenAndOddList16 = evenAndOddList15.map(x => x._1\
    \ + x._2)\n        val evenAndOddList17 = evenAndOddList16.filter(x => x % 2 ==\
    \ 1)\n        val evenAndOddList18 = evenAndOddList17.map(x => x._1 + x._2)\n\
    \        val evenAndOddList19 = evenAndOddList18.filter(x => x % 2 == 0)\n   \
    \     val evenAndOddList20 = evenAndOddList19.map(x => x._1 + x._2)\n        val\
    \ evenAndOddList", "        val evens = lst1.filter(_ % 2 == 0).toList\n     \
    \   val odds = lst2.filter(_ % 2 == 1).toList\n        val evensAndOdds = evens\
    \ ++ odds\n        val evensAndOddsSet = evensAndOdds.toSet\n        val evensAndOddsSetSize\
    \ = evensAndOddsSet.size\n        val evensAndOddsSetIsEven = evensAndOddsSet.forall(x\
    \ => x % 2 == 0)\n        val evensAndOddsSetIsOdd = evensAndOddsSet.forall(x\
    \ => x % 2 == 1)\n        val evensAndOddsSetIsEvenAndOdd = evensAndOddsSetIsEven\
    \ && evensAndOddsSetIsOdd\n        val evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsEven\
    \ = evensAndOddsSetIsEven && evensAndOddsSetIsOdd && evensAndOddsSetIsEvenAndOdd\n\
    \        val evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsOdd = evensAndOddsSetIsEven\
    \ && evensAndOddsSetIsOdd && evensAndOddsSetIsEvenAndOdd && evensAndOddsSetIsOdd\n\
    \        val evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsEvenAndOdd = evensAndOddsSetIsEven\
    \ && evensAndOddsSetIsOdd && evensAndOddsSetIsEvenAndOdd && evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsEven\n\
    \        val evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsOddAndOdd = evensAndOddsSetIsEven\
    \ && evensAndOddsSetIsOdd && evensAndOddsSetIsEvenAndOdd && evensAndOddsSetIsOddAndOdd\
    \ && evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsOdd\n        val evensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsEvenAndOddAndEvensAndOddsSetIsOdd\
    \ = evensAndOddsSetIsEven && evensAndOddsSetIsOdd && evensAndOddsSet", "     \
    \   val lst3 = lst1.zip(lst2).filter(_._1 % 2 == 0).map(_._1).distinct\n     \
    \   if (lst3.size == lst1.size) {\n            lst3.toList.mkString(\",\")\n \
    \       } else {\n            \"NO\"\n        }", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 0).toList\n\
    \        val evenAndOdd = even.zip(odd)\n        val evenAndOddAndEven = evenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(x => x._1 == x._2)\n    \
    \    val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x =>\
    \ x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd",
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 0).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndEven = even.intersect(even)\n        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n\
    \        val evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndO",
  "        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n        val lst5\
    \ = lst3.intersect(lst4)\n        val lst6 = lst5.toList\n        val lst7 = lst6.filter(x\
    \ => x % 2 == 0)\n        if (lst7.length == lst1.length) \n            \"YES\"\
    \n        else\n            \"NO\"", "        // Your code goes here\n       \
    \ val even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", '        // Your code
    goes here', "        val lst1Even = lst1.filter(_ % 2 == 0).toList\n        val\
    \ lst2Even = lst2.filter(_ % 2 == 0).toList\n        val lst1Odd = lst1.filter(_\
    \ % 2 != 0).toList\n        val lst2Odd = lst2.filter(_ % 2 != 0).toList\n   \
    \     val lst1EvenAndOdd = lst1Even.intersect(lst2Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst1Odd)\n        val lst1EvenAndOddAndEvenAndOdd = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = lst1EvenAndOddAndEvenAndOddAndEvenAnd", "        // Your code goes here\n\
    \        val lst3 = lst1.toList\n        val lst4 = lst2.toList\n        val lst5\
    \ = lst3.toList\n        val lst6 = lst4.toList\n        val lst7 = lst5.toList\n\
    \        val lst8 = lst6.toList\n        val lst9 = lst7.toList\n        val lst10\
    \ = lst8.toList\n        val lst11 = lst9.toList\n        val lst12 = lst10.toList\n\
    \        val lst13 = lst11.toList\n        val lst14 = lst12.toList\n        val\
    \ lst15 = lst13.toList\n        val lst16 = lst14.toList\n        val lst17 =\
    \ lst15.toList\n        val lst18 = lst16.toList\n        val lst19 = lst17.toList\n\
    \        val lst20 = lst18.toList\n        val lst21 = lst19.toList\n        val\
    \ lst22 = lst20.toList\n        val lst23 = lst21.toList\n        val lst24 =\
    \ lst22.toList\n        val lst25 = lst23.toList\n        val lst26 = lst24.toList\n\
    \        val lst27 = lst25.toList\n        val lst28 = lst26.toList\n        val\
    \ lst29 = lst27.toList\n        val lst30 = lst28.toList\n        val lst31 =\
    \ lst29.toList\n        val lst32 = lst30.toList\n        val lst33 = lst31.toList\n\
    \        val lst34 = lst32.toList\n        val lst35 = lst33.toList\n        val\
    \ lst36 = lst34.toList\n        val lst37 = lst35.toList\n        val lst38 =\
    \ lst36.toList\n        val lst39 = lst37.toList\n        val lst40 = lst38.toList\n\
    \        val lst41 = lst39.toList\n        val lst42 = lst40.toList\n        val\
    \ lst43 = lst41.toList\n        val lst44 = lst42.toList\n        val lst45 =\
    \ lst43.toList\n        val lst46 = lst44.toList\n        val lst47 = lst45.toList\n\
    \        val lst48 = lst46.toList\n        val lst49 = lst47.toList\n        val\
    \ lst50 = lst48.toList\n        val lst51 = lst49.toList\n        val lst52 =\
    \ lst50.toList\n        val lst53 = lst51.toList\n        ", "        val lst1Copy\
    \ = lst1.toList\n        val lst2Copy = lst2.toList\n        val evenList = lst1Copy.filter(_\
    \ % 2 == 0).toList\n        val oddList = lst2Copy.filter(_ % 2 == 1).toList\n\
    \        val evenAndOddList = evenList ++ oddList\n        val evenAndEvenList\
    \ = evenAndOddList.filter(_ % 2 == 0).toList\n        val evenAndOddAndEvenList\
    \ = evenAndEvenList.filter(_ % 2 == 1).toList\n        val evenAndEvenAndOddAndEvenList\
    \ = evenAndEvenAndOddAndEvenList.filter(_ % 2 == 0).toList\n        val evenAndEvenAndOddAndOddAndEvenList\
    \ = evenAndEvenAndOddAndOddAndEvenList.filter(_ % 2 == 1).toList\n        val\
    \ evenAndEvenAndOddAndOddAndOddAndEvenList = evenAndEvenAndOddAndOddAndOddAndEvenList.filter(_\
    \ % 2 == 0).toList\n        val evenAndEvenAndOddAndOddAndOddAndOddAndEvenList\
    \ = evenAndEvenAndOddAndOddAndOddAndOddAndEvenList.filter(_ % 2 == 1).toList\n\
    \        val evenAndEvenAndOddAndOddAndOddAndOddAndOddAndEvenList = evenAndEvenAndOddAndOddAndOddAndOddAndOddAndEvenList.filter(_\
    \ % 2 == 0).toList\n        val evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList\
    \ = evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList.filter(_ % 2 ==\
    \ 1).toList\n        val evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList\
    \ = evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList.filter(_\
    \ % 2 == 0).toList\n        val evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList\
    \ = evenAndEvenAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndOddAndEvenList.filter(_\
    \ % 2 == 1).toList\n        val evenAndEvenAndOddAndOddAndO", '        // Your
    code here', "        // Your code here\n        val lst1Even = lst1.filter(x =>\
    \ x % 2 == 0)\n        val lst2Even = lst2.filter(x => x % 2 == 0)\n        val\
    \ lst1Odd = lst1.filter(x => x % 2 != 0)\n        val lst2Odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenOdd = lst1Even.zip(lst2Even).filter(x =>\
    \ x._1 == x._2)\n        val lst2EvenOdd = lst2Even.zip(lst1Even).filter(x =>\
    \ x._1 == x._2)\n        val lst1EvenOddOdd = lst1EvenOdd.zip(lst2EvenOdd).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenOddOdd = lst2EvenOdd.zip(lst1EvenOdd).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenOddOddOdd = lst1EvenOddOdd.zip(lst2EvenOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenOddOddOdd = lst2EvenOddOdd.zip(lst1EvenOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenOddOddOddOdd = lst1EvenOddOddOdd.zip(lst2EvenOddOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenOddOddOddOdd = lst2EvenOddOddOdd.zip(lst1EvenOddOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenOddOddOddOddOdd = lst1EvenOddOddOddOdd.zip(lst2EvenOddOddOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst2EvenOddOddOddOddOdd = lst2EvenOddOddOddOdd.zip(lst1EvenOddOddOddOdd).filter(x\
    \ => x._1 == x._2)\n        val lst1EvenOddOddOddOddOddOdd = lst1EvenOddOddOddOddOdd.zip(lst2EvenOddOddOddOddOdd).filter(x ",
  "        // Your code goes here\n        val lst3 = lst1.filter(_ % 2 == 0)\n  \
    \      val lst4 = lst2.filter(_ % 2 == 0)\n        val lst5 = lst3.filter(_ <\
    \ lst4.max)\n        val lst6 = lst4.filter(_ < lst5.max)\n        val lst7 =\
    \ lst5.filter(_ < lst6.max)\n        val lst8 = lst6.filter(_ < lst7.max)\n  \
    \      val lst9 = lst7.filter(_ < lst8.max)\n        val lst10 = lst8.filter(_\
    \ < lst9.max)\n        val lst11 = lst9.filter(_ < lst10.max)\n        val lst12\
    \ = lst10.filter(_ < lst11.max)\n        val lst13 = lst11.filter(_ < lst12.max)\n\
    \        val lst14 = lst12.filter(_ < lst13.max)\n        val lst15 = lst13.filter(_\
    \ < lst14.max)\n        val lst16 = lst14.filter(_ < lst15.max)\n        val lst17\
    \ = lst15.filter(_ < lst16.max)\n        val lst18 = lst16.filter(_ < lst17.max)\n\
    \        val lst19 = lst17.filter(_ < lst18.max)\n        val lst20 = lst18.filter(_\
    \ < lst19.max)\n        val lst21 = lst19.filter(_ < lst20.max)\n        val lst22\
    \ = lst20.filter(_ < lst21.max)\n        val lst23 = lst21.filter(_ < lst22.max)\n\
    \        val lst24 = lst22.filter(_ < lst23.max)\n        val lst25 = lst23.filter(_\
    \ < lst24.max)\n        val lst26 = lst24.filter(_ < lst25.max)\n        val lst27\
    \ = lst25.filter(_ < lst26.max)\n        val lst28 = lst26.filter(_ < lst27.max)\n\
    \        val lst29 = lst27.filter(_ < lst28.max)\n        val lst30 = lst28.filter(_\
    \ < lst29.max)\n        val lst31 = lst29.filter(_ < lst30.max)\n        val lst32\
    \ = lst30.filter(_ < lst31.max)\n        val lst33 = lst31.filter(_ < lst32.max)\n\
    \        val lst34 = lst32.filter(_ < lst33.max)\n        val lst35 = lst33.filter(_\
    \ < lst34.max)\n        val lst36 = lst34.filter(_ < lst35.max)\n        val lst37\
    \ = lst35.filter(_ < lst36.max)\n        val lst38 = lst36.filter(_ < lst37.max)\n\
    \        val lst39 = lst37.filter(_ < lst38.max)", "        // Your code goes\
    \ here\n        val lst1Copy = lst1.toList\n        val lst2Copy = lst2.toList\n\
    \        val lst1Copy2 = lst1Copy.filter(x => x % 2 == 0)\n        val lst2Copy2\
    \ = lst2Copy.filter(x => x % 2 == 0)\n        val lst1Copy3 = lst1Copy2.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy3 = lst2Copy2.filter(x => x % 2 == 0)\n\
    \        val lst1Copy4 = lst1Copy3.filter(x => x % 2 == 0)\n        val lst2Copy4\
    \ = lst2Copy3.filter(x => x % 2 == 0)\n        val lst1Copy5 = lst1Copy4.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy5 = lst2Copy4.filter(x => x % 2 == 0)\n\
    \        val lst1Copy6 = lst1Copy5.filter(x => x % 2 == 0)\n        val lst2Copy6\
    \ = lst2Copy5.filter(x => x % 2 == 0)\n        val lst1Copy7 = lst1Copy6.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy7 = lst2Copy6.filter(x => x % 2 == 0)\n\
    \        val lst1Copy8 = lst1Copy7.filter(x => x % 2 == 0)\n        val lst2Copy8\
    \ = lst2Copy7.filter(x => x % 2 == 0)\n        val lst1Copy9 = lst1Copy8.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy9 = lst2Copy8.filter(x => x % 2 == 0)\n\
    \        val lst1Copy10 = lst1Copy9.filter(x => x % 2 == 0)\n        val lst2Copy10\
    \ = lst2Copy9.filter(x => x % 2 == 0)\n        val lst1Copy11 = lst1Copy10.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy11 = lst2Copy10.filter(x => x % 2 == 0)\n\
    \        val lst1Copy12 = lst1Copy11.filter(x => x % 2 == 0)\n        val lst2Copy12\
    \ = lst2Copy11.filter(x => x % 2 == 0)\n        val lst1Copy13 = lst1Copy12.filter(x\
    \ => x % 2 == 0)\n        val lst2Copy13 = lst2Copy12.filter(x => x % 2 == 0)\n\
    \        val lst1Copy14 = lst1Copy13.filter(x => x % 2 == 0)\n        val lst2Copy14\
    \ = lst2Copy13.filter(x => x % 2 == 0)\n        val lst1Copy15 = lst1Copy14.filter(",
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.zip(odd).filter(x => x._1\
    \ == x._2)\n        val evenAndOddLength = evenAndOdd.length\n        if (evenAndOddLength\
    \ == 0) {\n            \"NO\"\n        } else if (evenAndOddLength == even.length)\
    \ {\n            \"YES\"\n        } else {\n            \"NO\"\n        }", " \
    \       val lst1Len = lst1.length\n        val lst2Len = lst2.length\n       \
    \ val evenList = lst1.filter(x => x % 2 == 0)\n        val oddList = lst1.filter(x\
    \ => x % 2 != 0)\n        val evenListLen = evenList.length\n        val oddListLen\
    \ = oddList.length\n        val evenListSet = evenList.map(x => x.toLong)\n  \
    \      val oddListSet = oddList.map(x => x.toLong)\n        val evenListSetLen\
    \ = evenListSet.length\n        val oddListSetLen = oddListSet.length\n      \
    \  val evenListSetSet = evenListSet.intersect(oddListSet)\n        val oddListSetSetLen\
    \ = oddListSetSet.length\n        val evenListSetSetLen = evenListSetSetLen\n\
    \        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n   \
    \     val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen =\
    \ evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSetLen\n        val evenListSetSetSet = evenListSetSet.intersect(oddListSetSet)\n\
    \        val oddListSetSetLen = oddListSetSetLen\n        val evenListSetSetLen\
    \ = evenListSetSet", "        // Your code goes here\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        val lst1Set2 = lst1Set.intersect(lst2Set)\n\
    \        if(lst1Set2.isEmpty){\n            return \"NO\"\n        }else{\n  \
    \          return \"YES\"\n        }", "        val even = lst1.filter(x => x\
    \ % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 0)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        if (evenAndOdd.isEmpty) \"NO\" else \"YES\"",
  '        // Your code goes here', "        val even = lst1.filter(x => x % 2 ==\
    \ 0).length\n        val odd = lst2.filter(x => x % 2 == 1).length\n        if\
    \ (even == odd) {\n            if (lst1.length == lst2.length) {\n           \
    \     val even = lst1.filter(x => x % 2 == 0).length\n                if (even\
    \ == lst1.length) {\n                    return \"YES\"\n                }\n \
    \           }\n        }\n        return \"NO\"", "        val lst3 = lst1.toList\n\
    \        val lst4 = lst2.toList\n        val lst5 = lst3.filter(_%2==0)\n    \
    \    val lst6 = lst4.filter(_%2==0)\n        val lst7 = lst5.filter(_%2==0)\n\
    \        val lst8 = lst6.filter(_%2==0)\n        val lst9 = lst7.filter(_%2==0)\n\
    \        val lst10 = lst8.filter(_%2==0)\n        val lst11 = lst9.filter(_%2==0)\n\
    \        val lst12 = lst10.filter(_%2==0)\n        val lst13 = lst11.filter(_%2==0)\n\
    \        val lst14 = lst12.filter(_%2==0)\n        val lst15 = lst13.filter(_%2==0)\n\
    \        val lst16 = lst14.filter(_%2==0)\n        val lst17 = lst15.filter(_%2==0)\n\
    \        val lst18 = lst16.filter(_%2==0)\n        val lst19 = lst17.filter(_%2==0)\n\
    \        val lst20 = lst18.filter(_%2==0)\n        val lst21 = lst19.filter(_%2==0)\n\
    \        val lst22 = lst20.filter(_%2==0)\n        val lst23 = lst21.filter(_%2==0)\n\
    \        val lst24 = lst22.filter(_%2==0)\n        val lst25 = lst23.filter(_%2==0)\n\
    \        val lst26 = lst24.filter(_%2==0)\n        val lst27 = lst25.filter(_%2==0)\n\
    \        val lst28 = lst26.filter(_%2==0)\n        val lst29 = lst27.filter(_%2==0)\n\
    \        val lst30 = lst28.filter(_%2==0)\n        val lst31 = lst29.filter(_%2==0)\n\
    \        val lst32 = lst30.filter(_%2==0)\n        val lst33 = lst31.filter(_%2==0)\n\
    \        val lst34 = lst32.filter(_%2==0)\n        val lst35 = lst33.filter(_%2==0)\n\
    \        val lst36 = lst34.filter(_%2==0)\n        val lst37 = lst35.filter(_%2==0)\n\
    \        val lst38 = lst36.filter(_%2==0)\n        val lst39 = lst37.filter(_%2==0)\n\
    \        val lst40 = lst38.filter(_%2", "        val even = lst1.filter(_ % 2\
    \ == 0).size\n        val odd = lst2.filter(_ % 2 == 1).size\n        if (even\
    \ == odd) {\n            if (lst1.size == lst2.size) {\n                val even\
    \ = lst1.filter(_ % 2 == 0).size\n                if (even > 0) \"YES\" else \"\
    NO\"\n            } else \"NO\"\n        } else \"NO\"", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenAndOdd = even ++ odd\n        val evenAndOddAndEven = evenAndOdd\
    \ ++ even\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven ++ odd\n  \
    \      val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd ++ evenAndOdd\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven\
    \ ++ odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ ++ evenAndOddAndEvenAndOdd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEven ++ odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd ++ evenAndOddAndEvenAndOddAndEvenAndOdd\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven ++ odd\n        val\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ ++ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ ++ odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAnd", "        val evens = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odds = lst2.filter(x => x % 2 == 1).toList\n        val evenOdds\
    \ = evens.zip(odds)\n        val evenOddsSet = evenOdds.toSet\n        val evenOddsSetSize\
    \ = evenOddsSet.size\n        val evenOddsSet2 = evenOddsSet.filter(_ % 2 == 0)\n\
    \        val evenOddsSet3 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet4\
    \ = evenOddsSet.filter(_ % 2 == 0)\n        val evenOddsSet5 = evenOddsSet.filter(_\
    \ % 2 == 1)\n        val evenOddsSet6 = evenOddsSet.filter(_ % 2 == 0)\n     \
    \   val evenOddsSet7 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet8\
    \ = evenOddsSet.filter(_ % 2 == 0)\n        val evenOddsSet9 = evenOddsSet.filter(_\
    \ % 2 == 1)\n        val evenOddsSet10 = evenOddsSet.filter(_ % 2 == 0)\n    \
    \    val evenOddsSet11 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet12\
    \ = evenOddsSet.filter(_ % 2 == 0)\n        val evenOddsSet13 = evenOddsSet.filter(_\
    \ % 2 == 1)\n        val evenOddsSet14 = evenOddsSet.filter(_ % 2 == 0)\n    \
    \    val evenOddsSet15 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet16\
    \ = evenOddsSet.filter(_ % 2 == 0)\n        val evenOddsSet17 = evenOddsSet.filter(_\
    \ % 2 == 1)\n        val evenOddsSet18 = evenOddsSet.filter(_ % 2 == 0)\n    \
    \    val evenOddsSet19 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet20\
    \ = evenOddsSet.filter(_ % 2 == 0)\n        val evenOddsSet21 = evenOddsSet.filter(_\
    \ % 2 == 1)\n        val evenOddsSet22 = evenOddsSet.filter(_ % 2 == 0)\n    \
    \    val evenOddsSet23 = evenOddsSet.filter(_ % 2 == 1)\n        val evenOddsSet24\
    \ = ", "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd\
    \ = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n\
    \        val evenAndOddList = evenAndOdd.toList\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val evenAndOddListLength\
    \ = evenAndOddList.size\n        val evenAndOddListLength = evenAndOddList.size\n\
    \        val evenAndOddListLength = evenAndOddList.size\n        val ", '        //
    Your code goes here', "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val exchanged\
    \ = even.zip(odd).filter(x => x._1 == x._2).map(_._1)\n        if(exchanged.isEmpty)\
    \ \"\"\n        else exchanged.size == even.size ? \"YES\" : \"NO\"", '        //
    Your code here', '        // Your code here', "        val lst1Size = lst1.size\n\
    \        val lst2Size = lst2.size\n        val evenList = lst1.filter(x => x %\
    \ 2 == 0).toList\n        val oddList = lst1.filter(x => x % 2 != 0).toList\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val oddListSize = oddList.size\n\
    \        val evenListSize = evenList.size\n        val ", '        // TODO: Write
    your code here', "        val even = lst1.filter(x => x % 2 == 0).toList\n   \
    \     val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenOdd = even.zip(odd).filter(x\
    \ => x._1 == x._2)\n        val evenOddList = evenOdd.map(x => x._1)\n       \
    \ val evenOddList2 = evenOdd.map(x => x._2)\n        val evenOddList3 = evenOdd.map(x\
    \ => x._1)\n        val evenOddList4 = evenOdd.map(x => x._2)\n        val evenOddList5\
    \ = evenOdd.map(x => x._1)\n        val evenOddList6 = evenOdd.map(x => x._2)\n\
    \        val evenOddList7 = evenOdd.map(x => x._1)\n        val evenOddList8 =\
    \ evenOdd.map(x => x._2)\n        val evenOddList9 = evenOdd.map(x => x._1)\n\
    \        val evenOddList10 = evenOdd.map(x => x._2)\n        val evenOddList11\
    \ = evenOdd.map(x => x._1)\n        val evenOddList12 = evenOdd.map(x => x._2)\n\
    \        val evenOddList13 = evenOdd.map(x => x._1)\n        val evenOddList14\
    \ = evenOdd.map(x => x._2)\n        val evenOddList15 = evenOdd.map(x => x._1)\n\
    \        val evenOddList16 = evenOdd.map(x => x._2)\n        val evenOddList17\
    \ = evenOdd.map(x => x._1)\n        val evenOddList18 = evenOdd.map(x => x._2)\n\
    \        val evenOddList19 = evenOdd.map(x => x._1)\n        val evenOddList20\
    \ = evenOdd.map(x => x._2)\n        val evenOddList21 = evenOdd.map(x => x._1)\n\
    \        val evenOddList22 = evenOdd.map(x => x._2)\n        val evenOddList23\
    \ = evenOdd.map(x => x._1)\n        val evenOddList24 = evenOdd.map(x => x._2)\n\
    \        val evenOddList25 = evenOdd.map(x => x.", '        // Your code goes
    here', "        val lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val\
    \ lst2Even = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x\
    \ => x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n\
    \        val lst1EvenAndOdd = lst1Even.intersect(lst2Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst1Odd)\n        val lst1EvenAndOddAndEven = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst2EvenAndOddAndEven = lst2EvenAndOdd.intersect(lst1EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEven.intersect(lst2EvenAndOddAndEven)\n\
    \        val lst2EvenAndOddAndEvenAndOdd = lst2EvenAndOddAndEven.intersect(lst1EvenAndOddAndEven)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEven = lst1EvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOddAndEvenAndOdd)\n\
    \        val lst2EvenAndOddAndEvenAndOddAndEven = lst2EvenAndOddAndEvenAndOdd.intersect(lst1EvenAndOddAndEvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEvenAndOddAndEven.intersect(lst2EvenAndOddAndEvenAndOddAndEven)\n\
    \        val lst2EvenAndOddAndEvenAndOddAndEvenAndOdd = lst2EvenAndOddAndEvenAndOddAndEven.intersect(lst1EvenAndOddAndEvenAndOddAndEven)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEven = lst1EvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val lst2EvenAndOddAndEvenAndOdd", '        // Your code here', "    \
    \    val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val exchanged = even.zip(odd).filter(_._1 ==\
    \ _._2).map(_._1).toList\n        if(exchanged.isEmpty) \"NO\" else \"YES\"",
  "        val lst1Len = lst1.length\n        val lst2Len = lst2.length\n        val\
    \ evenList = lst1.filter(_ % 2 == 0)\n        val oddList = lst1.filter(_ % 2\
    \ != 0)\n        val evenListLen = evenList.length\n        val oddListLen = oddList.length\n\
    \        val exchangeList = mutable.ListBuffer[Long]()\n        val exchangeListLen\
    \ = mutable.ListBuffer[Long]()\n        val exchangeList2 = mutable.ListBuffer[Long]()\n\
    \        val exchangeList2Len = mutable.ListBuffer[Long]()\n        val evenList2\
    \ = evenList.filter(_ % 2 == 0)\n        val oddList2 = oddList.filter(_ % 2 !=\
    \ 0)\n        val evenList2Len = evenList2.length\n        val oddList2Len = oddList2.length\n\
    \        val exchangeList3 = mutable.ListBuffer[Long]()\n        val exchangeList3Len\
    \ = mutable.ListBuffer[Long]()\n        val exchangeList4 = mutable.ListBuffer[Long]()\n\
    \        val exchangeList4Len = mutable.ListBuffer[Long]()\n        val evenList3\
    \ = evenList.filter(_ % 2 != 0)\n        val oddList3 = oddList.filter(_ % 2 ==\
    \ 0)\n        val evenList3Len = evenList3.length\n        val oddList3Len = oddList3.length\n\
    \        val exchangeList5 = mutable.ListBuffer[Long]()\n        val exchangeList5Len\
    \ = mutable.ListBuffer[Long]()\n        val evenList4 = evenList.filter(_ % 2\
    \ != 0)\n        val oddList4 = oddList.filter(_ % 2 != 0)\n        val evenList4Len\
    \ = evenList4.length\n        val oddList4Len = oddList4.length\n        val exchangeList6\
    \ = mutable.ListBuffer[Long]()\n        val exchangeList6Len = mutable.ListBuffer[Long]()\n\
    \        val evenList5 = evenList.filter(_ % 2 != 0)\n        val oddList5 = oddList.filter(_\
    \ % 2 != 0)\n        val evenList5Len = evenList5.length\n        val oddList5Len\
    \ = oddList5.length\n        val exchangeList7 = mutable.ListBuffer[Long]()\n\
    \        val exchangeList7Len = mutable.ListBuffer[Long]()\n        val evenList6\
    \ = evenList.filter(_ % 2 != 0)\n        val oddList6 = oddList.filter(_ % 2 !=\
    \ 0)\n        val evenList6", "        val lst1Copy = lst1.toList\n        val\
    \ lst2Copy = lst2.toList\n        val lst1Copy2 = lst1Copy.zip(lst2Copy)\n   \
    \     val lst1Copy3 = lst1Copy2.filter(_._1 == 0)\n        val lst1Copy4 = lst1Copy3.map(_._2)\n\
    \        val lst1Copy5 = lst1Copy4.filter(_ % 2 == 0)\n        val lst1Copy6 =\
    \ lst1Copy5.map(_ / 2)\n        val lst1Copy7 = lst1Copy6.filter(_ % 2 == 0)\n\
    \        val lst1Copy8 = lst1Copy7.map(_ / 2)\n        val lst1Copy9 = lst1Copy8.filter(_\
    \ % 2 == 0)\n        val lst1Copy10 = lst1Copy9.map(_ / 2)\n        val lst1Copy11\
    \ = lst1Copy10.filter(_ % 2 == 0)\n        val lst1Copy12 = lst1Copy11.map(_ /\
    \ 2)\n        val lst1Copy13 = lst1Copy12.filter(_ % 2 == 0)\n        val lst1Copy14\
    \ = lst1Copy13.map(_ / 2)\n        val lst1Copy15 = lst1Copy14.filter(_ % 2 ==\
    \ 0)\n        val lst1Copy16 = lst1Copy15.map(_ / 2)\n        val lst1Copy17 =\
    \ lst1Copy16.filter(_ % 2 == 0)\n        val lst1Copy18 = lst1Copy17.map(_ / 2)\n\
    \        val lst1Copy19 = lst1Copy18.filter(_ % 2 == 0)\n        val lst1Copy20\
    \ = lst1Copy19.map(_ / 2)\n        val lst1Copy21 = lst1Copy20.filter(_ % 2 ==\
    \ 0)\n        val lst1Copy22 = lst1Copy21.map(_ / 2)\n        val lst1Copy23 =\
    \ lst1Copy22.filter(_ % 2 == 0)\n        val lst1Copy24 = lst1Copy23.map(_ / 2)\n\
    \        val lst1Copy25 = lst1Copy24.filter(_ % 2 == 0)\n        val lst1Copy26\
    \ = lst1Copy25.map(_ / 2)\n        val lst1Copy27 = lst1Copy26.filter(_ % 2 ==\
    \ 0)\n        val lst1Copy28 = lst1Copy27.map(_ / 2)\n        val lst1Copy29 =\
    \ lst1Copy28.filter(_ % 2 == 0)\n        val lst1Copy30 = lst1Copy29.map(_ / 2)\n\
    \        val lst1Copy31 = lst1Copy30.filter(_ % 2 == 0)\n        val lst1Copy",
  "        val lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x =>\
    \ x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n\
    \        val lst1EvenAndOdd = lst1Even.intersect(lst2Even)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst1Even)\n        val lst1EvenAndOddAndOdd = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst2EvenAndOddAndOdd = lst2EvenAndOdd.intersect(lst1EvenAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOdd = lst1EvenAndOddAndOdd.intersect(lst2EvenAndOddAndOdd)\n\
    \        val lst2EvenAndOddAndOddAndOdd = lst2EvenAndOddAndOdd.intersect(lst1EvenAndOddAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOddAndOdd = lst1EvenAndOddAndOddAndOdd.intersect(lst2EvenAndOddAndOddAndOdd)\n\
    \        val lst2EvenAndOddAndOddAndOddAndOdd = lst2EvenAndOddAndOddAndOdd.intersect(lst1EvenAndOddAndOddAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOddAndOddAndOdd = lst1EvenAndOddAndOddAndOddAndOdd.intersect(lst2EvenAndOddAndOddAndOddAndOdd)\n\
    \        val lst2EvenAndOddAndOddAndOddAndOddAndOdd = lst2EvenAndOddAndOddAndOddAndOdd.intersect(lst1EvenAndOddAndOddAndOddAndOdd)\n\
    \        val lst1EvenAndOddAndOddAndOddAndOddAndOddAndOdd = lst1EvenAndOddAndOddAndOddAndOddAndOdd.intersect(",
  "        val lst1Even = lst1.filter(x => x % 2 == 0)\n        val lst2Even = lst2.filter(x\
    \ => x % 2 == 0)\n        val lst1EvenToList = lst1Even.map(x => x.toLong)\n \
    \       val lst2EvenToList = lst2Even.map(x => x.toLong)\n        val lst1EvenToList2\
    \ = lst1EvenToList.zip(lst2EvenToList).map(x => x._1.toLong * x._2.toLong)\n \
    \       val lst2EvenToList2 = lst2EvenToList.zip(lst1EvenToList).map(x => x._1.toLong\
    \ * x._2.toLong)\n        val lst1EvenToList3 = lst1EvenToList2.zip(lst2EvenToList2).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst2EvenToList3 = lst2EvenToList2.zip(lst1EvenToList2).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst1EvenToList4 = lst1EvenToList3.zip(lst2EvenToList3).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst2EvenToList4 = lst2EvenToList3.zip(lst1EvenToList3).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst1EvenToList5 = lst1EvenToList4.zip(lst2EvenToList4).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst2EvenToList5 = lst2EvenToList4.zip(lst1EvenToList4).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst1EvenToList6 = lst1EvenToList5.zip(lst2EvenToList5).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst2EvenToList6 = lst2EvenToList5.zip(lst1EvenToList5).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst1EvenToList7 = lst1EvenToList6.zip(lst2EvenToList6).map(x\
    \ => x._1.toLong * x._2.toLong)\n        val lst2EvenToList7 = lst2EvenToList6.zip(lst1EvenToList6).map(x\
    \ => x._1.toLong * x.", "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd\
    \ = even.zip(odd).filter(x => x._1 == x._2)\n        val evenAndOddList = evenAndOdd.toList\n\
    \        val evenAndOddListLength = evenAndOddList.length\n        if (evenAndOddListLength\
    \ == 0) {\n            \"NO\"\n        } else if (evenAndOddListLength == 1) {\n\
    \            if (evenAndOddList(0) == evenAndOddList(1))\n                \"YES\"\
    \n            else\n                \"NO\"\n        } else {\n            if (evenAndOddList(0)\
    \ == evenAndOddList(1))\n                \"NO\"\n            else\n          \
    \      \"YES\"\n        }", "        val even = lst1.filter(x => x % 2 == 0).length\n\
    \        val odd = lst2.filter(x => x % 2 == 1).length\n        if (even == odd)\
    \ {\n            if (lst1.isEmpty) lst2.toString.toUpperCase\n            else\
    \ lst1.toString.toUpperCase\n        } else {\n            if (lst1.isEmpty) lst2.toString.toUpperCase\n\
    \            else lst1.toString.toUpperCase\n        }", "        val even = lst1.filter(_\
    \ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n        val evenAndOdd\
    \ = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n    \
    \    val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val evenAndOddAndOdd\
    \ = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven",
  "        val even = lst1.filter(_ % 2 == 0).length\n        val odd = lst2.filter(_\
    \ % 2 == 1).length\n        if (even > odd) {\n            return \"NO\"\n   \
    \     }\n        else {\n            val evenList = lst1.filter(_ % 2 == 0).map(x\
    \ => x -> 0)\n            val oddList = lst2.filter(_ % 2 == 1).map(x => x ->\
    \ 1)\n            val evenList2 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n \
    \           val oddList2 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n        \
    \    val evenList3 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n            val\
    \ oddList3 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n            val evenList4\
    \ = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n            val oddList4 = lst2.filter(_\
    \ % 2 == 1).map(x => x -> 1)\n            val evenList5 = lst1.filter(_ % 2 ==\
    \ 0).map(x => x -> 0)\n            val oddList5 = lst2.filter(_ % 2 == 1).map(x\
    \ => x -> 1)\n            val evenList6 = lst1.filter(_ % 2 == 0).map(x => x ->\
    \ 0)\n            val oddList6 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n  \
    \          val evenList7 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n        \
    \    val oddList7 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n            val\
    \ evenList8 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n            val oddList8\
    \ = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n            val evenList9 = lst1.filter(_\
    \ % 2 == 0).map(x => x -> 0)\n            val oddList9 = lst2.filter(_ % 2 ==\
    \ 1).map(x => x -> 1)\n            val evenList10 = lst1.filter(_ % 2 == 0).map(x\
    \ => x -> 0)\n            val oddList10 = lst2.filter(_ % 2 == 1).map(x => x ->\
    \ 1)\n            val evenList11 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n\
    \            val oddList11 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n      \
    \      val evenList12 = lst1.filter(_ % 2 == 0).map(x => x -> 0)\n           \
    \ val oddList12 = lst2.filter(_ % 2 == 1).map(x => x -> 1)\n            val evenList13\
    \ = lst1.filter(_ % 2 == 0).map(x => x -> ", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenOdd = even.zip(odd)\n        val evenOddList = evenOdd.toList\n\
    \        val evenOddList2 = evenOddList.map(x => x._1.toLong * x._2.toLong)\n\
    \        val evenOddList3 = evenOddList2.filter(x => x % 2 == 0).toList\n    \
    \    val evenOddList4 = evenOddList3.map(x => x.toLong)\n        val evenOddList5\
    \ = evenOddList4.filter(x => x % 2 == 0).toList\n        val evenOddList6 = evenOddList5.map(x\
    \ => x.toLong)\n        val evenOddList7 = evenOddList6.filter(x => x % 2 == 0).toList\n\
    \        val evenOddList8 = evenOddList7.map(x => x.toLong)\n        val evenOddList9\
    \ = evenOddList8.filter(x => x % 2 == 0).toList\n        val evenOddList10 = evenOddList9.map(x\
    \ => x.toLong)\n        val evenOddList11 = evenOddList10.filter(x => x % 2 ==\
    \ 0).toList\n        val evenOddList12 = evenOddList11.map(x => x.toLong)\n  \
    \      val evenOddList13 = evenOddList12.filter(x => x % 2 == 0).toList\n    \
    \    val evenOddList14 = evenOddList13.map(x => x.toLong)\n        val evenOddList15\
    \ = evenOddList14.filter(x => x % 2 == 0).toList\n        val evenOddList16 =\
    \ evenOddList15.map(x => x.toLong)\n        val evenOddList17 = evenOddList16.filter(x\
    \ => x % 2 == 0).toList\n        val evenOddList18 = evenOddList17.map(x => x.toLong)\n\
    \        val evenOddList19 = evenOddList18.filter(x => x % 2 == 0).toList\n  \
    \      val evenOddList20 = evenOddList19.map(x => x.toLong)\n        val evenOddList21\
    \ = evenOddList20.filter(x => x % 2 == 0).toList\n        val evenOddList22 =\
    \ evenOddList21.map(x => x.toLong", '        // Your code here', "        val\
    \ even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndOddAndEven = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n       \
    \ val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven",
  "        val even = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_\
    \ % 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n        val evenAndOddAndEven\
    \ = evenAndOdd.filter(_._1 == _._2)\n        val evenAndOddAndEvenAndOdd = evenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOdd.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(_._1\
    \ == _._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEven", "        // Your code here\n        val lst1Even\
    \ = lst1.filter(x => x % 2 == 0).map(x => x.toLong).toList\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).map(x => x.toLong).toList\n        val lst1Odd\
    \ = lst1.filter(x => x % 2 != 0).map(x => x.toLong).toList\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).map(x => x.toLong).toList\n        val lst1EvenAndOdd\
    \ = lst1Even.intersect(lst2Odd)\n        val lst2EvenAndOdd = lst2Even.intersect(lst1Odd)\n\
    \        val lst1EvenAndOddAndNotBoth = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n\
    \        if (lst1EvenAndOddAndNotBoth.isEmpty) {\n            return \"NO\"\n\
    \        } else {\n            return \"YES\"\n        }", '        // Your code
    here', "        // Your code here\n        val lst3 = lst1.toSet\n        val\
    \ lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n        val lst6\
    \ = lst5.filter(x => x % 2 == 0)\n        if (lst6.size == lst1.size) {\n    \
    \        return \"YES\"\n        } else {\n            return \"NO\"\n       \
    \ }", '        // Your code here', "        val even = lst1.filter(_ % 2 == 0).toList\n\
    \        val odd = lst2.filter(_ % 2 != 0).toList\n        val evenAndOdd = even.intersect(odd)\n\
    \        if (evenAndOdd.isEmpty) \"NO\" else \"YES\"", "        val even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2 = evenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n        val evenAndOdd6\
    \ = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7 = evenAndOdd6.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n        val evenAndOdd11\
    \ = evenAndOdd10.filter(x => x._1 == x._2)\n        val evenAndOdd12 = evenAndOdd11.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd13 = evenAndOdd12.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd15 = evenAndOdd14.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n        val evenAndOdd17\
    \ = evenAndOdd16.filter(x => x._1 == x._2)\n        val evenAndOdd18 = evenAndOdd17.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd19 = evenAndOdd18.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd21 = evenAndOdd20.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd22 = evenAndOdd21.filter(x => x._", "        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0).sorted\n        val lst2Even = lst2.filter(x => x % 2 == 0).sorted\n\
    \        val lst1Odd = lst1.filter(x => x % 2 != 0).sorted\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).sorted\n        val lst1EvenOdd = lst1Even.zip(lst1Odd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst2EvenOdd = lst2Even.zip(lst2Odd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst1EvenOddOdd = lst1EvenOdd.zip(lst2EvenOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst2EvenOddOdd = lst2EvenOdd.zip(lst1EvenOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst1EvenOddOddOdd = lst1EvenOddOdd.zip(lst2EvenOddOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst2EvenOddOddOdd = lst2EvenOddOdd.zip(lst1EvenOddOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst1EvenOddOddOddOdd = lst1EvenOddOddOdd.zip(lst2EvenOddOddOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst2EvenOddOddOddOdd = lst2EvenOddOddOdd.zip(lst1EvenOddOddOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst1EvenOddOddOddOddOdd = lst1EvenOddOddOddOdd.zip(lst2EvenOddOddOddOdd).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n        val lst2EvenOddOddOddOddOdd = lst2EvenOddOddOddOdd.zip(lst1EvenOddOddOddOdd).filter(x\
    \ => x.", "        val evens = lst1.filter(x => x % 2 == 0).toList\n        val\
    \ odds = lst2.filter(x => x % 2 == 1).toList\n        val evensOdds = evens ++\
    \ odds\n        val evensOddsEvens = evensOdds.filter(x => x % 2 == 0).toList\n\
    \        val evensOddsOdds = evensOdds.filter(x => x % 2 == 1).toList\n      \
    \  val evensOddsEvensOdds = evensOddsEvens ++ evensOddsOdds\n        val evensOddsEvensOddsEvens\
    \ = evensOddsEvensOdds ++ evensOddsEvensOddsOdds\n        val evensOddsEvensOddsEvensEvens\
    \ = evensOddsEvensOddsEvensEvens ++ evensOddsEvensOddsEvensOddsEvens\n       \
    \ val evensOddsEvensOddsEvensEvensEvens = evensOddsEvensOddsEvensEvensEvens ++\
    \ evensOddsEvensOddsEvensOddsEvensEvens\n        val evensOddsEvensOddsEvensEvensEvensEvens\
    \ = evensOddsEvensOddsEvensEvensEvensEvens ++ evensOddsEvensOddsEvensOddsEvensEvensEvens\n\
    \        val evensOddsEvensOddsEvensEvensEvensEvensEvens = evensOddsEvensOddsEvensEvensEvensEvensEvens\
    \ ++ evensOddsEvensOddsEvensOddsEvensEvensEvensEvens\n        val evensOddsEvensOddsEvensEvensEvensEvensEvensEvens\
    \ = evensOddsEvensOddsEvensEvensEvensEvensEvensEvensEvens ++ evensOddsEvensOddsEvensOddsEvensEvensEvensEvensEvens\n\
    \        val evensOddsEvensOddsEvensEvensEvensEvensEvensEvensEvens = evensOddsEvensOddsEvensEvensEvensEven",
  "        // Your code here\n        val lst3 = lst1.filter(_ % 2 == 0).zip(lst2.filter(_\
    \ % 2 == 0)).filter(_._1 == _._1).map(_._2).mkString(\",\")\n        if(lst3.isEmpty)\
    \ \"\"\n        else lst3.split(\",\").toList.map(_.toLong).forall(x => lst1.contains(x)).toString\
    \ + \"YES\"", '        // Your code here', "        // Your code here\n      \
    \  val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n\
    \        val lst6 = lst5.toList\n        if (lst6.forall(x => x % 2 == 0)) {\n\
    \            return \"YES\"\n        } else {\n            return \"NO\"\n   \
    \     }", "        val even = lst1.filter(x => x % 2 == 0).toList\n        val\
    \ odd = lst2.filter(x => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n\
    \        val evenAndOddIsEven = evenAndOdd.forall(x => x % 2 == 0)\n        if\
    \ (evenAndOddIsEven) {\n            \"YES\"\n        } else {\n            \"\
    NO\"\n        }", "        val lst1Size = lst1.size\n        val lst2Size = lst2.size\n\
    \        val evenList = lst1.filter(x => x % 2 == 0)\n        val oddList = lst1.filter(x\
    \ => x % 2 != 0)\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = oddList.size\n        val evenListSize = evenList.size\n        val oddListSize\
    \ = odd", "        val lst1Even = lst1.filter(x => x % 2 == 0).length\n      \
    \  val lst2Even = lst2.filter(x => x % 2 == 0).length\n        if (lst1Even >\
    \ lst2Even) {\n            return \"NO\"\n        } else if (lst1Even == lst2Even)\
    \ {\n            if (lst1.length == lst2.length) {\n                val lst1Even\
    \ = lst1.filter(x => x % 2 == 0).length\n                if (lst1Even == lst1.length)\
    \ {\n                    if (lst1.head % 2 == 0) {\n                        return\
    \ \"YES\"\n                    } else {\n                        return \"NO\"\
    \n                    }\n                } else {\n                    return\
    \ \"NO\"\n                }\n            } else {\n                return \"NO\"\
    \n            }\n        } else {\n            return \"NO\"\n        }", "  \
    \      val even = lst1.filter(x => x % 2 == 0)\n        val odd = lst2.filter(x\
    \ => x % 2 == 1)\n        val evenAndOdd = even.intersect(odd)\n        if (evenAndOdd.isEmpty)\
    \ \"\"\n        else if (evenAndOdd.size == lst1.size) \"YES\"\n        else \"\
    \"", "        val lst1Even = lst1.filter(x => x % 2 == 0)\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0)\n        val lst1Odd = lst1.filter(x => x % 2\
    \ != 0)\n        val lst2Odd = lst2.filter(x => x % 2 != 0)\n        val lst1EvenAndOdd\
    \ = lst1Even.zip(lst1Odd)\n        val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n\
    \        val lst1EvenAndOddAndNotBothEvenAndOdd = lst1EvenAndOdd.filter(x => !x._1.isEmpty\
    \ && !x._2.isEmpty)\n        val lst2EvenAndOddAndNotBothEvenAndOdd = lst2EvenAndOdd.filter(x\
    \ => !x._1.isEmpty && !x._2.isEmpty)\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOdd.filter(x => !x._1.isEmpty && !x._2.isEmpty)\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd = lst2EvenAndOddAndNotBothEvenAndOdd.filter(x\
    \ => !x._1.isEmpty && !x._2.isEmpty)\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !x._1.isEmpty\
    \ && !x._2.isEmpty)\n        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !x._1.isEmpty\
    \ && !x._2.isEmpty)\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x\
    \ => !x._1.isEmpty && !x._2.isEmpty", "        val lst1Length = lst1.length\n\
    \        val lst2Length = lst2.length\n        val evenList = lst1.filter(x =>\
    \ x % 2 == 0)\n        val oddList = lst1.filter(x => x % 2 != 0)\n        val\
    \ evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeList = mutable.ListBuffer[Long]()\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val exchangeListLength = exchangeList.length\n\
    \        val evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeListLength = exchangeList.length\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val exchangeListLength = exchangeList.length\n\
    \        val evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeListLength = exchangeList.length\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val exchangeListLength = exchangeList.length\n\
    \        val evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeListLength = exchangeList.length\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val exchangeListLength = exchangeList.length\n\
    \        val evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeListLength = exchangeList.length\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val exchangeListLength = exchangeList.length\n\
    \        val evenListLength = evenList.length\n        val oddListLength = oddList.length\n\
    \        val exchangeListLength = exchangeList.length\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val exchangeListLength\
    \ = exchangeList.length\n        val evenListLength = evenList.length\n      \
    \  val oddListLength = oddList.length\n        val ", "        // Your code here\n\
    \        val lst1Even = lst1.filter(x => x % 2 == 0).map(x => x.toLong)\n    \
    \    val lst2Even = lst2.filter(x => x % 2 == 0).map(x => x.toLong)\n        val\
    \ lst1Odd = lst1.filter(x => x % 2 != 0).map(x => x.toLong)\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).map(x => x.toLong)\n        val lst1EvenAndOdd\
    \ = lst1Even.zip(lst1Odd).filter(x => x._1 == x._2)\n        val lst2EvenAndOdd\
    \ = lst2Even.zip(lst2Odd).filter(x => x._1 == x._2)\n        val lst1EvenAndEvenAndOdd\
    \ = lst1EvenAndOdd.filter(x => x._1 == x._2)\n        val lst2EvenAndEvenAndOdd\
    \ = lst2EvenAndOdd.filter(x => x._1 == x._2)\n        val lst1EvenAndEvenAndEvenAndOdd\
    \ = lst1EvenAndEvenAndOdd.filter(x => x._1 == x._2)\n        val lst2EvenAndEvenAndEvenAndOdd\
    \ = lst2EvenAndEvenAndOdd.filter(x => x._1 == x._2)\n        val lst1EvenAndEvenAndEvenAndEvenAndOdd\
    \ = lst1EvenAndEvenAndEvenAndOdd.filter(x => x._1 == x._2)\n        val lst2EvenAndEvenAndEvenAndEvenAndOdd\
    \ = lst2EvenAndEvenAndEvenAndOdd.filter(x => x._1 == x._2)\n        val lst1EvenAndEvenAndEvenAndEvenAndEvenAndOdd\
    \ = lst1EvenAndEvenAndEvenAndEvenAndOdd.filter(x => x._1 == x._2)\n        val\
    \ lst2EvenAndEvenAndEvenAndEvenAndEvenAndOdd = lst2EvenAndEvenAndEvenAndEvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndEvenAndEvenAndEvenAndEvenAndEvenAndOdd\
    \ = lst1EvenAndEvenAndEvenAndEvenAndEvenAndOdd.filter(x => x._1 == x._2)\n   \
    \     val lst2EvenAndEvenAndEvenAndEvenAndEvenAndEvenAndOdd = lst2EvenAndEvenAndEvenAndEvenAndEvenAndOdd.filter(x\
    \ => ", "        val lst1Len = lst1.length\n        val lst2Len = lst2.length\n\
    \        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 0).toList\n        val evenAndOdd = even.zip(odd).filter(x => x._1\
    \ == x._2)\n        val evenAndEven = even.zip(even).filter(x => x._1 == x._2)\n\
    \        val evenAndOddAndEven = evenAndEven.filter(x => x._1 == x._2)\n     \
    \   val evenAndOddAndOdd = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.filter(x => x._1 == x._2)\n        val evenAndOddAndEvenAndEven\
    \ = evenAndOddAndEvenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEven.filter(x => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndOdd\
    \ = evenAndOddAndEvenAndOddAndOdd.filter(x => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOdd.filter(x => x._1 == x._2)\n        val\
    \ evenAndOddAndEvenAndOddAndEvenAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd.filter(x => x._1 == x._2)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.filter(x\
    \ => x._1 == x._2)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndO", "        val\
    \ lst1Even = lst1.filter(x => x % 2 == 0).map(x => x.toLong).toList\n        val\
    \ lst2Even = lst2.filter(x => x % 2 == 0).map(x => x.toLong).toList\n        val\
    \ lst1Odd = lst1.filter(x => x % 2 != 0).map(x => x.toLong).toList\n        val\
    \ lst2Odd = lst2.filter(x => x % 2 != 0).map(x => x.toLong).toList\n        val\
    \ lst1EvenAndOdd = lst1Even ++ lst1Odd\n        val lst2EvenAndOdd = lst2Even\
    \ ++ lst2Odd\n        val lst1EvenAndOddAndNotBoth = lst1EvenAndOdd ++ lst2EvenAndOdd\n\
    \        val lst2EvenAndOddAndNotBoth = lst2EvenAndOdd ++ lst1EvenAndOdd\n   \
    \     val lst1EvenAndOddAndNotBothAndNotBoth = lst1EvenAndOdd ++ lst2EvenAndOdd\
    \ ++ lst1EvenAndOdd ++ lst2EvenAndOdd\n        val lst1EvenAndOddAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd\
    \ ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd\
    \ ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd\
    \ ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd\
    \ ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd\
    \ ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd\
    \ ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAndOdd ++ lst1EvenAndOdd\
    \ ++ lst2EvenAndOdd ++ lst1EvenAndOdd ++ lst2EvenAnd", "        // Your code here\n\
    \        val even = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_\
    \ % 2 != 0).toList\n        val evenAndOdd = even.intersect(odd)\n        if(evenAndOdd.isEmpty)\
    \ \"NO\" else \"YES\"", "        val even = lst1.filter(_ % 2 == 0)\n        val\
    \ odd = lst2.filter(_ % 2 == 1)\n        val evenAndOdd = even.zip(odd)\n    \
    \    val evenAndOdd2 = evenAndOdd.filter(_._1 == _._2)\n        val evenAndOdd3\
    \ = evenAndOdd2.filter(_._1 == _._2)\n        val evenAndOdd4 = evenAndOdd3.filter(_._1\
    \ == _._2)\n        val evenAndOdd5 = evenAndOdd4.filter(_._1 == _._2)\n     \
    \   val evenAndOdd6 = evenAndOdd5.filter(_._1 == _._2)\n        val evenAndOdd7\
    \ = evenAndOdd6.filter(_._1 == _._2)\n        val evenAndOdd8 = evenAndOdd7.filter(_._1\
    \ == _._2)\n        val evenAndOdd9 = evenAndOdd8.filter(_._1 == _._2)\n     \
    \   val evenAndOdd10 = evenAndOdd9.filter(_._1 == _._2)\n        val evenAndOdd11\
    \ = evenAndOdd10.filter(_._1 == _._2)\n        val evenAndOdd12 = evenAndOdd11.filter(_._1\
    \ == _._2)\n        val evenAndOdd13 = evenAndOdd12.filter(_._1 == _._2)\n   \
    \     val evenAndOdd14 = evenAndOdd13.filter(_._1 == _._2)\n        val evenAndOdd15\
    \ = evenAndOdd14.filter(_._1 == _._2)\n        val evenAndOdd16 = evenAndOdd15.filter(_._1\
    \ == _._2)\n        val evenAndOdd17 = evenAndOdd16.filter(_._1 == _._2)\n   \
    \     val evenAndOdd18 = evenAndOdd17.filter(_._1 == _._2)\n        val evenAndOdd19\
    \ = evenAndOdd18.filter(_._1 == _._2)\n        val evenAndOdd20 = evenAndOdd19.filter(_._1\
    \ == _._2)\n        val evenAndOdd21 = evenAndOdd20.filter(_._1 == _._2)\n   \
    \     val evenAndOdd22 = evenAndOdd21.filter(_._1 == _._2)\n        val evenAndOdd23\
    \ = evenAndOdd22.filter(_._1 == _._2)\n        val evenAndOdd24 = evenAndOdd23.filter(_._1\
    \ == _._2)\n        val even", '        // Your code here', "        val lst3\
    \ = lst1.toSet\n        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n\
    \        val lst6 = lst5.toList\n        val lst7 = lst6.filter(_ % 2 == 0)\n\
    \        val lst8 = lst7.filter(_ != lst7(0))\n        val lst9 = lst8.filter(_\
    \ != lst8(1))\n        val lst10 = lst9.filter(_ != lst9(1))\n        val lst11\
    \ = lst10.filter(_ != lst10(1))\n        val lst12 = lst11.filter(_ != lst11(1))\n\
    \        val lst13 = lst12.filter(_ != lst12(1))\n        val lst14 = lst13.filter(_\
    \ != lst13(1))\n        val lst15 = lst14.filter(_ != lst14(1))\n        val lst16\
    \ = lst15.filter(_ != lst15(1))\n        val lst17 = lst16.filter(_ != lst16(1))\n\
    \        val lst18 = lst17.filter(_ != lst17(1))\n        val lst19 = lst18.filter(_\
    \ != lst18(1))\n        val lst20 = lst19.filter(_ != lst19(1))\n        val lst21\
    \ = lst20.filter(_ != lst20(1))\n        val lst22 = lst21.filter(_ != lst21(1))\n\
    \        val lst23 = lst22.filter(_ != lst22(1))\n        val lst24 = lst23.filter(_\
    \ != lst23(1))\n        val lst25 = lst24.filter(_ != lst24(1))\n        val lst26\
    \ = lst25.filter(_ != lst25(1))\n        val lst27 = lst26.filter(_ != lst26(1))\n\
    \        val lst28 = lst27.filter(_ != lst27(1))\n        val lst29 = lst28.filter(_\
    \ != lst28(1))\n        val lst30 = lst29.filter(_ != lst29(1))\n        val lst31\
    \ = lst30.filter(_ != lst30(1))\n        val lst32 = lst31.filter(_ != lst31(1))\n\
    \        val lst33 = lst32.filter(_ != lst32(1))\n        val lst34 = lst33.filter(_\
    \ != lst33(1))\n        val lst35 = lst34.filter(_ != lst34(1))\n        val lst36\
    \ = lst35.filter(_ != lst35(1))\n        val lst37 = lst36.filter(_ != lst36(1))\n\
    \        val lst38 = lst37.filter(_ != lst37(1))\n        val lst39 = ", "   \
    \     val lst1Size = lst1.size\n        val lst2Size = lst2.size\n        val\
    \ lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x\
    \ => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n\
    \        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd\
    \ = lst1Even ++ lst1Odd\n        val lst2EvenAndOdd = lst2Even ++ lst2Odd\n  \
    \      val lst1EvenAndOddSize = lst1EvenAndOdd.size\n        val lst2EvenAndOddSize\
    \ = lst2EvenAndOdd.size\n        val lst1EvenAndOddEven = lst1EvenAndOdd.filter(x\
    \ => x % 2 == 0).toList\n        val lst2EvenAndOddEven = lst2EvenAndOdd.filter(x\
    \ => x % 2 == 0).toList\n        val lst1EvenAndOddOdd = lst1EvenAndOdd.filter(x\
    \ => x % 2 != 0).toList\n        val lst2EvenAndOddOdd = lst2EvenAndOdd.filter(x\
    \ => x % 2 != 0).toList\n        val lst1EvenAndOddEvenAndOdd = lst1EvenAndOddEven\
    \ ++ lst1EvenAndOddOdd\n        val lst2EvenAndOddEvenAndOdd = lst2EvenAndOddEven\
    \ ++ lst2EvenAndOddOdd\n        val lst1EvenAndOddEvenAndOddSize = lst1EvenAndOddEvenAndOdd.size\n\
    \        val lst2EvenAndOddEvenAndOddSize = lst2EvenAndOddEvenAndOdd.size\n  \
    \      val lst1EvenAndOddEvenAndOddEven = lst1EvenAndOddEvenAndOdd.filter(x =>\
    \ x % 2 == 0).toList\n        val lst2EvenAndOddEvenAndOddEven = lst2EvenAndOddEvenAndOdd.filter(x\
    \ => x % 2 == 0).toList\n        val lst1EvenAndOddEvenAndOddOdd = lst1EvenAndOddEvenAndOdd.filter(x\
    \ => x % 2 != 0).toList\n        val lst2EvenAndOddEvenAndOddOdd = ", "      \
    \  val even = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_\
    \ % 2 != 0).toList\n        val evenAndOdd = even.intersect(odd)\n        val\
    \ evenAndOddIsEven = evenAndOdd.forall(x => x % 2 == 0)\n        if (evenAndOddIsEven)\
    \ {\n            \"YES\"\n        } else {\n            \"NO\"\n        }", " \
    \       val lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x =>\
    \ x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n\
    \        val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBoth = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndNotBothAndNotBoth = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x\
    \ => !lst1EvenAndOddAndNotBoth.contains(x))\n        val lst1EvenAndOddAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x => !lst1EvenAndOddAndNotBothAndNotBoth.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBoth = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x\
    \ => !lst1EvenAndOddAndNotBothAndNotBothAndNotBoth.contains(x))\n        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x => !lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBoth.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x => !lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBothAndNotBoth.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothAndNotBothAndNotBothAndNotBothAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOdd.intersect(lst2EvenAndOdd).filter(x => !lst1EvenAndOdd", " \
    \       val even = lst1.filter(_ % 2 == 0).toList\n        val odd = lst2.filter(_\
    \ % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n        val\
    \ evenAndOddAndEven = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(odd)\n        if(evenAndOddAndEvenAndOdd.isEmpty)\
    \ \"YES\" else \"NO\"", "        // Your code here\n        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0)\n        val lst2Even = lst2.filter(x => x % 2 == 0)\n      \
    \  val lst1Odd = lst1.filter(x => x % 2 != 0)\n        val lst2Odd = lst2.filter(x\
    \ => x % 2 != 0)\n        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n       \
    \ val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOdd.zip(lst2EvenAndOdd)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAnd",
  "        val lst1Size = lst1.size\n        val lst2Size = lst2.size\n        val\
    \ lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x\
    \ => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n\
    \        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenSize\
    \ = lst1Even.size\n        val lst2EvenSize = lst2Even.size\n        val lst1OddSize\
    \ = lst1Odd.size\n        val lst2OddSize = lst2Odd.size\n        val lst1EvenSum\
    \ = lst1Even.foldLeft(0l)(_ + _)\n        val lst2EvenSum = lst2Even.foldLeft(0l)(_\
    \ + _)\n        val lst1OddSum = lst1Odd.foldLeft(0l)(_ + _)\n        val lst2OddSum\
    \ = lst2Odd.foldLeft(0l)(_ + _)\n        val lst1EvenSumSize = lst1EvenSum.size\n\
    \        val lst2EvenSumSize = lst2EvenSum.size\n        val lst1OddSumSize =\
    \ lst1OddSum.size\n        val lst2OddSumSize = lst2OddSum.size\n        val lst1EvenSumOddSum\
    \ = lst1EvenSum + lst2EvenSum\n        val lst2EvenSumOddSum = lst2EvenSum + lst1EvenSum\n\
    \        val lst1OddSumOddSum = lst1OddSum + lst2OddSum\n        val lst2OddSumOddSum\
    \ = lst2OddSum + lst1OddSum\n        val lst1EvenSumOddSumSize = lst1EvenSumOddSum.size\n\
    \        val lst2EvenSumOddSumSize = lst2EvenSumOddSum.size\n        val lst1OddSumOddSumSize\
    \ = lst1OddSumOddSum.size\n        val lst2OddSumOddSumSize = lst2OddSumOddSum.size\n\
    \        val lst1EvenSumOddSumOddSum = lst1EvenSumOddSum + lst2EvenSumOddSum\n\
    \        val lst2EvenSumOddSumOddSum = lst2EvenSumOddSum + ", "        val even\
    \ = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 == 1)\n     \
    \   if (even.size == odd.size) {\n            val evenList = even.sortWith(_ <\
    \ _)\n            val oddList = odd.sortWith(_ < _)\n            if (evenList.head\
    \ == oddList.head) {\n                val exchanged = evenList.tail.zip(oddList.tail).filter(_._1\
    \ == _._1).map(_._2)\n                if (exchanged.size == even.size)\n     \
    \               \"YES\"\n                else\n                    \"NO\"\n  \
    \          } else\n                \"NO\"\n        } else\n            \"NO\"",
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.zip(odd)\n        val evenAndOdd2\
    \ = evenAndOdd.filter(x => x._1 == x._2)\n        val evenAndOdd3 = evenAndOdd2.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd4 = evenAndOdd3.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd5 = evenAndOdd4.filter(x => x._1 == x._2)\n   \
    \     val evenAndOdd6 = evenAndOdd5.filter(x => x._1 == x._2)\n        val evenAndOdd7\
    \ = evenAndOdd6.filter(x => x._1 == x._2)\n        val evenAndOdd8 = evenAndOdd7.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd9 = evenAndOdd8.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd10 = evenAndOdd9.filter(x => x._1 == x._2)\n  \
    \      val evenAndOdd11 = evenAndOdd10.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd12 = evenAndOdd11.filter(x => x._1 == x._2)\n        val evenAndOdd13\
    \ = evenAndOdd12.filter(x => x._1 == x._2)\n        val evenAndOdd14 = evenAndOdd13.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd15 = evenAndOdd14.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd16 = evenAndOdd15.filter(x => x._1 == x._2)\n \
    \       val evenAndOdd17 = evenAndOdd16.filter(x => x._1 == x._2)\n        val\
    \ evenAndOdd18 = evenAndOdd17.filter(x => x._1 == x._2)\n        val evenAndOdd19\
    \ = evenAndOdd18.filter(x => x._1 == x._2)\n        val evenAndOdd20 = evenAndOdd19.filter(x\
    \ => x._1 == x._2)\n        val evenAndOdd21 = evenAndOdd20.filter(x => x._1 ==\
    \ x._2)\n        val evenAndOdd22 = evenAndOdd21.filter(x => x._", "        //\
    \ TODO: Write your code here\n        val lst3 = lst1.toSet\n        val lst4\
    \ = lst2.toSet\n        if(lst3.size == lst4.size){\n            val lst5 = lst3.toList\n\
    \            val lst6 = lst4.toList\n            val lst7 = lst5.zip(lst6).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n            if(lst7.size == lst5.size){\n             \
    \   val lst8 = lst5.zip(lst7).filter(_._1.toLong % 2 == 0).map(_._1)\n       \
    \         if(lst8.size == lst5.size){\n                    val lst9 = lst5.zip(lst8).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n                    if(lst9.size == lst5.size){\n     \
    \                   val lst10 = lst5.zip(lst9).filter(_._1.toLong % 2 == 0).map(_._1)\n\
    \                        if(lst10.size == lst5.size){\n                      \
    \      val lst11 = lst5.zip(lst10).filter(_._1.toLong % 2 == 0).map(_._1)\n  \
    \                          if(lst11.size == lst5.size){\n                    \
    \            val lst12 = lst5.zip(lst11).filter(_._1.toLong % 2 == 0).map(_._1)\n\
    \                                if(lst12.size == lst5.size){\n              \
    \                      val lst13 = lst5.zip(lst12).filter(_._1.toLong % 2 == 0).map(_._1)\n\
    \                                    if(lst13.size == lst5.size){\n          \
    \                              val lst14 = lst5.zip(lst13).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n                                        if(lst14.size ==\
    \ lst5.size){\n                                            val lst15 = lst5.zip(lst14).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n                                            if(lst15.size\
    \ == lst5.size){\n                                                val lst16 =\
    \ lst5.zip(lst15).filter(_._1.toLong % 2 == 0).map(_._1)\n                   \
    \                             if(lst16.size == lst5.size){\n                 \
    \                                   val lst17 = lst5.zip(lst16).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n                                                    if(lst17.size\
    \ == lst5.size){\n                                                        val\
    \ lst18 = lst5.zip(lst17).filter(_._1.toLong % 2 == 0).map(_._1)\n           \
    \                                             if(lst18.size == lst5.size){\n \
    \                                                           val lst19 = lst5.zip(lst18).filter(_._1.toLong\
    \ % 2 == 0).map(_._1)\n                                                      \
    \      if(lst19.size == lst5.size){\n                                        \
    \                        val lst20 = lst5.zip(lst19).filter(_._", "        val\
    \ even = lst1.filter(x => x % 2 == 0).size\n        val odd = lst2.filter(x =>\
    \ x % 2 == 1).size\n        if (even == odd) {\n            val lst3 = lst1.filter(x\
    \ => x % 2 == 0)\n            val lst4 = lst2.filter(x => x % 2 == 1)\n      \
    \      val lst5 = lst3.zip(lst4).filter(_._1 == _._2)\n            if (lst5.size\
    \ == lst3.size) {\n                return \"YES\"\n            } else {\n    \
    \            return \"NO\"\n            }\n        } else {\n            return\
    \ \"NO\"\n        }", "        val even = lst1.filter(_ % 2 == 0).toList\n   \
    \     val odd = lst2.filter(_ % 2 == 1).toList\n        val evenAndOdd = even\
    \ ++ odd\n        val evenAndOddWithoutEven = evenAndOdd.filter(_ % 2 == 0)\n\
    \        val evenAndOddWithoutOdd = evenAndOdd.filter(_ % 2 == 1)\n        val\
    \ evenAndOddWithoutEvenAndOdd = evenAndOddWithoutEven ++ evenAndOddWithoutOdd\n\
    \        val evenAndOddWithoutEvenAndOddWithoutEven = evenAndOddWithoutEvenAndOdd.filter(_\
    \ % 2 == 0)\n        val evenAndOddWithoutEvenAndOddWithoutOdd = evenAndOddWithoutEvenAndOdd.filter(_\
    \ % 2 == 1)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOdd = evenAndOddWithoutEvenAndOddWithoutEven\
    \ ++ evenAndOddWithoutEvenAndOddWithoutOdd\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_ % 2 == 0)\n        val\
    \ evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutOdd = evenAndOddWithoutEvenAndOddWithoutEvenAndOdd.filter(_\
    \ % 2 == 1)\n        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOdd\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven ++ evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutOdd\n\
    \        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\n\
    \        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutOdd\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutOdd\n\
    \        val evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven\
    \ = evenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEvenAndOddWithoutEven",
  "        val lst1Even = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even\
    \ = lst2.filter(x => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x =>\
    \ x % 2 != 0).toList\n        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n\
    \        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndLst2EvenAndOdd = lst1EvenAndOdd.zip(lst2EvenAndOdd)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd = lst1EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x => x._1 == x._2)\n\
    \        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd\
    \ = lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOdd.filter(x\
    \ => x._1 == x._2)\n        val lst1EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst2EvenAndOddAndLst",
  "        // Your code goes here\n        val lst1Even = lst1.filter(_%2==0)\n  \
    \      val lst2Even = lst2.filter(_%2==0)\n        if(lst1Even.size == lst2Even.size){\n\
    \            val lst1EvenList = lst1Even.map(_.toLong)\n            val lst2EvenList\
    \ = lst2Even.map(_.toLong)\n            val lst1EvenSet = lst1EvenList.distinct\n\
    \            val lst2EvenSet = lst2EvenList.distinct\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst2EvenSetSize = lst2EvenSet.size\n   \
    \         val lst1EvenSetSize = lst1EvenSet.size\n            val lst2EvenSetSize\
    \ = lst2EvenSet.size\n            val lst1EvenSetSize = lst1EvenSet.size\n   \
    \         val lst2EvenSetSize = lst2EvenSet.size\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst2EvenSetSize = lst2EvenSet.size\n   \
    \         val lst1EvenSetSize = lst1EvenSet.size\n            val lst2EvenSetSize\
    \ = lst2EvenSet.size\n            val lst1EvenSetSize = lst1EvenSet.size\n   \
    \         val lst2EvenSetSize = lst2EvenSet.size\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst2EvenSetSize = lst2EvenSet.size\n   \
    \         val lst1EvenSetSize = lst1EvenSet.size\n            val lst2EvenSetSize\
    \ = lst2EvenSet.size\n            val lst1EvenSetSize = lst1EvenSet.size\n   \
    \         val lst2EvenSetSize = lst2EvenSet.size\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst2EvenSetSize = lst2EvenSet.size\n   \
    \         val lst1EvenSetSize = lst1EvenSet.size\n            val lst2EvenSetSize\
    \ = lst2EvenSet.size\n            val lst1EvenSetSize = lst1EvenSet.size\n   \
    \         val lst2EvenSetSize = lst2EvenSet.size\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst2EvenSetSize = lst2EvenSet.size\n   \
    \         val lst1EvenSetSize = lst1EvenSet.size\n            val lst2EvenSetSize\
    \ = lst2EvenSet.size\n            val lst1EvenSetSize = lst1EvenSet.size\n   \
    \         val lst2EvenSetSize = lst2EvenSet.size\n            val lst1EvenSetSize\
    \ = lst1EvenSet.size\n            val lst", "        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0).length\n        val lst2Even = lst2.filter(x => x % 2 == 0).length\n\
    \        if (lst1Even == lst2Even) {\n            return \"YES\"\n        } else\
    \ {\n            return \"NO\"\n        }", "        val even = lst1.filter(x\
    \ => x % 2 == 0)\n        val odd = lst2.filter(x => x % 2 == 1)\n        val\
    \ evenAndOdd = even.intersect(odd)\n        val evenAndEven = even.intersect(even)\n\
    \        val evenAndOddAndEven = evenAndEven.intersect(evenAndOdd)\n        val\
    \ evenAndOddAndOdd = evenAndOdd.intersect(evenAndOdd)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(evenAndOddAndOdd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(evenAndOddAndEvenAndOdd)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(evenAndOddAnd",
  "        val lst3 = lst1.toList ++ lst2.toList\n        val even = lst3.filter(x\
    \ => x % 2 == 0)\n        val odd = lst3.filter(x => x % 2 != 0)\n        if (even.size\
    \ == lst3.size && odd.size == lst3.size) {\n            val evenList = even.toList\n\
    \            val oddList = odd.toList\n            val evenIndex = evenList.indexWhere(x\
    \ => x % 2 == 0)\n            val oddIndex = oddList.indexWhere(x => x % 2 !=\
    \ 0)\n            val evenList2 = evenList.take(evenIndex).toList\n          \
    \  val oddList2 = oddList.take(oddIndex).toList\n            val evenList3 = evenList2.toList\
    \ ++ evenList\n            val oddList3 = oddList2.toList ++ oddList\n       \
    \     val evenList4 = evenList3.toList ++ evenList\n            val oddList4 =\
    \ oddList3.toList ++ oddList\n            val evenList5 = evenList4.toList ++\
    \ evenList\n            val oddList5 = oddList4.toList ++ oddList\n          \
    \  val evenList6 = evenList5.toList ++ evenList\n            val oddList6 = oddList5.toList\
    \ ++ oddList\n            val evenList7 = evenList6.toList ++ evenList\n     \
    \       val oddList7 = oddList6.toList ++ oddList\n            val evenList8 =\
    \ evenList7.toList ++ evenList\n            val oddList8 = oddList7.toList ++\
    \ oddList\n            val evenList9 = evenList8.toList ++ evenList\n        \
    \    val oddList9 = oddList8.toList ++ oddList\n            val evenList10 = evenList9.toList\
    \ ++ evenList\n            val oddList10 = oddList9.toList ++ oddList\n      \
    \      val evenList11 = evenList10.toList ++ evenList\n            val oddList11\
    \ = oddList10.toList ++ oddList\n            val evenList12 = evenList11.toList\
    \ ++ evenList\n            val oddList12 = oddList11.toList ++ oddList\n     \
    \       val evenList13 = evenList12.toList ++ evenList\n            val oddList13\
    \ = oddList12.toList ++ oddList\n            val evenList14 = evenList13.toList\
    \ ++ evenList\n            val oddList14 = oddList13.toList ++ oddList\n     \
    \       val evenList15 = evenList14.toList ++ evenList\n            val oddList15\
    \ = oddList14.toList ++ oddList\n            val evenList16 = ", "        val\
    \ even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndOddNotOdd = even.intersect(even.filter(x => x % 2 == 0)).intersect(odd.filter(x\
    \ => x % 2 == 1))\n        val evenAndOddNotEven = even.intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(even.filter(x => x % 2 == 1)).intersect(odd.filter(x\
    \ => x % 2 == 0))\n        val evenAndOddNotEvenNotOdd = even.intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(even.filter(x => x % 2 == 1)).intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(odd.filter(x => x % 2 == 1))\n        val evenAndOddNotEvenNotOddNotOdd\
    \ = even.intersect(even.filter(x => x % 2 == 0)).intersect(even.filter(x => x\
    \ % 2 == 1)).intersect(even.filter(x => x % 2 == 0)).intersect(even.filter(x =>\
    \ x % 2 == 1)).intersect(odd.filter(x => x % 2 == 0))\n        val evenAndOddNotEvenNotOddNotOddNotOdd\
    \ = even.intersect(even.filter(x => x % 2 == 0)).intersect(even.filter(x => x\
    \ % 2 == 1)).intersect(even.filter(x => x % 2 == 0)).intersect(even.filter(x =>\
    \ x % 2 == 1)).intersect(even.filter(x => x % 2 == 0)).intersect(odd.filter(x\
    \ => x % 2 == 1))\n        val evenAndOddNotEvenNotOddNotOddNotOddNotOdd = even.intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(even.filter(x => x % 2 == 1)).intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(even.filter(x => x % 2 == 1)).intersect(even.filter(x\
    \ => x % 2 == 0)).intersect(even.filter(x => x % 2 == 1)).intersect(odd.filter(x\
    \ => x % 2 == 0))\n        val evenAndOddNotEvenNotOddNotOddNotOdd", "       \
    \ val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenAndOdd = even.intersect(odd)\n      \
    \  val evenAndOddAndEven = evenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOdd.intersect(even)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(even)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven.intersect(odd)\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOdd", '        // Your code here',
  "        // Your code here\n        val even = lst1.filter(x => x % 2 == 0).length\n\
    \        val odd = lst2.filter(x => x % 2 == 1).length\n        if (even > odd)\
    \ {\n            return \"NO\"\n        } else {\n            return \"YES\"\n\
    \        }", "        val even = lst1.filter(x => x % 2 == 0)\n        val odd\
    \ = lst2.filter(x => x % 2 == 1)\n        val evenOdd = even.zip(odd)\n      \
    \  val evenOddMap = evenOdd.map(x => (x._1, x._2)).toMap\n        val evenOddMap2\
    \ = evenOddMap.toSeq.sortBy(_._1).reverse.map(x => x._2).distinct\n        val\
    \ evenOddMap3 = evenOddMap2.map(x => x.toLong).toList\n        val evenOddMap4\
    \ = evenOddMap3.map(x => x.toLong).toSet\n        val evenOddMap5 = evenOddMap4.map(x\
    \ => x.toLong).toList\n        val evenOddMap6 = evenOddMap5.map(x => x.toLong).toSet\n\
    \        val evenOddMap7 = evenOddMap6.map(x => x.toLong).toList\n        val\
    \ evenOddMap8 = evenOddMap7.map(x => x.toLong).toSet\n        val evenOddMap9\
    \ = evenOddMap8.map(x => x.toLong).toList\n        val evenOddMap10 = evenOddMap9.map(x\
    \ => x.toLong).toSet\n        val evenOddMap11 = evenOddMap10.map(x => x.toLong).toList\n\
    \        val evenOddMap12 = evenOddMap11.map(x => x.toLong).toSet\n        val\
    \ evenOddMap13 = evenOddMap12.map(x => x.toLong).toList\n        val evenOddMap14\
    \ = evenOddMap13.map(x => x.toLong).toSet\n        val evenOddMap15 = evenOddMap14.map(x\
    \ => x.toLong).toList\n        val evenOddMap16 = evenOddMap15.map(x => x.toLong).toSet\n\
    \        val evenOddMap17 = evenOddMap16.map(x => x.toLong).toList\n        val\
    \ evenOddMap18 = evenOddMap17.map(x => x.toLong).toSet\n        val evenOddMap19\
    \ = evenOddMap18.map(x => x.toLong).toList\n        val evenOddMap20 = evenOddMap19.map(x\
    \ => x.toLong).toSet\n        val evenOddMap21 = evenOddMap20.map(x => x.toLong).toList\n\
    \        val evenOddMap22 = evenOddMap21.", "        // Your code here\n     \
    \   val even = lst1.filter(_ % 2 == 0)\n        val odd = lst2.filter(_ % 2 ==\
    \ 1)\n        if(even.size == lst1.size && odd.size == lst2.size) {\n        \
    \    val evenList = even.map(x => lst1.indexOf(x)).sorted\n            val oddList\
    \ = odd.map(x => lst2.indexOf(x)).sorted\n            val evenIndex = evenList.indexOf(0)\n\
    \            val oddIndex = oddList.indexOf(0)\n            if(evenIndex < oddIndex)\
    \ {\n                even.zip(odd).foreach(x => lst1.remove(x._1))\n         \
    \       even.zip(odd).foreach(x => lst2.remove(x._2))\n                even.zip(odd).foreach(x\
    \ => lst1.add(x._1))\n                even.zip(odd).foreach(x => lst2.add(x._2))\n\
    \            }\n            else {\n                even.zip(odd).foreach(x =>\
    \ lst1.remove(x._1))\n                even.zip(odd).foreach(x => lst2.remove(x._2))\n\
    \                even.zip(odd).foreach(x => lst1.add(x._1))\n                even.zip(odd).foreach(x\
    \ => lst2.add(x._2))\n            }\n            if(even.size == lst1.size &&\
    \ odd.size == lst2.size) {\n                val evenList = even.map(x => lst1.indexOf(x)).sorted\n\
    \                val oddList = odd.map(x => lst2.indexOf(x)).sorted\n        \
    \        val evenIndex = evenList.indexOf(0)\n                val oddIndex = oddList.indexOf(0)\n\
    \                if(evenIndex < oddIndex) {\n                    even.zip(odd).foreach(x\
    \ => lst1.remove(x._1))\n                    even.zip(odd).foreach(x => lst2.remove(x._2))\n\
    \                    even.zip(odd).foreach(x => lst1.add(x._1))\n            \
    \        even.zip(odd).foreach(x => lst2.add(x._2))\n                }\n     \
    \           else {\n                    even.zip(odd).foreach(x => lst1.remove(x._1))\n\
    \                    even.zip(odd).foreach(x => lst2.remove(x._2))\n         \
    \           even.zip(odd).foreach(x => lst1.add(x._1))\n                    even.zip(odd).foreach(x\
    \ => lst2.add(x._2))\n                }\n            }\n        }\n        else\
    \ {\n            \"NO\"\n        }", '        // Your code here', "        val\
    \ even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val evenOdd = even.zip(odd)\n        val evenOddList\
    \ = evenOdd.toList\n        val evenOddList2 = evenOddList.map(x => x._1 + x._2)\n\
    \        val evenOddList3 = evenOddList2.filter(x => x % 2 == 0)\n        val\
    \ evenOddList4 = evenOddList3.filter(x => x % 2 == 1)\n        val evenOddList5\
    \ = evenOddList4.map(x => x.toLong)\n        val evenOddList6 = evenOddList5.filter(x\
    \ => x % 2 == 0)\n        val evenOddList7 = evenOddList6.filter(x => x % 2 ==\
    \ 1)\n        val evenOddList8 = evenOddList7.map(x => x.toLong)\n        val\
    \ evenOddList9 = evenOddList8.filter(x => x % 2 == 0)\n        val evenOddList10\
    \ = evenOddList9.filter(x => x % 2 == 1)\n        val evenOddList11 = evenOddList10.map(x\
    \ => x.toLong)\n        val evenOddList12 = evenOddList11.filter(x => x % 2 ==\
    \ 0)\n        val evenOddList13 = evenOddList12.filter(x => x % 2 == 1)\n    \
    \    val evenOddList14 = evenOddList13.map(x => x.toLong)\n        val evenOddList15\
    \ = evenOddList14.filter(x => x % 2 == 0)\n        val evenOddList16 = evenOddList15.filter(x\
    \ => x % 2 == 1)\n        val evenOddList17 = evenOddList16.map(x => x.toLong)\n\
    \        val evenOddList18 = evenOddList17.filter(x => x % 2 == 0)\n        val\
    \ evenOddList19 = evenOddList18.filter(x => x % 2 == 1)\n        val evenOddList20\
    \ = evenOddList19.map(x => x.toLong)\n        val evenOddList21 = evenOddList20.filter(x\
    \ => x % 2 == 0)\n        val evenOddList22 = evenOddList21.filter(x => x % 2\
    \ == 1)\n        val evenOddList23 = evenOddList22.map(x => x.toLong)\n      \
    \  val even", "        // Your code here\n        val lst3 = lst1.filter(_ % 2\
    \ == 0).zip(lst2.filter(_ % 2 == 0)).filter(_._1 == _._2).map(_._1)\n        if(lst3.isEmpty)\
    \ \"\"\n        else lst3.toList.sorted.mkString(\",\")", "        val even =\
    \ lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x => x %\
    \ 2 == 1).length\n        if (even == odd) {\n            if (lst1.size == lst2.size)\
    \ {\n                val even = lst1.filter(x => x % 2 == 0).length\n        \
    \        if (even > lst1.size / 2) {\n                    return \"YES\"\n   \
    \             } else {\n                    return \"NO\"\n                }\n\
    \            } else {\n                return \"NO\"\n            }\n        }\
    \ else {\n            return \"NO\"\n        }", "        val even = lst1.filter(_\
    \ % 2 == 0).toList\n        val odd = lst2.filter(_ % 2 == 0).toList\n       \
    \ val evenOdd = even.zip(odd).filter(_._1 == _._2).map(_._1).distinct\n      \
    \  if (evenOdd.isEmpty) \"NO\" else \"YES\"", "        val even = lst1.filter(_\
    \ % 2 == 0).toList\n        val odd = lst2.filter(_ % 2 == 1).toList\n       \
    \ val evenOdd = even.zip(odd).filter(_._1 == _._2).map(_._1)\n        if(evenOdd.isEmpty)\
    \ \"NO\" else \"YES\"", "        // Your code goes here\n        val lst3 = lst1.toSet\n\
    \        val lst4 = lst2.toSet\n        val lst5 = lst3.intersect(lst4)\n    \
    \    val lst6 = lst5.filter(x => x % 2 == 0)\n        if(lst6.size == lst1.size)\n\
    \            \"YES\"\n        else\n            \"NO\"", "        // Your code\
    \ here\n        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n       \
    \ val lst5 = lst3.intersect(lst4)\n        if(lst5.isEmpty){\n            \"NO\"\
    \n        }\n        else{\n            \"YES\"\n        }", "        val lst1Even\
    \ = lst1.filter(x => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x\
    \ => x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n\
    \        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd\
    \ = lst1Even.intersect(lst1Odd)\n        val lst2EvenAndOdd = lst2Even.intersect(lst2Odd)\n\
    \        val lst1EvenAndOddAndNotBoth = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBoth = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n\
    \        if(lst1EvenAndOddAndNotBoth.isEmpty){\n            return \"NO\"\n  \
    \      }\n        else{\n            return \"YES\"\n        }", "        val\
    \ even = lst1.filter(x => x % 2 == 0).length\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).length\n        if (even == odd) {\n            return \"YES\"\
    \n        }\n        else {\n            return \"NO\"\n        }", '        //
    Your code goes here', "        val even = lst1.filter(x => x % 2 == 0).toList\n\
    \        val odd = lst2.filter(x => x % 2 == 1).toList\n        val evenOdd =\
    \ even.zip(odd)\n        val evenOddList = evenOdd.toList\n        val evenOddList2\
    \ = evenOddList.map(x => x._1 + x._2)\n        val evenOddList3 = evenOddList2.filter(x\
    \ => x % 2 == 0).toList\n        val evenOddList4 = evenOddList3.filter(x => x\
    \ % 2 == 1).toList\n        val evenOddList5 = evenOddList4.map(x => x._1 + x._2)\n\
    \        val evenOddList6 = evenOddList5.filter(x => x % 2 == 0).toList\n    \
    \    val evenOddList7 = evenOddList6.filter(x => x % 2 == 1).toList\n        val\
    \ evenOddList8 = evenOddList7.map(x => x._1 + x._2)\n        val evenOddList9\
    \ = evenOddList8.filter(x => x % 2 == 0).toList\n        val evenOddList10 = evenOddList9.filter(x\
    \ => x % 2 == 1).toList\n        val evenOddList11 = evenOddList10.map(x => x._1\
    \ + x._2)\n        val evenOddList12 = evenOddList11.filter(x => x % 2 == 0).toList\n\
    \        val evenOddList13 = evenOddList12.filter(x => x % 2 == 1).toList\n  \
    \      val evenOddList14 = evenOddList13.map(x => x._1 + x._2)\n        val evenOddList15\
    \ = evenOddList14.filter(x => x % 2 == 0).toList\n        val evenOddList16 =\
    \ evenOddList15.filter(x => x % 2 == 1).toList\n        val evenOddList17 = evenOddList16.map(x\
    \ => x._1 + x._2)\n        val evenOddList18 = evenOddList17.filter(x => x % 2\
    \ == 0).toList\n        val evenOddList19 = evenOddList18.filter(x => x % 2 ==\
    \ 1).toList\n        val evenOddList20 = evenOddList19.map(x => x._1 + x._2)\n\
    \        val evenOddList21 = evenOddList20.filter(x => x % 2 == 0).toList\n  \
    \      val evenOddList22", "        val even = lst1.filter(x => x % 2 == 0).length\n\
    \        val odd = lst2.filter(x => x % 2 == 1).length\n        if (even == odd)\
    \ {\n            if (even == lst1.length) {\n                return \"YES\"\n\
    \            } else {\n                return \"NO\"\n            }\n        }\n\
    \        val evenList = lst1.filter(x => x % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1).length\n        val oddList = lst2.filter(x => x % 2 == 1).map(x\
    \ => lst1.indexOf(x)).filter(x => x != -1).length\n        if (evenList == oddList)\
    \ {\n            if (evenList == lst1.length) {\n                return \"YES\"\
    \n            } else {\n                return \"NO\"\n            }\n       \
    \ }\n        val evenList = lst1.filter(x => x % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1).length\n        val oddList = lst2.filter(x => x % 2 == 1).map(x\
    \ => lst1.indexOf(x)).filter(x => x != -1).length\n        if (evenList == oddList)\
    \ {\n            if (evenList == lst1.length) {\n                return \"YES\"\
    \n            } else {\n                return \"NO\"\n            }\n       \
    \ }\n        val evenList = lst1.filter(x => x % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1).length\n        val oddList = lst2.filter(x => x % 2 == 1).map(x\
    \ => lst1.indexOf(x)).filter(x => x != -1).length\n        if (evenList == oddList)\
    \ {\n            if (evenList == lst1.length) {\n                return \"YES\"\
    \n            } else {\n                return \"NO\"\n            }\n       \
    \ }\n        val evenList = lst1.filter(x => x % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1).length\n        val oddList = lst2.filter(x => x % 2 == 1).map(x\
    \ => lst1.indexOf(x)).filter(x => x != -1).length\n        if (evenList == oddList)\
    \ {\n            if (evenList == lst1.length) {\n                return \"YES\"\
    \n            } else {\n                return \"NO\"\n            }\n       \
    \ }\n        val evenList = lst1.filter(x => x % 2 == 0).map(x => lst2.indexOf(x)).filter(x\
    \ => x != -1).length\n        val oddList = lst2.filter(x => x % 2 == 1).map(x\
    \ => lst1.indexOf(x)).filter(x => x != -1).length\n        if (evenList == oddList)\
    \ {\n            if (evenList == lst1.length) {\n                return \"YES\"\
    \n            } else {\n                return \"NO\"\n            }\n       \
    \ }\n        val even", "        val lst1Even = lst1.filter(x => x % 2 == 0).sorted\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0).sorted\n        val lst1Odd\
    \ = lst1.filter(x => x % 2 != 0).sorted\n        val lst2Odd = lst2.filter(x =>\
    \ x % 2 != 0).sorted\n        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n   \
    \     val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndNotBoth\
    \ = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndNotBoth\
    \ = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n        val lst1EvenAndOddAndBoth\
    \ = lst1EvenAndOdd.filter(x => lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndBoth\
    \ = lst2EvenAndOdd.filter(x => lst1EvenAndOdd.contains(x))\n        val lst1EvenAndOddAndBothAndNotBoth\
    \ = lst1EvenAndOddAndBoth.filter(x => !lst2EvenAndOddAndNotBoth.contains(x))\n\
    \        val lst2EvenAndOddAndBothAndNotBoth = lst2EvenAndOddAndBoth.filter(x\
    \ => !lst1EvenAndOddAndNotBoth.contains(x))\n        val lst1EvenAndOddAndBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOddAndBothAndNotBoth.filter(x => !lst2EvenAndOddAndNotBothAndNotBoth.contains(x))\n\
    \        val lst2EvenAndOddAndBothAndNotBothAndNotBoth = lst2EvenAndOddAndBothAndNotBoth.filter(x\
    \ => !lst1EvenAndOddAndNotBothAndNotBoth.contains(x))\n        val lst1EvenAndOddAndBothAndNotBothAndNotBothAndNotBoth\
    \ = lst1EvenAndOddAndBothAndNotBothAndNotBoth.filter(x => !lst2EvenAndOddAndNotBothAndNotBothAndNotBoth.contains(x))\n\
    \        val lst2EvenAndOddAndBothAndNotBothAndNotBothAndNotBoth = lst2EvenAndOddAndBothAndNotBothAndNotBoth.filter(",
  "        val lst1Copy = lst1.toList\n        val lst2Copy = lst2.toList\n      \
    \  val evenList = lst1Copy.filter(_ % 2 == 0).toList\n        val oddList = lst2Copy.filter(_\
    \ % 2 == 1).toList\n        val evenList2 = evenList.filter(_ != lst1Copy(0))\n\
    \        val oddList2 = oddList.filter(_ != lst2Copy(0))\n        val evenList3\
    \ = evenList2.filter(_ != lst1Copy(0))\n        val oddList3 = oddList2.filter(_\
    \ != lst2Copy(0))\n        val evenList4 = evenList3.filter(_ != lst1Copy(0))\n\
    \        val oddList4 = oddList3.filter(_ != lst2Copy(0))\n        val evenList5\
    \ = evenList4.filter(_ != lst1Copy(0))\n        val oddList5 = oddList4.filter(_\
    \ != lst2Copy(0))\n        val evenList6 = evenList5.filter(_ != lst1Copy(0))\n\
    \        val oddList6 = oddList5.filter(_ != lst2Copy(0))\n        val evenList7\
    \ = evenList6.filter(_ != lst1Copy(0))\n        val oddList7 = oddList6.filter(_\
    \ != lst2Copy(0))\n        val evenList8 = evenList7.filter(_ != lst1Copy(0))\n\
    \        val oddList8 = oddList7.filter(_ != lst2Copy(0))\n        val evenList9\
    \ = evenList8.filter(_ != lst1Copy(0))\n        val oddList9 = oddList8.filter(_\
    \ != lst2Copy(0))\n        val evenList10 = evenList9.filter(_ != lst1Copy(0))\n\
    \        val oddList10 = oddList9.filter(_ != lst2Copy(0))\n        val evenList11\
    \ = evenList10.filter(_ != lst1Copy(0))\n        val oddList11 = oddList10.filter(_\
    \ != lst2Copy(0))\n        val evenList12 = evenList11.filter(_ != lst1Copy(0))\n\
    \        val oddList12 = oddList11.filter(_ != lst2Copy(0))\n        val evenList13\
    \ = evenList12.filter(_ != lst1Copy(0))\n        val oddList13 = oddList12.filter(_\
    \ != lst2Copy(0))\n        val evenList14 = evenList13.filter(_ != lst1Copy(0))\n\
    \        val oddList14 = oddList13.filter(_ != lst2Copy(0))\n        val evenList15\
    \ = evenList14.filter(_ != lst1Copy(0))\n        val oddList15 = oddList14.filter(_\
    \ != lst2Copy(0))\n        val evenList16 = ", "        val lst1Even = lst1.filter(x\
    \ => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x => x % 2 == 0).toList\n\
    \        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n        val lst2Odd\
    \ = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd = lst1Even.zip(lst1Odd)\n\
    \        val lst2EvenAndOdd = lst2Even.zip(lst2Odd)\n        val lst1EvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd = lst2EvenAndOddAndNotBothEvenAndOdd.filter(x\
    \ => !lst1EvenAndOddAndNotBothEvenAndOdd.contains(x))\n        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.filter(x => !lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd.contains(x))\n\
    \        val lst1EvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOddAndNotBothEvenAnd", "        val lst1Even = lst1.filter(x =>\
    \ x % 2 == 0).length\n        val lst2Even = lst2.filter(x => x % 2 == 0).length\n\
    \        if (lst1Even > lst2Even) {\n            return \"NO\"\n        } else\
    \ if (lst1Even < lst2Even) {\n            return \"YES\"\n        } else {\n \
    \           val lst1EvenList = lst1.filter(x => x % 2 == 0).toList\n         \
    \   val lst2EvenList = lst2.filter(x => x % 2 == 0).toList\n            val lst1EvenList2\
    \ = lst1EvenList.zip(lst2EvenList).filter(x => x._1 == x._2).map(x => x._1)\n\
    \            val lst2EvenList2 = lst2EvenList.zip(lst1EvenList).filter(x => x._1\
    \ == x._2).map(x => x._1)\n            if (lst1EvenList2.length == lst2EvenList2.length)\
    \ {\n                val lst1EvenList3 = lst1EvenList2.zip(lst2EvenList2).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                val lst2EvenList3 = lst2EvenList2.zip(lst1EvenList2).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                if (lst1EvenList3.length ==\
    \ lst2EvenList3.length) {\n                    val lst1EvenList4 = lst1EvenList3.zip(lst2EvenList3).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                    val lst2EvenList4 = lst2EvenList3.zip(lst1EvenList3).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                    if (lst1EvenList4.length\
    \ == lst2EvenList4.length) {\n                        val lst1EvenList5 = lst1EvenList4.zip(lst2EvenList4).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                        val lst2EvenList5 =\
    \ lst2EvenList4.zip(lst1EvenList4).filter(x => x._1 == x._2).map(x => x._1)\n\
    \                        if (lst1EvenList5.length == lst2EvenList5.length) {\n\
    \                            val lst1EvenList6 = lst1EvenList5.zip(lst2EvenList5).filter(x\
    \ => x._1 == x._2).map(x => x._1)\n                            val lst2EvenList6\
    \ = lst2EvenList5.zip(lst1EvenList5).filter(x => x._1 == x._2).map(x => x._1)\n\
    \                            if (lst1EvenList6.length == lst", '        // Your
    code here', "        val lst3 = lst1.toSet\n        val lst4 = lst2.toSet\n  \
    \      val lst5 = lst3.intersect(lst4)\n        val lst6 = lst5.toList\n     \
    \   val lst7 = lst6.filter(_ % 2 == 0)\n        val lst8 = lst7.filter(_ > 0)\n\
    \        if(lst8.size == lst1.size){\n            return \"YES\"\n        }else{\n\
    \            return \"NO\"\n        }", "        val lst1Even = lst1.filter(_\
    \ % 2 == 0)\n        val lst2Even = lst2.filter(_ % 2 == 0)\n        val lst1Odd\
    \ = lst1.filter(_ % 2 != 0)\n        val lst2Odd = lst2.filter(_ % 2 != 0)\n \
    \       val lst1EvenOdd = lst1Even.zip(lst1Odd).filter(_._1 % 2 == 0).map(_._2)\n\
    \        val lst2EvenOdd = lst2Even.zip(lst2Odd).filter(_._1 % 2 == 0).map(_._2)\n\
    \        val lst1EvenEven = lst1Even.zip(lst1EvenOdd).filter(_._1 % 2 == 0).map(_._2)\n\
    \        val lst2EvenEven = lst2Even.zip(lst2EvenOdd).filter(_._1 % 2 == 0).map(_._2)\n\
    \        val lst1EvenOddEven = lst1EvenOdd.zip(lst1EvenEven).filter(_._1 % 2 ==\
    \ 0).map(_._2)\n        val lst2EvenOddEven = lst2EvenOdd.zip(lst2EvenEven).filter(_._1\
    \ % 2 == 0).map(_._2)\n        val lst1OddEvenOdd = lst1Odd.zip(lst1EvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst2OddEvenOdd = lst2Odd.zip(lst2EvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst1OddEvenEven = lst1Odd.zip(lst1OddEvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst2OddEvenEven = lst2Odd.zip(lst2OddEvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst1EvenEvenOddEven = lst1EvenEven.zip(lst1OddEvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst2EvenEvenOddEven = lst2EvenEven.zip(lst2OddEvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst1EvenOddEvenEven = lst1EvenOddEven.zip(lst1EvenEvenOdd).filter(_._1\
    \ % 2 != 0).map(_._2)\n        val lst2EvenOddEvenEven = lst2EvenOddEven.zip(lst2EvenEvenOdd).",
  "        val even = lst1.filter(x => x % 2 == 0).toList\n        val odd = lst2.filter(x\
    \ => x % 2 == 1).toList\n        val exchanged = even.zip(odd).filter(x => x._1\
    \ == x._2).map(x => x._1)\n        if(exchanged.isEmpty) \"NO\" else \"YES\"",
  '        // Your code here', "        val lst1Length = lst1.length\n        val\
    \ lst2Length = lst2.length\n        val evenList = lst1.filter(x => x % 2 == 0)\n\
    \        val oddList = lst1.filter(x => x % 2 != 0)\n        val evenListLength\
    \ = evenList.length\n        val oddListLength = oddList.length\n        val evenListSet\
    \ = evenList.toSet\n        val oddListSet = oddList.toSet\n        val evenListSetLength\
    \ = evenListSet.length\n        val oddListSetLength = oddListSet.length\n   \
    \     val exchangeSet = evenListSet.intersect(oddListSet)\n        val exchangeSetLength\
    \ = exchangeSet.length\n        if (exchangeSetLength == evenListSetLength &&\
    \ exchangeSetLength == oddListSetLength) {\n            if (evenListSetLength\
    \ == evenListLength && oddListSetLength == oddListLength) {\n                if\
    \ (evenListSetLength == oddListLength) {\n                    if (evenListSetLength\
    \ == 1) {\n                        if (evenListSet.isEmpty) {\n              \
    \              return \"NO\"\n                        } else {\n             \
    \               return \"YES\"\n                        }\n                  \
    \  } else {\n                        if (evenListSetLength == 2) {\n         \
    \                   if (evenListSet.isEmpty || oddListSet.isEmpty) {\n       \
    \                         return \"NO\"\n                            } else {\n\
    \                                return \"YES\"\n                            }\n\
    \                        } else {\n                            if (evenListSetLength\
    \ == oddListLength) {\n                                if (evenListSet.isEmpty\
    \ || oddListSet.isEmpty) {\n                                    return \"NO\"\n\
    \                                } else {\n                                  \
    \  return \"YES\"\n                                }\n                       \
    \     } else {\n                                if (evenListSetLength == evenListLength)\
    \ {\n                                    if (evenListSet.isEmpty || oddListSet.isEmpty)\
    \ {\n                                        return \"NO\"\n                 \
    \                   } else {\n                                        return \"\
    YES\"\n                                    }\n                               \
    \ } else {\n                                    if (evenListSetLength == oddListLength)\
    \ {\n                                        if (evenListSet.isEmpty || oddListSet.isEmpty)\
    \ {\n                                            return \"NO\"\n             \
    \                           } else {\n                                       \
    \     return \"YES\"\n                                        }\n            \
    \                        } else {\n                                        if\
    \ (evenListSetLength == evenListLength) {\n                                  \
    \          if (evenListSet.isEmpty || oddListSet.isEmpty) {\n                \
    \                                return \"NO\"\n                             \
    \               } else {\n                                                return\
    \ \"YES\"\n                                            }\n                   \
    \                     } else {\n                                            if\
    \ (evenListSetLength == oddListLength) {\n                                   \
    \             if (evenListSet.isEmpty || oddListSet.isEmpty) {\n             \
    \                                       return \"NO\"\n                      \
    \                          } else {\n                                        \
    \            return \"YES\"\n                                                }\n\
    \                                            } else {\n                      \
    \                          if (evenListSetLength == evenListLength) {\n      \
    \                                              if (", "        val lst1Even =\
    \ lst1.filter(x => x % 2 == 0).toList\n        val lst2Even = lst2.filter(x =>\
    \ x % 2 == 0).toList\n        val lst1Odd = lst1.filter(x => x % 2 != 0).toList\n\
    \        val lst2Odd = lst2.filter(x => x % 2 != 0).toList\n        val lst1EvenAndOdd\
    \ = lst1Even.intersect(lst2Odd)\n        val lst2EvenAndOdd = lst2Even.intersect(lst1Odd)\n\
    \        val lst1EvenAndOddAndEven = lst1EvenAndOdd.intersect(lst2EvenAndOdd)\n\
    \        val lst2EvenAndOddAndEven = lst2EvenAndOdd.intersect(lst1EvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEven.intersect(lst2EvenAndOddAndEven)\n\
    \        val lst2EvenAndOddAndEvenAndOdd = lst2EvenAndOddAndEven.intersect(lst1EvenAndOddAndEven)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEven = lst1EvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOddAndEvenAndOdd)\n\
    \        val lst2EvenAndOddAndEvenAndOddAndEven = lst2EvenAndOddAndEvenAndOdd.intersect(lst1EvenAndOddAndEvenAndOdd)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOdd = lst1EvenAndOddAndEvenAndOddAndEven.intersect(lst2EvenAndOddAndEvenAndOddAndEven)\n\
    \        val lst2EvenAndOddAndEvenAndOddAndEvenAndOdd = lst2EvenAndOddAndEvenAndOddAndEven.intersect(lst1EvenAndOddAndEvenAndOddAndEven)\n\
    \        val lst1EvenAndOddAndEvenAndOddAndEvenAndOddAndEven = lst1EvenAndOddAndEvenAndOddAndEvenAndOdd.intersect(lst2EvenAndOddAndEvenAndOddAndEvenAndOdd)\n\
    \        val lst2EvenAndOddAndEvenAndOdd", "        val even = lst1.filter(x =>\
    \ x % 2 == 0).toList\n        val odd = lst2.filter(x => x % 2 == 1).toList\n\
    \        val evenOdd = even.zip(odd).filter(x => x._1 == x._2)\n        val evenOddList\
    \ = evenOdd.map(x => x._1)\n        val evenOddList2 = evenOdd.map(x => x._2)\n\
    \        val evenOddList3 = evenOdd.map(x => x._1)\n        val evenOddList4 =\
    \ evenOdd.map(x => x._2)\n        val evenOddList5 = evenOdd.map(x => x._1)\n\
    \        val evenOddList6 = evenOdd.map(x => x._2)\n        val evenOddList7 =\
    \ evenOdd.map(x => x._1)\n        val evenOddList8 = evenOdd.map(x => x._2)\n\
    \        val evenOddList9 = evenOdd.map(x => x._1)\n        val evenOddList10\
    \ = evenOdd.map(x => x._2)\n        val evenOddList11 = evenOdd.map(x => x._1)\n\
    \        val evenOddList12 = evenOdd.map(x => x._2)\n        val evenOddList13\
    \ = evenOdd.map(x => x._1)\n        val evenOddList14 = evenOdd.map(x => x._2)\n\
    \        val evenOddList15 = evenOdd.map(x => x._1)\n        val evenOddList16\
    \ = evenOdd.map(x => x._2)\n        val evenOddList17 = evenOdd.map(x => x._1)\n\
    \        val evenOddList18 = evenOdd.map(x => x._2)\n        val evenOddList19\
    \ = evenOdd.map(x => x._1)\n        val evenOddList20 = evenOdd.map(x => x._2)\n\
    \        val evenOddList21 = evenOdd.map(x => x._1)\n        val evenOddList22\
    \ = evenOdd.map(x => x._2)\n        val evenOddList23 = evenOdd.map(x => x._1)\n\
    \        val evenOddList24 = evenOdd.map(x => x._2)\n        val evenOddList25\
    \ = evenOdd.map(x => x.", "        val lst1Even = lst1.filter(x => x % 2 == 0)\n\
    \        val lst2Even = lst2.filter(x => x % 2 == 0)\n        val lst1Odd = lst1.filter(x\
    \ => x % 2 != 0)\n        val lst2Odd = lst2.filter(x => x % 2 != 0)\n       \
    \ val lst1EvenAndOdd = lst1Even.intersect(lst1Odd)\n        val lst2EvenAndOdd\
    \ = lst2Even.intersect(lst2Odd)\n        val lst1EvenAndOddAndNotBothEvenAndOdd\
    \ = lst1EvenAndOdd.filter(x => !lst2EvenAndOdd.contains(x))\n        val lst2EvenAndOddAndNotBothEvenAndOdd\
    \ = lst2EvenAndOdd.filter(x => !lst1EvenAndOdd.contains(x))\n        if (lst1EvenAndOddAndNotBothEvenAndOdd.isEmpty)\
    \ {\n            if (lst2EvenAndOddAndNotBothEvenAndOdd.isEmpty) {\n         \
    \       return \"YES\"\n            } else {\n                return \"NO\"\n\
    \            }\n        } else {\n            return \"NO\"\n        }"]
stop_tokens:
- "\n    }\n"
