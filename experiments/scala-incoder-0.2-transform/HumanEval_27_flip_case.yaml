name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i + 1))\n            } else {\n             \
    \   result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until string.length){\n            if(string.charAt(i) == string.charAt(i).toLowerCase){\n\
    \                result.append((string.charAt(i).toUpperCase))\n            }\n\
    \            else{\n                result.append(string.charAt(i))\n        \
    \    }\n        }\n        return result.toString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpper)\n\
    \            else result.append(c.toLower)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n\
    \        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            result += string.charAt(i).toUpperCase\
    \ + string.charAt(i).toLowerCase\n        }\n        result", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length)\n          \
    \  if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A'))\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.map(_.toUpperCase)\n       \
    \ val result = chars.map(_.toLowerCase).mkString\n        result", "        var\
    \ result = \"\"\n        for(i <- 0 until string.length){\n            result\
    \ += string.charAt(i).toUpperCase + string.charAt(i).toLowerCase\n        }\n\
    \        return result", "        val chars = string.map(_.toUpperCase)\n    \
    \    val flipped = chars.reverse\n        val result = flipped.mkString(\"\")\n\
    \        result", "        val chars = string.map(c => if (c.toLowerCase == c)\
    \ c.toUpperCase else c)\n        chars.mkString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += c.toUpperCase\n            flipped += c.toLowerCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val charArray = string.toCharArray\n     \
    \   val newCharArray = charArray.map( c => if (c == c.toLower) c.toUpper else\
    \ c.toLower )\n        new String(newCharArray)", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for (i <- 0 until charArray.length) {\n            val c = charArray(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + charArray(i))\n            } else if (c >= 'A' && c <= 'Z') {\n          \
    \      result.append((c - 'A').toLower + charArray(i))\n            } else {\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n    \
    \        flipped += chars(i)\n        }\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.toUpperCase == c)\
    \ result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        string.foreach { char =>\n            if (char.isLower) result.append(char.toUpperCase)\n\
    \            else result.append(char.toLowerCase)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n\
    \            else\n                flipped += chars(i).toUpperCase\n        flipped.toString.trim",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(string){ (s, c) => s + c }", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ >= 'a' && string(i) <= 'z') {\n                result.append(string(i).toUpperCase)\n\
    \            } else if (string(i) >= 'A' && string(i) <= 'Z') {\n            \
    \    result.append(string(i).toLowerCase)\n            } else {\n            \
    \    result.append(string(i))\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if (string.charAt(i) >= 'a' && string.charAt(i) <=\
    \ 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result.append((char) Character.toUpperCase(c))\n        \
    \    } else {\n                result.append((char) Character.toLowerCase(c))\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            val c\
    \ = string.charAt(i)\n            if (c.isUpper) {\n                result +=\
    \ c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        result.toString", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        new String(chars)", " \
    \       val charArray = string.toCharArray\n        val flippedCharArray = charArray.map(\
    \ c => if (c == c.toLower) c.toUpper else c.toLower)\n        new String(flippedCharArray)",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val result = new StringBuilder()\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.isLower) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.chars\n        val\
    \ result = new StringBuilder\n        for (i <- 0 until chars.length) {\n    \
    \        val c = chars(i)\n            if (c.isLower) {\n                result\
    \ ++= c.toUpperCase\n            } else {\n                result ++= c.toLowerCase\n\
    \            }\n        }\n        result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        val charsReversed = chars.reverse\n        charsReversed.mkString(\"\"\
    )", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpperCase)\
    \ else result.append(c.toLowerCase)\n        }\n        result.toString", "  \
    \      val chars = string.map(_.toUpperCase)\n        val flipped = chars.reverse\n\
    \        val flippedString = flipped.mkString(\"\")\n        return flippedString",
  "        val chars = string.map(_.toUpperCase)\n        chars.foldLeft(\"\")(_ +\
    \ _)", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result += c.toUpperCase\n            } else {\n                result\
    \ += c.toLowerCase\n            }\n        }\n        result.toString", "    \
    \    val charArray = string.toCharArray\n        val newCharArray = charArray.map(c\
    \ => if (c == c.toLower) c.toUpper else c.toLower)\n        new String(newCharArray)",
  "        val upperCase = string.map(_.toUpperCase)\n        val lowerCase = string.map(_.toLowerCase)\n\
    \        upperCase ++ lowerCase", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpper))\n  \
    \          } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        result.toString", "        val charArray = string.toCharArray\n\
    \        val flippedCharArray = charArray.map(c => if (c.toLowerCase == c) c.toUpperCase\
    \ else c.toLowerCase)\n        new String(flippedCharArray)", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (c.isLower) {\n                result.append((c.toUpperCase))\n\
    \            } else {\n                result.append((c.toLowerCase))\n      \
    \      }\n        }\n        result.toString", "        val upperCase = string.map(_.toUpperCase)\n\
    \        val lowerCase = string.map(_.toLowerCase)\n        upperCase ++ lowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpper)\
    \ else result.append(c.toLower)\n        }\n        return result.toString", " \
    \       val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i))\n                flipped += chars(i).toUpperCase\n            else\n\
    \                flipped += chars(i).toLowerCase\n        flipped.mkString(\"\"\
    )", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(string.charAt(i).toUpper)\n            result.append(string.charAt(i).toLower)\n\
    \        result.toString", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val result = new\
    \ StringBuilder()\n        for (i <- 0 until string.length) {\n            val\
    \ c = string.charAt(i)\n            if (c.isUpper) {\n                result.append(c.toLower)\n\
    \            } else {\n                result.append(c.toUpper)\n            }\n\
    \        }\n        return result.toString", "        val upperCase = string.map(_.toUpperCase)\n\
    \        val lowerCase = string.map(_.toLowerCase)\n        upperCase ++ lowerCase",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") {\n      \
    \      case (acc, c) => (if (c.isUpper) acc.toUpper+c.toLower else acc.toLower+c.toUpper)\n\
    \        }", "        val chars = string.chars\n        val result = new StringBuilder\n\
    \        for(i <- 0 until chars.length){\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z'){\n                result ++= chars(i).toUpper\n            }\n     \
    \       else if(chars(i) >= 'A' && chars(i) <= 'Z'){\n                result ++=\
    \ chars(i).toLower\n            }\n            else {\n                result\
    \ ++= chars(i)\n            }\n        }\n        result.toString", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until string.length) {\n   \
    \         val c = string.charAt(i)\n            if (c.isUpper) {\n           \
    \     result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.map(_.toUpperCase)\n        val result = chars.reverse.mkString(\"\"\
    )\n        result", "        val chars = string.map(c => if (c.toLowerCase ==\
    \ c) c.toUpperCase else c.toLowerCase)\n        chars.mkString", "        val\
    \ chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[String]\n\
    \        chars.foreach(c => {\n            if (c.isUpper) flipped += c.toUpperCase\n\
    \            else flipped += c.toLowerCase\n        })\n        flipped.mkString(\"\
    \")", "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ )\n                result.append((string.charAt(i).toUpperCase + string.charAt(i).toLowerCase))\n\
    \            else\n                result.append(string.charAt(i))\n        result.toString()",
  "        val chars = string.chars\n        val flipped = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += if (c.isUpper) c.toLower else c.toUpper\n        }\n \
    \       flipped.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length) {\n  \
    \          flipped += chars(i).swapCase\n        }\n        flipped.toString.toLowerCase",
  "        val chars = string.split(\"\")\n        val upperChars = chars.map(c =>\
    \ if (c.isUpper) c.toLower else c.toUpper)\n        val lowerChars = chars.map(c\
    \ => if (c.isUpper) c.toUpper else c.toLower)\n        val result = new String(upperChars.mkString)\n\
    \        result += new String(lowerChars.mkString)\n        result", "       \
    \ val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ result = new StringBuilder\n        for (i <- 0 until string.length) {\n   \
    \         val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                result.append((c - 'a').toUpper + string.charAt(i + 1))\n   \
    \         } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result += c.toUpperCase\n     \
    \       } else {\n                result += c.toLowerCase\n            }\n   \
    \     }\n        result.toString", "        val result = new StringBuilder\n \
    \       string.foreach(c => {\n            if (c.toLowerCase == c) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        })\n        result.toString",
  "        val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ ) {\n                result.append(string.charAt(i).toLowerCase)\n         \
    \   } else {\n                result.append(string.charAt(i).toUpperCase)\n  \
    \          }\n        }\n        return result.toString()", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length) {\n          \
    \  val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z') {\n       \
    \         result.append((c - 'a').toUpper + string.charAt(i + 1))\n          \
    \  } else {\n                result.append(c)\n            }\n        }\n    \
    \    return result.toString", "        val result = new StringBuilder\n      \
    \  for (i <- 0 until string.length)\n            if (string.charAt(i) >= 'a' &&\
    \ string.charAt(i) <= 'z')\n                result.append((string.charAt(i) -\
    \ 'a' + 'A'))\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.map(c => if (c.isUpper) c.toLower\
    \ else c.toUpper)\n        chars.mkString(\"\")", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) >=\
    \ 'a' && string.charAt(i) <= 'z')\n                result.append(string.charAt(i).toUpper)\n\
    \            else\n                result.append(string.charAt(i))\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result ++= c.toUpperCase\n            } else {\n                result\
    \ ++= c.toLowerCase\n            }\n        }\n        result.toString", "   \
    \     val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i)\n  \
    \          flipped += chars(chars.length - i - 1)\n        }\n        flipped.toString.toUpperCase",
  "        val chars = string.split(\"\").toList\n        val flipped = chars.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        val flippedString = flipped.mkString(\"\
    \")\n        return flippedString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpperCase))\n\
    \            } else {\n                result.append((c.toLowerCase))\n      \
    \      }\n        }\n        return result.toString", "        val charArray =\
    \ string.toCharArray\n        val result = new StringBuilder\n        charArray.foreach(c\
    \ => {\n            if (c.toLowerCase == c) result.append(c.toUpperCase)\n   \
    \         else result.append(c.toLowerCase)\n        })\n        result.toString",
  "        val chars = string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n\
    \        chars.mkString", "        val chars = string.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c)\n        new String(chars)", "        val charArray\
    \ = string.toCharArray\n        val upperCharArray = charArray.map(c => if (c.toUpper\
    \ == c) c.toLower else c.toUpper)\n        new String(upperCharArray)", "    \
    \    val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            val c = chars(i)\n       \
    \     if (c.isUpper) {\n                result ++= c.toLower\n            } else\
    \ {\n                result ++= c.toUpper\n            }\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length)\n            flipped += chars(i).swap\n\
    \        new String(flipped.toArray)", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c))\n\
    \            } else {\n                result.append(Character.toLowerCase(c))\n\
    \            }\n        }\n        return result.toString()", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.isLower) {\n                result += \"_\" + c\n            } else\
    \ {\n                result += c\n            }\n        }\n        result.toString",
  "        val chars = string.split(\"\")\n        chars.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower).mkString", "        val chars = string.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n        chars.mkString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (Character.isLowerCase(c))\
    \ {\n                result.append(Character.toUpperCase(c))\n            } else\
    \ {\n                result.append(Character.toLowerCase(c))\n            }\n\
    \        }\n        return result.toString()", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer.empty[Char]\n        chars.foreach {\
    \ c =>\n            flipped += c.toUpperCase\n            flipped += c.toLowerCase\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length){\n            val c = string.charAt(i)\n\
    \            if(c >= 'a' && c <= 'z'){\n                result.append((c - 'a').toUpper\
    \ + string.charAt(i+1))\n            }\n            else if(c >= 'A' && c <= 'Z'){\n\
    \                result.append((c - 'A').toUpper + string.charAt(i+1))\n     \
    \       }\n            else{\n                result.append(c)\n            }\n\
    \        }\n        return result.toString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isUpper) {\n            \
    \    result += c.toLower\n            } else {\n                result += c.toUpper\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            val c\
    \ = string.charAt(i)\n            if (c.isUpper) {\n                result +=\
    \ c.toUpperCase\n            } else {\n                result += c.toLowerCase\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val flipped = mutable.ArrayBuffer.empty[Char]\n    \
    \    for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase ==\
    \ chars(i).toUpperCase )\n                flipped += chars(i).toLowerCase\n  \
    \          else\n                flipped += chars(i).toUpperCase\n        flipped.mkString",
  "        val chars = string.split(\"\")\n        val upperChars = chars.map(c =>\
    \ if (c.isUpper) c.toLower else c.toUpper)\n        val lowerChars = chars.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        val result = new String(upperChars.mkString(\"\
    \") + lowerChars.mkString(\"\"))\n        result", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c))\n\
    \            } else {\n                result.append(Character.toLowerCase(c))\n\
    \            }\n        }\n        result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        val flipped = chars.reverse\n        val result = flipped.mkString(\"\
    \")\n        return result", "        val chars = string.chars\n        val result\
    \ = new StringBuilder\n        chars.foreach { c =>\n            if (c.toLowerCase\
    \ == c) result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString", "        val chars = string.split(\"\")\n\
    \        chars.foldLeft(\"\") {\n            case (acc, c) =>\n              \
    \  val upper = c.toUpperCase\n                val lower = c.toLowerCase\n    \
    \            acc + (if (upper.equals(lower)) upper else lower)\n        }", " \
    \       val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.toUpperCase == c)\
    \ {\n                result.append(c.toUpperCase)\n            } else {\n    \
    \            result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase\
    \ && string.charAt(i) != '?')\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i))\n        return\
    \ result.toString", "        val chars = string.map(c => if (c.toLowerCase ==\
    \ c) c.toUpperCase else c)\n        new String(chars)", "        val chars = string.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString", "    \
    \    val result = new StringBuilder()\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpperCase))\n            } else {\n          \
    \      result.append((c.toLowerCase))\n            }\n        }\n        return\
    \ result.toString()", "        val chars = string.chars\n        val flipped =\
    \ mutable.Buffer.empty[Char]\n        for (i <- 0 until chars.length) {\n    \
    \        flipped += chars(i).swapCase\n        }\n        flipped.toString", " \
    \       val result = new StringBuilder()\n        for (i <- 0 until string.length)\n\
    \            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n       \
    \         result.append((string.charAt(i) - 'a' + 'A'))\n            else if (string.charAt(i)\
    \ >= 'A' && string.charAt(i) <= 'Z')\n                result.append((string.charAt(i)\
    \ - 'A' + 'a'))\n            else\n                result.append(string.charAt(i))\n\
    \        return result.toString()", "        val chars = string.chars\n      \
    \  val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.mkString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { char =>\n            if (char.isLower) flipped += char.toUpperCase\n\
    \            else flipped += char.toLowerCase\n        }\n        flipped.toString.toUpperCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val chars = string.chars\n        val result = new StringBuilder\n    \
    \    for (i <- 0 until chars.length) {\n            val c = chars(i)\n       \
    \     if (c.isUpper) {\n                result.append(c.toLower)\n           \
    \ } else {\n                result.append(c)\n            }\n        }\n     \
    \   result.toString", "        val chars = string.split(\"\")\n        chars.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower).mkString", "        val charArray\
    \ = string.toCharArray\n        val result = new StringBuilder\n        for (i\
    \ <- 0 until charArray.length) {\n            val c = charArray(i)\n         \
    \   if (c.isLower) result.append(c.toUpper) else result.append(c.toLower)\n  \
    \      }\n        result.toString", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c))\n\
    \            } else {\n                result.append(Character.toLowerCase(c))\n\
    \            }\n        }\n        return result.toString()", "        val chars\
    \ = string.chars\n        val flipped = new mutable.ListBuffer[Char]()\n     \
    \   chars.foreach { c =>\n            flipped += c.toUpperCase\n            flipped\
    \ += c.toLowerCase\n        }\n        flipped.toString.toUpperCase", "      \
    \  val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.mkString", "        val result = new StringBuilder\n\
    \        string.foreach(c => if (c.isLower) c.toUpper else c.toLower)\n      \
    \  result.toString", "        val chars = string.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower)\n        chars.mkString", "        val result = new StringBuilder\n\
    \        for(i <- string.length - 1){\n            if(string.charAt(i) == string.charAt(i).toLowerCase){\n\
    \                result.append((string.charAt(i).toUpperCase))\n            }\n\
    \            else{\n                result.append(string.charAt(i))\n        \
    \    }\n        }\n        return result.toString", "        val chars = string.chars.toList\n\
    \        val flipped = chars.map(c => if (c.isUpper) c.toLower else c.toUpper)\n\
    \        new String(flipped)", "        val chars = string.chars\n        val\
    \ flipped = new mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            flipped += chars(i)\n        }\n        for(i <- 0 until flipped.length){\n\
    \            flipped(i) match {\n                case c if c.isUpperCase => flipped(i)\
    \ match {\n                    case c if c.isLowerCase => flipped(i) match {\n\
    \                        case c if c.isUpperCase => flipped(i) match {\n     \
    \                       case c if c.isLowerCase => flipped(i) match {\n      \
    \                          case c if c.isUpperCase => flipped(i) match {\n   \
    \                                 case c if c.isLowerCase => flipped(i) match\
    \ {\n                                        case c if c.isUpperCase => flipped(i)\
    \ match {\n                                            case c if c.isLowerCase\
    \ => flipped(i) match {\n                                                case\
    \ c if c.isUpperCase => flipped(i) match {\n                                 \
    \                   case c if c.isLowerCase => flipped(i) match {\n          \
    \                                              case c if c.isUpperCase => flipped(i)\
    \ match {\n                                                            case c\
    \ if c.isLowerCase => flipped(i) match {\n                                   \
    \                             case c if c.isUpperCase => flipped(i) match {\n\
    \                                                                    case c if\
    \ c.isLowerCase => flipped(i) match {\n                                      \
    \                                  case c if c.isUpperCase => flipped(i) match\
    \ {\n                                                                        \
    \    val flippedString = flipped.mkString.toUpperCase\n                      \
    \                                                      return flippedString\n\
    \                                                                        }\n \
    \                                                                   }\n      \
    \                                                          }\n               \
    \                                             }\n                            \
    \                            }\n                                             \
    \       }\n                                                }\n               \
    \                             }\n                                        }\n \
    \                                   }\n                                }\n   \
    \                         }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        val flippedString = flipped.mkString.toUpperCase\n\
    \        return flippedString", "        val chars = string.chars\n        val\
    \ flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n       \
    \     flipped += if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase\n  \
    \      }\n        flipped.toString.toLowerCase", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.toString.toUpperCase",
  "        val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for(i <- 0 until charArray.length){\n            val c = charArray(i)\n\
    \            if(c >= 'a' && c <= 'z'){\n                result.append((charArray(i)\
    \ - 'a').toChar)\n            }\n            else if(c >= 'A' && c <= 'Z'){\n\
    \                result.append((charArray(i) - 'A').toChar)\n            }\n \
    \           else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.split(\"\").toList\n\
    \        chars.reverse.foldLeft(\"\") {\n            case (acc, c) => acc + (if\
    \ (c.isLower) c.toUpper else c.toLower)\n        }", "        val chars = string.split(\"\
    \")\n        chars.foldLeft(\"\") { (result, char) =>\n            if (char.isUpper)\
    \ {\n                result + char.swapCase\n            } else {\n          \
    \      result + char\n            }\n        }", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) {\n            \
    \    result.append(c.toUpperCase)\n            } else {\n                result.append(c.toLowerCase)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for(i <- 0 until\
    \ chars.length)\n            result.append(chars(i).swapCase)\n        result.toString",
  "        val chars = string.split(\"\")\n        val flipped = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until chars.length)\n            if (chars(i).toLowerCase\
    \ == chars(i).toUpperCase && chars(i).toUpperCase != chars(i).toLowerCase)\n \
    \               flipped += chars(i).toLowerCase\n            else\n          \
    \      flipped += chars(i).toUpperCase\n        flipped.mkString", "        val\
    \ chars = string.map(_.toUpperCase)\n        chars.foldLeft(string){ (result,\
    \ char) => result + char.toUpperCase}", "        val chars = string.split(\"\"\
    )\n        chars.map(c => if (c.isLower) c.toUpper else c.toLower).mkString",
  "        val chars = string.map(_.toUpperCase)\n        chars.foldLeft(string){\
    \ (result, char) => char + result }", "        val chars = string.chars\n    \
    \    val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { char =>\n\
    \            if (char.isLower) flipped += char.toUpperCase\n            else flipped\
    \ += char.toLowerCase\n        }\n        flipped.toString.toLowerCase", "   \
    \     val chars = string.map(c => if (c.isUpper) c.toLower else c.toUpper)\n \
    \       chars.mkString", "        val chars = string.map(c => if (c.isLower) c.toUpper\
    \ else c.toLower)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.toLowerCase == c) c.toUpperCase else c)\n        chars.mkString", " \
    \       val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            if (string(i).isLower) {\n                result.append(string(i).swapCase)\n\
    \            } else {\n                result.append(string(i))\n            }\n\
    \        }\n        return result.toString", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toUpperCase", "        val chars = string.split(\"\
    \")\n        val upperChars = chars.map(_.toUpperCase)\n        val lowerChars\
    \ = chars.map(_.toLowerCase)\n        val result = new StringBuilder\n       \
    \ upperChars.foreach(c => result.append(c))\n        lowerChars.foreach(c => result.append(c))\n\
    \        result.toString", "        val chars = string.map(c => if (c.toLowerCase\
    \ == c) c.toUpperCase else c)\n        new String(chars)", "        val chars\
    \ = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString",
  "        val upperCase = string.map(_.toUpperCase)\n        val lowerCase = string.map(_.toLowerCase)\n\
    \        upperCase ++ lowerCase", "        val chars = string.split(\"\")\n  \
    \      val result = new StringBuilder()\n        chars.foreach { char =>\n   \
    \         val upper = char.toUpper\n            val lower = char.toLower\n   \
    \         if (upper != lower) {\n                result.append(upper)\n      \
    \          result.append(lower)\n            } else {\n                result.append(lower)\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for (i <- 0 until string.length) {\n            val c\
    \ = string.charAt(i)\n            if (c.isLower) {\n                result.append((c.toUpper))\n\
    \            } else {\n                result.append((c.toLower))\n          \
    \  }\n        }\n        return result.toString", "        val chars = string.map(_.toUpperCase)\n\
    \        val flipped = chars.reverse\n        val result = flipped.mkString(\"\
    \")\n        result", "        val chars = string.chars\n        val flipped =\
    \ mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until chars.length){\n \
    \           flipped += chars(i)\n        }\n        flipped.toString.toLowerCase",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            if (string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase ) {\n                result.append((string.charAt(i).toLowerCase))\n\
    \            } else {\n                result.append((string.charAt(i).toUpperCase))\n\
    \            }\n        }\n        return result.toString()", "        val result\
    \ = new StringBuilder\n        for (i <- 0 until string.length)\n            if\
    \ (string.charAt(i).toLowerCase == string.charAt(i).toUpperCase && string.charAt(i).toUpperCase\
    \ != string.charAt(i).toLowerCase)\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val chars = string.split(\"\")\n        val\
    \ result = new StringBuilder()\n        chars.foreach(c => {\n            if (c.isLower)\
    \ result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        })\n        return result.toString()", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\n\
    \            result.append(chars(i).swapCase())\n        result.toString", " \
    \       val result = new StringBuilder\n        string.foreach(c => {\n      \
    \      val upper = c.toUpperCase\n            val lower = c.toLowerCase\n    \
    \        if (upper != lower) {\n                result.append(upper)\n       \
    \         result.append(lower)\n            }\n        })\n        result.toString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until string.length) {\n            val c = string.charAt(i)\n     \
    \       if (c.toLowerCase == c) result.append(c.toUpperCase)\n            else\
    \ result.append(c.toLowerCase)\n        }\n        result.toString", "       \
    \ val chars = string.map(c => if (c.toUpperCase == c) c.toLowerCase else c.toUpperCase)\n\
    \        chars.mkString", "        val result = new StringBuilder()\n        for\
    \ (i <- 0 until string.length)\n            if (string.charAt(i).toLowerCase ==\
    \ string.charAt(i).toUpperCase && string.charAt(i) != 'A')\n                result.append((string.charAt(i).toUpperCase\
    \ + string.charAt(i).toLowerCase))\n            else\n                result.append(string.charAt(i))\n\
    \        result.toString()", "        val chars = string.split(\"\")\n       \
    \ val flipped = mutable.ListBuffer[String]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).toUpperCase + chars(i).toLowerCase\n    \
    \    }\n        flipped.mkString(\"\")", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (Character.isLowerCase(c)) {\n                result ++= c.toUpperCase\n\
    \            } else {\n                result ++= c.toLowerCase\n            }\n\
    \        }\n        result.toString", "        val chars = string.chars\n    \
    \    val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += c.toUpperCase\n            flipped += c.toLowerCase\n\
    \        }\n        flipped.toString.toUpperCase", "        val charArray = string.toCharArray\n\
    \        val result = new StringBuilder\n        for (i <- 0 until charArray.length)\
    \ {\n            if (charArray(i) >= 'a' && charArray(i) <= 'z') {\n         \
    \       result.append(charArray(i).toUpperCase)\n            } else {\n      \
    \          result.append(charArray(i).toLowerCase)\n            }\n        }\n\
    \        return result.toString", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString", "    \
    \    val chars = string.map(_.toUpperCase)\n        val flipped = chars.reverse\n\
    \        val flippedString = flipped.mkString(\"\")\n        return flippedString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val chars = string.split(\"\")\n        val\
    \ upperChars = chars.map(c => if (c.isUpper) c.toLower else c.toUpper)\n     \
    \   val lowerChars = chars.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        val result = new String(upperChars.mkString)\n        result += new String(lowerChars.mkString)\n\
    \        result", "        val chars = string.chars.toList\n        chars.reverse.foldLeft(\"\
    \")( (acc, c) => acc + c.toUpper + c.toLower )", "        val result = new StringBuilder()\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpperCase))\n\
    \            } else {\n                result.append((c.toLowerCase))\n      \
    \      }\n        }\n        result.toString()", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isLower) {\n                result.append((c.toUpper))\n  \
    \          } else {\n                result.append((c.toLower))\n            }\n\
    \        }\n        result.toString", "        val chars = string.chars\n    \
    \    val flipped = mutable.ArrayBuffer.empty[Char]\n        chars.foreach { char\
    \ =>\n            char match {\n                case c if c.isLower => flipped\
    \ += c.toUpper\n                case c if c.isUpper => flipped += c.toLower\n\
    \                case _ => flipped += char\n            }\n        }\n       \
    \ flipped.toString.reverse", "        val chars = string.split(\"\")\n       \
    \ chars.map(c => if (c.toLowerCase == c) c.toUpperCase else c.toLowerCase)", " \
    \       val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if (string.charAt(i) == string.charAt(i).toLower) string.charAt(i).toUpper\
    \ else string.charAt(i).toLower)\n        result.toString", "        val chars\
    \ = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString",
  "        val chars = string.split(\"\")\n        val result = new StringBuilder\n\
    \        for (i <- 0 until chars.length)\n            result.append(chars(i).swapCase())\n\
    \        result.toString()", "        val result = new StringBuilder\n       \
    \ string.foreach(c => {\n            if (c.toLowerCase == c) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        })\n        result.toString",
  "        val charArray = string.toCharArray\n        val upperCaseCharArray = charArray.map(c\
    \ => if (c.toUpper == c) c.toLower else c.toUpper)\n        new String(upperCaseCharArray)",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isUpper) {\n    \
    \            result.append(c.toLower)\n            } else {\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = string.chars\n        val result = new StringBuilder\n        for (i <- 0\
    \ until chars.length) {\n            val c = chars(i)\n            if (c.isLower)\
    \ {\n                result.append((c.toUpper))\n            } else {\n      \
    \          result.append((c.toLower))\n            }\n        }\n        return\
    \ result.toString", "        val chars = string.chars\n        val result = new\
    \ StringBuilder\n        chars.foreach { c =>\n            if (c.isLower) result.append(c.toUpperCase)\n\
    \            else result.append(c.toLowerCase)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        chars.foreach { c =>\n            if (c.isLower) flipped += c.toUpper\n\
    \            else flipped += c.toLower\n        }\n        flipped.mkString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\n\
    \            result.append(if (string.charAt(i) >= 'a' && string.charAt(i) <=\
    \ 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n        result.toString",
  "        val chars = string.map(_.toUpperCase)\n        val flipped = chars.reverse.mkString(\"\
    \")\n        return flipped", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\n    \
    \        if (chars(i).toLowerCase == chars(i).toUpperCase)\n                flipped\
    \ += chars(i).toLowerCase\n            else\n                flipped += chars(i).toUpperCase\n\
    \        flipped.toString.trim", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)\n        chars.mkString(\"\")",
  "        val result = new StringBuilder\n        for(i <- 0 until string.length)\n\
    \            result.append(if(string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\
    \ string.charAt(i).toUpper else string.charAt(i).toLower)\n        result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.isLower) {\n    \
    \            result.append((c.toUpper))\n            } else {\n              \
    \  result.append((c.toLower))\n            }\n        }\n        return result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer.empty[Char]\n\
    \        for (i <- 0 until chars.length) {\n            flipped += chars(i).swapCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            if(string.charAt(i).toLowerCase\
    \ == string.charAt(i).toUpperCase )\n                result.append(string.charAt(i).toLowerCase)\n\
    \            else\n                result.append(string.charAt(i).toUpperCase)\n\
    \        result.toString()", "        val chars = string.map(c => if (c.isLower)\
    \ c.toUpper else c.toLower)\n        chars.mkString", "        val chars = string.map(_.toUpperCase)\n\
    \        chars.foldLeft(\"\")(_ + _)", "        val chars = string.chars\n   \
    \     val flipped = mutable.ListBuffer[Char]()\n        for (i <- 0 until chars.length)\
    \ {\n            flipped += chars(i).swapCase\n        }\n        flipped.toString.toLowerCase",
  "        val chars = string.split(\"\")\n        chars.foldLeft(\"\") { (result,\
    \ char) =>\n            val upper = char.toUpper\n            val lower = char.toLower\n\
    \            result + upper + lower\n        }", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (Character.isLowerCase(c)) {\n                result.append(Character.toUpperCase(c))\n\
    \            } else {\n                result.append(Character.toLowerCase(c))\n\
    \            }\n        }\n        return result.toString()", "        val chars\
    \ = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach\
    \ { c =>\n            flipped += c.toUpper\n            flipped += c.toLower\n\
    \        }\n        flipped.toString.toUpperCase", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- string.toCharArray) {\n            result += (if (i == 'a') 'A'\
    \ else if (i == 'b') 'B' else if (i == 'c') 'C' else if (i == 'd') 'D' else if\
    \ (i == 'e') 'E' else if (i == 'f') 'F' else if (i == 'g') 'G' else if (i == 'h')\
    \ 'H' else if (i == 'i') 'I' else if (i == 'j') 'J' else if (i == 'k') 'K' else\
    \ if (i == 'l') 'L' else if (i == 'm') 'M' else if (i == 'n') 'N' else if (i ==\
    \ 'o') 'O' else if (i == 'p') 'P' else if (i == 'q') 'Q' else if (i == 'r') 'R'\
    \ else if (i == 's') 'S' else if (i == 't') 'T' else if (i == 'u') 'U' else if\
    \ (i == 'v') 'V' else if (i == 'w') 'W' else if (i == 'x') 'X' else if (i == 'y')\
    \ 'Y' else if (i == 'z') 'Z' else i)\n        }\n        result.toString", " \
    \       var result = \"\"\n        for (i <- 0 until string.length) {\n      \
    \      if (string(i) >= 'a' && string(i) <= 'z') {\n                result +=\
    \ string(i).toUpperCase\n            } else if (string(i) >= 'A' && string(i)\
    \ <= 'Z') {\n                result += string(i).toLowerCase\n            } else\
    \ {\n                result += string(i)\n            }\n        }\n        result"]
stop_tokens:
- "\n    }\n"
