name: HumanEval_27_flip_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(flipCase((\"\")).equals((\"\
  \")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n    assert(flipCase((\"\
  These violent delights have violent ends\")).equals((\"tHESE VIOLENT DELIGHTS HAVE\
  \ VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result.append((c - 'a').toUpper + string.charAt(i + 1))\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result.append((c\
    \ - 'A').toUpper + string.charAt(i + 1))\n            } else {\n             \
    \   result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until string.length){\n            if(string.charAt(i) == string.charAt(i).toLowerCase){\n\
    \                result.append((string.charAt(i).toUpperCase))\n            }\n\
    \            else{\n                result.append(string.charAt(i))\n        \
    \    }\n        }\n        return result.toString", "        val chars = string.chars\n\
    \        val result = new StringBuilder\n        for (i <- 0 until chars.length)\
    \ {\n            val c = chars(i)\n            if (c.isLower) result.append(c.toUpper)\n\
    \            else result.append(c.toLower)\n        }\n        result.toString",
  "        val chars = string.chars\n        val flipped = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until chars.length)\n            flipped += chars(i).swapCase\n\
    \        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for (i <- 0 until string.length) {\n            val c = string.charAt(i)\n\
    \            if (c.isUpper) {\n                result.append(c.toLower)\n    \
    \        } else {\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        var result = \"\"\n        for (i <-\
    \ 0 until string.length) {\n            result += string.charAt(i).toUpperCase\
    \ + string.charAt(i).toLowerCase\n        }\n        result", "        val result\
    \ = new StringBuilder()\n        for (i <- 0 until string.length)\n          \
    \  if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z')\n                result.append((string.charAt(i)\
    \ - 'a' + 'A'))\n            else if (string.charAt(i) >= 'A' && string.charAt(i)\
    \ <= 'Z')\n                result.append((string.charAt(i) - 'A' + 'a'))\n   \
    \         else\n                result.append(string.charAt(i))\n        return\
    \ result.toString()", "        val chars = string.map(_.toUpperCase)\n       \
    \ val result = chars.map(_.toLowerCase).mkString\n        result", "        var\
    \ result = \"\"\n        for(i <- 0 until string.length){\n            result\
    \ += string.charAt(i).toUpperCase + string.charAt(i).toLowerCase\n        }\n\
    \        return result", "        val chars = string.map(_.toUpperCase)\n    \
    \    val flipped = chars.reverse\n        val result = flipped.mkString(\"\")\n\
    \        result", "        val chars = string.map(c => if (c.toLowerCase == c)\
    \ c.toUpperCase else c)\n        chars.mkString", "        val chars = string.chars\n\
    \        val flipped = mutable.ListBuffer[Char]()\n        chars.foreach { c =>\n\
    \            flipped += c.toUpperCase\n            flipped += c.toLowerCase\n\
    \        }\n        flipped.toString.toLowerCase", "        val result = new StringBuilder\n\
    \        for(i <- 0 until string.length)\n            result.append(if(string.charAt(i)\
    \ >= 'a' && string.charAt(i) <= 'z') string.charAt(i).toChar else string.charAt(i).toUpperCase)\n\
    \        result.toString", "        val charArray = string.toCharArray\n     \
    \   val newCharArray = charArray.map( c => if (c == c.toLower) c.toUpper else\
    \ c.toLower )\n        new String(newCharArray)", "        val chars = string.map(c\
    \ => if (c.isLower) c.toUpper else c.toLower)\n        chars.mkString", "    \
    \    val charArray = string.toCharArray\n        val result = new StringBuilder\n\
    \        for (i <- 0 until charArray.length) {\n            val c = charArray(i)\n\
    \            if (c >= 'a' && c <= 'z') {\n                result.append((c - 'a').toUpper\
    \ + charArray(i))\n            } else if (c >= 'A' && c <= 'Z') {\n          \
    \      result.append((c - 'A').toLower + charArray(i))\n            } else {\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = string.map(c => if (c.isLower) c.toUpper else c.toLower)\n\
    \        chars.mkString", "        val chars = string.chars\n        val flipped\
    \ = mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n    \
    \        flipped += chars(i)\n        }\n        flipped.toString.toLowerCase",
  "        val result = new StringBuilder\n        for (i <- 0 until string.length)\
    \ {\n            val c = string.charAt(i)\n            if (c.toUpperCase == c)\
    \ result.append(c.toUpperCase)\n            else result.append(c.toLowerCase)\n\
    \        }\n        result.toString"]
stop_tokens:
- "\n    }\n"
