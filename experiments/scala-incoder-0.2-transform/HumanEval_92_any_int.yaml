name: HumanEval_92_any_int
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes 3 numbers.\n    // Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
  \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
  \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
  \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l)\
  \ == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
  \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
  \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
  \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n\
  \    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) ==\
  \ (false));\n    }\n\n}\n"
completions: ['        (x == (x + y) && x == (x + z) && x == (y + z)) || (x == (x
    - y) && x == (x - z) && x == (y - z))', "        val sum = x + y + z\n       \
    \ val isInteger = sum.toInt == sum\n        val isSum = x + y == sum\n       \
    \ val isAllInteger = isInteger && isSum\n        isAllInteger", "        val sum\
    \ = x + y + z\n        val isInteger = sum.toInt == sum\n        val isSum = x\
    \ + y + z == sum\n        val isEqual = x + y + z == sum\n        val isEqual2\
    \ = x + y == sum\n        val isEqual3 = x + z == sum\n        val isEqual4 =\
    \ x + y == z\n        val isEqual5 = x + z == y\n        val isEqual6 = x + y\
    \ == z\n        val isEqual7 = x + z == y\n        val isEqual8 = x + y == z\n\
    \        val isEqual9 = x + z == y\n        val isEqual10 = x + y == z\n     \
    \   val isEqual11 = x + z == y\n        val isEqual12 = x + y == z\n        val\
    \ isEqual13 = x + z == y\n        val isEqual14 = x + y == z\n        val isEqual15\
    \ = x + z == y\n        val isEqual16 = x + y == z\n        val isEqual17 = x\
    \ + z == y\n        val isEqual18 = x + y == z\n        val isEqual19 = x + z\
    \ == y\n        val isEqual20 = x + y == z\n        val isEqual21 = x + z == y\n\
    \        val isEqual22 = x + y == z\n        val isEqual23 = x + z == y\n    \
    \    val isEqual24 = x + y == z\n        val isEqual25 = x + z == y\n        val\
    \ isEqual26 = x + y == z\n        val isEqual27 = x + z == y\n        val isEqual28\
    \ = x + y == z\n        val isEqual29 = x + z == y\n        val isEqual30 = x\
    \ + y == z\n        val isEqual31 = x + z == y\n        val isEqual32 = x + y\
    \ == z\n        val isEqual33 = x + z == y\n        val isEqual34 = x + y == z\n\
    \        val isEqual35 = x + z == y\n        val isEqual36 = x + y == z\n    \
    \    val isEqual37 = x + z == y\n        val isEqual38 = x + y == z\n        val\
    \ isEqual39 = x + z == y\n        val isEqual40 = x + y == z\n        val isEqual41\
    \ = x + z == y\n        val isEqual42 = x + y == z\n        val isEqual43 = x\
    \ + z == y\n        val isEqual44 = x + y == z\n        val isEqual45 = x + z\
    \ == y\n        val isEqual46 = x + y == z\n        val isEqual47 = x + z == y\n",
  "        val sum = x + y + z\n        val isInteger = (sum % 1) == 0\n        val\
    \ isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n      \
    \  isAllInteger", "        val sum = x + y + z\n        val isInteger = (sum.toInt\
    \ % 1 == 0)\n        val isSum = (sum == x)\n        val isAllInteger = (isInteger\
    \ && isSum)\n        isAllInteger", "        val sum = x + y + z\n        val\
    \ isInteger = (sum % 1) == 0\n        val isSum = (sum == x)\n        val isAllInteger\
    \ = (isInteger && isSum)\n        isAllInteger", "        val xs = List(x, y,\
    \ z)\n        val ys = xs.map(_.toInt)\n        val zs = xs.map(_.toInt)\n   \
    \     val sum = xs.sum\n        val xIsInt = xs.forall(_.toInt % 1 == 0)\n   \
    \     val yIsInt = ys.forall(_.toInt % 1 == 0)\n        val zIsInt = zs.forall(_.toInt\
    \ % 1 == 0)\n        val sum = sum.toInt\n        (xIsInt && yIsInt && zIsInt)\
    \ || (sum == xs.sum)", "        val sum = x + y + z\n        val isInteger = (sum.toInt)\n\
    \        val isEqual = sum == (x + y + z)\n        val isEqualInt = isInteger\
    \ && isEqual\n        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble\
    \ = isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n    \
    \    val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = isInteger && isEqual\n        val isEqualFloat = isInteger && isEqual\n  \
    \      val isEqualDouble = isInteger && isEqual\n        val isEqualInt = isInteger\
    \ && isEqual\n        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble\
    \ = isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n    \
    \    val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = isInteger && isEqual\n        val isEqualFloat = isInteger && isEqual\n  \
    \      val isEqualDouble = isInteger && isEqual\n        val isEqualInt = isInteger\
    \ && isEqual\n        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble\
    \ = isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n    \
    \    val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = ", "        val sum = (x + y + z).toInt\n        val isSum = (sum == (x +\
    \ y + z).toInt)\n        val isInteger = (x.toInt == x.toInt && y.toInt == y.toInt\
    \ && z.toInt == z.toInt)\n        val isEqual = sum == (x + y + z)\n        val\
    \ isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum", "        val sum = x + y + z\n        val isInteger\
    \ = sum % 1 == 0\n        val isSum = sum == x + y + z\n        val isEqual =\
    \ sum == x + y\n        val isEqual2 = sum == x + z\n        val isEqual3 = sum\
    \ == x + y + z\n        val isEqual4 = sum == x + y + z\n        val isEqual5\
    \ = sum == x + y + z\n        val isEqual6 = sum == x + y + z\n        val isEqual7\
    \ = sum == x + y + z\n        val isEqual8 = sum == x + y + z\n        val isEqual9\
    \ = sum == x + y + z\n        val isEqual10 = sum == x + y + z\n        val isEqual11\
    \ = sum == x + y + z\n        val isEqual12 = sum == x + y + z\n        val isEqual13\
    \ = sum == x + y + z\n        val isEqual14 = sum == x + y + z\n        val isEqual15\
    \ = sum == x + y + z\n        val isEqual16 = sum == x + y + z\n        val isEqual17\
    \ = sum == x + y + z\n        val isEqual18 = sum == x + y + z\n        val isEqual19\
    \ = sum == x + y + z\n        val isEqual20 = sum == x + y + z\n        val isEqual21\
    \ = sum == x + y + z\n        val isEqual22 = sum == x + y + z\n        val isEqual23\
    \ = sum == x + y + z\n        val isEqual24 = sum == x + y + z\n        val isEqual25\
    \ = sum == x + y + z\n        val isEqual26 = sum == x + y + z\n        val isEqual27\
    \ = sum == x + y + z\n        val isEqual28 = sum == x + y + z\n        val isEqual29\
    \ = sum == x + y + z\n        val isEqual30 = sum == x + y + z\n        val isEqual31\
    \ = sum == x + y + z\n        val isEqual32 = sum == x + y + z\n        val isEqual33\
    \ = sum == x + y + z\n        val isEqual34 = sum == x + y + z\n        val isEqual35\
    \ = sum == x + y + z\n        val isEqual36 = sum == x + y + z\n        val isEqual37\
    \ = sum == x + y + z\n        val isEqual38 = sum == x + y + z\n        val isEqual39\
    \ = sum == x + y + z\n        val isEqual40 = sum == x + y + z\n        val isEqual41\
    \ = sum == x + y + z\n        val isEqual42 = ", "        val sum = x + y + z\n\
    \        val isInteger = sum.toString.toInt\n        val isEqual = sum == isInteger\n\
    \        val isInt = isInteger.toString.toInt\n        isEqual && isInt", "  \
    \      val sum = x + y + z\n        val isInt = sum.asInstanceOf[Int] == sum\n\
    \        val isInteger = isInt && sum.asInstanceOf[Int].toDouble == sum\n    \
    \    val isFloat = sum.asInstanceOf[Float] == sum\n        isInt || isInteger\
    \ || isFloat", "        val xSum = x + y\n        val ySum = y + z\n        val\
    \ zSum = z + x\n        xSum == zSum || ySum == zSum", "        val sum = x +\
    \ y + z\n        val intSum = math.round(sum)\n        val intSum2 = math.round(sum\
    \ * 2)\n        val intSum3 = math.round(sum * 3)\n        val intSum4 = math.round(sum\
    \ * 4)\n        val intSum5 = math.round(sum * 5)\n        val intSum6 = math.round(sum\
    \ * 6)\n        val intSum7 = math.round(sum * 7)\n        val intSum8 = math.round(sum\
    \ * 8)\n        val intSum9 = math.round(sum * 9)\n        val intSum10 = math.round(sum\
    \ * 10)\n        val intSum11 = math.round(sum * 11)\n        val intSum12 = math.round(sum\
    \ * 12)\n        val intSum13 = math.round(sum * 13)\n        val intSum14 = math.round(sum\
    \ * 14)\n        val intSum15 = math.round(sum * 15)\n        val intSum16 = math.round(sum\
    \ * 16)\n        val intSum17 = math.round(sum * 17)\n        val intSum18 = math.round(sum\
    \ * 18)\n        val intSum19 = math.round(sum * 19)\n        val intSum20 = math.round(sum\
    \ * 20)\n        val intSum21 = math.round(sum * 21)\n        val intSum22 = math.round(sum\
    \ * 22)\n        val intSum23 = math.round(sum * 23)\n        val intSum24 = math.round(sum\
    \ * 24)\n        val intSum25 = math.round(sum * 25)\n        val intSum26 = math.round(sum\
    \ * 26)\n        val intSum27 = math.round(sum * 27)\n        val intSum28 = math.round(sum\
    \ * 28)\n        val intSum29 = math.round(sum * 29)\n        val intSum30 = math.round(sum\
    \ * 30)\n        val intSum31 = math.round(sum * 31)\n        val intSum32 = math.round(sum\
    \ * 32)\n        val intSum33 = math.round(sum * 33)\n        val intSum34 = math.round(sum\
    \ * 34)\n        val intSum35 = math.round(sum * 35)\n        val intSum36 = math.round(sum\
    \ * 36)\n        val intSum37 = math.round(sum * 37)\n        val intSum38 = math.round(sum\
    \ * 38)\n        val intSum39 = math.round(sum * 39)\n        val intSum40 = math.round(sum\
    \ * 40)\n        val intSum41 = math.round(sum * 41)\n        val intSum42 = math.round(sum\
    \ * 42)", '        (x == (x + y) && x == (x + z) && x == (y + z)) || (x == (x
    - y) && x == (x - z) && x == (y - z))', "        val sum = x + y + z\n       \
    \ val isInteger = math.floor(sum) == sum\n        val isEqual = math.abs(x - sum)\
    \ == math.abs(y - sum) == math.abs(z - sum)\n        isInteger && isEqual", " \
    \       val sum = x + y + z\n        val isInteger = sum.toInt == sum\n      \
    \  val isAllInteger = x.toInt == y.toInt == z.toInt\n        isInteger && isAllInteger",
  "        val sum = x + y + z\n        val isInteger = (sum % 1 == 0)\n        val\
    \ isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n      \
    \  val isAllIntegerAndNotEqualToSum = (isInteger && !isSum)\n        isAllInteger\
    \ || isAllIntegerAndNotEqualToSum", "        val sum = x + y + z\n        val\
    \ isInteger = sum.toString.toInt\n        val isSum = sum.toString.toDouble\n\
    \        val isSumOfThree = sum.toString.toDouble\n        val isSumOfThreeAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOne = sum.toString.toDouble\n        val\
    \ isSumOfThreeAndOneAndOneAndOneAndOne = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd",
  "        val sum = x + y + z\n        val isInteger = math.floor(sum) == sum\n \
    \       val isEqual = math.abs(x - sum) == math.abs(y - sum) == math.abs(z - sum)\n\
    \        isInteger && isEqual"]
stop_tokens:
- "\n    }\n"
