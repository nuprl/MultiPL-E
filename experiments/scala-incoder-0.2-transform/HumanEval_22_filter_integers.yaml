name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any python values only for integers\n    // >>> filterIntegers((List[Any](\"\
  a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n    // >>> filterIntegers((List[Any](1l,\
  \ 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ['        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(_.toString.toInt == _).toList.map(_.toLong)', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.toLong)', '        values.filter(_.isInstanceOf[Long]).map(_.toLong)',
  '        values.filter(_.toString.toInt == _).toList.map(_.toLong)', '        values.filter(_.isInstanceOf[Long]).map(_.toLong)',
  '        values.filter(_.toString.toInt == _).toList.map(_.toLong)', '        values.filter(_.toString.toInt
    == _).toList.map(_.toLong)', '        values.filter(_.toString.toInt == _)', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.toLong)',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long]).toList',
  '        values.filter(_.toString.toInt == _).toList.map(_.toLong)', '        values.filter(_.isInstanceOf[Long]).map(_.toLong)',
  '        values.filter(_.isInstanceOf[Long]).map(_.toLong)', '        values.filter(_.toString.toInt
    == _)']
stop_tokens:
- "\n    }\n"
