name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong,\
  \ 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
  \ 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n\
  \    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong,\
  \ 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n\
  \    // Explanation: 0 is the smallest value, but  there are two zeros,\n    //\
  \ so we will choose the first zero, which has the smallest index.\n    // Constraints:\n\
  \    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    if (smalest_index == -1) {\n            evens\n        } else {\n       \
    \     evens.take(smalest_index + 1)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = if (index == -1) List(even) else List(even, index)\n   \
    \     result", "        val evens = arr.filter(x => x % 2 == 0).toList\n     \
    \   val even = evens.min\n        val index = evens.indexOf(even)\n        val\
    \ result = arr.filter(_ == even).take(index).toList\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.head\n            val smalest_index = evens.indexOf(0)\n           \
    \ val evens_without_smalest_value = evens.filterNot(x => x == smalest_value)\n\
    \            if (evens_without_smalest_value.isEmpty) List()\n            else\
    \ {\n                val smallest_even = evens_without_smalest_value.head\n  \
    \              val smallest_even_index = evens_without_smalest_value.indexOf(smallest_even)\n\
    \                val smallest_even_index_plus_one = smallest_even_index + 1\n\
    \                val smallest_even_index_plus_two = smallest_even_index + 2\n\
    \                val smallest_even_index_plus_three = smallest_even_index + 3\n\
    \                val smallest_even_index_plus_four = smallest_even_index + 4\n\
    \                val smallest_even_index_plus_five = smallest_even_index + 5\n\
    \                val smallest_even_index_plus_six = smallest_even_index + 6\n\
    \                val smallest_even_index_plus_seven = smallest_even_index + 7\n\
    \                val smallest_even_index_plus_eight = smallest_even_index + 8\n\
    \                val smallest_even_index_plus_nine = smallest_even_index + 9\n\
    \                val smallest_even_index_plus_ten = smallest_even_index + 10\n\
    \                val smallest_even_index_plus_eleven = smallest_even_index + 11\n\
    \                val smallest_even_index_plus_twelve = smallest_even_index + 12\n\
    \                val smallest_even_index_plus_thirteen = smallest_even_index +\
    \ 13\n                val smallest_even_index_plus_fourteen = smallest_even_index\
    \ + 14\n                val smallest_even_index_plus_fifteen = smallest_even_index\
    \ + 15\n                val smallest_even_index_plus_sixteen = smallest_even_index\
    \ + 16\n                val smallest_even_index_plus_seventeen = smallest_even_index\
    \ + 17\n                val smallest_even_index_plus_eighteen = smallest_even_index\
    \ + 18\n                val smallest_even_index_plus_nineteen = smallest_even_index\
    \ + 19\n                val smallest_even_index_plus_twenty = smallest_even_index\
    \ + 20\n                val smallest_even_index_plus_twenty_one = smallest_even_index\
    \ + 21\n                val smallest_even_index_plus_twenty_two = smallest_even_index\
    \ + 22\n                val smallest_even_index_plus_twenty_three = smallest_even_index\
    \ + 23\n                val smalle", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        if (evens.isEmpty) List()\n        else if (index == 0) List(even)\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).reverse\n        val smallest = evens.head\n        val index\
    \ = evens.indexOf(0)\n        val result = List(smallest, index)\n        if (evens.isEmpty)\
    \ result\n        else result.reverse", "        val evens = arr.filter(x => x\
    \ % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n      \
    \      val min = evens.min\n            val index = arr.indexOf(min)\n       \
    \     val result = List(min, index)\n            if (evens.size == 1) result\n\
    \            else result :+ pluck(arr.filterNot(x => x == min))\n        }", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        if (evens.isEmpty) {\n \
    \           List[Long]()\n        } else {\n            List[Long](smallest, index)\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val\
    \ smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n \
    \       if (evens.isEmpty) List()\n        else List(smalest_value, smalest_index)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = if (index == -1)\
    \ List[Long]() else List(even, index)\n        return result", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        val smalest_value = evens.min\n   \
    \     val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = smalest_index match\
    \ {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_value = smalest_even match {\n          \
    \  case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_index = smalest_index match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_value = smalest_even match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_index\
    \ = smalest_index match {\n            case x if x < arr.length => x\n       \
    \     case _ => arr.length\n        }\n        val smalest_even_value = smalest_even\
    \ match {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_index = smalest_index match {\n         \
    \   case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_value = smalest_even match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_index = smalest_index match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_value\
    \ = smalest_even match {\n            case x if x < arr.length => x\n        \
    \    case _ => arr.length\n        }\n        val smalest_even_index = smalest_index\
    \ match {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_value = smalest_even match {\n          \
    \  case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_index = smalest_index match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_value = smalest_even match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_index\
    \ = smalest_index match {\n            case x if x < arr.length => x\n       \
    \     case _ => arr.", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.head\n            val smalest_index = evens.indexOf(0)\n           \
    \ val index = evens.indexOf(smalest_value)\n            if (index == -1) List()\n\
    \            else {\n                val smalest_even = evens(index)\n       \
    \         val smalest_even_index = index\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val sm", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.filter(x => x == smalest_value)\n        if (smalest_evens.isEmpty)\
    \ Nil\n        else smalest_evens.minIndex.map(x => arr(x))", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        val smallest = evens.min\n        val\
    \ index = arr.indexOf(smallest)\n        val result = if (evens.isEmpty) Nil else\
    \ List(smallest, index)\n        result", "        val evens = arr.filter(_ %\
    \ 2 == 0).toList\n        val evensSorted = evens.sortWith(_ < _)\n        val\
    \ evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted =\
    \ evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evens", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evensSortedSortedWithIndex = evensSorted.zipWithIndex.toList\n  \
    \      val smalest_value = evensSortedSortedWithIndex.head._2\n        val smalest_index\
    \ = evensSortedSortedWithIndex.head._1\n        val smalest_even = evensSortedSortedWithIndex.filter(x\
    \ => x._2 == smalest_value).head._1\n        val smalest_even_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 == smalest_value).head._2\n        val smalest_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._1\n        val smalest_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._2\n        val smalest_odd_even_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._3\n        val smalest_odd_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._4\n        val smalest_odd_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._5\n        val smalest_odd_odd_even_index =\
    \ evensSortedSortedWithIndex.filter(x => x._2 != smalest_value).head._6\n    \
    \    val smalest_odd_odd_odd_index = evensSortedSortedWithIndex.filter(x => x._2\
    \ != smalest_value).head._7\n        val smalest_odd_odd_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._8\n        val smalest_odd_odd_odd_even_index\
    \ = evensSortedSortedWithIndex.filter(x => x._2 != smalest_value).head._9\n  \
    \      val smalest_odd_odd_odd_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._10\n        val smalest_odd_odd_odd_odd_value\
    \ = evensSortedSortedWithIndex.filter(x => x._2 != ", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (evens.isEmpty) List()\n        else if (smalest_index\
    \ == 0) List(smalest_value)\n        else List(smalest_value, smalest_index)",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = arr.filter(_ != even).sortBy(x\
    \ => x).takeWhile(x => x < even).take(index).toList\n        if (result.isEmpty)\
    \ result else result.reverse", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val even = evens.head\n        val index = evens.indexOf(0)\n       \
    \ val result = if (index == -1) List[Long]() else List(even, index)\n        result",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ != even)\n\
    \        if (evens.isEmpty) result\n        else (List(even, index), result)"]
stop_tokens:
- "\n    }\n"
