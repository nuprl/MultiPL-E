name: HumanEval_68_pluck
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // \"Given an array representing a branch of a tree that has non-negative integer\
  \ nodes\n    // your task is to pluck one of the nodes and return it.\n    // The\
  \ plucked node should be the node with the smallest even value.\n    // If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n    // The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    // If there are no even values or the given array is empty,\
  \ return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong,\
  \ 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2\
  \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong,\
  \ 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n\
  \    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong,\
  \ 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n\
  \    // Explanation: 0 is the smallest value, but  there are two zeros,\n    //\
  \ so we will choose the first zero, which has the smallest index.\n    // Constraints:\n\
  \    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pluck((List[Long](4l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 1l.toLong))));\n    assert(pluck((List[Long]())).equals((List[Long]())));\n\
  \    assert(pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong,\
  \ 2l.toLong))).equals((List[Long](0l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 0l.toLong, 5l.toLong, 3l.toLong))).equals((List[Long](0l.toLong,\
  \ 3l.toLong))));\n    assert(pluck((List[Long](5l.toLong, 4l.toLong, 8l.toLong,\
  \ 4l.toLong, 8l.toLong))).equals((List[Long](4l.toLong, 1l.toLong))));\n    assert(pluck((List[Long](7l.toLong,\
  \ 6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](6l.toLong, 1l.toLong))));\n\
  \    assert(pluck((List[Long](7l.toLong, 9l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    if (smalest_index == -1) {\n            evens\n        } else {\n       \
    \     evens.take(smalest_index + 1)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = if (index == -1) List(even) else List(even, index)\n   \
    \     result", "        val evens = arr.filter(x => x % 2 == 0).toList\n     \
    \   val even = evens.min\n        val index = evens.indexOf(even)\n        val\
    \ result = arr.filter(_ == even).take(index).toList\n        if (result.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.head\n            val smalest_index = evens.indexOf(0)\n           \
    \ val evens_without_smalest_value = evens.filterNot(x => x == smalest_value)\n\
    \            if (evens_without_smalest_value.isEmpty) List()\n            else\
    \ {\n                val smallest_even = evens_without_smalest_value.head\n  \
    \              val smallest_even_index = evens_without_smalest_value.indexOf(smallest_even)\n\
    \                val smallest_even_index_plus_one = smallest_even_index + 1\n\
    \                val smallest_even_index_plus_two = smallest_even_index + 2\n\
    \                val smallest_even_index_plus_three = smallest_even_index + 3\n\
    \                val smallest_even_index_plus_four = smallest_even_index + 4\n\
    \                val smallest_even_index_plus_five = smallest_even_index + 5\n\
    \                val smallest_even_index_plus_six = smallest_even_index + 6\n\
    \                val smallest_even_index_plus_seven = smallest_even_index + 7\n\
    \                val smallest_even_index_plus_eight = smallest_even_index + 8\n\
    \                val smallest_even_index_plus_nine = smallest_even_index + 9\n\
    \                val smallest_even_index_plus_ten = smallest_even_index + 10\n\
    \                val smallest_even_index_plus_eleven = smallest_even_index + 11\n\
    \                val smallest_even_index_plus_twelve = smallest_even_index + 12\n\
    \                val smallest_even_index_plus_thirteen = smallest_even_index +\
    \ 13\n                val smallest_even_index_plus_fourteen = smallest_even_index\
    \ + 14\n                val smallest_even_index_plus_fifteen = smallest_even_index\
    \ + 15\n                val smallest_even_index_plus_sixteen = smallest_even_index\
    \ + 16\n                val smallest_even_index_plus_seventeen = smallest_even_index\
    \ + 17\n                val smallest_even_index_plus_eighteen = smallest_even_index\
    \ + 18\n                val smallest_even_index_plus_nineteen = smallest_even_index\
    \ + 19\n                val smallest_even_index_plus_twenty = smallest_even_index\
    \ + 20\n                val smallest_even_index_plus_twenty_one = smallest_even_index\
    \ + 21\n                val smallest_even_index_plus_twenty_two = smallest_even_index\
    \ + 22\n                val smallest_even_index_plus_twenty_three = smallest_even_index\
    \ + 23\n                val smalle", "        val evens = arr.filter(x => x %\
    \ 2 == 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        if (evens.isEmpty) List()\n        else if (index == 0) List(even)\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).reverse\n        val smallest = evens.head\n        val index\
    \ = evens.indexOf(0)\n        val result = List(smallest, index)\n        if (evens.isEmpty)\
    \ result\n        else result.reverse", "        val evens = arr.filter(x => x\
    \ % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n      \
    \      val min = evens.min\n            val index = arr.indexOf(min)\n       \
    \     val result = List(min, index)\n            if (evens.size == 1) result\n\
    \            else result :+ pluck(arr.filterNot(x => x == min))\n        }", " \
    \       val evens = arr.filter(x => x % 2 == 0)\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        if (evens.isEmpty) {\n \
    \           List[Long]()\n        } else {\n            List[Long](smallest, index)\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val\
    \ smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n \
    \       if (evens.isEmpty) List()\n        else List(smalest_value, smalest_index)",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = if (index == -1)\
    \ List[Long]() else List(even, index)\n        return result", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        val smalest_value = evens.min\n   \
    \     val smalest_index = evens.indexOf(smalest_value)\n        val smalest_even\
    \ = evens(smalest_index)\n        val smalest_even_index = smalest_index match\
    \ {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_value = smalest_even match {\n          \
    \  case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_index = smalest_index match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_value = smalest_even match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_index\
    \ = smalest_index match {\n            case x if x < arr.length => x\n       \
    \     case _ => arr.length\n        }\n        val smalest_even_value = smalest_even\
    \ match {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_index = smalest_index match {\n         \
    \   case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_value = smalest_even match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_index = smalest_index match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_value\
    \ = smalest_even match {\n            case x if x < arr.length => x\n        \
    \    case _ => arr.length\n        }\n        val smalest_even_index = smalest_index\
    \ match {\n            case x if x < arr.length => x\n            case _ => arr.length\n\
    \        }\n        val smalest_even_value = smalest_even match {\n          \
    \  case x if x < arr.length => x\n            case _ => arr.length\n        }\n\
    \        val smalest_even_index = smalest_index match {\n            case x if\
    \ x < arr.length => x\n            case _ => arr.length\n        }\n        val\
    \ smalest_even_value = smalest_even match {\n            case x if x < arr.length\
    \ => x\n            case _ => arr.length\n        }\n        val smalest_even_index\
    \ = smalest_index match {\n            case x if x < arr.length => x\n       \
    \     case _ => arr.", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.head\n            val smalest_index = evens.indexOf(0)\n           \
    \ val index = evens.indexOf(smalest_value)\n            if (index == -1) List()\n\
    \            else {\n                val smalest_even = evens(index)\n       \
    \         val smalest_even_index = index\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val smalest_odd_value =\
    \ evens(smalest_odd_index)\n                val smalest_odd_index = evens.lastIndexOf(smalest_value)\n\
    \                val smalest_odd_value = evens(smalest_odd_index)\n          \
    \      val smalest_odd_index = evens.lastIndexOf(smalest_value)\n            \
    \    val smalest_odd_value = evens(smalest_odd_index)\n                val smalest_odd_index\
    \ = evens.lastIndexOf(smalest_value)\n                val sm", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.filter(x => x == smalest_value)\n        if (smalest_evens.isEmpty)\
    \ Nil\n        else smalest_evens.minIndex.map(x => arr(x))", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        val smallest = evens.min\n        val\
    \ index = arr.indexOf(smallest)\n        val result = if (evens.isEmpty) Nil else\
    \ List(smallest, index)\n        result", "        val evens = arr.filter(_ %\
    \ 2 == 0).toList\n        val evensSorted = evens.sortWith(_ < _)\n        val\
    \ evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted =\
    \ evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.max)\n        val evensSorted = evensSorted.takeWhile(_ < arr.max)\n \
    \       val evensSorted = evens", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evensSortedSortedWithIndex = evensSorted.zipWithIndex.toList\n  \
    \      val smalest_value = evensSortedSortedWithIndex.head._2\n        val smalest_index\
    \ = evensSortedSortedWithIndex.head._1\n        val smalest_even = evensSortedSortedWithIndex.filter(x\
    \ => x._2 == smalest_value).head._1\n        val smalest_even_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 == smalest_value).head._2\n        val smalest_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._1\n        val smalest_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._2\n        val smalest_odd_even_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._3\n        val smalest_odd_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._4\n        val smalest_odd_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._5\n        val smalest_odd_odd_even_index =\
    \ evensSortedSortedWithIndex.filter(x => x._2 != smalest_value).head._6\n    \
    \    val smalest_odd_odd_odd_index = evensSortedSortedWithIndex.filter(x => x._2\
    \ != smalest_value).head._7\n        val smalest_odd_odd_odd_value = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._8\n        val smalest_odd_odd_odd_even_index\
    \ = evensSortedSortedWithIndex.filter(x => x._2 != smalest_value).head._9\n  \
    \      val smalest_odd_odd_odd_odd_index = evensSortedSortedWithIndex.filter(x\
    \ => x._2 != smalest_value).head._10\n        val smalest_odd_odd_odd_odd_value\
    \ = evensSortedSortedWithIndex.filter(x => x._2 != ", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        if (evens.isEmpty) List()\n        else if (smalest_index\
    \ == 0) List(smalest_value)\n        else List(smalest_value, smalest_index)",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = arr.filter(_ != even).sortBy(x\
    \ => x).takeWhile(x => x < even).take(index).toList\n        if (result.isEmpty)\
    \ result else result.reverse", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n\
    \        val even = evens.head\n        val index = evens.indexOf(0)\n       \
    \ val result = if (index == -1) List[Long]() else List(even, index)\n        result",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ != even)\n\
    \        if (evens.isEmpty) result\n        else (List(even, index), result)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.min\n            val\
    \ index = evens.indexOf(smallest)\n            val result = List(smallest, index)\n\
    \            if (evens.size == 1) result\n            else result ::: pluck(arr.filter(_\
    \ != smallest))\n        }", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val\
    \ smalest_value = evensSorted.head\n        val smalest_index = evensSorted.indexOf(0)\n\
    \        val result = evensSorted.takeWhile(x => x != smalest_value).takeWhile(x\
    \ => x != smalest_index).map(x => smalest_value)\n        if (result.isEmpty)\
    \ result\n        else result", "        val evens = arr.filter(_ % 2 == 0).toList\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        val evenSmallestIndexListSorted\
    \ = evenSmallestIndexList.sortWith(_ < _)\n        val evenSmallestValueListSorted\
    \ = evenSmallestValueList.sortWith(_ < _)\n        val evenSmallestValueListSortedIndex\
    \ = evenSmallestValueListSorted.indexOf(0)\n        val evenSmallestValueListSortedValue\
    \ = evenSmallestValueListSorted\n        val evenSmallestValueListSortedIndexList\
    \ = evenSmallestValueListSortedIndex.toList\n        val evenSmallestValueListSortedValueList\
    \ = evenSmallestValueListSortedValue.toList\n        val evenSmallestValueListSortedIndexListSorted\
    \ = evenSmallestValueListSortedIndexListSorted.sortWith(_ < _)\n        val evenSmallestValueListSortedIndexListSortedValue\
    \ = evenSmallestValueListSortedIndexListSortedValue.toList\n        val evenSmallestValueListSortedIndexListSortedValueList\
    \ = evenSmallestValueListSortedIndexListSortedValue.toList\n        val evenSmallestValueListSortedIndexListSortedValueListSorted\
    \ = evenSmallestValueListSortedIndexListSortedValueListSorted.sortWith(_ < _)\n\
    \        val evenSmallestValueListSortedIndexListSortedValueListSortedValue =\
    \ evenSmallestValueListSortedIndexListSortedValueListSortedValue.toList\n    \
    \    val evenSmallestValueListSortedIndexListSortedValueListSortedValueListSorted\
    \ = evenSmallestValueListSortedIndexListSortedValueListSortedValueListSorted.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedIndexListSortedValueListSortedValueListSortedValue\
    \ = evenSmallestValueListSortedIndexListSortedValueListSortedValueListSortedValueListSorted.sortWith(_\
    \ < _)\n        val evenSmallestValueListSortedIndexListSortedValueListSortedValueListSortedValueListSorted\
    \ = evenSmallestValueListSortedIndexListSortedValueListSortedValueListSortedValueList",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.compare(y))\n        val smallestEven = evensSorted.head\n        val\
    \ smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue =\
    \ smallestEven\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val evensSortedSortedWithIndex = evensSorted.zipWithIndex\n        val\
    \ evensSortedSortedWithIndexSortedWithValue = evensSortedSortedWithIndex.sortWith((x,\
    \ y) => x._2 < y._2)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndex\
    \ = evensSortedSortedWithIndexSortedWithValue.sortWith((x, y) => x._1 < y._1)\n\
    \        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndex.sortWith((x,\
    \ y) => x._2 < y._2)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithValue.sortWith((x,\
    \ y) => x._1 < y._1)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue.sortWith((x,\
    \ y) => x._2 < y._1)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue.sortWith((x,\
    \ y) => x._1 < y._1)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue.sortWith((x,\
    \ y) => x._2 < y._1)\n        val evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue\
    \ = evensSortedSortedWithIndexSortedWithValueSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithValue.sortWith((x,\
    \ y", "        val evens = arr.filter(_ % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even).toList\n        if (result.isEmpty) List(even, index)\n        else result.sortWith((a,\
    \ b) => a.compareTo(b) < 0).head", "        val evens = arr.filter(_ % 2 == 0).toList\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.filter(_ == smalest_value)\n        if (smalest_evens.isEmpty)\
    \ List(smalest_value, smalest_index)\n        else smalest_evens.minIndex.toLong",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong > y.toLong)\n        val evensSortedIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smalestValue = evensSortedIndex.find(x\
    \ => x._1.toLong == evensSortedIndex.minBy(x => x._1.toLong)._1.toLong).get._1\n\
    \        val smalestIndex = evensSortedIndex.find(x => x._1.toLong == evensSortedIndex.minBy(x\
    \ => x._1.toLong)._1.toLong).get._2\n        val smalestValueAndIndex = smalestValue\
    \ -> smalestIndex\n        val smalestValueAndIndexList = smalestValueAndIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSorted = smalestValueAndIndexList.sortWith((x,\
    \ y) => x._1 > y._1)\n        val smalestValueAndIndexListSortedWithIndex = smalestValueAndIndexListSorted.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndex.sortWith((x, y) => x._1 > y._1)\n\
    \        val smalestValueAndIndexListSortedWithIndexSortedWithIndex = smalestValueAndIndexListSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 > y._1)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x._2)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSorted.sortWith((x,\
    \ y) => x._1 > y._1)\n        val smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalestValueAndIndexListSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.map(x\
    \ => x._1 -> x.", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smalestEven\
    \ = evensSorted.head\n        val smalestEvenIndex = evensSorted.indexOf(0)\n\
    \        val smalestEvenValue = smalestEven.toLong\n        val smalestEvenIndex\
    \ = smalestEvenIndex.toLong\n        val smalestEvenValue = smalestEvenValue.toLong\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = smalestEvenValue.toLong\n        val smalestEvenIndex = smalestEvenIndex.toLong\n\
    \        val smalestEvenValue = smalestEvenValue.toLong\n        val smalestEvenIndex\
    \ = smalestEvenIndex.toLong\n        val smalestEvenValue = smalestEvenValue.toLong\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = smalestEvenValue.toLong\n        val smalestEvenIndex = smalestEvenIndex.toLong\n\
    \        val smalestEvenValue = smalestEvenValue.toLong\n        val smalestEvenIndex\
    \ = smalestEvenIndex.toLong\n        val smalestEvenValue = smalestEvenValue.toLong\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = smalestEvenValue.toLong\n        val smalestEvenIndex = smalestEvenIndex.toLong\n\
    \        val smalestEvenValue = smalestEvenValue.toLong\n        val smalestEvenIndex\
    \ = smalestEvenIndex.toLong\n        val smalestEvenValue = smalestEvenValue.toLong\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = smalestEvenValue.toLong\n        val smalestEvenIndex = smalestEvenIndex.toLong\n\
    \        val smalestEvenValue = smalestEvenValue.toLong\n        val smalestEvenIndex\
    \ = smalestEvenIndex.toLong\n        val smalestEvenValue = smalestEvenValue.toLong\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = smalestEvenValue.toLong\n        val smalestEvenIndex = smalestEvenIndex.toLong\n\
    \        ", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x\
    \ => x.toLong)\n        val even = evens.head\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(x => x % 2 == 0).sortBy(x => x).map(x => x.toLong).takeWhile(x\
    \ => x != even).take(index).toList\n        if (result.isEmpty) Nil\n        else\
    \ result", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ evensSorted = evens.sortBy(x => x)\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(evenSmallest)\n        val\
    \ evenSmallestValue = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexList.sortBy(x => x)\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortBy(x\
    \ => x)\n        val evenSmallestIndexListSorted = evenSmallest", "        val\
    \ evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val even = evens.head\n  \
    \      val index = evens.indexOf(0)\n        val result = List(even, index)\n\
    \        if (arr.isEmpty) result\n        else pluck(arr.drop(index))", "    \
    \    val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        if (evens.isEmpty) {\n        \
    \    List[Long]()\n        } else if (index == 0) {\n            List[Long](even)\n\
    \        } else {\n            List[Long](even, index)\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smallestEven = evensSorted.head\n  \
    \      val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven.toLong\n        val smallestEvenIndexList = List(smallestEvenIndex,\
    \ smallestEvenIndex + 1)\n        val smallestEvenValueList = List(smallestEvenValue,\
    \ smallestEvenValue + 1)\n        if (evensSorted.isEmpty) {\n            List[Long]()\n\
    \        } else {\n            val smallestEvenIndexPair = smallestEvenIndexList.zip(smallestEvenValueList)\n\
    \            smallestEvenIndexPair.filter(_._1 == smallestEvenValue).map(_._2)\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_).reverse\n \
    \       if(evens.isEmpty) Nil\n        else {\n            val smalest_value =\
    \ evens.head\n            val smalest_index = evens.indexWhere(_ == smalest_value)\n\
    \            val evens_without_smalest_value = evens.filter(_ != smalest_value)\n\
    \            val smalest_value_and_index = smalest_value -> smalest_index\n  \
    \          evens_without_smalest_value.map(smalest_value_and_index) match {\n\
    \                case Nil => Nil\n                case x => x\n            }\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val\
    \ smallest = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = (smallest :: arr.filter(_ == smallest).sortBy(_).take(index - 1))\n      \
    \  if (result.isEmpty) result else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.compare(y))\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n     \
    \   val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        ", "    \
    \    val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n \
    \       val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even)\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ != even)\n\
    \        if (result.isEmpty) List()\n        else List(even, index)", "      \
    \  val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted = evens.sortBy(x\
    \ => x)\n        val smallestEven = evensSorted.head\n        val smallestEvenIndex\
    \ = evensSorted.indexOf(smallestEven)\n        val smallestEvenValue = smallestEven\n\
    \        val smallestEvenIndex = smallestEvenIndex\n        val result = List(smallestEvenValue,\
    \ smallestEvenIndex)\n        return result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even)\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        if (smalest_index == -1) {\n       \
    \     List[Long]()\n        } else {\n            evens.take(smalest_index).reverse\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smalest_value = evens.min\n        \
    \    val smalest_index = evens.indexOf(smalest_value)\n            val smalest_even\
    \ = evens(smalest_index)\n            val smalest_even_index = evens.indexOf(smalest_even)\n\
    \            if (smalest_even_index == smalest_index) List(smalest_value)\n  \
    \          else List(smalest_value, smalest_even_index)\n        }", "       \
    \ val evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value =\
    \ evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n      \
    \  if (smalest_index > 0) {\n            evens.take(smalest_index).map(x => (x,\
    \ smalest_index)).toList\n        } else {\n            evens.map(x => (x, 0)).filter(_._1\
    \ == smalest_value).toList\n        }", "        val evens = arr.filter(x => x\
    \ % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val smallestEven = evensSorted.head\n        val smallestEvenIndex =\
    \ evensSorted.indexOf(0)\n        val smallestEvenValue = smallestEven.toLong\n\
    \        val result = arr.filter(_ != smallestEvenValue)\n        if (result.isEmpty)\
    \ Nil\n        else result.filter(_ == smallestEvenValue).map(x => (smallestEvenValue,\
    \ x))", "        val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.min\n            val\
    \ index = arr.indexOf(smallest)\n            val result = List(smallest, index)\n\
    \            if (arr.contains(smallest)) result :+ smallest\n            else\
    \ result\n        }", "        val evens = arr.filter(_ % 2 == 0)\n        val\
    \ even = evens.min\n        val index = arr.indexOf(even)\n        val result\
    \ = arr.filter(_ == even).take(index).toList\n        if (result.isEmpty) Nil\n\
    \        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val evensSorted = evens.sortBy(x => x)\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val\
    \ evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.last)\n        val\
    \ evensSorted = evensSorted.reverse\n        val even", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexWhere(x => x == smalest_value)\n     \
    \   val result = evens.takeWhile(x => x != smalest_value).takeWhile(x => x !=\
    \ smalest_index).reverse\n        if (result.isEmpty) List(smalest_value, smalest_index)\n\
    \        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        if (evens.isEmpty) List()\n        else {\n            val minEven =\
    \ evens.min\n            val minIndex = evens.indexOf(minEven)\n            val\
    \ minEvenIndex = minIndex\n            val minEvenValue = minEven\n          \
    \  val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val ", "        val evens = arr.filter(x => x % 2 == 0).toList\n        if\
    \ (evens.isEmpty) Nil\n        else {\n            val smallestEven = evens.min\n\
    \            val index = arr.indexOf(smallestEven)\n            val result = List(smallestEven,\
    \ index)\n            if (arr.contains(smallestEven)) result ::: arr.filterNot(x\
    \ => x == smallestEven)\n            else result\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        if (smalest_index\
    \ == -1) List(smalest_value)\n        else evens.take(smalest_index).map(x =>\
    \ (x, smalest_index)).toList", "        val evens = arr.filter(_ % 2 == 0)\n \
    \       val smallest = evens.minBy(_ % 2)\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) Nil else List(smallest, index)\n      \
    \  result", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        if (smalest_index == -1) return evens\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        if (smalest_even_index\
    \ == -1) return evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ evens\n        val smalest_even_index = evens.indexOf(smalest_even)\n      \
    \  if (smalest_even_index == -1) return evens\n", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty) List(arr.head.toLong)\n\
    \        else {\n            val smalest_value = evens.head\n            val smalest_index\
    \ = evens.indexWhere(x => x == smalest_value)\n            val smalest_even =\
    \ evens(smalest_index)\n            val smalest_even_index = evens.indexWhere(x\
    \ => x == smalest_even)\n            val smalest_even_value = evens(smalest_even_index)\n\
    \            val smalest_even_index_plus_one = smalest_even_index + 1\n      \
    \      val smalest_even_value_plus_one = evens(smalest_even_index_plus_one)\n\
    \            val smalest_even_value_plus_two = evens(smalest_even_index_plus_two)\n\
    \            val smalest_even_value_plus_three = evens(smalest_even_index_plus_three)\n\
    \            val smalest_even_value_plus_four = evens(smalest_even_index_plus_four)\n\
    \            val smalest_even_value_plus_five = evens(smalest_even_index_plus_five)\n\
    \            val smalest_even_value_plus_six = evens(smalest_even_index_plus_six)\n\
    \            val smalest_even_value_plus_seven = evens(smalest_even_index_plus_seven)\n\
    \            val smalest_even_value_plus_eight = evens(smalest_even_index_plus_eight)\n\
    \            val smalest_even_value_plus_nine = evens(smalest_even_index_plus_nine)\n\
    \            val smalest_even_value_plus_ten = evens(smalest_even_index_plus_ten)\n\
    \            val smalest_even_value_plus_eleven = evens(smalest_even_index_plus_eleven)\n\
    \            val smalest_even_value_plus_twelve = evens(smalest_even_index_plus_twelve)\n\
    \            val smalest_even_value_plus_thirteen = evens(smalest_even_index_plus_thirteen)\n\
    \            val smalest_even_value_plus_fourteen = evens(smalest_even_index_plus_fourteen)\n\
    \            val smalest_even_value_plus_fifteen = evens(smalest_even_index_plus_fifteen)\n\
    \            val smalest_even_value_plus_sixteen = evens(smalest_even_index_plus_sixteen)\n\
    \            val smalest_even_value_plus_seventeen = evens(smalest_even_index_plus_seventeen)\n",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) List()\n        else {\n            val smalest_value =\
    \ evens.head\n            val smalest_index = evens.indexOf(0)\n            val\
    \ smalest_even = evens.filter(x => x % 2 == 0).min\n            val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n            val smalest_even_value = evens(smalest_even_index)\n\
    \            val smalest_even_index_list = evens.indexOf(smalest_even_index).toList\n\
    \            val smalest_even_index_list_sorted = smalest_even_index_list.sortBy(x\
    \ => x)\n            val smalest_even_index_list_sorted_reversed = smalest_even_index_list_sorted.reverse\n\
    \            val smalest_even_index_list_sorted_reversed_sorted = smalest_even_index_list_sorted_reversed.sortBy(x\
    \ => x)\n            val smalest_even_index_list_sorted_reversed_sorted_reversed\
    \ = smalest_even_index_list_sorted_reversed_sorted.reverse\n            val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed.sortBy(x => x)\n \
    \           val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted.reverse\n \
    \           val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => x)\n            val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \            val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => x)\n            val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \            val smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_even_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => x)\n            val smalest_even_index_list_", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexWhere(_\
    \ == even)\n        arr.take(index).filter(_ % 2 == 0).takeWhile(_ < even).toList",
  "        val evens = arr.filter(x => x % 2 == 0).sorted\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result = if (index == -1) List[Long]()\
    \ else List(even, index)\n        result", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = arr.filter(_ == smallest).toList\n        if (result.isEmpty)\
    \ result\n        else (smallest, index)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        if (evens.isEmpty) {\n            List[Long]()\n        } else {\n  \
    \          List[Long](even, index)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val smallest = evens.min\n        val index =\
    \ evens.indexOf(smallest)\n        val result = List(smallest, index)\n      \
    \  if (evens.isEmpty) result\n        else result.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n\
    \        val smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n\
    \        val result = evens.takeWhile(x => x != smalest_value).takeWhile(x =>\
    \ x != smalest_index).reverse\n        if (result.isEmpty) Nil\n        else List(smalest_value,\
    \ smalest_index) :: result", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) List[Long]() else List(smallest, index)\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0).toList\n  \
    \      val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val result = evens.takeWhile(x => x != smalest_value).takeWhile(x =>\
    \ x != smalest_index).reverse\n        if (result.isEmpty) Nil\n        else result.map(x\
    \ => (x, evens.indexOf(x)))", "        val evens = arr.filter(_ % 2 == 0).sortBy(_\
    \ % 2)\n        if (evens.isEmpty) List(arr.head.toLong)\n        else evens.take(1).map(_\
    \ % 2 == 0).foldLeft(arr.head.toLong)((x, y) => if (x == y) x else y)", "    \
    \    val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n      \
    \  val index = evens.indexOf(even)\n        val result = arr.filter(_ == even)\n\
    \        if (result.isEmpty) Nil\n        else List(even, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smallest = evens.min\n            val index =\
    \ arr.indexOf(smallest)\n            val result = List(smallest, index)\n    \
    \        if (arr.contains(smallest)) result :+ smallest\n            else result\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    if (smalest_index == -1) List(smalest_value)\n        else evens.take(smalest_index).reverse",
  "        val evens = arr.filter(_ % 2 == 0)\n        val even = evens.min\n    \
    \    val index = evens.indexOf(even)\n        val result = arr.filter(_ == even).take(index).sorted\n\
    \        result match {\n            case Nil => Nil\n            case x :: xs\
    \ => x :: pluck(xs)\n        }", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_evens = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        if (smalest_evens_index > smalest_index)\
    \ {\n            smalest_evens.take(smalest_evens_index)\n        } else {\n \
    \           smalest_evens\n        }", "        val evens = arr.filter(x => x\
    \ % 2 == 0).sortBy(x => x).reverse\n        if (evens.isEmpty) List()\n      \
    \  else {\n            val smalest_value = evens.head\n            val smalest_index\
    \ = evens.indexWhere(x => x == smalest_value)\n            val smalest_even =\
    \ evens(smalest_index)\n            val smalest_even_index = evens.indexWhere(x\
    \ => x == smalest_even && x > smalest_value)\n            if (smalest_even_index\
    \ == evens.size - 1) List(smalest_even)\n            else List(smalest_even, smalest_even_index)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).sorted\n       \
    \ if (evens.isEmpty) List()\n        else evens.take(1).zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).headOption.getOrElse(List())", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smallest = evens.head\n \
    \       val index = evens.indexOf(0)\n        if (evens.isEmpty) List()\n    \
    \    else List(smallest, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).sorted\n        val even = evens.head\n        val index = arr.indexOf(even)\n\
    \        if (evens.isEmpty) {\n            List[Long]()\n        } else if (index\
    \ == evens.indexOf(0)) {\n            List[Long](even)\n        } else {\n   \
    \         List[Long](even, index)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val evensSorted = evens.sortBy(x => x)\n    \
    \    val smallestEven = evensSorted.head\n        val smallestEvenIndex = evensSorted.indexOf(0)\n\
    \        val result = evensSorted.takeWhile(x => x != smallestEven).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smallestEvenIndex).takeWhile(x => x != smallestEvenIndex).takeWhile(x\
    \ => x != smalle", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x =>\
    \ x).reverse\n        val smallest = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = List(smallest, index)\n        if (evens.isEmpty) result\n\
    \        else pluck(arr.filterNot(x => x % 2 == 0).sortBy(x => x).reverse)", " \
    \       val evens = arr.filter(_ % 2 == 0).toList\n        val smalest_value =\
    \ evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n      \
    \  val smalest_evens = evens.filter(_ == smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index_plus_one\
    \ = smalest_evens_index + 1 // +1 because we want the smallest even value\n  \
    \      val smalest_evens_index_plus_two = smalest_evens_index_plus_one + 1 //\
    \ +1 because we want the smallest even value\n        val smalest_evens_index_plus_three\
    \ = smalest_evens_index_plus_two + 1 // +1 because we want the smallest even value\n\
    \        val smalest_evens_index_plus_four = smalest_evens_index_plus_three +\
    \ 1 // +1 because we want the smallest even value\n        val smalest_evens_index_plus_five\
    \ = smalest_evens_index_plus_four + 1 // +1 because we want the smallest even\
    \ value\n        val smalest_evens_index_plus_six = smalest_evens_index_plus_five\
    \ + 1 // +1 because we want the smallest even value\n        val smalest_evens_index_plus_seven\
    \ = smalest_evens_index_plus_six + 1 // +1 because we want the smallest even value\n\
    \        val smalest_evens_index_plus_eight = smalest_evens_index_plus_seven +\
    \ 1 // +1 because we want the smallest even value\n        val smalest_evens_index_plus_nine\
    \ = smalest_evens_index_plus_eight + 1 // +1 because we want the smallest even\
    \ value\n        val smalest_evens_index_plus_ten = smalest_evens_index_plus_nine\
    \ + 1 // +1 because we want the smallest even value\n        val smalest_evens_index_plus_eleven\
    \ = smalest_evens_index_plus_ten + 1 // +1 because we want the smallest even value\n\
    \        val smalest_evens_index_plus_twelve = smalest_evens_index_plus_eleven\
    \ + 1 // +1 because we want the smallest even value\n        val smalest_evens_index_plus_thirteen\
    \ = smalest_evens_index_plus_twelve + 1 // +1 because we want the smallest even\
    \ value\n        val smalest_evens_index_plus_fourteen = smalest_evens_index_plus_thirteen\
    \ + ", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even\
    \ = evens.min\n        val index = evens.indexOf(even)\n        val smalest_value\
    \ = arr.take(index).min\n        val smalest_index = arr.indexOf(smalest_value)\n\
    \        val smalest_evens = arr.take(smalest_index).filter(x => x % 2 == 0).toList\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens_index = smalest_index\n\
    \        val smalest_evens_value = smalest_value\n        val smalest_evens_smalest_index\
    \ = smalest_evens_index\n        val smalest_evens_smalest_value = smalest_evens_value\n\
    \        val smalest_evens_smalest_evens_index = smalest_evens_smalest_index\n\
    \        val smalest_evens_smalest_evens_value = smalest_evens_smalest_evens_value\n\
    \        val smalest_evens_smalest_evens_smalest_index = smalest_evens_smalest_evens_smalest_index\n\
    \        val smalest_evens_smalest_evens_smalest_value = smalest_evens_smalest_evens_smalest_value\n\
    \        val smalest_evens_smalest_evens_smalest_evens_index = smalest_evens_smalest_evens_smalest_evens_index\n\
    \        val smalest_evens_smalest_evens_smalest_evens_value = smalest_evens_smalest_evens_smalest_evens_value\n\
    \        val smalest_evens_smalest_evens_smalest_evens_smalest_index = smalest_evens_smalest_evens_smalest_evens_smalest_index\n\
    \        val smalest_evens_smalest_evens_smalest_evens_smalest_value = smalest_evens_smalest_evens_smalest_evens_smalest_value\n\
    \        val smalest_evens_smalest_evens_smalest_evens_smalest_evens_index = smalest_evens_smalest_evens_smalest_evens_smalest_evens_index\n\
    \        val smalest_evens_smalest_evens_smalest_evens_smalest_evens_value = smalest_even",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n\
    \        val result = evens.takeWhile(x => x != smalest_value).takeWhile(x =>\
    \ x != smalest_index).reverse\n        if (result.isEmpty) Nil\n        else result",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evensSortedWithIndex = evensSorted.zipWithIndex\n\
    \        val smalest_value = evensSortedWithIndex.minBy(_._1)._2.toLong\n    \
    \    val smalest_index = evensSortedWithIndex.minBy(_._1)._2.toLong\n        val\
    \ smalest_evens = evensSorted.filter(x => x == smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smalest_evensSortedWithIndex\
    \ = smalest_evensSorted.zipWithIndex\n        val smalest_evensSortedWithIndexMin\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndex\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEven\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndex\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndexAndSmalestEven\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndexAndSmalestEvenIndex\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndexAndSmalestEvenIndexAndSmalestEven\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndexAndSmalestEvenIndexAndSmalestEvenIndex\
    \ = smalest_evensSortedWithIndex.minBy(_._1)._2.toLong\n        val smalest_evensSortedWithIndexMinIndexAndSmallestEvenIndexAndSmalestEvenIndexAndSmalestEven",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSortedHead = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSortedTail = evenSmallestIndexListSorted.tail\n\
    \        val evenSmallestIndexListSortedHeadValue = evenSmallestIndexListSortedHead.toLong\n\
    \        val evenSmallestIndexListSortedTailValue = evenSmallestIndexListSortedTail.toLong\n\
    \        val evenSmallestIndexListSortedHeadIndex = evenSmallestIndexListSortedHead.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestIndexListSortedTailIndex = evenSmallestIndexListSortedTail.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestIndexListSortedHeadIndexSorted =\
    \ evenSmallestIndexListSortedHeadIndex.sortWith((x, y) => x < y)\n        val\
    \ evenSmallestIndexListSortedTailIndexSorted = evenSmallestIndexListSortedTailIndex.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSortedHeadIndexSortedHead = evenSmallestIndexListSortedHeadIndexSorted.head\n\
    \        val evenSmallestIndexListSortedTailIndexSortedTail = evenSmallestIndexListSortedTailIndexSorted.tail\n\
    \        val evenSmallestIndexListSortedHeadIndexSortedTailValue = evenSmallestIndexListSortedHeadIndexSortedTail.toLong\n\
    \        val evenSmallestIndexListSortedTailIndexSortedHeadValue = evenSmallestIndexListSortedTailIndexSortedHead.toLong\n\
    \        val evenSmallestIndexListSortedHeadIndexSortedTailIndex = evenSmallestIndexListSortedHeadIndexSortedTail.map(x\
    \ => arr.indexOf(x))\n        val evenSmallestIndexListSortedTailIndexSortedHeadIndex\
    \ = evenSmallestIndexListSortedTailIndexSortedHead.map(x => arr.indexOf(x))\n\
    \        val evenSmallestIndexListSortedHeadIndexSortedTailIndex", "        val\
    \ evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val\
    \ index = evens.indexOf(even)\n        val result = arr.filter(_ == even).sortBy(x\
    \ => x).take(index)\n        if (result.isEmpty) Nil\n        else result", " \
    \       val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n     \
    \   if (evens.isEmpty) List()\n        else {\n            val smalest_value =\
    \ evens.head\n            val smalest_index = evens.indexWhere(x => x == smalest_value)\n\
    \            val smalest_evens = evens.filter(_ == smalest_value)\n          \
    \  val smalest_evens_index = smalest_evens.indexWhere(x => x == smalest_value)\n\
    \            val smalest_evens_index_plus_1 = smalest_evens_index + 1\n      \
    \      val smalest_evens_index_plus_2 = smalest_evens_index_plus_1 + 1\n     \
    \       val smalest_evens_index_plus_3 = smalest_evens_index_plus_2 + 1\n    \
    \        val smalest_evens_index_plus_4 = smalest_evens_index_plus_3 + 1\n   \
    \         val smalest_evens_index_plus_5 = smalest_evens_index_plus_4 + 1\n  \
    \          val smalest_evens_index_plus_6 = smalest_evens_index_plus_5 + 1\n \
    \           val smalest_evens_index_plus_7 = smalest_evens_index_plus_6 + 1\n\
    \            val smalest_evens_index_plus_8 = smalest_evens_index_plus_7 + 1\n\
    \            val smalest_evens_index_plus_9 = smalest_evens_index_plus_8 + 1\n\
    \            val smalest_evens_index_plus_10 = smalest_evens_index_plus_9 + 1\n\
    \            val smalest_evens_index_plus_11 = smalest_evens_index_plus_10 + 1\n\
    \            val smalest_evens_index_plus_12 = smalest_evens_index_plus_11 + 1\n\
    \            val smalest_evens_index_plus_13 = smalest_evens_index_plus_12 + 1\n\
    \            val smalest_evens_index_plus_14 = smalest_evens_index_plus_13 + 1\n\
    \            val smalest_evens_index_plus_15 = smalest_evens_index_plus_14 + 1\n\
    \            val smalest_evens_index_plus_16 = smalest_evens_index_plus_15 + 1\n\
    \            val smalest_evens_index_plus_17 = smalest_evens_index_plus_16 + 1\n\
    \            val smalest_evens_index_plus_18 = smalest_evens_index_plus_17 + 1\n\
    \            val smalest_evens_index_plus_19 = smalest_evens_index_plus_18 + 1\n\
    \            val smalest_evens_index_plus_20 = smalest_evens_index_plus_19 + 1\n\
    \            val smalest_evens_index_", "        val evens = arr.filter(x => x\
    \ % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even).take(index).sorted\n        result.head",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexList.length\n        val evenSmallestValueListLength = evenSmallestValueList.length\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValue", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = arr.indexOf(even)\n        val result = List(even, index)\n        if (evens.isEmpty)\
    \ result\n        else result.reverse", "        val evens = arr.filter(_ % 2\
    \ == 0).sortBy(_)\n        if(evens.isEmpty) List()\n        else {\n        \
    \    val smalest_value = evens.head\n            val smalest_index = evens.indexWhere(_\
    \ == smalest_value)\n            val smalest_even = evens(smalest_index)\n   \
    \         val smalest_even_index = evens.indexWhere(_ == smalest_even)\n     \
    \       if(smalest_even_index == 0) List(smalest_value)\n            else List(smalest_value,\
    \ smalest_even_index)\n        }", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.toLong >\
    \ y.toLong)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val evenSmallestValueListSortedReversed\
    \ = evenSmallestValueListSorted.reverse\n        val evenSmallestValueListSortedReversedSorted\
    \ = evenSmallestValueListSortedReversed.sortWith((x, y) => x.toLong > y.toLong)\n\
    \        val evenSmallestValueListSortedReversedSortedReversed = evenSmallestValueListSortedReversedSorted.reverse\n\
    \        val evenSmallestValueListSortedReversedSortedReversedSorted = evenSmallestValueListSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSortedReversedSorted.reverse\n        val\
    \ evenSmallestValueListSortedReversedSortedReversedSortedReversedSorted = evenSmallestValueListSortedReversedSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversed.sortWith((x,\
    \ y) => x.toLong > y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSortedReversedSortedReversedSortedReverse",
  "        val evens = arr.filter(_ % 2 == 0).toList\n        if (evens.isEmpty) List()\n\
    \        else {\n            val even = evens.min\n            val index = arr.indexWhere(_\
    \ == even)\n            List(even, index)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \        val evenSmallestValueListLength = evenSmallestValueList.length\n    \
    \    val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n        val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        val\
    \ evenSmallestIndexListLength = evenSmallestIndexListLength\n        val evenSmallestValueListLength\
    \ = evenSmallestValueListLength\n        val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n        val\
    \ evenSmallestValueListLength = evenSmallestValue", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val smallestEven = evens.min\n        val index\
    \ = evens.indexOf(smallestEven)\n        val result = List(smallestEven, index)\n\
    \        if (evens.isEmpty) result\n        else result.sortWith((x, y) => x.toLong\
    \ < y.toLong)", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smalest_value\
    \ = evensSorted.head\n        val smalest_index = evensSorted.indexOf(0)\n   \
    \     val smalest_evens = evensSorted.takeWhile(x => x != smalest_value)\n   \
    \     val smalest_evensSorted = smalest_evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val smalest_evensSorted_index = smalest_evensSorted.indexOf(0)\n    \
    \    if (smalest_evensSorted.isEmpty) {\n            List[Long]()\n        } else\
    \ {\n            smalest_evensSorted.take(smalest_evensSorted_index).toList\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest = evensSorted.head\n\
    \        val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        if (evenSmallestIndexList.length\
    \ == 0)\n            evenSmallestValueList.empty\n        else if (evenSmallestIndexList.length\
    \ == 1)\n            evenSmallestValueList\n        else\n            evenSmallestValueList",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val even = evens.head\n        val index = evens.indexOf(0)\n        val result\
    \ = arr.filter(_ != even).sortBy(x => x).reverse\n        if (result.isEmpty)\
    \ List()\n        else List(even, index)", "        val evens = arr.filter(_ %\
    \ 2 == 0).sortBy(_).reverse\n        val smallest = evens.head\n        val index\
    \ = evens.indexWhere(_ == smallest)\n        val result = List(smallest, index)\n\
    \        if (evens.isEmpty) result\n        else pluck(arr.drop(index))", "  \
    \      val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallest = evensSorted.head\n  \
    \      val evenSmallestIndex = evensSorted.indexOf(0)\n        val evenSmallestValue\
    \ = evenSmallest.toLong\n        val evenSmallestIndexList = evenSmallestIndex.toList\n\
    \        val evenSmallestValueList = evenSmallestValue.toList\n        val evenSmallestIndexListLength\
    \ = evenSmallestIndexList.length\n        val evenSmallestValueListLength = evenSmallestValueList.length\n\
    \        val evenSmallestIndexListLength = evenSmallestIndexListLength\n     \
    \   val evenSmallestValueListLength = evenSmallestValueListLength\n        if\
    \ (evenSmallestIndexListLength == 1) {\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n            val evenSmallestValueListLength =\
    \ evenSmallestValueListLength\n            val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \            val evenSmallestValueListLength = evenSmallestValueListLength\n \
    \           val evenSmallestIndexListLength = evenSmallestIndexListLength\n  \
    \          val evenSmallestValueListLength = evenSmallestValueListLength\n   \
    \         val evenSmallestIndexListLength = evenSmallestIndexListLength\n    \
    \        val evenSmallestValueListLength = evenSmallestValueListLength\n     \
    \       val evenSmallestIndexListLength = evenSmallestIndexListLength\n      \
    \      val evenSmallestValueListLength = evenSmallestValueListLength\n       \
    \     val evenSmallestIndexListLength = evenSmallestIndexListLength\n        \
    \    val evenSmallestValueListLength = evenSmallestValueListLength\n         \
    \   val evenSmallestIndexListLength = evenSmallestIndexListLength\n          \
    \  val evenSmallestValueListLength = evenSmallestValueListLength\n           \
    \ val evenSmallestIndexListLength = evenSmallestIndexListLength\n            val\
    \ evenSmallestValueListLength = evenSmallestValueListLength\n            val evenSmallestIndexListLength\
    \ = evenSmallestIndexListLength\n            val evenSmallestValueListLength =\
    \ evenSmallestValueListLength\n            val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \            val even", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = List(smallest, index)\n        if (evens.isEmpty) result\n\
    \        else result.sortBy(_._1)", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        if (evens.isEmpty) List()\n        else {\n          \
    \  val even = evens.min\n            val index = arr.indexOf(even)\n         \
    \   List(even, index)\n        }", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ != even).toList\n        if (result.isEmpty)\
    \ List()\n        else List(even, index)", "        val evens = arr.filter(x =>\
    \ x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val smalest_value = arr.take(index).min\n        val smalest_index =\
    \ arr.indexOf(smalest_value)\n        val smalest_even = evens.take(smalest_index).min\n\
    \        val smalest_even_index = evens.indexOf(smalest_even)\n        val smalest_even_value\
    \ = evens.take(smalest_even_index).min\n        val smalest_even_count = evens.count(x\
    \ => x == smalest_even)\n        val smalest_even_count_index = evens.indexOf(smalest_even_count)\n\
    \        val smalest_even_count_value = evens.take(smalest_even_count_index).min\n\
    \        val smalest_even_count_count = evens.count(x => x == smalest_even_count)\n\
    \        val smalest_even_count_count_index = evens.indexOf(smalest_even_count_count)\n\
    \        val smalest_even_count_count_value = evens.take(smalest_even_count_count_index).min\n\
    \        val smalest_even_count_count_count = evens.count(x => x == smalest_even_count_count_value)\n\
    \        val smalest_even_count_count_count_index = evens.indexOf(smalest_even_count_count_count)\n\
    \        val smalest_even_count_count_count_value = evens.take(smalest_even_count_count_count_index).min\n\
    \        val smalest_even_count_count_count_count = evens.count(x => x == smalest_even_count_count_count_value)\n\
    \        val smalest_even_count_count_count_count_index = evens.indexOf(smalest_even_count_count_count_count)\n\
    \        val smalest_even_count_count_count_count_value = evens.take(smalest_even_count_count_count_count_index).min\n\
    \        val smalest_even_count_count_count_count_count_index = evens.indexOf(smalest_even_count_count_count_count_count_value)\n\
    \        val smalest_even_count_count_count_count_count_value = evens.take(smalest_even_count_count_count_count_count_index).min\n\
    \        val smalest_even_count_count_count_count_count_index = evens.indexOf(smalest_even_count_count_count_count_count_count_value)\n\
    \        val smalest_even_count_count_count_count_count_value = evens.take(smalest_even_count_count_count_count_count_count_index",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ ==\
    \ even)\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smalest_value = evens.min\n        \
    \    val smalest_index = evens.indexOf(smalest_value)\n            val result\
    \ = evens.filter(x => x % 2 == 0).map(x => (x, smalest_index)).sortBy(_._1).takeWhile(_._1\
    \ < smalest_value).map(_._1)\n            if (result.isEmpty) List()\n       \
    \     else result\n        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smalest_value\
    \ = evens.min\n            val smalest_index = arr.indexOf(smalest_value)\n  \
    \          val smalest_evens = arr.filter(x => x % 2 == smalest_value).toList\n\
    \            val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \            if (smalest_evens_index == -1) smalest_evens_index\n            else\
    \ smalest_evens_index\n        }", "        val evens = arr.filter(_ % 2 == 0).toList\n\
    \        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex\n        val smallestEven = evensSortedWithIndex.minBy(_._1)\n\
    \        val smallestEvenIndex = evensSortedWithIndex.indexOf(smallestEven)\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenValue._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenValue._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenValue._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenValue._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenValue._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenValue._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenValue._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenValue._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEvenIndex = smallestEvenIndex._2\n        val smallestEvenValue\
    \ = smallestEvenValue._1\n        val smallestEvenIndex = smallestEvenIndex._2\n\
    \        val smallestEvenValue = smallestEvenValue._1\n        val smallestEvenIndex\
    \ = smallestEvenIndex._2\n        val smallestEvenValue = smallestEvenValue._1\n\
    \        val smallestEven", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        if (evens.isEmpty) List(arr.head.toLong)\n        else {\n          \
    \  val min = evens.min\n            val index = arr.indexOf(min)\n           \
    \ arr.take(index).filter(_ % 2 == 0).min\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value = evens.head\n\
    \        val smalest_index = evens.indexOf(0)\n        if (smalest_index == -1)\
    \ evens.toList\n        else evens.take(smalest_index).sortBy(x => x).reverse.toList",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        val evensSorted = evensSorted.sortWith((x,\
    \ y) => x.compare(y))\n        val evensSorted = evensSorted.takeWhile(_ < arr.length)\n\
    \        val evensSorted = evensSorted.toList\n        ", "        val evens =\
    \ arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_ < _)\n\
    \        val evensSortedWithIndex = evensSorted.zipWithIndex\n        val smallestEven\
    \ = evensSortedWithIndex.minBy(_._1)\n        val smallestEvenIndex = evensSortedWithIndex.indexOf(smallestEven)\n\
    \        val smallestEvenValue = smallestEven._1\n        val smallestEvenIndex\
    \ = smallestEven._2\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenIndex = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val smallestEvenValue = smallestEvenIndex\n        val smallestEvenValue =\
    \ smallestEvenIndex\n        val smallestEvenValue = smallestEvenIndex\n     \
    \   val ", "        val evens = arr.filter(_ % 2 == 0).sortBy(_).reverse\n   \
    \     val even = evens.head\n        val index = evens.indexOf(0)\n        if\
    \ (evens.isEmpty) {\n            List[Long]()\n        } else if (index == 0)\
    \ {\n            List[Long](even)\n        } else {\n            List[Long](even,\
    \ index)\n        }", "        val evens = arr.filter(_ % 2 == 0).toList\n   \
    \     val smallestEven = evens.min\n        val smallestEvenIndex = arr.indexOf(smallestEven)\n\
    \        val result = arr.filter(_ == smallestEven).toList\n        if (smallestEvenIndex\
    \ == -1) {\n            List()\n        } else {\n            result :+ smallestEven\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val smalest_value = evens.head\n        val smalest_index = evens.indexWhere(_\
    \ == smalest_value)\n        val smalest_evens = evens.take(smalest_index)\n \
    \       if (smalest_evens.isEmpty) {\n            List[Long]()\n        } else\
    \ {\n            smalest_evens.map(x => (x, smalest_index)).sortBy(_._1).reverse\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0)\n        val even\
    \ = evens.min\n        val index = evens.indexOf(even)\n        val result = arr.filter(_\
    \ != even).take(index).map(x => x % 2 == 0).foldLeft(List[Long]())((x, y) => x\
    \ ++ y)\n        if (result.isEmpty) result else (result, index)", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        if (smalest_index\
    \ == -1) return List()\n        val smalest_even = evens(smalest_index)\n    \
    \    val smalest_even_index = evens.indexOf(smalest_even)\n        if (smalest_even_index\
    \ == -1) return List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n\
    \        if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (smalest_even_index == -1) return\
    \ List()\n        val smalest_even_index = evens.indexOf(smalest_even)\n     \
    \   if (smalest_even_index == -1) return List()\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        if (", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val smalest_value = evens.head\n        val smalest_index\
    \ = evens.indexOf(0)\n        val smalest_evens = evens.takeWhile(x => x % 2 ==\
    \ 0)\n        val smalest_evens_index = evens.indexOf(smalest_evens.head)\n  \
    \      if (smalest_evens_index == -1)\n            smalest_evens_index = evens.length\n\
    \        if (smalest_evens_index == evens.length)\n            smalest_evens_index\
    \ = evens.length - 1\n        if (smalest_evens_index == evens.length - 1)\n \
    \           smalest_evens_index = evens.length - 2\n        if (smalest_evens_index\
    \ == evens.length - 2)\n            smalest_evens_index = evens.length - 3\n \
    \       if (smalest_evens_index == evens.length - 3)\n            smalest_evens_index\
    \ = evens.length - 4\n        if (smalest_evens_index == evens.length - 4)\n \
    \           smalest_evens_index = evens.length - 5\n        if (smalest_evens_index\
    \ == evens.length - 5)\n            smalest_evens_index = evens.length - 6\n \
    \       if (smalest_evens_index == evens.length - 6)\n            smalest_evens_index\
    \ = evens.length - 7\n        if (smalest_evens_index == evens.length - 7)\n \
    \           smalest_evens_index = evens.length - 8\n        if (smalest_evens_index\
    \ == evens.length - 8)\n            smalest_evens_index = evens.length - 9\n \
    \       if (smalest_evens_index == evens.length - 9)\n            smalest_evens_index\
    \ = evens.length - 10\n        if (smalest_evens_index == evens.length - 10)\n\
    \            smalest_evens_index = evens.length - 11\n        if (smalest_evens_index\
    \ == evens.length - 11)\n            smalest_evens_index = evens.length - 12\n\
    \        if (smalest_evens_index == evens.length - 12)\n            smalest_evens_index\
    \ = evens.length - 13\n        if (smalest_evens_index == evens.length - 13)\n\
    \            smalest_evens_index = evens.length - 14\n        if (smalest_evens_index\
    \ == evens.length - 14)\n            smalest_evens_index = evens.length - 15\n\
    \        if (smalest_evens_index == evens.length - 15)\n            smalest_evens_index\
    \ = evens.length - 16\n        if (smalest_evens_index == evens.length - 16)\n\
    \            smalest_evens_index = evens.length - ", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n \
    \           val smalest_value = evens.min\n            val smalest_index = evens.indexOf(smalest_value)\n\
    \            val smalest_evens = evens.filter(x => x % 2 == 0)\n            val\
    \ smalest_evens_index = smalest_evens.indexOf(smalest_value)\n            val\
    \ smalest_evens_value = smalest_evens(smalest_evens_index)\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = smalest_evens_value\
    \ + 1\n            val smalest_evens_index = smalest_evens_index + 1\n       \
    \     val smalest_evens_value = smalest_evens_value + 1\n            val smalest_evens_index\
    \ = smalest_evens_index + 1\n            val smalest_evens_value = ", "      \
    \  val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val\
    \ even = evens.head\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse.takeWhile(x => x != even).take(index).toList\n\
    \        if (result.isEmpty) List(even.toLong)\n        else result", "      \
    \  val evens = arr.filter(_ % 2 == 0).toList\n        val even = evens.min\n \
    \       val index = arr.indexOf(even)\n        arr.filter(_ == even).sortWith(_\
    \ < _).take(1).map(_.toLong).toList :+ even", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val smalest_value = evens.take(index).min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.take(smalest_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = evens.take(smalest_even_index)\n\
    \        val smalest_even = smalest_evens.min\n        val smalest_even_index\
    \ = smalest_evens.indexOf(smalest_even)\n        val smalest_evens = ", "    \
    \    val evens = arr.filter(x => x % 2 == 0).toList\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = (smallest,\
    \ index)\n        if (evens.isEmpty) result\n        else result::pluck(arr.filter(x\
    \ => x != smallest && x != index))", "        val evens = arr.filter(x => x %\
    \ 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = arr.filter(_ != even).take(index).sortWith(_ < _)\n    \
    \    if (result.isEmpty) Nil\n        else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sorted\n        val even = evens.head\n        val index = evens.indexOf(0)\n\
    \        val result = (if (index == -1) List(even) else evens.take(index)).sorted\n\
    \        result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.toLong\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestValueListSorted = evenSmallestValueList.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSortedReversed\
    \ = evenSmallestIndexListSorted.reverse\n        val evenSmallestValueListSortedReversed\
    \ = evenSmallestValueListSorted.reverse\n        val evenSmallestIndexListSortedReversedSorted\
    \ = evenSmallestIndexListSortedReversed.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallestValueListSortedReversedSorted = evenSmallestValueListSortedReversed.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSortedReversedSortedReversed\
    \ = evenSmallestIndexListSortedReversedSorted.reverse\n        val evenSmallestValueListSortedReversedSortedReversed\
    \ = evenSmallestValueListSortedReversedSorted.reverse\n        val evenSmallestIndexListSortedReversedSortedReversedSorted\
    \ = evenSmallestIndexListSortedReversedSortedReversed.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evenSmallestValueListSortedReversedSortedReversedSorted\
    \ = evenSmallestValueListSortedReversedSortedReversed.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evenSmallestIndexListSortedReversedSortedReversedSortedReversed\
    \ = evenSmallestIndexListSortedReversedSortedReversedSorted.reverse\n        val\
    \ evenSmallestValueListSortedReversedSortedReversedSortedReversed = evenSmallestValueListSortedReversedSortedReversedSorted.reverse\n\
    \        val evenSmallestIndexListSortedReversedSortedReversedSortedReversedSorted\
    \ = evenSmallestIndexListSortedReverse", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n    \
    \        val smallestEven = evens.min\n            val index = arr.indexOf(smallestEven)\n\
    \            val result = List(smallestEven, index)\n            if (index ==\
    \ arr.length - 1) result\n            else result :+ arr.take(index + 1)\n   \
    \     }", "        val evens = arr.filter(x => x % 2 == 0)\n        val even =\
    \ evens.min\n        val index = evens.indexOf(even)\n        val result = arr.filter(_\
    \ != even)\n        if (result.isEmpty) List()\n        else List(even, index)",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val evensSortedWithIndex\
    \ = evensSorted.zipWithIndex.toList\n        val smalestValue = evensSortedWithIndex.head._2\n\
    \        val smalestIndex = evensSortedWithIndex.head._1\n        val smalestEven\
    \ = evensSortedWithIndex.filter(x => x._2 == smalestValue).head._1\n        val\
    \ smalestEvenIndex = evensSortedWithIndex.filter(x => x._2 == smalestValue).head._2\n\
    \        val smalestEvenIndex = smalestEvenIndex.toLong\n        val smalestEvenValue\
    \ = evensSortedWithIndex.filter(x => x._2 == smalestValue).head._1\n        val\
    \ smalestEvenValueIndex = evensSortedWithIndex.filter(x => x._2 == smalestValue).head._2\n\
    \        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val\
    \ smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n\
    \        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val\
    \ smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n\
    \        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val\
    \ smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n\
    \        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val\
    \ smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex\
    \ = smalestEvenValueIndex.toLong\n        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n\
    \        val smalestEvenValueIndex = smalestEvenValueIndex.toLong\n        val\
    \ smalestEvenValueIndex = sm", "        val evens = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse\n        if (evens.isEmpty) Nil\n        else evens.take(1).head",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = arr.indexOf(even)\n        val result = arr.filter(_ != even).toList\n\
    \        if (evens.isEmpty) result\n        else (List(even, index), result)",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val even\
    \ = evens.head\n        val index = arr.indexOf(even)\n        val result = List(even,\
    \ index)\n        if (evens.isEmpty) result\n        else result.reverse", " \
    \       val evens = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.min\n            val\
    \ index = arr.indexOf(smallest)\n            val result = List(smallest, index)\n\
    \            if (evens.size == 1) result\n            else result ::: pluck(arr.filter(_\
    \ != smallest))\n        }", "        val evens = arr.filter(x => x % 2 == 0)\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_value = evens(smalest_even_index)\n\
    \        val smalest_even_index_list = evens.indexOf(smalest_even)\n        val\
    \ smalest_even_index_list_list = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)\n        val smalest_even_index_list_list_list_list_list_list_list_list_list_list_list_list_list\
    \ = evens.indexOf(smalest_even)", "        val evens = arr.filter(_ % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = arr.indexOf(even)\n       \
    \ val result = (even, index)\n        if (evens.isEmpty) result\n        else\
    \ result::pluck(arr.filter(_ != even).toList)", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        val result = arr.filter(_ == even).sortWith(_ < _).take(index).reverse\n\
    \        if (result.isEmpty) List(even.toLong)\n        else result", "      \
    \  val evens = arr.filter(_ % 2 == 0).toList\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smallest = evens.min\n            val index =\
    \ arr.indexOf(smallest)\n            val result = List(smallest, index)\n    \
    \        if (evens.size == 1) result\n            else pluck(arr.filter(_ != smallest))\n\
    \        }", "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        val\
    \ smalest_value = evens.head\n        val smalest_index = evens.indexOf(0)\n \
    \       if (smalest_index == -1) {\n            evens\n        } else {\n    \
    \        evens.take(smalest_index).sortBy(_).reverse\n        }", "        val\
    \ evens = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n \
    \       val index = arr.indexOf(even)\n        arr.take(index).filter(_ % 2 ==\
    \ 0).min", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ smallestEven = evens.min\n        val smallestIndex = evens.indexOf(smallestEven)\n\
    \        val result = arr.filter(_ == smallestEven)\n        if (result.isEmpty)\
    \ List()\n        else List(smallestEven, smallestIndex)", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val even = evens.min\n       \
    \ val index = arr.indexOf(even)\n        val result = List(even, index)\n    \
    \    if (evens.isEmpty) result\n        else result.reverse", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        if (evens.isEmpty) List()\n       \
    \ else {\n            val minEven = evens.min\n            val index = arr.indexOf(minEven)\n\
    \            val minIndex = arr.indexOf(minEven, index + 1)\n            val smalest_value\
    \ = minEven + minIndex\n            val smalest_value_index = arr.indexOf(smalest_value)\n\
    \            val smalest_value_index_list = List(smalest_value, smalest_value_index)\n\
    \            val smalest_value_index_list_sorted = smalest_value_index_list.sortBy(_._1)\n\
    \            val smalest_value_index_list_sorted_reversed = smalest_value_index_list_sorted.reverse\n\
    \            val smalest_value_index_list_sorted_reversed_sorted = smalest_value_index_list_sorted_reversed.sortBy(_._1)\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed = smalest_value_index_list_sorted_reversed_sorted.reverse\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed.sortBy(_._1)\n  \
    \          val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_._1)\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_._1)\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_._1)\n\
    \            val smalest_value_index_list_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = smale", "        val evens = arr.filter(x => x % 2 == 0).toList\n        val\
    \ evensSorted = evens.sortWith((x, y) => x.compare(y))\n        val evenSmallest\
    \ = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestValueList = evenSmallestValue.toList\n\
    \        if (evenSmallestIndexList.length == 1) {\n            val smallestEven\
    \ = evenSmallestValue\n            val smallestEvenIndex = evenSmallestIndex\n\
    \            val smallestEvenValueList = evenSmallestValueList\n            val\
    \ smallestEvenIndexList = evenSmallestIndexList\n            val smallestEvenValueListLength\
    \ = smallestEvenValueList.length\n            val smallestEvenIndexListLength\
    \ = smallestEvenIndexList.length\n            val smallestEvenValueListLength\
    \ = smallestEvenValueListLength\n            val smallestEvenIndexListLength =\
    \ smallestEvenIndexListLength\n            val smallestEvenValueListLength = smallestEvenValueListLength\n\
    \            val smallestEvenIndexListLength = smallestEvenIndexListLength\n \
    \           val smallestEvenValueListLength = smallestEvenValueListLength\n  \
    \          val smallestEvenIndexListLength = smallestEvenIndexListLength\n   \
    \         val smallestEvenValueListLength = smallestEvenValueListLength\n    \
    \        val smallestEvenIndexListLength = smallestEvenIndexListLength\n     \
    \       val smallestEvenValueListLength = smallestEvenValueListLength\n      \
    \      val smallestEvenIndexListLength = smallestEvenIndexListLength\n       \
    \     val smallestEvenValueListLength = smallestEvenValueListLength\n        \
    \    val smallestEvenIndexListLength = smallestEvenIndexListLength\n         \
    \   val smallestEvenValueListLength = smallestEvenValueListLength\n          \
    \  val smallestEvenIndexListLength = smallestEvenIndexListLength\n           \
    \ val smallestEvenValueListLength = smallestEvenValueListLength\n            val\
    \ smallestEvenIndexListLength = smallestEvenIndexListLength\n            val smallestEvenValueListLength\
    \ = smallestEvenValueListLength\n            val smallestEvenIndexListLength =\
    \ smallestEvenIndexListLength\n            val smallestEvenValueListLength = smallestEvenValueListLength\n\
    \            val smallestEvenIndexListLength = smallestEvenIndexListLength\n \
    \           val smallestEvenValueListLength = smallestEvenValueListLength\n  \
    \          ", "        val evens = arr.filter(x => x % 2 == 0).toList\n      \
    \  val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        val smalest_even = evens(smalest_index)\n        val smalest_even_index\
    \ = smalest_index match {\n            case -1 => -1\n            case _ => evens.indexOf(smalest_even)\n\
    \        }\n        val smalest_even_value = evens(smalest_even_index)\n     \
    \   val smalest_even_index_list = evens.take(smalest_even_index).map(x => x.toLong).toList\n\
    \        val smalest_even_index_list_sorted = smalest_even_index_list.sortWith(_\
    \ < _)\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(1).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take(smalest_even_index_list_sorted.length).map(x\
    \ => x.toLong).toList\n        val smalest_even_index_list_sorted = smalest_even_index_list_sorted.take",
  "        val evens = arr.filter(_ % 2 == 0).toList\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val smalest_value = arr.take(index).min\n\
    \        val smalest_index = arr.indexOf(smalest_value)\n        val result =\
    \ List(smalest_value, smalest_index)\n        if (arr.isEmpty) result\n      \
    \  else result", "        val evens = arr.filter(x => x % 2 == 0)\n        val\
    \ even = evens.min\n        val index = evens.indexOf(even)\n        val result\
    \ = arr.filter(_ == even)\n        if (result.isEmpty) Nil\n        else result.take(index).sortBy(x\
    \ => x).reverse", "        val evens = arr.filter(_ % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_evens = evens.filter(_ == smalest_value)\n        val smalest_evens_index\
    \ = smalest_evens.indexOf(smalest_value)\n        val smalest_evens_index_plus_one\
    \ = smalest_evens_index + 1\n        if (smalest_evens_index_plus_one == evens.length)\n\
    \            smalest_evens_index_plus_one\n        else\n            smalest_evens_index_plus_one",
  "        val evens = arr.filter(_ % 2 == 0).sortBy(_)\n        if (evens.isEmpty)\
    \ List()\n        else {\n            val smallest = evens.head\n            val\
    \ index = arr.indexOf(smallest)\n            val result = List(smallest, index)\n\
    \            if (arr.contains(smallest)) result :+ smallest\n            else\
    \ result\n        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even)\n        if (result.isEmpty) List()\n \
    \       else result.take(index).toList", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).sortBy(x => x)\n        if (evens.isEmpty) List()\n        else\
    \ evens.take(1).head", "        val evens = arr.filter(x => x % 2 == 0)\n    \
    \    if (evens.isEmpty) List()\n        else {\n            val even = evens.min\n\
    \            val index = arr.indexOf(even)\n            List(even, index)\n  \
    \      }", "        val evens = arr.filter(_ % 2 == 0).toList\n        val smallest\
    \ = evens.min\n        val index = evens.indexOf(smallest)\n        val result\
    \ = (smallest, index)\n        if (evens.isEmpty) result\n        else result\
    \ :: pluck(arr.filter(_ != smallest))", "        val evens = arr.filter(_ % 2\
    \ == 0).sortBy(_)\n        val smallest = evens.head\n        val index = evens.indexOfFirst\
    \ { _ == smallest }\n        if (index == -1) List(smallest) else evens.take(index).toList",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    val smalest_evens = evens.take(smalest_index)\n        if (smalest_evens.isEmpty)\
    \ List()\n        else List(smalest_value, smalest_index)", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.filter(x => x == smalest_value).toList\n        if (smalest_evens.isEmpty)\
    \ List(smalest_value, smalest_index)\n        else smalest_evens.minIndex", " \
    \       val evens = arr.filter(_ % 2 == 0).toList\n        val smallest = evens.min\n\
    \        val index = evens.indexOf(smallest)\n        val result = if (index ==\
    \ -1) List(smallest) else List(smallest, index)\n        return result", "   \
    \     val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smalest_value = evensSorted.head\n \
    \       val smalest_index = evensSorted.indexOf(0)\n        if (evensSorted.isEmpty)\
    \ {\n            List[Long]()\n        } else {\n            evensSorted.takeWhile(x\
    \ => x != smalest_value).takeWhile(x => x != smalest_index).map(x => x.toLong)\n\
    \        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n       \
    \ val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n        val\
    \ evensSortedWithIndex = evensSorted.zipWithIndex\n        val smalest_value =\
    \ evensSortedWithIndex.head._2\n        val smalest_index = evensSortedWithIndex.head._1\n\
    \        val smalest_evens = evensSorted.filter(_ == smalest_value)\n        val\
    \ smalest_evensSorted = smalest_evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val smalest_evensSortedWithIndex = smalest_evensSorted.zipWithIndex\n\
    \        val smalest_evensSortedWithIndexSorted = smalest_evensSortedWithIndex.sortWith((x,\
    \ y) => x._1 < y._1)\n        val smalest_evensSortedWithIndexSortedWithIndex\
    \ = smalest_evensSortedWithIndexSorted.zipWithIndex\n        val smalest_evensSortedWithIndexSortedWithIndexSorted\
    \ = smalest_evensSortedWithIndexSortedWithIndex.sortWith((x, y) => x._1 < y._1)\n\
    \        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndex = smalest_evensSortedWithIndexSortedWithIndexSorted.zipWithIndex\n\
    \        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalest_evensSortedWithIndexSortedWithIndexSortedWithIndex.sortWith((x, y)\
    \ => x._1 < y._1)\n        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n\
    \        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortWith((x,\
    \ y) => x._1 < y._1)\n        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.zipWithIndex\n\
    \        val smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex\
    \ = smalest_evensSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndexSortedWithIndex.sortWith",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  val smalest_value = evens.head\n        val smalest_index = evens.indexWhere(x\
    \ => x == smalest_value)\n        val result = arr.filter(x => x % 2 == 0).sortBy(x\
    \ => x).reverse.takeWhile(x => x != smalest_value).takeWhile(x => x != smalest_index).reverse\n\
    \        if (result.isEmpty) Nil\n        else result", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x).reverse\n        val even = evens.head\n     \
    \   val index = arr.indexOf(even)\n        val result = List(even, index)\n  \
    \      if (evens.isEmpty) result\n        else result.reverse", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = (even, index)\n        if (evens.isEmpty)\
    \ Nil\n        else result", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val smalest_value = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n\
    \        if (smalest_index == -1) {\n            evens.toList\n        } else\
    \ {\n            evens.take(smalest_index).toList\n        }", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ == even)\n        if\
    \ (result.isEmpty) List()\n        else List(even, index)", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ == even)\n        if\
    \ (result.isEmpty) List()\n        else List(even, index)", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smalest_value = evensSorted.head\n \
    \       val smalest_index = evensSorted.indexOf(0)\n        if (evensSorted.size\
    \ == 0) {\n            List[Long]()\n        } else if (evensSorted.size == 1)\
    \ {\n            List[Long](smalest_value)\n        } else {\n            List[Long](smalest_value,\
    \ smalest_index)\n        }", "        val evens = arr.filter(x => x % 2 == 0).sorted\n\
    \        if (evens.isEmpty) List()\n        else {\n            val smallest =\
    \ evens.head\n            val index = arr.indexOf(smallest)\n            val even\
    \ = smallest % 2 == 0\n            val result = (if (even) List(smallest, index)\
    \ else List(smallest, index)).sortBy(_._1).reverse\n            result\n     \
    \   }", "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = arr.filter(_ !=\
    \ even)\n        if (result.isEmpty) Nil\n        else (List(even, index), result)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val even\
    \ = evens.head\n        val index = evens.indexOf(even)\n        val result =\
    \ (if (index == 0) even else evens.take(index)).sortBy(x => x)\n        val resultList\
    \ = result.map(x => x.toLong).toList\n        resultList", "        val evens\
    \ = arr.filter(x => x % 2 == 0).sortBy(x => x)\n        val even = evens.head\n\
    \        val index = evens.indexOf(0)\n        val result: List[Long] = if (index\
    \ == -1) Nil else List(even, index)\n        result", "        val evens = arr.filter(_\
    \ % 2 == 0)\n        val even = evens.min\n        val index = evens.indexOf(even)\n\
    \        if (evens.isEmpty) List()\n        else List(even, index)", "       \
    \ val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value = evens.min\n\
    \        val smalest_index = evens.indexOf(smalest_value)\n        val smalest_evens\
    \ = evens.filter(x => x % 2 == 0)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        val smalest_evens_value = smalest_evens(smalest_evens_index)\n      \
    \  val smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val smalest_evens_index = smalest_evens_index\
    \ + 1\n        val smalest_evens_value = smalest_evens_value + 1\n        val\
    \ smalest_evens_index = smalest_evens_index + 1\n        val smalest_evens_value\
    \ = smalest_evens_value + 1\n        val sm", "        val evens = arr.filter(x\
    \ => x % 2 == 0)\n        val smallestEven = evens.min\n        val index = evens.indexOf(smallestEven)\n\
    \        val result = if (index == -1) List(smallestEven) else List(smallestEven,\
    \ index)\n        return result", "        val evens = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        arr.take(index).filter(_ % 2 == 0).min", "        val evens = arr.filter(x\
    \ => x % 2 == 0).sortBy(x => x)\n        if (evens.isEmpty) List()\n        else\
    \ evens.take(1).map(x => (x, evens.indexOf(x)))", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n \
    \           val smalest_value = evens.min\n            val smalest_index = evens.indexOf(smalest_value)\n\
    \            val smalest_even = evens(smalest_index)\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        val result = if (evens.isEmpty) Nil else List(even, index)\n        result",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val smalest_value = evensSorted.head\n \
    \       val smalest_index = evensSorted.indexOf(0)\n        val smalest_evens\
    \ = evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evens.sortWith((x, y) => x.toLong < y.toLong)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = smalest_evensSorted.takeWhile(x => x != smalest_value)\n        val smalest_evensSorted\
    \ = ", "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted\
    \ = evens.sortWith((x, y) => x.compare(y))\n        val smallestEven = evensSorted.head\n\
    \        val smallestEvenIndex = evensSorted.indexOf(0)\n        val smallestEvenValue\
    \ = smallestEven\n        val smallestEvenIndexList = List(smallestEvenIndex,\
    \ smallestEvenIndex + 1)\n        val smallestEvenValueList = List(smallestEvenValue,\
    \ smallestEvenValue + 1)\n        if (evensSorted.isEmpty) {\n            List[Long]()\n\
    \        } else {\n            val smallestEvenIndexSet = evensSorted.toSet\n\
    \            val smallestEvenIndexSetSize = smallestEvenIndexSet.size\n      \
    \      if (smallestEvenIndexSetSize == 1) {\n                smallestEvenIndexSet.head\n\
    \            } else if (smallestEvenIndexSetSize == 2) {\n                smallestEvenIndexSet.head\n\
    \            } else if (smallestEvenIndexSetSize == 3) {\n                smallestEvenIndexSet.head\n\
    \            } else if (smallestEvenIndexSetSize == 4) {\n                smallestEvenIndexSet.head\n\
    \            } else if (smallestEvenIndexSetSize == 5) {\n                smallestEvenIndexSet.head\n\
    \            } else {\n                smallestEvenIndexSet.toList\n         \
    \   }\n        }", "        val evens = arr.filter(x => x % 2 == 0).toList\n \
    \       val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n    \
    \    val evenSmallest = evensSorted.head\n        val evenSmallestIndex = evensSorted.indexOf(0)\n\
    \        val evenSmallestValue = evenSmallest.toLong\n        val evenSmallestIndexList\
    \ = evenSmallestIndex.toList\n        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSm", "        val evens = arr.filter(x => x % 2 == 0)\n     \
    \   val even = evens.min\n        val index = evens.indexOf(even)\n        val\
    \ result = arr.filter(x => x % 2 == 0).filter(x => x != even).take(index).sorted\n\
    \        if (result.isEmpty) List()\n        else result", "        val evens\
    \ = arr.filter(x => x % 2 == 0).toList\n        if (evens.isEmpty) Nil\n     \
    \   else {\n            val minEven = evens.min\n            val minIndex = evens.indexOf(minEven)\n\
    \            val minEvenIndex = minIndex\n            val minEvenValue = minEven\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n           \
    \ val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n\
    \            val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex\
    \ = minEvenIndex\n            val minEvenValueIndex = minEvenIndex\n         \
    \   val minEvenValueIndex = minEvenIndex\n            val minEvenValueIndex =\
    \ minEvenIndex\n            ", "        val evens = arr.filter(_ % 2 == 0).toList\n\
    \        val smallest = evens.min\n        val index = evens.indexOf(smallest)\n\
    \        val result = if (index == -1) Nil else List(smallest, index)\n      \
    \  result", "        val evens = arr.filter(x => x % 2 == 0)\n        val smalest_value\
    \ = evens.min\n        val smalest_index = evens.indexOf(smalest_value)\n    \
    \    if (smalest_index == -1) {\n            List[Long]()\n        } else {\n\
    \            evens.take(smalest_index).map(x => x -> smalest_index)\n        }",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        val evensSorted = evensSorted.takeWhile(_\
    \ < arr.length)\n        val smalest_value = evensSorted.head\n        val smalest_index\
    \ = evensSorted.indexOf(0)\n        val smalest_evens = evensSorted.take(evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evens.sortWith((x, y) => x.toLong <\
    \ y.toLong)\n        val smalest_evensSorted = smalest_evensSorted.takeWhile(_\
    \ < arr.length)\n        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smalest_evensSorted.indexOf(smalest_value))\n\
    \        val smalest_evensSorted = smalest_evensSorted.take(smale", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val smalest_value\
    \ = evens.head\n        val smalest_index = evens.indexOf(0)\n        if (evens.isEmpty)\
    \ List()\n        else evens.take(smalest_index).map(x => smalest_value + x.toLong)",
  "        val evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n      \
    \  if (evens.isEmpty) List()\n        else {\n            val smallest = evens.head\n\
    \            val index = evens.indexOf(smallest)\n            val result = List(smallest,\
    \ index)\n            if (evens.tail.isEmpty) result\n            else result\
    \ ++ pluck(evens.tail)\n        }", "        val evens = arr.filter(x => x % 2\
    \ == 0).toList\n        if (evens.isEmpty) List()\n        else {\n          \
    \  val smallest = evens.min\n            val index = arr.indexOf(smallest)\n \
    \           val result = List(smallest, index)\n            arr.filterNot(x =>\
    \ x == smallest).filterNot(x => x == index).filterNot(x => x == smallest + index).filterNot(x\
    \ => x == smallest - index).filterNot(x => x == smallest + index - 1).filterNot(x\
    \ => x == smallest - index - 1)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_evens = evens.filter(x =>\
    \ x % 2 == 0)\n        val smalest_evens_index = smalest_evens.indexOf(smalest_value)\n\
    \        if (smalest_evens_index == -1) smalest_evens_index = 0\n        smalest_evens.take(smalest_evens_index).map(x\
    \ => (x, smalest_index)).sortBy(_._1).reverse.head", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val evensSorted = evens.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.map(x => arr.indexOf(x))\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexList.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.reverse\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.map(x =>\
    \ arr.indexOf(x))\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.reverse\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.map(x =>\
    \ arr.indexOf(x))\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.reverse\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.map(x =>\
    \ arr.indexOf(x))\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.sortWith((x,\
    \ y) => x < y)\n        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.head\n\
    \        val evenSmallestIndexListSorted = evenSmallestIndexListSorted.toList\n\
    \        val evenSmallestIndexListSorted = evenSmalle", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        val smalest_value = evens.min\n        val smalest_index\
    \ = evens.indexOf(smalest_value)\n        val smalest_even = evens(smalest_index)\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_even_index = smalest_index\n        val smalest_even_value = smalest_value\n\
    \        val smalest_even_index = smalest_index\n        val smalest_even_value\
    \ = smalest_value\n        val smalest_even_index = smalest_index\n        val\
    \ smalest_even_value = smalest_value\n        val smalest_even_index = smalest_index\n\
    \        val smalest_even_value = smalest_value\n        val smalest_even_index\
    \ = smalest_index\n        val smalest_even_value = smalest_value\n        val\
    \ smalest_", "        val evens = arr.filter(x => x % 2 == 0).toList\n       \
    \ val even = evens.min\n        val index = evens.indexOf(even)\n        arr.filter(_\
    \ == even).sortWith(_ < _).take(index).toList", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        if (evens.isEmpty) List()\n        else {\n      \
    \      val smallest = evens.min\n            val index = evens.indexOf(smallest)\n\
    \            val result = List(smallest, index)\n            if (index == evens.length)\
    \ result\n            else result ++ pluck(arr.drop(index))\n        }", "   \
    \     val evens = arr.filter(x => x % 2 == 0)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val evenSmallest = evensSorted.head\n        val evenSmallestIndex\
    \ = evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest\n   \
    \     val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evenSmallestIndexList.length == 1) {\n\
    \            val evenSmallestIndexListLength = evenSmallestIndexList.length\n\
    \            val evenSmallestValueListLength = evenSmallestValueList.length\n\
    \            if (evenSmallestIndexListLength == evenSmallestValueListLength) {\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSmallestIndexListLength\n\
    \                val evenSmallestValueListLength = evenSmallestValueListLength\n\
    \                val evenSmallestIndexListLength = evenSm", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ == even)\n        if\
    \ (result.isEmpty) Nil\n        else result.take(index).toList", "        val\
    \ evens = arr.filter(x => x % 2 == 0).sortBy(x => x).reverse\n        val even\
    \ = evens.head\n        val index = evens.indexOf(0)\n        val result = (List(even,\
    \ index)).toList\n        if (arr.isEmpty) result\n        else pluck(arr.drop(index))",
  "        val evens = arr.filter(x => x % 2 == 0).toList\n        val smallest =\
    \ evens.min\n        val index = evens.indexOf(smallest)\n        val result =\
    \ if (index == -1) List[Long]() else List(smallest, index)\n        return result",
  "        val evens = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n\
    \        val index = evens.indexOf(even)\n        val result = if (index == -1)\
    \ List[Long]() else arr.take(index).reverse\n        result", "        val evens\
    \ = arr.filter(_ % 2 == 0).toList\n        val smallest = evens.min\n        val\
    \ index = evens.indexOf(smallest)\n        val result = if (index == -1) Nil else\
    \ List(smallest, index)\n        result", "        val evens = arr.filter(x =>\
    \ x % 2 == 0).toList\n        val evensSorted = evens.sortBy(x => x)\n       \
    \ val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted =\
    \ evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x => x\
    \ < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x => x <\
    \ arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n\
    \        val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n \
    \       val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n  \
    \      val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n   \
    \     val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n    \
    \    val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n     \
    \   val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n      \
    \  val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n       \
    \ val evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n        val\
    \ evensSorted = evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted\
    \ = evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted =\
    \ evensSorted.takeWhile(x => x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x\
    \ => x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x =>\
    \ x < arr.last).toList\n        val evensSorted = evensSorted.takeWhile(x => x\
    \ < arr.last).toList\n", "        val evens = arr.filter(x => x % 2 == 0).toList\n\
    \        val even = evens.min\n        val index = evens.indexOf(even)\n     \
    \   val result = arr.filter(_ == even).toList\n        if (result.isEmpty) List()\n\
    \        else List(even, index)", "        val evens = arr.filter(x => x % 2 ==\
    \ 0)\n        val evensSorted = evens.sortWith((x, y) => x.toLong < y.toLong)\n\
    \        val evenSmallest = evensSorted.head\n        val evenSmallestIndex =\
    \ evensSorted.indexOf(0)\n        val evenSmallestValue = evenSmallest.toLong\n\
    \        val evenSmallestIndexList = evenSmallestIndex.toList\n        val evenSmallestValueList\
    \ = evenSmallestValue.toList\n        if (evensSorted.isEmpty) {\n           \
    \ List[Long]()\n        } else {\n            evenSmallestValueList.zip(evenSmallestIndexList).filter(_._1\
    \ == evenSmallestValue).map(_._2)\n        }", "        val evens = arr.filter(x\
    \ => x % 2 == 0).toList\n        val even = evens.min\n        val index = arr.indexOf(even)\n\
    \        arr.take(index).filter(_ % 2 == 0).min", "        val evens = arr.filter(_\
    \ % 2 == 0).toList\n        if (evens.isEmpty) Nil\n        else {\n         \
    \   val smalest_value = evens.min\n            val smalest_index = evens.indexOf(smalest_value)\n\
    \            val smalest_even = evens(smalest_index)\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = smalest_value\n      \
    \      val smalest_even_index = smalest_index\n            val smalest_even_value\
    \ = smalest_value\n            val smalest_even_index = smalest_index\n      \
    \      val smalest_even_value = smalest_value\n            val smalest_even_index\
    \ = smalest_index\n            val smalest_even_value = ", "        val evens\
    \ = arr.filter(x => x % 2 == 0)\n        val even = evens.min\n        val index\
    \ = evens.indexOf(even)\n        val result = arr.filter(_ != even)\n        if\
    \ (result.isEmpty) List()\n        else List(even, index)", "        val evens\
    \ = arr.filter(_ % 2 == 0).sortBy(_).reverse\n        if (evens.isEmpty) List()\n\
    \        else {\n            val smalest_value = evens.head\n            val smalest_index\
    \ = evens.indexOf(0)\n            val smalest_even = evens.takeWhile(_ < smalest_value).takeWhile(_\
    \ % 2 == 0).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_ < smalest_value).takeWhile(_\
    \ < smalest_value).takeWhile(_ < smalest_value).take"]
stop_tokens:
- "\n    }\n"
