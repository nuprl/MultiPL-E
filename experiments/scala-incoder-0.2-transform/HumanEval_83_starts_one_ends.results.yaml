language: scala
name: HumanEval_83_starts_one_ends
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        var start = 1\n        var\
    \ end = 1\n        while(start <= n) {\n            while(start <= n && end <=\
    \ n) {\n                if(start == end) {\n                    count += 1\n \
    \               }\n                start += 1\n                end += 1\n    \
    \        }\n            start += 1\n            end = start\n        }\n     \
    \   count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp78m6me6h.scala:25)\n\tat Problem.main(tmp78m6me6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        var last = 0\n        for(i\
    \ <- 0 until n){\n            if((i%10)==1 && (i%100)!=0 && (i%1000)!=0){\n  \
    \              count += 1\n                last = i\n            }\n        }\n\
    \        count += last\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4f5gvf1z.scala:9:25\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n){\n\e[31m\e[31m  |\e[0m                         ^\e[0m\n\e\
    [31m  |\e[0m                         Found:    (n : Long)\n\e[31m  |\e[0m    \
    \                     Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        val ones = scala.collection.mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 10 == 1) {\n               \
    \ ones += i\n            }\n        }\n        for (i <- ones) {\n           \
    \ if (i % 10 == 1) {\n                count += 1\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5g7x5brv.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesZeros = mutable.Map[Long, Long]()\n        val zerosOnes\
    \ = mutable.Map[Long, Long]()\n        val onesOnes = mutable.Map[Long, Long]()\n\
    \        val zerosZeros = mutable.Map[Long, Long]()\n        val onesZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOnes = mutable.Map[Long, Long]()\n\
    \        val onesOneOnes = mutable.Map[Long, Long]()\n        val zerosZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val onesZeroZeros = mutable.Map[Long, Long]()\n\
    \        val zerosOneZeros = mutable.Map[Long, Long]()\n        val onesOneZeros\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneZeros = mutable.Map[Long, Long]()\n        val\
    \ zerosZeroOneZeros = mutable.Map[Long, Long]()\n        val onesZeroZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneZeroOnes = mutable.Map[Long,\
    \ Long]()\n        val onesOneZeroOnes = mutable.Map[Long, Long]()\n        val\
    \ zerosOneOneZeroOnes = mutable.Map[Long, Long]()\n        val onesOneOneZeroOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosZeroOneOneZeros = mutable.Map[Long,\
    \ Long]()\n        val onesZeroZeroOneOnes = mutable.Map[Long, Long]()\n     \
    \   val zerosOneZeroOneOnes = mutable.Map[Long, Long]()\n        val onesOneZeroOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zerosOneOneZeroOneOnes = mutable.Map[Long,\
    \ Long]()\n        val onesOneOneZeroOneOnes = mutable.Map[Long, Long]()\n   \
    \     val zerosZeroOneOneOneZeros = mutable.Map[Long, Long]()\n        val onesZeroZeroOneOneOnes\
    \ = mutable.Map[Long, Long]()\n        val zeros\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp684hzggr.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp684hzggr.scala:7:19\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mones\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m         \
    \          ^^^^^^^\e[0m\n\e[31m  |\e[0m                   Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp684hzggr.scala:8:20\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e\
    [36mzeros\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m        \
    \            ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp684hzggr.scala:9:21\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mcounts\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m\
    \  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m                   \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp684hzggr.scala:10:24\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36monesCount\e[0m = mutable.Map[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp684hzggr.scala:11:25 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mzerosCount\e[0m = mutable.Map[\e[35mLong\e[0m,\
    \ \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer[Long]()\n        var\
    \ count = 0\n        for (i <- 0 until n) if (i % 10 == 1) ones += i\n       \
    \ for (i <- 0 until n) if (i % 10 != 1 && i % 10 != 9) count += ones.length\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoubw9x9b.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpoubw9x9b.scala:9:26 ---------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) \e\
    [33mif\e[0m (i % \e[31m10\e[0m == \e[31m1\e[0m) ones += i\n\e[31m\e[31m  |\e[0m\
    \                          ^\e[0m\n\e[31m  |\e[0m                          Found:\
    \    (n : Long)\n\e[31m  |\e[0m                          Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoubw9x9b.scala:10:26 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) \e\
    [33mif\e[0m (i % \e[31m10\e[0m != \e[31m1\e[0m && i % \e[31m10\e[0m != \e[31m9\e\
    [0m) count += ones.length\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (n : Long)\n\e[31m   |\e\
    [0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer[Long]()\n        val\
    \ zeros = mutable.ListBuffer[Long]()\n        val counts = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(2).map(_.reverse.toInt)\n   \
    \     val digit = digits.head\n        val digitCount = digits.count(_ == digit)\n\
    \        val oneCount = digits.count(_ == 1)\n        val zeroCount = digits.count(_\
    \ == 0)\n        val oneDigitCount = digits.count(_ == digit)\n        val zeroDigitCount\
    \ = digits.count(_ == 0)\n        val oneDigit = digits.head\n        val zeroDigit\
    \ = digits.last\n        val oneDigitCount = digits.count(_ == oneDigit)\n   \
    \     val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigit = digits.head\n        val zeroDigit = digits.last\n\
    \        val oneDigitCount = digits.count(_ == oneDigit)\n        val zeroDigitCount\
    \ = digits.count(_ == zeroDigit)\n        val oneDigitCount = digits.count(_ ==\
    \ oneDigit)\n        val zeroDigitCount = digits.count(_ == zeroDigit)\n     \
    \   val oneDigit = digits.head\n        val zeroDigit = digits.last\n        val\
    \ oneDigitCount = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_\
    \ == zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n   \
    \     val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.count(_ == oneDigit)\n      \
    \  val zeroDigitCount = digits.count(_ == zeroDigit)\n        val oneDigitCount\
    \ = digits.count(_ == oneDigit)\n        val zeroDigitCount = digits.count(_ ==\
    \ zeroDigit)\n        val oneDigitCount = digits.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk4ttza3e.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpk4ttza3e.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36moneDigitCount\e[0m = digits.count(_ == oneDigit)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneDigitCount is already defined as \e[33mvalue\e[0m \e[35moneDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4ttza3e.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mzeroDigitCount\e[0m = digits.count(_\
    \ == zeroDigit)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzeroDigitCount is already defined as \e[33mvalue\e[0m \e[35mzeroDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4ttza3e.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36moneDigitCount\e[0m = digits.count(_\
    \ == oneDigit)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneDigitCount is already defined as \e[33mvalue\e[0m \e[35moneDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4ttza3e.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mzeroDigitCount\e[0m = digits.count(_\
    \ == zeroDigit)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzeroDigitCount is already defined as \e[33mvalue\e[0m \e[35mzeroDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined i"
  stdout: ''
  timestamp: 1659798797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer(1)\n        val zeros\
    \ = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n \
    \       val starts = mutable.ListBuffer[Long]()\n        val ends = mutable.ListBuffer[Long]()\n\
    \        val zeroIndex = mutable.ListBuffer[Long]()\n        val oneIndex = mutable.ListBuffer[Long]()\n\
    \        val zeroCount = mutable.ListBuffer[Long]()\n        val oneCount = mutable.ListBuffer[Long]()\n\
    \        while(n > 0) {\n            val digit = n % 10\n            if(digit\
    \ == 1) {\n                ones += digit\n                oneIndex += digit\n\
    \                oneCount += digit\n            } else if(digit == 0) {\n    \
    \            zeros += digit\n                zeroIndex += digit\n            \
    \    zeroCount += digit\n            } else {\n                counts += digit\n\
    \                starts += digit\n                ends += digit\n            }\n\
    \            n /= 10\n        }\n        val zeroCount = ones.size - zeros.size\n\
    \        val oneCount = ones.size - ones.tail.head\n        val zeroIndex = ones.size\
    \ - zeros.size - ones.tail.head\n        val oneIndex = ones.size - ones.tail.head\n\
    \        val zeros = zeros.tail\n        val ones = ones.tail\n        val zeroIndex\
    \ = zeroIndex.tail\n        val oneIndex = oneIndex.tail\n        val zeroCount\
    \ = zeroCount.tail\n        val oneCount = oneCount.tail\n        val starts =\
    \ starts.tail\n        val ends = ends.tail\n        val counts = counts.tail\n\
    \        val zeros = zeros.take(zeroCount.size)\n        val ones = ones.take(oneCount.size)\n\
    \        val zeroIndex = zeroIndex.take(zeroCount.size)\n        val oneIndex\
    \ = oneIndex.take(oneCount.size)\n        val zeroCount = zeroCount.take(zeroCount.size)\n\
    \        val oneCount = oneCount.take(oneCount.size)\n        val starts = starts.take(starts.size)\n\
    \        val ends = ends.take(ends.size)\n        val counts = counts.take(counts.size)\n\
    \        val zeros = zeros.toList\n        val ones = ones.toList\n        val\
    \ zeroIndex = zeroIndex.toList\n        val oneIndex = oneIndex.toList\n     \
    \   val zeroCount = zeroCount.toList\n        val oneCount = oneCount.toList\n\
    \        val starts = starts.toList\n        val ends = ends.toList\n        val\
    \ counts = counts.toList\n        \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpva2nqer9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mzeroCount\e[0m = ones.size\
    \ - zeros.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzeroCount is already defined as \e[33mvalue\e[0m \e[35mzeroCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpva2nqer9.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36moneCount\e[0m = ones.size - ones.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moneCount is already defined as \e[33mvalue\e[0m \e[35moneCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpva2nqer9.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mzeroIndex\e[0m = ones.size - zeros.size\
    \ - ones.tail.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzeroIndex is already defined as \e[33mvalue\e[0m \e[35mzeroIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpva2nqer9.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36moneIndex\e[0m = ones.size - ones.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moneIndex is already defined as \e[33mvalue\e[0m \e[35moneIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpva2nqer9.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mzeros\e[0m = zeros.tail\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mzeros i"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val digits = n.toString.reverse.grouped(10).toList\n        for (i <- 0 until\
    \ digits.size) {\n            val digit = digits(i)\n            if (digit ==\
    \ 1)\n                ones += digits(i)\n            else if (digit == 0)\n  \
    \              zeros += digits(i)\n            else {\n                val count\
    \ = counts.getOrElse(digits(i), 0) + 1\n                counts += digit -> (count\
    \ + 1)\n            }\n        }\n        val oneCount = ones.toList.size\n  \
    \      val zeroCount = zeros.toList.size\n        val count = oneCount + zeroCount\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgakkzeus.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgakkzeus.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mzeros\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgakkzeus.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpgakkzeus.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (digit == \e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values\
    \ of types String and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgakkzeus.scala:15:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (digit == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m         Values of types String and Int cannot be compared with == or !=\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        val limit = math.pow(10, math.ceil(math.log10(n)))\n        val starts\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ends = mutable.ArrayBuffer.empty[Long]\n\
    \        val current = 1\n        while(current <= limit) {\n            val remainder\
    \ = n % current\n            n /= current\n            val newCount = if (remainder\
    \ == 0) 1 else 0\n            counts += newCount\n            if (newCount ==\
    \ 1 && current == 1) {\n                starts += current\n            } else\
    \ if (newCount == 1 && current == 0) {\n                ends += current\n    \
    \        }\n            current += 1\n        }\n        val result = counts.sum\n\
    \        val startsOne = starts.sum\n        val endsOne = ends.sum\n        val\
    \ startsOneEnd = startsOne + endsOne\n        val endsOneEnd = startsOne + endsOne\
    \ + ones.size\n        val startsZero = starts.size - ends.size - ones.size\n\
    \        val endsZero = startsZero + ends.size - ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ones.size\n        val endsZeroEnd = startsZeroEnd\
    \ + ends.size - ones.size\n        val startsOneEnd = startsOne + endsOne + ones.size\n\
    \        val endsOneEnd = startsOne + endsOne + ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ends.size - ones.size\n        val endsZeroEnd =\
    \ startsZeroEnd + ends.size - ends.size - ones.size\n        val startsOneEnd\
    \ = startsOne + endsOne + ones.size\n        val endsOneEnd = startsOne + endsOne\
    \ + ones.size\n        val startsZeroEnd = startsZero + ends.size - ends.size\
    \ - ones.size\n        val endsZeroEnd = startsZeroEnd + ends.size - ends.size\
    \ - ones.size\n        val startsOneEnd = startsOne + endsOne + ones.size\n  \
    \      val endsOneEnd = startsOne + endsOne + ones.size\n        val startsZeroEnd\
    \ = startsZero + ends.size - ends.size - ones.size\n        val endsZeroEnd =\
    \ startsZeroEnd + ends.size - ends.size - ones.size\n        val startsOneEnd\
    \ = startsOne + endsOne + ones.size\n        val endsOne\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjhuqbdbp.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjhuqbdbp.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstartsOneEnd\e[0m = startsOne + endsOne + ones.size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mstartsOneEnd is already defined as \e[33mvalue\e[0m \e[35mstartsOneEnd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjhuqbdbp.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mendsOneEnd\e[0m = startsOne + endsOne + ones.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mendsOneEnd is already defined as \e[33mvalue\e[0m \e[35mendsOneEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhuqbdbp.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mstartsZeroEnd\e[0m = startsZero + ends.size\
    \ - ends.size - ones.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstartsZeroEnd is already defined as \e[33mvalue\e[0m \e[35mstartsZeroEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjhuqbdbp.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mendsZeroEnd\e[0m = startsZeroEnd + ends.size\
    \ - ends.size - ones.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mendsZeroEnd is already defined as \e[33mvalue\e[0m \e[35mendsZeroEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659798797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        var last = 0\n        var lastOne\
    \ = 0\n        var lastTwo = 0\n        var lastThree = 0\n        var lastFour\
    \ = 0\n        var lastFive = 0\n        var lastSix = 0\n        var lastSeven\
    \ = 0\n        var lastEight = 0\n        var lastNine = 0\n        var lastTen\
    \ = 0\n        var lastEleven = 0\n        var lastTwelve = 0\n        var lastThirteen\
    \ = 0\n        var lastFourteen = 0\n        var lastFifteen = 0\n        var\
    \ lastSixteen = 0\n        var lastSeventeen = 0\n        var lastEighteen = 0\n\
    \        var lastNineteen = 0\n        var lastTwenty = 0\n        var lastTwentyOne\
    \ = 0\n        var lastTwentyTwo = 0\n        var lastTwentyThree = 0\n      \
    \  var lastTwentyFour = 0\n        var lastTwentyFive = 0\n        var lastTwentySix\
    \ = 0\n        var lastTwentySeven = 0\n        var lastTwentyEight = 0\n    \
    \    var lastTwentyNine = 0\n        var lastThirty = 0\n        var lastThirtyOne\
    \ = 0\n        var lastThirtyTwo = 0\n        var lastThirtyThree = 0\n      \
    \  var lastThirtyFour = 0\n        var lastThirtyFive = 0\n        var lastThirtySix\
    \ = 0\n        var lastThirtySeven = 0\n        var lastThirtyEight = 0\n    \
    \    var lastThirtyNine = 0\n        var lastFourty = 0\n        var lastFourtyOne\
    \ = 0\n        var lastFourtyTwo = 0\n        var lastFourtyThree = 0\n      \
    \  var lastFourtyFour = 0\n        var lastFourtyFive = 0\n        var lastFourtySix\
    \ = 0\n        var lastFourtySeven = 0\n        var lastFourtyEight = 0\n    \
    \    var lastFourtyNine = 0\n        var lastFifty = 0\n        var lastFiftyOne\
    \ = 0\n        var lastFiftyTwo = 0\n        var lastFiftyThree = 0\n        var\
    \ lastFiftyFour = 0\n        var lastFiftyFive = 0\n        var lastFiftySix =\
    \ 0\n        var lastFiftySeven = 0\n        var lastFiftyEight = 0\n        var\
    \ lastFiftyNine = 0\n        var lastSixty = 0\n        var lastSixtyOne = 0\n\
    \        var lastSixtyTwo = 0\n        var lastSixtyThree = 0\n        var lastSixtyFour\
    \ = 0\n        var lastSixtyFive = 0\n        var lastSixtySix = 0\n        var\
    \ lastSixtySeven = 0\n        var lastSixtyEight = 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptku37em0.scala:77:5\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    val onesCount = mutable.Map[Long, Long]()\n        val zerosCount = mutable.Map[Long,\
    \ Long]()\n        val onesCounts = mutable.Map[Long, Long]()\n        val zerosCounts\
    \ = mutable.Map[Long, Long]()\n        val onesCountZeros = mutable.Map[Long,\
    \ Long]()\n        val zerosCountZeros = mutable.Map[Long, Long]()\n        for\
    \ (i <- 1 to n) {\n            if (i % 10 == 1) {\n                ones += i\n\
    \                onesCount += 1\n                onesCounts += i -> onesCount.getOrElse(i,\
    \ 0)\n            }\n            if (i % 10 == 0) {\n                zeros +=\
    \ i\n                zerosCount += 1\n                zerosCounts += i -> zerosCount.getOrElse(i,\
    \ 0)\n            }\n        }\n        for (i <- 1 to n) {\n            if (onesCount.getOrElse(i,\
    \ 0) == 1) {\n                onesCountZeros += i -> onesCount.getOrElse(i, 0)\n\
    \            }\n            if (zerosCount.getOrElse(i, 0) == 1) {\n         \
    \       zerosCountZeros += i -> zerosCount.getOrElse(i, 0)\n            }\n  \
    \      }\n        val onesCountZeros = onesCountZeros.toSeq\n        val zerosCountZeros\
    \ = zerosCountZeros.toSeq\n        val onesCounts = onesCounts.toSeq\n       \
    \ val zerosCounts = zerosCounts.toSeq\n        val onesCountZeros = onesCountZeros.toSeq\n\
    \        val zerosCountZeros = zerosCountZeros.toSeq\n        val onesCountZeros\
    \ = onesCountZeros.toSeq\n        val zerosCountZeros = zerosCountZeros.toSeq\n\
    \        val onesCounts = onesCounts.toSeq\n        val zerosCounts = zerosCounts.toSeq\n\
    \        val onesCountZeros = onesCountZeros.toSeq\n        val zerosCountZeros\
    \ = zerosCountZeros.toSeq\n        val onesCounts = onesCounts.toSeq\n       \
    \ val zerosCounts = zerosCounts.toSeq\n        val onesCountZeros = onesCountZeros.toSeq\n\
    \        val zerosCountZeros = zerosCountZeros.toSeq\n        val onesCounts =\
    \ onesCounts.toSeq\n        val zerosCounts = zerosCounts.toSeq\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoiejiii1.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36monesCountZeros\e[0m = onesCountZeros.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0monesCountZeros is already defined as \e[33mvalue\e[0m \e[35monesCountZeros\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoiejiii1.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mzerosCountZeros\e[0m = zerosCountZeros.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mzerosCountZeros is already defined as \e[33mvalue\e[0m \e[35mzerosCountZeros\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoiejiii1.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36monesCounts\e[0m = onesCounts.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0monesCounts is already defined as \e[33mvalue\e[0m \e[35monesCounts\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoiejiii1.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mzerosCounts\e[0m = zerosCounts.toSeq\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mzerosCounts is already defined as \e[33mvalue\e[0m \e[35mzerosCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoiejiii1.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36monesCountZeros\e[0m = onesCountZeros.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        val ones = scala.collection.mutable.ArrayBuffer(1)\n\
    \        val zeros = scala.collection.mutable.ArrayBuffer(0)\n        val onesCount\
    \ = ones.takeWhile(x => x <= n).length\n        val zerosCount = zeros.takeWhile(x\
    \ => x <= n).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesZeros = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 0).length\n        val onesOnes = ones.takeWhile(x => x <= n).takeWhile(x\
    \ => x == 1).length\n        val zerosOnes = zeros.takeWhile(x => x <= n).takeWhile(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_shdy43u.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_shdy43u.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36monesZeros\e[0m = ones.takeWhile(\e[36mx\e[0m => x <= n).takeWhile(\e[36mx\e\
    [0m => x == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0monesZeros is already defined as \e[33mvalue\e[0m \e[35monesZeros\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_shdy43u.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36monesOnes\e[0m = ones.takeWhile(\e[36mx\e\
    [0m => x <= n).takeWhile(\e[36mx\e[0m => x == \e[31m1\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0monesOnes is already defined as \e[33mvalue\e[0m \e[35monesOnes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_shdy43u.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mzerosOnes\e[0m = zeros.takeWhile(\e\
    [36mx\e[0m => x <= n).takeWhile(\e[36mx\e[0m => x == \e[31m1\e[0m).length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzerosOnes is already defined as \e[33mvalue\e[0m \e[35mzerosOnes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_shdy43u.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36monesZeros\e[0m = ones.takeWhile(\e[36mx\e\
    [0m => x <= n).takeWhile(\e[36mx\e[0m => x == \e[31m0\e[0m).length\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer(1)\n        val zeros\
    \ = mutable.ListBuffer(0)\n        val counts = mutable.ListBuffer[Long]()\n \
    \       val onesCount = mutable.ListBuffer[Long]()\n        val zerosCount = mutable.ListBuffer[Long]()\n\
    \        val onesCounts = mutable.ListBuffer[Long]()\n        val zerosCounts\
    \ = mutable.ListBuffer[Long]()\n        val onesCountss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountss = mutable.ListBuffer[Long]()\n        val onesCountsss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountsss = mutable.ListBuffer[Long]()\n\
    \        val onesCountssss = mutable.ListBuffer[Long]()\n        val zerosCountssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountsssss = mutable.ListBuffer[Long]()\n        val onesCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long]()\n        val zerosCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountssssss = mutable.ListBuffer[Long]()\n        val onesCountsssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long]()\n        val zerosCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssssss = mutable.ListBuffer[Long]()\n\
    \        val zerosCountssssss = mutable.ListBuffer[Long]()\n        val onesCountsssssss\
    \ = mutable.ListBuffer[Long]()\n        val zerosCountssssss = mutable.ListBuffer[Long]()\n\
    \        val onesCountsssssss = mutable.ListBuffer[Long]()\n        val zerosCountssssss\
    \ = mutable.ListBuffer[Long]()\n        val onesCountsssssss = mutable.ListBuffer[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpusrpq64p.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpusrpq64p.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mzerosCountssssss\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mzerosCountssssss is already defined as \e[33mvalue\e[0m \e[35mzerosCountssssss\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpusrpq64p.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36monesCountsssssss\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0monesCountsssssss is already defined as \e[33mvalue\e[0m \e\
    [35monesCountsssssss\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpusrpq64p.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mzerosCountssssss\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzerosCountssssss is already defined as \e[33mvalue\e[0m \e\
    [35mzerosCountssssss\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpusrpq64p.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36monesCountsssssss\e[0m =\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0monesCountsssssss is already defined as \e[33mvalue\e[0m \e\
    [35monesCountsssssss\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.Set[Long]()\n        val zeros\
    \ = mutable.Set[Long]()\n        val counts = mutable.Map[Long, Long]()\n    \
    \    for(i <- 1 to n){\n            val digit = i / 10\n            val remainder\
    \ = i % 10\n            if(remainder == 1){\n                ones += digit\n \
    \           }\n            else if(remainder == 0){\n                zeros +=\
    \ digit\n            }\n            else{\n                counts += digit ->\
    \ (counts(digit) + 1)\n            }\n        }\n        ones.size + zeros.size\
    \ + counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1xbbosn.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk1xbbosn.scala:8:20 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mzeros\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk1xbbosn.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpk1xbbosn.scala:10:22 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m to n){\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (n : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:8:24 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36monesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36monesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36monesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36monesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ListBuffer[Long]()\n        val\
    \ onesCount = mutable.ListBuffer[Long]()\n        val onesCount2 = mutable.ListBuffer[Long]()\n\
    \        val onesCount3 = mutable.ListBuffer[Long]()\n        val onesCount4 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount5 = mutable.ListBuffer[Long]()\n\
    \        val onesCount6 = mutable.ListBuffer[Long]()\n        val onesCount7 =\
    \ mutable.ListBuffer[Long]()\n        val onesCount8 = mutable.ListBuffer[Long]()\n\
    \        val onesCount9 = mutable.ListBuffer[Long]()\n        val onesCount10\
    \ = mutable.ListBuffer[Long]()\n        val onesCount11 = mutable.ListBuffer[Long]()\n\
    \        val onesCount12 = mutable.ListBuffer[Long]()\n        val onesCount13\
    \ = mutable.ListBuffer[Long]()\n        val onesCount14 = mutable.ListBuffer[Long]()\n\
    \        val onesCount15 = mutable.ListBuffer[Long]()\n        val onesCount16\
    \ = mutable.ListBuffer[Long]()\n        val onesCount17 = mutable.ListBuffer[Long]()\n\
    \        val onesCount18 = mutable.ListBuffer[Long]()\n        val onesCount19\
    \ = mutable.ListBuffer[Long]()\n        val onesCount20 = mutable.ListBuffer[Long]()\n\
    \        val onesCount21 = mutable.ListBuffer[Long]()\n        val onesCount22\
    \ = mutable.ListBuffer[Long]()\n        val onesCount23 = mutable.ListBuffer[Long]()\n\
    \        val onesCount24 = mutable.ListBuffer[Long]()\n        val onesCount25\
    \ = mutable.ListBuffer[Long]()\n        val onesCount26 = mutable.ListBuffer[Long]()\n\
    \        val onesCount27 = mutable.ListBuffer[Long]()\n        val onesCount28\
    \ = mutable.ListBuffer[Long]()\n        val onesCount29 = mutable.ListBuffer[Long]()\n\
    \        val onesCount30 = mutable.ListBuffer[Long]()\n        val onesCount31\
    \ = mutable.ListBuffer[Long]()\n        val onesCount32 = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:8:24 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36monesCount\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:9:25 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36monesCount2\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36monesCount3\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:11:25 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36monesCount4\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_85r8lvj.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1659798551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer(0)\n    \
    \    val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val countsCount = counts.takeWhile(x\
    \ => x < n).length\n        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val countsOnes = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val countsZeros = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).length\n        val onesZeroZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 0).takeWhile(x => x == 0).length\n        val zerosOneZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 0).length\n        val\
    \ countsOneZeros = counts.takeWhile(x => x < n).takeWhile(x => x == 1).takeWhile(x\
    \ => x == 0).length\n        val onesOneZeros = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile(x => x == 0).length\n        val zerosOneOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 1).length\n        val\
    \ countsOneOnes = counts.takeWhile(x => x < n).takeWhile(x => x == 1).takeWhile(x\
    \ => x == 1).length\n        val onesOneOnes = ones.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile(x => x == 1).length\n        val zerosOneZeroZeros = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x == 1).takeWhile(x => x == 0).takeWhile(x => x ==\
    \ 0).length\n        val countsOneZeroZeros = counts.takeWhile(x => x < n).takeWhile(x\
    \ => x == 1).takeWhile\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6lw_4ls2.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.ArrayBuffer(\e\
    [31m1\e[0m)\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6lw_4ls2.scala:8:20 -------------------------\e[0m\e\
    [0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mzeros\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6lw_4ls2.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6lw_4ls2.scala:28:5 ---------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val counts = mutable.HashMap[Long, Long]()\n     \
    \   val ones = mutable.ArrayBuffer(1)\n        val zeros = mutable.ArrayBuffer(0)\n\
    \        val onesCount = ones.takeWhile(x => x < n).length\n        val zerosCount\
    \ = zeros.takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val zerosOnes = zeros.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n        val onesOnes\
    \ = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesZeros = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val zerosOnes = zeros.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).length\n\
    \        val onesOnes = ones.takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).length\n        val zerosZeros = zeros.takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n).length\n        val onesZeros = ones.takeWhile(x\
    \ => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x => x < n).takeWhile(x\
    \ => x < n).takeWhile(x => x < n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdo53j0jg.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdo53j0jg.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36monesZeros\e[0m = ones.takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e\
    [0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e\
    [36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0monesZeros is already defined as \e[33mvalue\e[0m \e[35monesZeros\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdo53j0jg.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mzerosOnes\e[0m = zeros.takeWhile(\e\
    [36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m =>\
    \ x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e\
    [36mx\e[0m => x < n).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mzerosOnes is already defined as \e[33mvalue\e[0m \e[35mzerosOnes\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdo53j0jg.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36monesOnes\e[0m = ones.takeWhile(\e[36mx\e\
    [0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e\
    [36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m => x < n).takeWhile(\e[36mx\e[0m =>\
    \ x < n).takeWhile(\e[36mx\e[0m => x < n).le"
  stdout: ''
  timestamp: 1659798795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val ones = mutable.ArrayBuffer(1)\n        val zeros\
    \ = mutable.ArrayBuffer(0)\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < n) {\n            if (ones.contains(i))\
    \ {\n                counts += i\n            }\n            i += 1\n        }\n\
    \        while (i < n) {\n            if (zeros.contains(i)) {\n             \
    \   counts += i\n            }\n            i += 1\n        }\n        counts.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1y126s_o.scala:7:19 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mones\e[0m = mutable.ArrayBuffer(\e\
    [31m1\e[0m)\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1y126s_o.scala:8:20 -------------------------\e[0m\e\
    [0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mzeros\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1y126s_o.scala:9:21 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0\n        var last = 1\n        while(n\
    \ > 1) {\n            val temp = n % 10\n            if(temp == 1) {\n       \
    \         count += 1\n            }\n            n /= 10\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9prqgfrx.scala:14:14 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798796
