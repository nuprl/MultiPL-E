name: HumanEval_125_split_words
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n    // should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    //\
  \ Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\"\
  , \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"\
  Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt\
  \ : String) : Either[List[String], Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
  \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
  Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
  Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n \
  \   assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
  )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
  \")).equals(0l));\n    }\n\n}\n"
completions: ["        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else Left(words)", "        val words = txt.split(\"\\\\s+\")\n     \
    \   if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n\
    \        else Right(words.map(_.toLowerCase).map(_.length).filter(x => x % 2 ==\
    \ 1).sum)", "        val words = txt.split(\"\\\\s+\")\n        val commaWords\
    \ = words.filter(_.contains(\",\"))\n        val noCommaWords = words.filter(!_.contains(\"\
    ,\"))\n        val noWhitespaceWords = words.filter(!_.contains(\"\\\\s\"))\n\
    \        val noLetterWords = words.filter(!_.contains(\"[a-z]\"))\n        val\
    \ noLetterWordsOddOrder = words.filter(!_.contains(\"[a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 != 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.toString.toLowerCase).map(_.toInt).map(_.toInt).sum\
    \ % 2 == 0))\n        val noLetterWordsEvenOrder = words.filter(!_.contains(\"\
    [a-z]\") || (_.toString.toCharArray.map(_.", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else if (words.length\
    \ == 1) Right(words.length)\n        else {\n            val evens = words.filter(_.toLowerCase\
    \ == \"even\")\n            val odds = words.filter(_.toLowerCase == \"odd\")\n\
    \            val evensCount = evens.count(_ % 2 == 0)\n            val oddsCount\
    \ = odds.count(_ % 2 == 0)\n            val evensOddsCount = evensCount + oddsCount\n\
    \            val evensOddsCountInt = evensOddsCount.toInt\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCountInt = evensOddsCountInt + 1\n            val evensOddsCountInt\
    \ = evensOddsCountInt + 1\n            val evensOddsCountInt = evensOddsCountInt\
    \ + 1\n            val evensOddsCountInt = evensOddsCountInt + 1\n           \
    \ val evensOddsCount", "        val words = txt.split(\"\\\\s+\")\n        val\
    \ numOfWords = words.length\n        val numOfLetters = txt.length.toString.toInt\n\
    \        val numOfLettersOddOrder = numOfLetters.toString.toInt.filter(_ % 2 !=\
    \ 0).length\n        val numOfLettersEvenOrder = numOfLetters.toString.toInt.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderOdd = numOfLettersEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numOfLettersEvenOrderEven = numOfLettersEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numOfLettersOddOrderOdd = numOfLettersOddOrder.filter(_\
    \ % 2 != 0).length\n        val numOfLettersOddOrderEven = numOfLettersOddOrder.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 != 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOfLettersEvenOrderEvenOdd = numOfLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numOf", "        val words = txt.split(\" \").filter(_.nonEmpty)\n\
    \        val commaWords = txt.split(\",\").filter(_.nonEmpty)\n        val letters\
    \ = txt.filter(_.isLetter).length\n        val oddLetters = letters.filter(_ %\
    \ 2 != 0).length\n        val result = if (words.length == commaWords.length)\
    \ Right(words.length) else Left(commaWords.length)\n        result", "       \
    \ val words = txt.split(\"\\\\s+\").map(_.toLowerCase)\n        val commaWords\
    \ = words.filter(_.contains(\",\"))\n        val noCommaWords = words.filter(!_.contains(\"\
    ,\"))\n        val evenWords = words.filter(word => word.forall(_.isDigit) &&\
    \ word.forall(_.isLower))\n        val oddWords = words.filter(word => word.forall(_.isDigit)\
    \ && word.forall(_.isLower) && word.forall(!_.isDigit))\n        val evenLetters\
    \ = evenWords.filter(word => word.forall(_.isLetter))\n        val oddLetters\
    \ = oddWords.filter(word => word.forall(_.isLetter))\n        val evenLettersCount\
    \ = evenLetters.map(word => word.length).sum\n        val oddLettersCount = oddLetters.map(word\
    \ => word.length).sum\n        val evenLettersCountInWords = evenLetters.map(word\
    \ => word.length).foldLeft(0)(_ + _)\n        val oddLettersCountInWords = oddLetters.map(word\
    \ => word.length).foldLeft(0)(_ + _)\n        val evenLettersCountInWordsSum =\
    \ evenLettersCountInWords.foldLeft(0)(_ + _)\n        val oddLettersCountInWordsSum\
    \ = oddLettersCountInWords.foldLeft(0)(_ + _)\n        val evenLettersCountInWordsSumInWords\
    \ = evenLettersCountInWordsSum.foldLeft(0)(_ + _)\n        val oddLettersCountInWordsSumInWords\
    \ = oddLettersCountInWordsSum.foldLeft(0)(_ + _)\n        val evenLettersCountInWordsSumInWordsSum\
    \ = evenLettersCountInWordsSumInWords.foldLeft(0)(_ + _)\n        val oddLettersCountInWordsSumInWordsSum\
    \ = oddLettersCountInWordsSumInWords.foldLeft(0)(_ + _)\n        val evenLettersCountInWordsSumInWordsSumInWords\
    \ = evenLettersCountInWordsSumInWordsSum.foldLeft(0)(_ + _)\n        val oddLettersCountInWordsSumInWordsSumInWords\
    \ = oddLettersCountInWordsSumInWordsSum.foldLeft(0)(_ + _)\n        val evenLettersCountInWordsSumInWords",
  "        val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val evenWords = words.filter(word => word.forall(c => c.isLetter) &&\
    \ c.toLower == \"a\")\n            val oddWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower == \"b\")\n            val evenLetters = evenWords.map(word\
    \ => word.map(c => c.toLower).filter(c => c.toLower == \"a\").length)\n      \
    \      val oddLetters = oddWords.map(word => word.map(c => c.toLower).filter(c\
    \ => c.toLower == \"b\").length)\n            val evenLettersCount = evenLetters.reduce((a,\
    \ b) => a + b)\n            val oddLettersCount = oddLetters.reduce((a, b) =>\
    \ a + b)\n            val evenLettersCountInt = evenLettersCount.toInt\n     \
    \       val oddLettersCountInt = oddLettersCount.toInt\n            if (evenLettersCountInt\
    \ == oddLettersCountInt) Right(evenLettersCountInt)\n            else Left(oddLettersCountInt)\n\
    \        }", "        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else Left(words)", "        val words = txt.split(\" \")\n        if\
    \ (words.length == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val wordList = words.toList\n            val wordListWithSpace\
    \ = wordList.map(word => if (word.contains(\" \")) {\n                val wordWithSpace\
    \ = word.split(\" \")\n                wordWithSpace(0)\n            } else {\n\
    \                word\n            })\n            val wordListWithComma = wordList.map(word\
    \ => if (word.contains(\",\")) {\n                val wordWithComma = word.split(\"\
    ,\")\n                wordWithComma(0)\n            } else {\n               \
    \ word\n            })\n            val wordListWithLetters = wordList.map(word\
    \ => if (word.contains(\" \") || word.contains(\",\")) {\n                val\
    \ wordWithLetters = word.split(\"\")\n                wordWithLetters.count(_\
    \ % 2 == 1)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOdd = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOdd = word.split(\"\
    \")\n                wordWithLettersOdd.count(_ % 2 == 1)\n            } else\
    \ {\n                word\n            })\n            val wordListWithLettersEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersEven = word.split(\"\")\n                wordWithLettersEven.count(_\
    \ % 2 == 0)\n            } else {\n                word\n            })\n    \
    \        val wordListWithLettersOddAndEven = wordList.map(word => if (word.contains(\"\
    \ \") || word.contains(\",\")) {\n                val wordWithLettersOddAndEven\
    \ = word.split(\"\")\n                wordWithLettersOddAndEven.count(_ % 2 ==\
    \ 0) && wordWithLettersOddAndEven.count(_ % 2 == 1)\n            } else {\n  \
    \              word\n            })\n            val wordListWithLettersOddAndEvenAndOdd\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",\")) {\n\
    \                val wordWithLettersOddAndEvenAndOdd = word.split(\"\")\n    \
    \            wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 0) && wordWithLettersOddAndEvenAndOdd.count(_\
    \ % 2 == 1) && wordWithLettersOddAndEvenAndOdd.count(_ % 2 == 2)\n           \
    \ } else {\n                word\n            })\n            val wordListWithLettersOddAndEvenAndOddAndEven\
    \ = wordList.map(word => if (word.contains(\" \") || word.contains(\",", "   \
    \     val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Right(words.size)\n\
    \        else if (words.length == 1) Right(words.size)\n        else {\n     \
    \       val evenWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isLower))\n\
    \            val oddWords = words.filter(word => word.forall(_.isLetter) && word.forall(_.isUpper))\n\
    \            val evenWordsCount = evenWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val oddWordsCount = oddWords.filter(word => word.forall(_.isLetter)).size\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountIn", "        val words = txt.split(\"\\\\s+\"\
    )\n        if (words.length == 0) Right(words.size)\n        else if (words.length\
    \ == 1) Right(words.size)\n        else if (words.length == 2) Right(words.size)\n\
    \        else if (words.length == 3) Right(words.size)\n        else if (words.length\
    \ == 4) Right(words.size)\n        else if (words.length == 5) Right(words.size)\n\
    \        else if (words.length == 6) Right(words.size)\n        else if (words.length\
    \ == 7) Right(words.size)\n        else if (words.length == 8) Right(words.size)\n\
    \        else if (words.length == 9) Right(words.size)\n        else if (words.length\
    \ == 10) Right(words.size)\n        else if (words.length == 11) Right(words.size)\n\
    \        else if (words.length == 12) Right(words.size)\n        else if (words.length\
    \ == 13) Right(words.size)\n        else if (words.length == 14) Right(words.size)\n\
    \        else if (words.length == 15) Right(words.size)\n        else if (words.length\
    \ == 16) Right(words.size)\n        else if (words.length == 17) Right(words.size)\n\
    \        else if (words.length == 18) Right(words.size)\n        else if (words.length\
    \ == 19) Right(words.size)\n        else if (words.length == 20) Right(words.size)\n\
    \        else if (words.length == 21) Right(words.size)\n        else if (words.length\
    \ == 22) Right(words.size)\n        else if (words.length == 23) Right(words.size)\n\
    \        else if (words.length == 24) Right(words.size)\n        else if (words.length\
    \ == 25) Right(words.size)\n        else if (words.length == 26) Right(words.size)\n\
    \        else if (words.length == 27) Right(words.size)\n        else if (words.length\
    \ == 28) Right(words.size)\n        else if (words.length == 29) Right(words.size)\n\
    \        else if (words.length == 30) Right(words.size)\n        else if (words.length\
    \ == 31) Right(words.size)\n        else if (words.length == 32) Right(words.size)\n\
    \        else if (words.length == 33) Right(words.size)\n        else if (words.length\
    \ == 34) Right(words.size)\n        else if (words.length == 35) Right(words.size)\n\
    \        else if (words.length == 36) Right(words.size)\n        else if (words.length\
    \ == 37) Right(words.size)\n        else if (words.length == 38) Right(words.size)\n\
    \        else if (words.length == 39) Right(words.size)\n        else if (words.length\
    \ == 40) Right(words.size)\n        else if (words.length == 41) Right(words.size)\n\
    \        else if (words.length == 42) Right(words.size)\n        else if (words.length\
    \ == 43) Right(words.size)\n        else if (words.length == 44) Right(words.size)\n\
    \        else if (words.length == 45) Right(words.size)\n        else if (words.length\
    \ == 46) Right(words.size)\n        else if (words.length == 47) ", "        val\
    \ words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(List[String]())\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(w => w.length == w.toLowerCase * 2).map(w =>\
    \ w.toLowerCase * 2)\n            val odd = words.filter(w => w.length == w.toLowerCase\
    \ * 2 + 1).map(w => w.toLowerCase * 2 + 1)\n            val evenCount = even.count(_\
    \ % 2 == 0)\n            val oddCount = odd.count(_ % 2 == 1)\n            val\
    \ count = evenCount + oddCount\n            Right(count)\n        }", "      \
    \  val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.length % 2 == 0)\n            val\
    \ odd = words.filter(word => word.length % 2 != 0)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum\n\
    \            val evenOrder = evenLetters / (evenLetters + oddLetters)\n      \
    \      val oddOrder = oddLetters / (evenLetters + oddLetters)\n            val\
    \ evenOrderInt = evenOrder.toInt\n            val oddOrderInt = oddOrder.toInt\n\
    \            if (evenOrderInt % 2 == 0) Right(evenOrder)\n            else if\
    \ (oddOrderInt % 2 == 0) Left(odd)\n            else Left(even)\n        }", " \
    \       val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n\
    \        else if (words.length == 1) Right(words.length)\n        else {\n   \
    \         val even = words.filter(word => word.length % 2 == 0).map(word => word.substring(0,word.length/2))\n\
    \            val odd = words.filter(word => word.length % 2 == 1).map(word =>\
    \ word.substring(0,word.length/2))\n            val evenCount = even.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val oddCount = odd.map(word\
    \ => word.split(\"\\\\W+\").length).sum\n            val evenOrder = even.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val oddOrder =\
    \ odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val\
    \ evenLetters = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLetters = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersCount = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrder = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val oddLettersOrder = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n\
    \            val evenLettersOrderCount = even.map(word => word.split(\"\\\\W+\"\
    ).map(_.length).sum).sum\n            val oddLettersOrderCount = odd.map(word\
    \ => word.split(\"\\\\W+\").map(_.length).sum).sum\n            val evenLettersOrderCount\
    \ = even.map(word => word.split(\"\\\\W+\").map(_.length).sum).sum\n         \
    \   val oddLettersOrderCount = odd.map(word => ", "        val words = txt.split(\"\
    \\\\s+\")\n        val numWords = words.length\n        val numLetters = txt.length\n\
    \        val numLettersOdd = numLetters % 2\n        val numLettersEven = numLetters\
    \ - numLettersOdd\n        val numLettersEvenOdd = numLettersEven % 2\n      \
    \  val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n        val numLettersOddOdd\
    \ = numLettersOdd - numLettersEvenOdd\n        val numLettersOddEven = numLettersOdd\
    \ - numLettersEvenEven\n        val numLettersEvenEvenOdd = numLettersEvenEven\
    \ - numLettersOddOdd\n        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n\
    \        val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenEvenOdd\n\
    \        val numLettersEvenEvenEvenOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOdd = numLettersEvenOdd - numLettersOddEven\n  \
    \      val numLettersOddEvenOdd = numLettersOdd", "        val words = txt.split(\"\
    \\\\s+\")\n        if (words.isEmpty) Right(words.size)\n        else if (words.size\
    \ == 1) Right(words.head.length)\n        else Left(words)", "        val words\
    \ = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(Nil)\n        else\
    \ if (words.length == 1) Right(words.head.length)\n        else Left(words.tail.map(_.length).sum)",
  "        val words = txt.split(\" \").filter(_.nonEmpty)\n        val commaWords\
    \ = words.filter(_.contains(\",\"))\n        val commaWordsCount = commaWords.map(_.length).sum\n\
    \        val wordCount = words.map(_.length).sum\n        val lowerCaseWordsCount\
    \ = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").map(_.length).sum\n\
    \        val oddOrderWordsCount = words.filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase\
    \ == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase\
    \ == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase\
    \ == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\").filter(_.toLowerCase != \"a\" && _.toLowerCase != \"b\" && _.toLowerCase\
    \ != \"c\" && _.toLowerCase != \"d\" && _.toLowerCase != \"e\" && _.toLowerCase\
    \ != \"f\" && _.toLowerCase != \"g\" && _.toLowerCase != \"h\" && _.toLowerCase\
    \ != \"i\" && _.toLowerCase != \"j\" && ", "        val words = txt.split(\"\\\
    \\s+\")\n        val numWords = words.length\n        val numLetters = txt.length\n\
    \        val numLettersOdd = numLetters % 2\n        val numLettersEven = numLetters\
    \ - numLettersOdd\n        val numLettersEvenOdd = numLettersEven % 2\n      \
    \  val numLettersEvenEven = numLettersEven - numLettersEvenOdd\n        val numLettersOddEven\
    \ = numLettersOdd - numLettersEvenOdd\n        val numLettersOddOdd = numLettersOdd\
    \ - numLettersOddEven\n        val numLettersEvenEvenOdd = numLettersEvenEven\
    \ - numLettersEvenOdd\n        val numLettersEvenOddOdd = numLettersEvenOdd -\
    \ numLettersOddOdd\n        val numLettersOddEvenOdd = numLettersOddEven - numLettersEvenOdd\n\
    \        val numLettersOddOddEven = numLettersOddOdd - numLettersEvenOdd\n   \
    \     val numLettersEvenEvenOddOdd = numLettersEvenEvenOdd - numLettersOddOdd\n\
    \        val numLettersEvenOddOddEven = numLettersEvenOddOdd - numLettersEvenEvenOdd\n\
    \        val numLettersOddEvenOddOdd = numLettersOddEvenOdd - numLettersOddOddEven\n\
    \        val numLettersOddOddEvenOddEven = numLettersOddOddEvenOdd - numLettersEvenOddOdd\n\
    \        val numLettersEvenEvenOddOddOddEven = numLettersEvenEvenOddOddEven -\
    \ numLettersOddOddOddEven\n        val numLettersEvenOddOddOddEvenOdd = numLettersEvenOddOddEvenOdd\
    \ - numLettersEvenOddOddOddEven\n        val numLettersOddEvenOddOddEvenOddEven\
    \ = numLettersOddEvenOddOddEvenOddEven - numLettersEvenOddOddOddOddEvenOdd\n \
    \       val numLettersEvenEvenOddOddOddEvenOddOdd = numLettersEvenEvenOddOddO"]
stop_tokens:
- "\n    }\n"
