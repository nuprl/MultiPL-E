language: scala
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char](s.toCharArray)\n        val reversed =\
    \ mutable.Set[Char]()\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ {\n                val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if (chars.contains(upper)) {\n                    chars.remove(upper)\n\
    \                    chars.remove(lower)\n                    chars += upper\n\
    \                    chars += lower\n                }\n                else {\n\
    \                    chars += c\n                }\n            }\n          \
    \  else {\n                chars += c\n            }\n        }\n        chars.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3oq_30e.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m](s.toCharArray)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph3oq_30e.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = s.toCharArray\n \
    \       for(i <- 0 until chars.length)\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' -> chars(i)\
    \ match {\n                        case 'A' -> chars(i) match {\n            \
    \                case 'a' -> chars(i) match {\n                              \
    \  case 'A' -> chars(i) match {\n                                    case 'a'\
    \ -> chars(i) match {\n                                        case 'A' -> chars(i)\
    \ match {\n                                            case 'a' -> chars(i) match\
    \ {\n                                                case 'A' -> chars(i) match\
    \ {\n                                                    case 'a' -> chars(i)\
    \ match {\n                                                        case 'A' ->\
    \ chars(i) match {\n                                                         \
    \   case 'a' -> chars(i) match {\n                                           \
    \                     case 'A' -> chars(i) match {\n                         \
    \                                           case 'a' -> chars(i) match {\n   \
    \                                                                     case 'A'\
    \ -> chars(i) match {\n                                                      \
    \                      case \"a\" -> chars(i) match {\n                      \
    \                                                          case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                              case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \  case \"A\" -> chars(i) match {\n                                          \
    \                                                          case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                      case \"A\" -> chars(i) match {\n      \
    \                                                                            \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \              case \"a\" -> chars(i) match {\n                              \
    \                                                                            \
    \              case \"A\" -> chars(i) match {\n                              \
    \                                                                            \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                      case \"a\" -> chars(i) match {\n      \
    \                                                                            \
    \                                                      case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"a\" -> chars(i) match {\n                                                \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                                        case\
    \ \"a\" -> chars(\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxsb_39ac.scala:60:190 --------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m                                                    \
    \                                                                            \
    \                                            \e[33mcase\e[0m \e[31m\"a\"\e[0m\
    \ -> chars(\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                        pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsb_39ac.scala:62:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    '=>' expected, but 'def' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxsb_39ac.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'=>' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxsb_39ac.scala:61:4\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \    ^\e[0m\n\e[31m   |\e[0m    Found:    Unit\n\e[31m   |\e[0m    Required: (String,\
    \ Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxsb_39ac.scala:73:1\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: (String, Char)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                chars += s.charAt(i).swapCase\n            }\n   \
    \         else{\n                chars += s.charAt(i)\n            }\n       \
    \ }\n        chars.reverse\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmvz8z1f3.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794102
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toLower\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvjkka6gg.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ListBuffer[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase){\n      \
    \          result.append(c.toUpperCase)\n            }else if(c == c.toLowerCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpap7kb2gd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase){\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpap7kb2gd.scala:21:32 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m                result.append(c.toUpperCase)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpap7kb2gd.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c == c.toLowerCase){\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value toLowerCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpap7kb2gd.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result.append(c.toLowerCase)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'A' || c == 'a') result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfg75cgok.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c == \e[31m'A'\e[0m || c ==\
    \ \e[31m'a'\e[0m) result.append(c.toUpperCase)\n\e[31m\e[31m   |\e[0m        \
    \                                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value toUpperCase is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (chars.contains(s.charAt(i)))\n\
    \                chars.remove(s.charAt(i))\n            else\n               \
    \ chars.add(s.charAt(i))\n        for (i <- 0 until chars.size) {\n          \
    \  val c = chars.toList(i)\n            if (c.size == 1) {\n                result.append(c.head)\n\
    \            } else {\n                result.append(c.reverse)\n            }\n\
    \        }\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lbmasgj.scala:18:20 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf23janjd.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase) result.append(c.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf23janjd.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(c == c.toUpperCase) result.append(c.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_e0hk5ed.scala:26)\n\tat Problem.main(tmp_e0hk5ed.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val strList = s.toList\n        strList.foldLeft(\"\") { (str, c) =>\n\
    \            val isLetter = c.isLetter\n            if (isLetter) {\n        \
    \        val newChar = c.toUpperCase\n                str + newChar\n        \
    \    } else {\n                str + c\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnsm98s36.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mnewChar\e[0m = c.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }else if(s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n       \
    \     }else{\n                result.append(s.charAt(i))\n            }\n    \
    \    }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3x6626_.scala:30)\n\tat Problem.main(tmpg3x6626_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp41jv2w89.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val len = chars.length\n        val\
    \ reversed = new Array[Char](len)\n        for(i <- 0 until len) {\n         \
    \   val c = chars(i)\n            if(c == 'a' || c == 'A') {\n               \
    \ reversed(i) = c.toUpperCase\n            } else {\n                reversed(i)\
    \ = c.toLowerCase\n            }\n        }\n        new String(reversed)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdq5w3xx6.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                reversed(i) = c.toUpperCase\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdq5w3xx6.scala:25:32 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                reversed(i) = c.toLowerCase\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value toLowerCase is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfx8h59a.scala:32)\n\tat Problem.main(tmpbfx8h59a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793904
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpalf49ab2.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.append((s.charAt(i) - \e[31m'a'\e\
    [0m).toUpper + s.charAt(i).toLower)\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \              value toUpper is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659793903
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = s.toCharArray\n        val reversed = chars.reverse\n   \
    \     val result = reversed.foldLeft(\"\"){ (acc, c) => if (Character.isLetter(c))\
    \ acc + (c.toUpperCase) else acc + (c.toLowerCase) }\n        if (chars.isEmpty)\
    \ result\n        else result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqer19c79.scala:19:92 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e\
    [31m\"\"\e[0m){ (\e[36macc\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (Character.isLetter(c))\
    \ acc + (c.toUpperCase) \e[33melse\e[0m acc + (c.toLowerCase) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                       ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \             value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqer19c79.scala:19:119 -----------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = reversed.foldLeft(\e\
    [31m\"\"\e[0m){ (\e[36macc\e[0m, \e[36mc\e[0m) => \e[33mif\e[0m (Character.isLetter(c))\
    \ acc + (c.toUpperCase) \e[33melse\e[0m acc + (c.toLowerCase) }\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr687six0.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfehmcsp6.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = s.toUpperCase\n        val reversed = result.reverse\n \
    \       val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\")\n        if (noLetters.isEmpty)\
    \ result else noLetters\n    }\n    def main(args: Array[String]) = {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc1e5nnb6.scala:23)\n\tat Problem.main(tmpc1e5nnb6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
    \    // If the string contains no letters, reverse the string.\n    // The function\
    \ should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"\
    ))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>>\
    \ solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n\
    \        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"\
    A\")\n            }else if(c == 'A'){\n                result.append(\"a\")\n\
    \            }else if(c == 'b'){\n                result.append(\"B\")\n     \
    \       }else if(c == 'B'){\n                result.append(\"b\")\n          \
    \  }else if(c == 'c'){\n                result.append(\"C\")\n            }else\
    \ if(c == 'C'){\n                result.append(\"c\")\n            }else if(c\
    \ == 'd'){\n                result.append(\"D\")\n            }else if(c == 'D'){\n\
    \                result.append(\"d\")\n            }else if(c == 'e'){\n     \
    \           result.append(\"E\")\n            }else if(c == 'E'){\n          \
    \      result.append(\"e\")\n            }else if(c == 'f'){\n               \
    \ result.append(\"F\")\n            }else if(c == 'F'){\n                result.append(\"\
    f\")\n            }else if(c == 'g'){\n                result.append(\"G\")\n\
    \            }else if(c == 'G'){\n                result.append(\"g\")\n     \
    \       }else if(c == 'h'){\n                result.append(\"H\")\n          \
    \  }else if(c == 'H'){\n                result.append(\"h\")\n            }else\
    \ if(c == 'i'){\n                result.append(\"I\")\n            }else if(c\
    \ == 'I'){\n                result.append(\"i\")\n            }else if(c == 'j'){\n\
    \                result.append(\"J\")\n            }else if(c == 'J'){\n     \
    \           result.append(\"j\")\n            }else if(c == 'k'){\n          \
    \      result.append(\"K\")\n            }else if(c == 'K'){\n               \
    \ result.append(\"k\")\n            }else if(c == 'l'){\n                result.append(\"\
    L\")\n            }else if(c == 'L'){\n                result.append(\"l\")\n\
    \            }else if(c == 'm'){\n                result.append(\"M\")\n     \
    \       }else if(c == 'M'){\n                result.append(\"m\")\n          \
    \  }else if(c == 'n'){\n                result.append(\"N\")\n            }else\
    \ if(c == 'N'){\n                result.append(\"n\")\n            }else if(c\
    \ == 'o'){\n                result.append(\"O\")\n            }else if(c == 'O'){\n\
    \                result.append(\"o\")\n            }else if(c == 'p'){\n     \
    \           result.append(\"P\")\n            }else if(c == 'P'){\n          \
    \      result.append(\"p\")\n            }else if(c == 'q'){\n               \
    \ result.append(\"Q\")\n            }else if(c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjq59e8wa.scala:100:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m100 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjq59e8wa.scala:86:21 --------------------\e[0m\e\
    [0m\n\e[31m86 |\e[0m            }\e[33melse\e[0m \e[33mif\e[0m(c\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (c : Char)\n\e[31m   |\e[0m                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjq59e8wa.scala:99:1 ---------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpjq59e8wa.scala:88:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m88 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793929
