language: scala
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxIndex\
    \ = lst.map(_.toLong).max\n        val minIndex = lst.map(_.toLong).min\n    \
    \    val maxValue = lst.map(_.toLong).max\n        val minValue = lst.map(_.toLong).min\n\
    \        val maxIndex2 = lst.map(_.toLong).max\n        val minIndex2 = lst.map(_.toLong).min\n\
    \        val maxValue2 = lst.map(_.toLong).max\n        val minValue2 = lst.map(_.toLong).min\n\
    \        val maxIndex3 = lst.map(_.toLong).max\n        val minIndex3 = lst.map(_.toLong).min\n\
    \        val maxValue3 = lst.map(_.toLong).max\n        val minValue3 = lst.map(_.toLong).min\n\
    \        val maxIndex4 = lst.map(_.toLong).max\n        val minIndex4 = lst.map(_.toLong).min\n\
    \        val maxValue4 = lst.map(_.toLong).max\n        val minValue4 = lst.map(_.toLong).min\n\
    \        val maxIndex5 = lst.map(_.toLong).max\n        val minIndex5 = lst.map(_.toLong).min\n\
    \        val maxValue5 = lst.map(_.toLong).max\n        val minValue5 = lst.map(_.toLong).min\n\
    \        val maxIndex6 = lst.map(_.toLong).max\n        val minIndex6 = lst.map(_.toLong).min\n\
    \        val maxValue6 = lst.map(_.toLong).max\n        val minValue6 = lst.map(_.toLong).min\n\
    \        val maxIndex7 = lst.map(_.toLong).max\n        val minIndex7 = lst.map(_.toLong).min\n\
    \        val maxValue7 = lst.map(_.toLong).max\n        val minValue7 = lst.map(_.toLong).min\n\
    \        val maxIndex8 = lst.map(_.toLong).max\n        val minIndex8 = lst.map(_.toLong).min\n\
    \        val maxValue8 = lst.map(_.toLong).max\n        val minValue8 = lst.map(_.toLong).min\n\
    \        val maxIndex9 = lst.map(_.toLong).max\n        val minIndex9 = lst.map(_.toLong).min\n\
    \        val maxValue9 = lst.map(_.toLong).max\n        val minValue9 = lst.map(_.toLong).min\n\
    \        val maxIndex10 = lst.map(_.toLong).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg0bc2zka.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg0bc2zka.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminListWithMaxAndMin\e[0m\
    \ = minListWithMax ++ minListWithMin\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: minListWithMin\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMax\e[0m\
    \ = maxListWithMin ++ maxListWithMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: maxListWithMax\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val middleIndex = math.max(minIndex,maxIndex)\
    \ / 2\n        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middle\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfc_2tu3f.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfc_2tu3f.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmiddleIndex\e[0m = lst.indexOf(middleValue)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmiddleIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmiddleIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfc_2tu3f.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmiddleValue\e[0m = lst(middleIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmiddleValue is already defined as \e[33mvalue\e[0m \e[35mmiddleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmiddleIndex\e[0m = lst.indexOf(middleValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmiddleIndex is already defined as \e[33mvalue\e[0m \e[35mmiddleIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmiddleValue\e[0m = lst(middleIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmiddleValue is already defined as \e[33mvalue\e[0m \e[35mmiddleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:25:12 ------"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val currentIndex = minIndex\n    \
    \    while(currentIndex < maxIndex){\n            result.add(lst(currentIndex))\n\
    \            currentIndex += 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67me7xwx.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67me7xwx.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            currentIndex\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         value += is not a member of Int - did you mean currentIndex.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith((a, b) => a < b)\n        val result: List[Long] = lst.filterNot(sorted.contains)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cqo7ld8.scala:20)\n\tat Problem.main(tmp8cqo7ld8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val tempList = lst.sortWith(_ < _)\n \
    \       val newList = tempList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr09jl4fb.scala:24)\n\tat Problem.main(tmpr09jl4fb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6f0ng8u.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1659799024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex2 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex2 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex3 = lst.indexWhere(x => x == minVal)\n        val maxValIndex3\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex4 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex4 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex5 = lst.indexWhere(x => x == minVal)\n        val maxValIndex5\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex6 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex6 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex7 = lst.indexWhere(x => x == minVal)\n        val maxValIndex7\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex8 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex8 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex9 = lst.indexWhere(x => x == minVal)\n        val maxValIndex9\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex10 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex10 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex11 = lst.indexWhere(x => x == minVal)\n        val maxValIndex11\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex12 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex12 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex13 = lst.indexWhere(x => x == minVal)\n        val maxValIndex13\
    \ = lst.indexWhere(x \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp75q1cyaf.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75q1cyaf.scala:44:43\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValIndex13\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                     Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp75q1cyaf.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val listToSort = lst.filter(_\
    \ != minValue && _ != maxValue)\n        val listToSort2 = listToSort.sortWith((x,\
    \ y) => x - y)\n        val listToSort3 = listToSort2.filter(_ != minValue)\n\
    \        val listToSort4 = listToSort3.filter(_ != maxValue)\n        listToSort4.take(minIndex).reverse.take(maxIndex).reverse.sortWith((x,\
    \ y) => x - y)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9fc7dr79.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlistToSort\e[0m = lst.filter(_\
    \ != minValue && _ != maxValue)\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9fc7dr79.scala:20:56 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlistToSort2\e[0m = listToSort.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                     ^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                           Found:    Long\n\e[31m   |\e[0m  \
    \                                                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9fc7dr79.scala:23:85 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        listToSort4.take(minIndex).reverse.take(maxIndex).reverse.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                  ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Long\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer.empty[Long]\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val midIndex = minIndex + maxIndex\
    \ / 2\n        val midValue = lst(midIndex)\n        newList += minValue\n   \
    \     newList += midValue\n        newList += maxValue\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ttak7xm.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        for(i <- minIndex to maxIndex){\n\
    \            list += lst(i)\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2sxgdkij.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminListWithMaxAndMin\e[0m\
    \ = minListWithMax ++ minListWithMin\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: minListWithMin\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMax\e[0m\
    \ = maxListWithMin ++ maxListWithMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: maxListWithMax\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => \n            if (x == minValue) y else x\n        )\n        if (newList.size\
    \ < 2) newList\n        else strangeSortList(newList.take(minIndex) + newList.drop(maxIndex))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5hfy3u70.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (x\
    \ == minValue) y \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m                    \
    \           ^\e[0m\n\e[31m   |\e[0m                               Found:    (y\
    \ : Long)\n\e[31m   |\e[0m                               Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5hfy3u70.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (x\
    \ == minValue) y \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hfy3u70.scala:23:52\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m strangeSortList(newList.take(minIndex)\
    \ + newList.drop(maxIndex))\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minVal2 = lst.take(minIndex).min\n        val maxVal2 = lst.take(maxIndex).max\n\
    \        val minIndex2 = lst.indexWhere(x => x == minVal2)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxVal2)\n        val minVal3 = lst.take(minIndex2).min\n\
    \        val maxVal3 = lst.take(maxIndex2).max\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minVal3)\n        val maxIndex3 = lst.indexWhere(x => x == maxVal3)\n\
    \        lst.sortWith((x, y) => if (x == minVal) y else x)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk58pd0ha.scala:27:48\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        lst.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) y \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Found:    (y : Long)\n\
    \e[31m   |\e[0m                                                Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk58pd0ha.scala:27:55\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        lst.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) y \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m                                                       ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (x\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = lst.sortWith((a, b) => a < b)\n        val list2 = list.sortWith((a, b) =>\
    \ a < b)\n        val list3 = list.sortWith((a, b) => a > b)\n        val list4\
    \ = list.sortWith((a, b) => a > b)\n        val list5 = list.sortWith((a, b) =>\
    \ a < b)\n        val list6 = list.sortWith((a, b) => a > b)\n        val list7\
    \ = list.sortWith((a, b) => a < b)\n        val list8 = list.sortWith((a, b) =>\
    \ a > b)\n        val list9 = list.sortWith((a, b) => a < b)\n        val list10\
    \ = list.sortWith((a, b) => a > b)\n        val list11 = list.sortWith((a, b)\
    \ => a < b)\n        val list12 = list.sortWith((a, b) => a > b)\n        val\
    \ list13 = list.sortWith((a, b) => a < b)\n        val list14 = list.sortWith((a,\
    \ b) => a > b)\n        val list15 = list.sortWith((a, b) => a < b)\n        val\
    \ list16 = list.sortWith((a, b) => a > b)\n        val list17 = list.sortWith((a,\
    \ b) => a < b)\n        val list18 = list.sortWith((a, b) => a > b)\n        val\
    \ list19 = list.sortWith((a, b) => a < b)\n        val list20 = list.sortWith((a,\
    \ b) => a > b)\n        val list21 = list.sortWith((a, b) => a < b)\n        val\
    \ list22 = list.sortWith((a, b) => a > b)\n        val list23 = list.sortWith((a,\
    \ b) => a < b)\n        val list24 = list.sortWith((a, b) => a > b)\n        val\
    \ list25 = list.sortWith((a, b) => a < b)\n        val list26 = list.sortWith((a,\
    \ b) => a > b)\n        val list27 = list.sortWith((a, b) => a < b)\n        val\
    \ list28 = list.sortWith((a, b) => a > b)\n        val list29 = list.sortWith((a,\
    \ b) => a < b)\n        val list30 = list.sortWith((a, b) => a > b)\n        val\
    \ list31 = list.sortWith((a, b) => a < b)\n        val list32 = list.sortWith((a,\
    \ b) => a > b)\n        val list33 = list.sortWith((a, b) => a < b)\n        val\
    \ list34 = list.sortWith((a, b) => a > b)\n        val list35 = list.sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujv_jjko.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex\
    \ + 1)\n        val minList2 = minList.map(_ + minValue)\n        val maxList2\
    \ = maxList.map(_ - maxValue)\n        val minList3 = minList2.zip(maxList2).map{case\
    \ (x, y) => x + y}\n        val maxList3 = minList2.zip(maxList2).map{case (x,\
    \ y) => x - y}\n        val minList4 = minList3.zip(maxList3).map{case (x, y)\
    \ => x + y}\n        val maxList4 = minList3.zip(maxList3).map{case (x, y) =>\
    \ x - y}\n        val minList5 = minList4.zip(maxList4).map{case (x, y) => x +\
    \ y}\n        val maxList5 = minList4.zip(maxList4).map{case (x, y) => x - y}\n\
    \        val minList6 = minList5.zip(maxList5).map{case (x, y) => x + y}\n   \
    \     val maxList6 = minList5.zip(maxList5).map{case (x, y) => x - y}\n      \
    \  val minList7 = minList6.zip(maxList6).map{case (x, y) => x + y}\n        val\
    \ maxList7 = minList6.zip(maxList6).map{case (x, y) => x - y}\n        val minList8\
    \ = minList7.zip(maxList7).map{case (x, y) => x + y}\n        val maxList8 = minList7.zip(maxList7).map{case\
    \ (x, y) => x - y}\n        val minList9 = minList8.zip(maxList8).map{case (x,\
    \ y) => x + y}\n        val maxList9 = minList8.zip(maxList8).map{case (x, y)\
    \ => x - y}\n        val minList10 = minList9.zip(maxList9).map{case (x, y) =>\
    \ x + y}\n        val maxList10 = minList9.zip(maxList9).map{case (x, y) => x\
    \ - y}\n        val minList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ + y}\n        val maxList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ - y}\n        val minList12 = minList11.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxktzf7m.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwxktzf7m.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplxfgisbw.scala:23)\n\tat Problem.main(tmplxfgisbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799029
