language: scala
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxIndex\
    \ = lst.map(_.toLong).max\n        val minIndex = lst.map(_.toLong).min\n    \
    \    val maxValue = lst.map(_.toLong).max\n        val minValue = lst.map(_.toLong).min\n\
    \        val maxIndex2 = lst.map(_.toLong).max\n        val minIndex2 = lst.map(_.toLong).min\n\
    \        val maxValue2 = lst.map(_.toLong).max\n        val minValue2 = lst.map(_.toLong).min\n\
    \        val maxIndex3 = lst.map(_.toLong).max\n        val minIndex3 = lst.map(_.toLong).min\n\
    \        val maxValue3 = lst.map(_.toLong).max\n        val minValue3 = lst.map(_.toLong).min\n\
    \        val maxIndex4 = lst.map(_.toLong).max\n        val minIndex4 = lst.map(_.toLong).min\n\
    \        val maxValue4 = lst.map(_.toLong).max\n        val minValue4 = lst.map(_.toLong).min\n\
    \        val maxIndex5 = lst.map(_.toLong).max\n        val minIndex5 = lst.map(_.toLong).min\n\
    \        val maxValue5 = lst.map(_.toLong).max\n        val minValue5 = lst.map(_.toLong).min\n\
    \        val maxIndex6 = lst.map(_.toLong).max\n        val minIndex6 = lst.map(_.toLong).min\n\
    \        val maxValue6 = lst.map(_.toLong).max\n        val minValue6 = lst.map(_.toLong).min\n\
    \        val maxIndex7 = lst.map(_.toLong).max\n        val minIndex7 = lst.map(_.toLong).min\n\
    \        val maxValue7 = lst.map(_.toLong).max\n        val minValue7 = lst.map(_.toLong).min\n\
    \        val maxIndex8 = lst.map(_.toLong).max\n        val minIndex8 = lst.map(_.toLong).min\n\
    \        val maxValue8 = lst.map(_.toLong).max\n        val minValue8 = lst.map(_.toLong).min\n\
    \        val maxIndex9 = lst.map(_.toLong).max\n        val minIndex9 = lst.map(_.toLong).min\n\
    \        val maxValue9 = lst.map(_.toLong).max\n        val minValue9 = lst.map(_.toLong).min\n\
    \        val maxIndex10 = lst.map(_.toLong).\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg0bc2zka.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg0bc2zka.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminListWithMaxAndMin\e[0m\
    \ = minListWithMax ++ minListWithMin\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: minListWithMin\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMax\e[0m\
    \ = maxListWithMin ++ maxListWithMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: maxListWithMax\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val middleIndex = math.max(minIndex,maxIndex)\
    \ / 2\n        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middle\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfc_2tu3f.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfc_2tu3f.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmiddleIndex\e[0m = lst.indexOf(middleValue)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmiddleIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmiddleIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfc_2tu3f.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmiddleValue\e[0m = lst(middleIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmiddleValue is already defined as \e[33mvalue\e[0m \e[35mmiddleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mmiddleIndex\e[0m = lst.indexOf(middleValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmiddleIndex is already defined as \e[33mvalue\e[0m \e[35mmiddleIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmiddleValue\e[0m = lst(middleIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmiddleValue is already defined as \e[33mvalue\e[0m \e[35mmiddleValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfc_2tu3f.scala:25:12 ------"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val currentIndex = minIndex\n    \
    \    while(currentIndex < maxIndex){\n            result.add(lst(currentIndex))\n\
    \            currentIndex += 1\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp67me7xwx.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67me7xwx.scala:23:25\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            currentIndex\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         value += is not a member of Int - did you mean currentIndex.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith((a, b) => a < b)\n        val result: List[Long] = lst.filterNot(sorted.contains)\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8cqo7ld8.scala:20)\n\tat Problem.main(tmp8cqo7ld8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val tempList = lst.sortWith(_ < _)\n \
    \       val newList = tempList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr09jl4fb.scala:24)\n\tat Problem.main(tmpr09jl4fb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6f0ng8u.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1659799024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex2 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex2 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex3 = lst.indexWhere(x => x == minVal)\n        val maxValIndex3\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex4 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex4 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex5 = lst.indexWhere(x => x == minVal)\n        val maxValIndex5\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex6 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex6 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex7 = lst.indexWhere(x => x == minVal)\n        val maxValIndex7\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex8 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex8 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex9 = lst.indexWhere(x => x == minVal)\n        val maxValIndex9\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex10 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex10 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex11 = lst.indexWhere(x => x == minVal)\n        val maxValIndex11\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex12 = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex12 = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex13 = lst.indexWhere(x => x == minVal)\n        val maxValIndex13\
    \ = lst.indexWhere(x \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp75q1cyaf.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75q1cyaf.scala:44:43\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValIndex13\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                     Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp75q1cyaf.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val listToSort = lst.filter(_\
    \ != minValue && _ != maxValue)\n        val listToSort2 = listToSort.sortWith((x,\
    \ y) => x - y)\n        val listToSort3 = listToSort2.filter(_ != minValue)\n\
    \        val listToSort4 = listToSort3.filter(_ != maxValue)\n        listToSort4.take(minIndex).reverse.take(maxIndex).reverse.sortWith((x,\
    \ y) => x - y)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp9fc7dr79.scala:19:36 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlistToSort\e[0m = lst.filter(_\
    \ != minValue && _ != maxValue)\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9fc7dr79.scala:20:56 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlistToSort2\e[0m = listToSort.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                     ^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                           Found:    Long\n\e[31m   |\e[0m  \
    \                                                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9fc7dr79.scala:23:85 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        listToSort4.take(minIndex).reverse.take(maxIndex).reverse.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                  ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                       Found: \
    \   Long\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer.empty[Long]\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val midIndex = minIndex + maxIndex\
    \ / 2\n        val midValue = lst(midIndex)\n        newList += minValue\n   \
    \     newList += midValue\n        newList += maxValue\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ttak7xm.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        for(i <- minIndex to maxIndex){\n\
    \            list += lst(i)\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2sxgdkij.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminListWithMaxAndMin\e[0m\
    \ = minListWithMax ++ minListWithMin\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: minListWithMin\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMax\e[0m\
    \ = maxListWithMin ++ maxListWithMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: maxListWithMax\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => \n            if (x == minValue) y else x\n        )\n        if (newList.size\
    \ < 2) newList\n        else strangeSortList(newList.take(minIndex) + newList.drop(maxIndex))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5hfy3u70.scala:20:31\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (x\
    \ == minValue) y \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m                    \
    \           ^\e[0m\n\e[31m   |\e[0m                               Found:    (y\
    \ : Long)\n\e[31m   |\e[0m                               Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5hfy3u70.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (x\
    \ == minValue) y \e[33melse\e[0m x\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \   Found:    (x : Long)\n\e[31m   |\e[0m                                    \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hfy3u70.scala:23:52\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m strangeSortList(newList.take(minIndex)\
    \ + newList.drop(maxIndex))\n\e[31m\e[31m   |\e[0m                           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minVal2 = lst.take(minIndex).min\n        val maxVal2 = lst.take(maxIndex).max\n\
    \        val minIndex2 = lst.indexWhere(x => x == minVal2)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxVal2)\n        val minVal3 = lst.take(minIndex2).min\n\
    \        val maxVal3 = lst.take(maxIndex2).max\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minVal3)\n        val maxIndex3 = lst.indexWhere(x => x == maxVal3)\n\
    \        lst.sortWith((x, y) => if (x == minVal) y else x)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk58pd0ha.scala:27:48\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        lst.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) y \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                                                Found:    (y : Long)\n\
    \e[31m   |\e[0m                                                Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk58pd0ha.scala:27:55\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        lst.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) y \e[33melse\e[0m x)\n\e[31m\e\
    [31m   |\e[0m                                                       ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (x\
    \ : Long)\n\e[31m   |\e[0m                                                   \
    \ Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = lst.sortWith((a, b) => a < b)\n        val list2 = list.sortWith((a, b) =>\
    \ a < b)\n        val list3 = list.sortWith((a, b) => a > b)\n        val list4\
    \ = list.sortWith((a, b) => a > b)\n        val list5 = list.sortWith((a, b) =>\
    \ a < b)\n        val list6 = list.sortWith((a, b) => a > b)\n        val list7\
    \ = list.sortWith((a, b) => a < b)\n        val list8 = list.sortWith((a, b) =>\
    \ a > b)\n        val list9 = list.sortWith((a, b) => a < b)\n        val list10\
    \ = list.sortWith((a, b) => a > b)\n        val list11 = list.sortWith((a, b)\
    \ => a < b)\n        val list12 = list.sortWith((a, b) => a > b)\n        val\
    \ list13 = list.sortWith((a, b) => a < b)\n        val list14 = list.sortWith((a,\
    \ b) => a > b)\n        val list15 = list.sortWith((a, b) => a < b)\n        val\
    \ list16 = list.sortWith((a, b) => a > b)\n        val list17 = list.sortWith((a,\
    \ b) => a < b)\n        val list18 = list.sortWith((a, b) => a > b)\n        val\
    \ list19 = list.sortWith((a, b) => a < b)\n        val list20 = list.sortWith((a,\
    \ b) => a > b)\n        val list21 = list.sortWith((a, b) => a < b)\n        val\
    \ list22 = list.sortWith((a, b) => a > b)\n        val list23 = list.sortWith((a,\
    \ b) => a < b)\n        val list24 = list.sortWith((a, b) => a > b)\n        val\
    \ list25 = list.sortWith((a, b) => a < b)\n        val list26 = list.sortWith((a,\
    \ b) => a > b)\n        val list27 = list.sortWith((a, b) => a < b)\n        val\
    \ list28 = list.sortWith((a, b) => a > b)\n        val list29 = list.sortWith((a,\
    \ b) => a < b)\n        val list30 = list.sortWith((a, b) => a > b)\n        val\
    \ list31 = list.sortWith((a, b) => a < b)\n        val list32 = list.sortWith((a,\
    \ b) => a > b)\n        val list33 = list.sortWith((a, b) => a < b)\n        val\
    \ list34 = list.sortWith((a, b) => a > b)\n        val list35 = list.sortWith((a,\
    \ b) => a < b)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpujv_jjko.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex\
    \ + 1)\n        val minList2 = minList.map(_ + minValue)\n        val maxList2\
    \ = maxList.map(_ - maxValue)\n        val minList3 = minList2.zip(maxList2).map{case\
    \ (x, y) => x + y}\n        val maxList3 = minList2.zip(maxList2).map{case (x,\
    \ y) => x - y}\n        val minList4 = minList3.zip(maxList3).map{case (x, y)\
    \ => x + y}\n        val maxList4 = minList3.zip(maxList3).map{case (x, y) =>\
    \ x - y}\n        val minList5 = minList4.zip(maxList4).map{case (x, y) => x +\
    \ y}\n        val maxList5 = minList4.zip(maxList4).map{case (x, y) => x - y}\n\
    \        val minList6 = minList5.zip(maxList5).map{case (x, y) => x + y}\n   \
    \     val maxList6 = minList5.zip(maxList5).map{case (x, y) => x - y}\n      \
    \  val minList7 = minList6.zip(maxList6).map{case (x, y) => x + y}\n        val\
    \ maxList7 = minList6.zip(maxList6).map{case (x, y) => x - y}\n        val minList8\
    \ = minList7.zip(maxList7).map{case (x, y) => x + y}\n        val maxList8 = minList7.zip(maxList7).map{case\
    \ (x, y) => x - y}\n        val minList9 = minList8.zip(maxList8).map{case (x,\
    \ y) => x + y}\n        val maxList9 = minList8.zip(maxList8).map{case (x, y)\
    \ => x - y}\n        val minList10 = minList9.zip(maxList9).map{case (x, y) =>\
    \ x + y}\n        val maxList10 = minList9.zip(maxList9).map{case (x, y) => x\
    \ - y}\n        val minList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ + y}\n        val maxList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ - y}\n        val minList12 = minList11.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwxktzf7m.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwxktzf7m.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplxfgisbw.scala:23)\n\tat Problem.main(tmplxfgisbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith((x, y) => x < y)\n        val reversed = sorted.reverse\n   \
    \     reversed.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9evam49s.scala:20)\n\tat Problem.main(tmp9evam49s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortWith((x, y) => x < y)\n        val lst3 = lst2.sortWith((x, y) =>\
    \ x > y)\n        val lst4 = lst3.sortWith((x, y) => x < y)\n        val lst5\
    \ = lst4.sortWith((x, y) => x > y)\n        lst5\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfqg48upb.scala:22)\n\tat Problem.main(tmpfqg48upb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstValue = lst.apply(minLstIndex)\n\
    \        val maxLstValue = lst.apply(maxLstIndex)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_v9els6a.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_v9els6a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mva"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n   \
    \     val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4\
    \ = newList3.sortWith((x, y) => y < x)\n        newList4.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6w7yf54_.scala:26)\n\tat Problem.main(tmp6w7yf54_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex)\n        val newList = minList ++ maxList\
    \ ++ minList\n        newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4kcnz36p.scala:25)\n\tat Problem.main(tmp4kcnz36p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.filter((x, i) => newList.indexOf(x)\
    \ == i)\n        newList2.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpvxy4pial.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.filter((\e\
    [36mx\e[0m, \e[36mi\e[0m) => newList.indexOf(x) == i)\n\e[31m\e[31m   |\e[0m \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009519
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex)\n        val newList = minList ++ maxList\
    \ ++ minList\n        newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpez8hhlkl.scala:25)\n\tat Problem.main(tmpez8hhlkl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith(_ < _)\n        val reversed = sorted.reverse\n        reversed.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ybcdfre.scala:20)\n\tat Problem.main(tmp9ybcdfre.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst,\
    \ minLstIndex + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex\
    \ + 1)\n        val minLstIndex3 = lst.indexOf(minLst, minLstIndex2 + 1)\n   \
    \     val maxLstIndex3 = lst.indexOf(maxLst, maxLstIndex2 + 1)\n        val minLstIndex4\
    \ = lst.indexOf(minLst, minLstIndex3 + 1)\n        val maxLstIndex4 = lst.indexOf(maxLst,\
    \ maxLstIndex3 + 1)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex4\
    \ + 1)\n        val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex4 + 1)\n   \
    \     val minLstIndex6 = lst.indexOf(minLst, minLstIndex5 + 1)\n        val maxLstIndex6\
    \ = lst.indexOf(maxLst, maxLstIndex5 + 1)\n        val minLstIndex7 = lst.indexOf(minLst,\
    \ minLstIndex6 + 1)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex6\
    \ + 1)\n        val minLstIndex8 = lst.indexOf(minLst, minLstIndex7 + 1)\n   \
    \     val maxLstIndex8 = lst.indexOf(maxLst, maxLstIndex7 + 1)\n        val minLstIndex9\
    \ = lst.indexOf(minLst, minLstIndex8 + 1)\n        val maxLstIndex9 = lst.indexOf(maxLst,\
    \ maxLstIndex8 + 1)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex9\
    \ + 1)\n        val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex9 + 1)\n  \
    \      val minLstIndex11 = lst.indexOf(minLst, minLstIndex10 + 1)\n        val\
    \ maxLstIndex11 = lst.indexOf(maxLst, maxLstIndex10 + 1)\n        val minLstIndex12\
    \ = lst.indexOf(minLst, minLstIndex11 + 1)\n        val maxLstIndex12 = lst.indexOf(maxLst,\
    \ maxLstIndex11 + 1)\n        val minLstIndex13 = lst.indexOf(minLst, minLstIndex12\
    \ + 1)\n        val maxLstIndex13 = l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmng7w85h.scala:42:28 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmng7w85h.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex + 1)\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val minValuesAndMaxIndexes = minValuesAndMaxValues.zipWithIndex\n\
    \        val maxValuesAndMinValues = maxValues ++ minValues\n        val maxValuesAndMinIndexes\
    \ = maxValuesAndMinValues.zipWithIndex\n        val minValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexes ++ maxValuesAndMinIndexes\n        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxValues.zipWithIndex\n        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexes.zipWithIndex\n        val\
    \ minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues\
    \ = minValuesAndMaxIndexesAnd\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7oueg6l.scala:33:124 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mminValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValues\e\
    [0m = minValuesAndMaxIndexesAnd\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                Not found: minValuesAndMaxIndexesAnd\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd7oueg6l.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_\
    \ == minValue)\n        newList.sortWith((x, y) => y > x)\n        newList.take(minIndex)\
    \ ++ newList.drop(maxIndex) ++ newList.take(minIndex)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaiz8e10i.scala:24)\n\tat Problem.main(tmpaiz8e10i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val newList = minList ++\
    \ maxList\n        newList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphfdig5zp.scala:25)\n\tat Problem.main(tmphfdig5zp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val newList = minList ++\
    \ maxList\n        newList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7z85kr30.scala:25)\n\tat Problem.main(tmp7z85kr30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList ++ minList\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8ofdkel.scala:25)\n\tat Problem.main(tmpe8ofdkel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:23:53 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mminListWithMaxAndMin\e[0m\
    \ = minListWithMax ++ minListWithMin\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: minListWithMin\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo9zf0nyy.scala:24:53 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMax\e[0m\
    \ = maxListWithMin ++ maxListWithMax\n\e[31m\e[31m   |\e[0m                  \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: maxListWithMax\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799248
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(\
    \ (a,b) => \n            if (minIndex < maxIndex) \n                if (a < b)\
    \ minIndex\n                else maxIndex\n            else maxIndex\n       \
    \ )\n        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewctboc8.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m\
    \ (a < b) minIndex\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (minIndex : Int)\n\e\
    [31m   |\e[0m                           Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewctboc8.scala:22:21 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33melse\e[0m maxIndex\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \     Found:    (maxIndex : Int)\n\e[31m   |\e[0m                     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpewctboc8.scala:23:17\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m maxIndex\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        Found:    (maxIndex : Int)\n\e[31m   |\e[0m                 Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxVal\
    \ = lst.max\n        val minVal = lst.min\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.sortWith((x, y) => x > y)\n   \
    \     val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4\
    \ = newList3.sortWith((x, y) => x > y)\n        val newList5 = newList4.sortWith((x,\
    \ y) => x < y)\n        val newList6 = newList5.sortWith((x, y) => x > y)\n  \
    \      val newList7 = newList6.sortWith((x, y) => x < y)\n        val newList8\
    \ = newList7.sortWith((x, y) => x > y)\n        val newList9 = newList8.sortWith((x,\
    \ y) => x < y)\n        val newList10 = newList9.sortWith((x, y) => x > y)\n \
    \       val newList11 = newList10.sortWith((x, y) => x < y)\n        val newList12\
    \ = newList11.sortWith((x, y) => x > y)\n        val newList13 = newList12.sortWith((x,\
    \ y) => x < y)\n        val newList14 = newList13.sortWith((x, y) => x > y)\n\
    \        val newList15 = newList14.sortWith((x, y) => x < y)\n        val newList16\
    \ = newList15.sortWith((x, y) => x > y)\n        val newList17 = newList16.sortWith((x,\
    \ y) => x < y)\n        val newList18 = newList17.sortWith((x, y) => x > y)\n\
    \        val newList19 = newList18.sortWith((x, y) => x < y)\n        val newList20\
    \ = newList19.sortWith((x, y) => x > y)\n        val newList21 = newList20.sortWith((x,\
    \ y) => x < y)\n        val newList22 = newList21.sortWith((x, y) => x > y)\n\
    \        val newList23 = newList22.sortWith((x, y) => x < y)\n        val newList24\
    \ = newList23.sortWith((x, y) => x > y)\n        val newList25 = newList24.sortWith((x,\
    \ y) => x < y)\n        val newList26 = newList25.sortWith((x, y) => x > y)\n\
    \        val newList27 = newList26.sortWith((x, y) => x < y)\n        val newList28\
    \ = newList27.sortWith((x, y) => x > y)\n        val newList29 = newList28.sortWith((x,\
    \ y) => x < y)\n        val newList30 = newList29.sortWith((x, y) => x > y)\n\
    \        val newList31 = newList30.sortWith((x, y) => x < y)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzgo3abrn.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer[Long]()\n        var minValue = lst.head\n        var maxValue\
    \ = lst.last\n        var currentMinValue = lst.head\n        var currentMaxValue\
    \ = lst.last\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n\
    \        var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var\
    \ currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var currentMinIndex = 0\n    \
    \    var currentMaxIndex = 0\n        var currentMinIndex = 0\n        var currentMaxIndex\
    \ = 0\n        var currentMinIndex = 0\n        var currentMaxIndex = 0\n    \
    \    var currentMinIndex = 0\n        var currentMaxIndex = 0\n        var currentMinIndex\
    \ = 0\n        var currentMaxIndex = 0\n        var \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3sfds7j4.scala:98:11 ---------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3sfds7j4.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcurrentMinIndex\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcurrentMinIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentMinIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3sfds7j4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mcurrentMaxIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3sfds7j4.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentMinIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMinIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentMinIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3sfds7j4.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentMaxIndex\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentMaxIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentMaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e["
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        newList.take(minIndex) ++ newList.drop(maxIndex)\
    \ ++ newList.take(minIndex)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ohk3wjb.scala:19:68 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                             ')' expected, but ':'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ohk3wjb.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                       Not found: type\
    \ >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2ohk3wjb.scala:19:51\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = lst.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e\
    [0m : \e[35ma\e[0m \e[35m>\e[0m \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                         value ? is not a\
    \ member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.filter((_, i) => i != minIndex\
    \ && i != maxIndex)\n        newList2.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2i37s58o.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.filter((_,\
    \ \e[36mi\e[0m) => i != minIndex && i != maxIndex)\n\e[31m\e[31m   |\e[0m    \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6f0ng8u.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1659799024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_\
    \ == minValue)\n        val newList2 = newList.filterNot(_ == maxValue)\n    \
    \    val newList3 = newList2.filterNot(_ == minValue)\n        val newList4 =\
    \ newList3.filterNot(_ == maxValue)\n        val newList5 = newList4.filterNot(_\
    \ == minValue)\n        val newList6 = newList5.filterNot(_ == maxValue)\n   \
    \     val newList7 = newList6.filterNot(_ == minValue)\n        val newList8 =\
    \ newList7.filterNot(_ == maxValue)\n        val newList9 = newList8.filterNot(_\
    \ == minValue)\n        val newList10 = newList9.filterNot(_ == maxValue)\n  \
    \      val newList11 = newList10.filterNot(_ == minValue)\n        val newList12\
    \ = newList11.filterNot(_ == maxValue)\n        val newList13 = newList12.filterNot(_\
    \ == minValue)\n        val newList14 = newList13.filterNot(_ == maxValue)\n \
    \       val newList15 = newList14.filterNot(_ == minValue)\n        val newList16\
    \ = newList15.filterNot(_ == maxValue)\n        val newList17 = newList16.filterNot(_\
    \ == minValue)\n        val newList18 = newList17.filterNot(_ == maxValue)\n \
    \       val newList19 = newList18.filterNot(_ == minValue)\n        val newList20\
    \ = newList19.filterNot(_ == maxValue)\n        val newList21 = newList20.filterNot(_\
    \ == minValue)\n        val newList22 = newList21.filterNot(_ == maxValue)\n \
    \       val newList23 = newList22.filterNot(_ == minValue)\n        val newList24\
    \ = newList23.filterNot(_ == maxValue)\n        val newList25 = newList24.filterNot(_\
    \ == minValue)\n        val newList26 = newList25.filterNot(_ == maxValue)\n \
    \       val newList27 = newList26.filterNot(_ == minValue)\n        val newList28\
    \ = newList27.filterNot(_ == maxValue)\n        val newList29 = newList28.filterNot(_\
    \ == minValue)\n        val newList30 = newList29.filterNot(_ == max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsffgrkqy.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpsffgrkqy.scala:48:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m48 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.filterNot(_ == max\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types Long and (Int, Int) => Int cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsffgrkqy.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val newList = lst.filterNot(x\
    \ => x == minVal || x == maxVal)\n        newList.sortWith((x, y) => if (x ==\
    \ minVal) y < y else x < y)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppylccuux.scala:23)\n\tat Problem.main(tmppylccuux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex) ++ newList.drop(maxIndex) ++ newList.take(minIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixo8g9s7.scala:23)\n\tat Problem.main(tmpixo8g9s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val minListWithMax = minList\
    \ ++ maxList\n        val maxListWithMin = maxList ++ minList\n        val maxListWithMinAndMax\
    \ = minListWithMax ++ maxListWithMin\n        val maxListWithMinAndMaxAndMin =\
    \ minListWithMaxAndMin ++ maxListWithMinAndMax\n        val maxListWithMinAndMaxAndMinAndMax\
    \ = minListWithMaxAndMinAndMax ++ maxListWithMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMax\n   \
    \     val maxListWithMinAndMaxAndMinAndMaxAndMinAndMax = minListWithMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMax\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMin\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsekr3o46.scala:24:41 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMaxAndMin\e\
    [0m = minListWithMaxAndMin ++ maxListWithMinAndMax\n\e[31m\e[31m   |\e[0m    \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Not found: minListWithMaxAndMin\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsekr3o46.scala:25:47\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMax\e[0m = minListWithMaxAndMinAndMax ++ maxListWithMinAndMaxAndMin\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: minListWithMaxAndMinAndMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsekr3o46.scala:26:53\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMaxAndMin\e[0m = minListWithMaxAndMinAndMaxAndMin\
    \ ++ maxListWithMinAndMaxAndMinAndMax\n\e[31m\e[31m   |\e[0m                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Not found: minListWithMaxAndMinAndMaxAndMin\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsekr3o46.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMaxAndMinAndMax\e[0m = minListWithMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMin\n\e[31m\e[31m   |\e[0m           \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: minListWithMaxAndMinAndMaxAndMinAndMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available whe"
  stdout: ''
  timestamp: 1660009533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val minList2 = minList.map(_+1).reverse\n\
    \        val maxList2 = maxList.map(_-1).reverse\n        val newList = minList2\
    \ ++ maxList2\n        newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0zmwkdrd.scala:27)\n\tat Problem.main(tmp0zmwkdrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_ < _)\n        val reversedList = sortedList.reverse\n     \
    \   reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsc11fa1.scala:20)\n\tat Problem.main(tmppsc11fa1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.filter((x, y) => x < y)\n     \
    \   val newList3 = newList2.filter((x, y) => x < y)\n        val newList4 = newList3.filter((x,\
    \ y) => x < y)\n        val newList5 = newList4.filter((x, y) => x < y)\n    \
    \    val newList6 = newList5.filter((x, y) => x < y)\n        val newList7 = newList6.filter((x,\
    \ y) => x < y)\n        val newList8 = newList7.filter((x, y) => x < y)\n    \
    \    val newList9 = newList8.filter((x, y) => x < y)\n        val newList10 =\
    \ newList9.filter((x, y) => x < y)\n        val newList11 = newList10.filter((x,\
    \ y) => x < y)\n        val newList12 = newList11.filter((x, y) => x < y)\n  \
    \      val newList13 = newList12.filter((x, y) => x < y)\n        val newList14\
    \ = newList13.filter((x, y) => x < y)\n        val newList15 = newList14.filter((x,\
    \ y) => x < y)\n        val newList16 = newList15.filter((x, y) => x < y)\n  \
    \      val newList17 = newList16.filter((x, y) => x < y)\n        val newList18\
    \ = newList17.filter((x, y) => x < y)\n        val newList19 = newList18.filter((x,\
    \ y) => x < y)\n        val newList20 = newList19.filter((x, y) => x < y)\n  \
    \      val newList21 = newList20.filter((x, y) => x < y)\n        val newList22\
    \ = newList21.filter((x, y) => x < y)\n        val newList23 = newList22.filter((x,\
    \ y) => x < y)\n        val newList24 = newList23.filter((x, y) => x < y)\n  \
    \      val newList25 = newList24.filter((x, y) => x < y)\n        val newList26\
    \ = newList25.filter((x, y) => x < y)\n        val newList27 = newList26.filter((x,\
    \ y) => x < y)\n        val newList28 = newList27.filter((x, y) => x < y)\n  \
    \      val newList29 = newList28.filter((x, y) => x < y)\n        val newList30\
    \ = newList29.filter((x, y) => x < y)\n        val newList31 = newList30.filter((x,\
    \ y) => x < y)\n        val newList32 = newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpg_9i0vc_.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m                   \
    \                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \             Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpg_9i0vc_.scala:21:46 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList3\e[0m = newList2.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpg_9i0vc_.scala:22:46 ---------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewList4\e[0m = newList3.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpg_9i0vc_.scala:23:46 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewList5\e[0m = newList4.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpg_9i0vc_.scala:24:46 ---------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewList6\e[0m = newList5.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m                   \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpg_9i0vc_.scala:25:46 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnewList7\e[0m = newList6.filter((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortWith(_ < _)\n        val lst3 = lst2.sortWith(_ > _)\n        val\
    \ lst4 = lst3.sortWith(_ < _)\n        val lst5 = lst4.sortWith(_ > _)\n     \
    \   val lst6 = lst5.sortWith(_ < _)\n        val lst7 = lst6.sortWith(_ > _)\n\
    \        val lst8 = lst7.sortWith(_ < _)\n        val lst9 = lst8.sortWith(_ >\
    \ _)\n        val lst10 = lst9.sortWith(_ < _)\n        val lst11 = lst10.sortWith(_\
    \ > _)\n        val lst12 = lst11.sortWith(_ < _)\n        val lst13 = lst12.sortWith(_\
    \ > _)\n        val lst14 = lst13.sortWith(_ < _)\n        val lst15 = lst14.sortWith(_\
    \ > _)\n        val lst16 = lst15.sortWith(_ < _)\n        val lst17 = lst16.sortWith(_\
    \ > _)\n        val lst18 = lst17.sortWith(_ < _)\n        val lst19 = lst18.sortWith(_\
    \ > _)\n        val lst20 = lst19.sortWith(_ < _)\n        val lst21 = lst20.sortWith(_\
    \ > _)\n        val lst22 = lst21.sortWith(_ < _)\n        val lst23 = lst22.sortWith(_\
    \ > _)\n        val lst24 = lst23.sortWith(_ < _)\n        val lst25 = lst24.sortWith(_\
    \ > _)\n        val lst26 = lst25.sortWith(_ < _)\n        val lst27 = lst26.sortWith(_\
    \ > _)\n        val lst28 = lst27.sortWith(_ < _)\n        val lst29 = lst28.sortWith(_\
    \ > _)\n        val lst30 = lst29.sortWith(_ < _)\n        val lst31 = lst30.sortWith(_\
    \ > _)\n        val lst32 = lst31.sortWith(_ < _)\n        val lst33 = lst32.sortWith(_\
    \ > _)\n        val lst34 = lst33.sortWith(_ < _)\n        val lst35 = lst34.sortWith(_\
    \ > _)\n        val lst36 = lst35.sortWith(_ < _)\n        val lst37 = lst36.sortWith(_\
    \ > _)\n        val lst38 = lst37.sortWith(_ < _)\n        val lst39 = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpai28xl98.scala:52:19 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mlst39\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpai28xl98.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex+1)\n        val maxValuesList = maxValues.toList\n\
    \        val maxValuesListLength = maxValuesList.size\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n        val maxValuesListLength\
    \ = maxValuesListLength.toInt\n        val maxValuesListLength = maxValuesListLength.toLong\n\
    \        val maxValuesListLength = maxValuesListLength.toInt\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n        val maxValuesListLength\
    \ = maxValuesListLength.toInt\n        val maxValuesListLength = maxValuesListLength.toLong\n\
    \        val maxValuesListLength = maxValuesListLength.toInt\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n        val maxValuesListLength\
    \ = maxValuesListLength.toInt\n        val maxValuesListLength = maxValuesListLength.toLong\n\
    \        val maxValuesListLength = maxValuesListLength.toInt\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n        val maxValuesListLength\
    \ = maxValuesListLength.toInt\n        val maxValuesListLength = maxValuesListLength.toLong\n\
    \        val maxValuesListLength = maxValuesListLength.toInt\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n        val maxValuesListLength\
    \ = maxValuesListLength.toInt\n        val maxValuesListLength = maxValuesListLength.toLong\n\
    \        val maxValuesListLength = maxValuesListLength.toInt\n        val maxValuesListLength\
    \ = maxValuesListLength.toLong\n        val maxValuesListLength = maxValuesListLength.toInt\n\
    \        val maxValuesListLength = maxValuesListLength.toLong\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6ww8zkqx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxValuesListLength\e[0m\
    \ = maxValuesListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValuesListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxValuesListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ww8zkqx.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValuesListLength\e[0m\
    \ = maxValuesListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValuesListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxValuesListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ww8zkqx.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxValuesListLength\e[0m\
    \ = maxValuesListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValuesListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxValuesListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ww8zkqx.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValuesListLength\e[0m\
    \ = maxValuesListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValuesListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxValuesListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6ww8zkqx.scala:27:12 -------------------------"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.take(maxIndex)\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val maxValuesAndMinValues = maxValues ++ minValues\n\
    \        val minValuesAndMaxValuesAndMinValues = minValuesAndMaxValues ++ minValuesAndMaxValues\n\
    \        val maxValuesAndMinValuesAndMaxValues = maxValuesAndMinValues ++ maxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValues = minValuesAndMaxValuesAndMinValues\
    \ ++ minValuesAndMaxValuesAndMaxValues\n        val maxValuesAndMinValuesAndMinValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n \
    \       val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues = minValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ ++ minValuesAndMaxValuesAndMinValuesAndMaxValues\n        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValues ++ maxValuesAndMinValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n\
    \        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n\
    \        val min\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpifd_7suy.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifd_7suy.scala:25:97\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValues\e[0m = minValuesAndMaxValuesAndMinValues\
    \ ++ minValuesAndMaxValuesAndMaxValues\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \            Not found: minValuesAndMaxValuesAndMaxValues\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpifd_7suy.scala:26:60 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxValuesAndMinValuesAndMinValuesAndMaxValues\e\
    [0m = maxValuesAndMinValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: maxValuesAndMinValuesAndMinValues\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpifd_7suy.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val newList = lst.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnv_6vlz1.scala:23)\n\tat Problem.main(tmpnv_6vlz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex\
    \ + 1\n        val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex)\n\
    \        val maxValue = lst.drop(maxIndex)\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val\
    \ minValue = lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex)\n \
    \       val minIndex = lst.indexWhere(_ == minValue)\n        val maxIndex = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex = maxIndex\
    \ - 1\n        val minValue = lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex)\n\
    \        val minIndex = lst.indexWhere(_ == minValue)\n        val maxIndex =\
    \ lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex + 1\n       \
    \ val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex)\n   \
    \     val maxValue = lst.drop(maxIndex)\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val\
    \ minValue = lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex)\n \
    \       val minIndex = lst.indexWhere(_ == minValue)\n        val maxIndex = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex = maxIndex\
    \ - 1\n        val minValue = lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex)\n\
    \        val minIndex = lst.indexWhere(_ == minValue)\n        val maxIndex =\
    \ lst.indexWhere(_ == maxValue)\n        val minIndex = minIndex + 1\n       \
    \ val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex)\n   \
    \     val maxValue = lst.drop(maxIndex)\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmtq50c_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbmtq50c_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbmtq50c_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.take(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbmtq50c_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = lst.drop(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbmtq50c_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(_ ==\
    \ minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val list2 = lst.filterNot(_\
    \ == minValue)\n        val list3 = lst.filterNot(_ == maxValue)\n        val\
    \ list4 = lst.filterNot(_ == minValue)\n        val list5 = lst.filterNot(_ ==\
    \ maxValue)\n        val list6 = lst.filterNot(_ == minValue)\n        val list7\
    \ = lst.filterNot(_ == maxValue)\n        val list8 = lst.filterNot(_ == minValue)\n\
    \        val list9 = lst.filterNot(_ == maxValue)\n        val list10 = lst.filterNot(_\
    \ == minValue)\n        val list11 = lst.filterNot(_ == maxValue)\n        val\
    \ list12 = lst.filterNot(_ == minValue)\n        val list13 = lst.filterNot(_\
    \ == maxValue)\n        val list14 = lst.filterNot(_ == minValue)\n        val\
    \ list15 = lst.filterNot(_ == maxValue)\n        val list16 = lst.filterNot(_\
    \ == minValue)\n        val list17 = lst.filterNot(_ == maxValue)\n        val\
    \ list18 = lst.filterNot(_ == minValue)\n        val list19 = lst.filterNot(_\
    \ == maxValue)\n        val list20 = lst.filterNot(_ == minValue)\n        val\
    \ list21 = lst.filterNot(_ == maxValue)\n        val list22 = lst.filterNot(_\
    \ == minValue)\n        val list23 = lst.filterNot(_ == maxValue)\n        val\
    \ list24 = lst.filterNot(_ == minValue)\n        val list25 = lst.filterNot(_\
    \ == maxValue)\n        val list26 = lst.filterNot(_ == minValue)\n        val\
    \ list27 = lst.filterNot(_ == maxValue)\n        val list28 = lst.filterNot(_\
    \ == minValue)\n        val list29 = lst.filterNot(_ == maxValue)\n        val\
    \ list30 = lst.filterNot(_ == minValue)\n        val list31 = lst.filterNot(_\
    \ == maxValue)\n        val list32 = lst.filterNot(_ == minValue)\n        val\
    \ list33 = lst.filterNot(_ == maxValue)\n        val list34 = lst.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9nqdijev.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9nqdijev.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(x\
    \ => x == minValue)\n        newList.sortWith((x, y) => x - y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4z7pwjlj.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        newList.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x - y)\n\e[31m\e[31m   |\e[0m                   \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \  Found:    Long\n\e[31m   |\e[0m                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val middleIndex = math.floor((minIndex\
    \ + maxIndex) / 2)\n        val middleValue = lst(middleIndex)\n        val leftList\
    \ = lst.take(minIndex)\n        val rightList = lst.drop(maxIndex)\n        val\
    \ leftListSorted = strangeSortList(leftList)\n        val rightListSorted = strangeSortList(rightList)\n\
    \        val sortedList = leftListSorted ++ List(middleValue) ++  rightListSorted\n\
    \        sortedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ltuhojg.scala:20:30\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmiddleValue\e\
    [0m = lst(middleIndex)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    (middleIndex : Double)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val newList = minList ++\
    \ maxList ++ minList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapwkoh92.scala:25)\n\tat Problem.main(tmpapwkoh92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val newList = minList ++\
    \ maxList ++ minList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9i02q4v.scala:25)\n\tat Problem.main(tmp_9i02q4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + 15)\n\
    \        val maxValueIndex15 = lst.indexOf(max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjc37t75m.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjc37t75m.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstValue = lst.apply(minLstIndex)\n\
    \        val maxLstValue = lst.apply(maxLstIndex)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_v9els6a.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_v9els6a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mva"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(x => x)\n        val reversedList = sortedList.reverse\n      \
    \  reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpguv09gu4.scala:20)\n\tat Problem.main(tmpguv09gu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1m06itr.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp1m06itr.scala:50:25\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex17\e[0m = l\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Not found: l\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp1m06itr.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex + 1)\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val minValuesAndMaxIndexes = minValuesAndMaxValues.zipWithIndex\n\
    \        val maxValuesAndMinValues = maxValues ++ minValues\n        val maxValuesAndMinIndexes\
    \ = maxValuesAndMinValues.zipWithIndex\n        val minValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexes ++ maxValuesAndMinIndexes\n        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxValues.zipWithIndex\n        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexes ++ minValuesAndMaxIndexesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes ++\
    \ minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\n  \
    \      val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues.zipWithIndex\n\
    \        val minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexes\
    \ ++ minValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxIndexesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxIndexesAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyl6ey413.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyl6ey413.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val maxValue\
    \ = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val maxIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx9luw0yx.scala:95:18 ---------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m        newList += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx9luw0yx.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n   \
    \     newList2.reverse.take(minIndex).reverse ++ newList.take(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp27io8nwo.scala:24)\n\tat Problem.main(tmp27io8nwo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList ++ minList\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8ofdkel.scala:25)\n\tat Problem.main(tmpe8ofdkel.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a,\
    \ b) => a < b ? -1 : 1)\n        val newList2 = newList.filter(_ != minValue)\n\
    \        val newList3 = newList2.filter(_ != maxValue)\n        val newList4 =\
    \ newList3.filter(_ != minValue)\n        val newList5 = newList4.filter(_ !=\
    \ maxValue)\n        newList5\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp69h0h4t6.scala:19:51 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                 ^^^\e[0m\n\e[31m  \
    \ |\e[0m                                         value ? is not a member of Long\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue, minValueIndex + 1)\n        val maxValueIndex2 = lst.indexOf(maxValue,\
    \ maxValueIndex - 1)\n        val minValueIndex3 = lst.indexOf(minValue, minValueIndex\
    \ + 2)\n        val maxValueIndex3 = lst.indexOf(maxValue, maxValueIndex - 2)\n\
    \        val minValueIndex4 = lst.indexOf(minValue, minValueIndex + 3)\n     \
    \   val maxValueIndex4 = lst.indexOf(maxValue, maxValueIndex - 3)\n        val\
    \ minValueIndex5 = lst.indexOf(minValue, minValueIndex + 4)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxValueIndex - 4)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minValueIndex + 5)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxValueIndex\
    \ - 5)\n        val minValueIndex7 = lst.indexOf(minValue, minValueIndex + 6)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue, maxValueIndex - 6)\n     \
    \   val minValueIndex8 = lst.indexOf(minValue, minValueIndex + 7)\n        val\
    \ maxValueIndex8 = lst.indexOf(maxValue, maxValueIndex - 7)\n        val minValueIndex9\
    \ = lst.indexOf(minValue, minValueIndex + 8)\n        val maxValueIndex9 = lst.indexOf(maxValue,\
    \ maxValueIndex - 8)\n        val minValueIndex10 = lst.indexOf(minValue, minValueIndex\
    \ + 9)\n        val maxValueIndex10 = lst.indexOf(maxValue, maxValueIndex - 9)\n\
    \        val minValueIndex11 = lst.indexOf(minValue, minValueIndex + 10)\n   \
    \     val maxValueIndex11 = lst.indexOf(maxValue, maxValueIndex - 10)\n      \
    \  val minValueIndex12 = lst.indexOf(minValue, minValueIndex + 11)\n        val\
    \ maxValueIndex12 = lst.indexOf(maxValue, maxValueIndex - 11)\n        val minValueIndex13\
    \ = lst.indexOf(minValue, minValueIndex + 12)\n        val maxValueIndex13 = lst.indexOf(maxValue,\
    \ maxValueIndex - 12)\n        val minValueIndex14 = lst.indexOf(minValue, minValueIndex\
    \ + 13)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxValueIndex - 13)\n\
    \        val minValueIndex15 = lst.indexOf(minValue, minValueIndex\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsvk4_ymi.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpsvk4_ymi.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue)\n\
    \        val maxIndex2 = lst.indexOf(maxValue)\n        val minIndex3 = lst.indexOf(minValue)\n\
    \        val maxIndex3 = lst.indexOf(maxValue)\n        val minIndex4 = lst.indexOf(minValue)\n\
    \        val maxIndex4 = lst.indexOf(maxValue)\n        val minIndex5 = lst.indexOf(minValue)\n\
    \        val maxIndex5 = lst.indexOf(maxValue)\n        val minIndex6 = lst.indexOf(minValue)\n\
    \        val maxIndex6 = lst.indexOf(maxValue)\n        val minIndex7 = lst.indexOf(minValue)\n\
    \        val maxIndex7 = lst.indexOf(maxValue)\n        val minIndex8 = lst.indexOf(minValue)\n\
    \        val maxIndex8 = lst.indexOf(maxValue)\n        val minIndex9 = lst.indexOf(minValue)\n\
    \        val maxIndex9 = lst.indexOf(maxValue)\n        val minIndex10 = lst.indexOf(minValue)\n\
    \        val maxIndex10 = lst.indexOf(maxValue)\n        val minIndex11 = lst.indexOf(minValue)\n\
    \        val maxIndex11 = lst.indexOf(maxValue)\n        val minIndex12 = lst.indexOf(minValue)\n\
    \        val maxIndex12 = lst.indexOf(maxValue)\n        val minIndex13 = lst.indexOf(minValue)\n\
    \        val maxIndex13 = lst.indexOf(maxValue)\n        val minIndex14 = lst.indexOf(minValue)\n\
    \        val maxIndex14 = lst.indexOf(maxValue)\n        val minIndex15 = lst.indexOf(minValue)\n\
    \        val maxIndex15 = lst.indexOf(maxValue)\n        val minIndex16 = lst.indexOf(minValue)\n\
    \        val maxIndex16 = lst.indexOf(maxValue)\n        val minIndex17 = lst.indexOf(minValue)\n\
    \        val maxIndex17 = lst.indexOf(maxValue)\n        val minIndex18 = lst.indexOf(minValue)\n\
    \        val maxIndex18 = lst.indexOf(maxValue)\n        val minIndex19 = lst.indexOf(minValue)\n\
    \        val maxIndex19 = lst.indexOf(maxValue)\n        val minIndex20 = lst.indexOf(minValue)\n\
    \        val maxIndex20 = lst.indexOf(maxValue)\n        val minIndex21 = lst.indexOf(minValue)\n\
    \        val maxIndex21 = lst.indexOf(maxValue)\n        val minIndex22 = lst.indexOf(minValue)\n\
    \        val maxIndex22 = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0feqsyjd.scala:60:24 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex22\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0feqsyjd.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwp2q4bkw.scala:25)\n\tat Problem.main(tmpwp2q4bkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxValueIndex = lst.indexOf(maxValue, maxIndex +\
    \ 1)\n        val minValueIndex2 = lst.indexOf(minValue, minIndex + 2)\n     \
    \   val maxValueIndex2 = lst.indexOf(maxValue, maxIndex + 2)\n        val minValueIndex3\
    \ = lst.indexOf(minValue, minIndex + 3)\n        val maxValueIndex3 = lst.indexOf(maxValue,\
    \ maxIndex + 3)\n        val minValueIndex4 = lst.indexOf(minValue, minIndex +\
    \ 4)\n        val maxValueIndex4 = lst.indexOf(maxValue, maxIndex + 4)\n     \
    \   val minValueIndex5 = lst.indexOf(minValue, minIndex + 5)\n        val maxValueIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minValueIndex6 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxValueIndex6 = lst.indexOf(maxValue, maxIndex +\
    \ 6)\n        val minValueIndex7 = lst.indexOf(minValue, minIndex + 7)\n     \
    \   val maxValueIndex7 = lst.indexOf(maxValue, maxIndex + 7)\n        val minValueIndex8\
    \ = lst.indexOf(minValue, minIndex + 8)\n        val maxValueIndex8 = lst.indexOf(maxValue,\
    \ maxIndex + 8)\n        val minValueIndex9 = lst.indexOf(minValue, minIndex +\
    \ 9)\n        val maxValueIndex9 = lst.indexOf(maxValue, maxIndex + 9)\n     \
    \   val minValueIndex10 = lst.indexOf(minValue, minIndex + 10)\n        val maxValueIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minValueIndex11 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxValueIndex11 = lst.indexOf(maxValue, maxIndex\
    \ + 11)\n        val minValueIndex12 = lst.indexOf(minValue, minIndex + 12)\n\
    \        val maxValueIndex12 = lst.indexOf(maxValue, maxIndex + 12)\n        val\
    \ minValueIndex13 = lst.indexOf(minValue, minIndex + 13)\n        val maxValueIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minValueIndex14 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxValueIndex14 = lst.indexOf(maxValue, maxIndex\
    \ + 14)\n        val minValueIndex15 = lst.indexOf(minValue, minIndex + \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi8e8rxx8.scala:48:62 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex15\e[0m = lst.indexOf(minValue,\
    \ minIndex + \n\e[31m\e[31m   |\e[0m                                         \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi8e8rxx8.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi8e8rxx8.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex2\
    \ = lst.indexOf(minValue)\n        val maxValueIndex2 = lst.indexOf(maxValue)\n\
    \        val minValueIndex3 = lst.indexOf(minValue)\n        val maxValueIndex3\
    \ = lst.indexOf(maxValue)\n        val minValueIndex4 = lst.indexOf(minValue)\n\
    \        val maxValueIndex4 = lst.indexOf(maxValue)\n        val minValueIndex5\
    \ = lst.indexOf(minValue)\n        val maxValueIndex5 = lst.indexOf(maxValue)\n\
    \        val minValueIndex6 = lst.indexOf(minValue)\n        val maxValueIndex6\
    \ = lst.indexOf(maxValue)\n        val minValueIndex7 = lst.indexOf(minValue)\n\
    \        val maxValueIndex7 = lst.indexOf(maxValue)\n        val minValueIndex8\
    \ = lst.indexOf(minValue)\n        val maxValueIndex8 = lst.indexOf(maxValue)\n\
    \        val minValueIndex9 = lst.indexOf(minValue)\n        val maxValueIndex9\
    \ = lst.indexOf(maxValue)\n        val minValueIndex10 = lst.indexOf(minValue)\n\
    \        val maxValueIndex10 = lst.indexOf(maxValue)\n        val minValueIndex11\
    \ = lst.indexOf(minValue)\n        val maxValueIndex11 = lst.indexOf(maxValue)\n\
    \        val minValueIndex12 = lst.indexOf(minValue)\n        val maxValueIndex12\
    \ = lst.indexOf(maxValue)\n        val minValueIndex13 = lst.indexOf(minValue)\n\
    \        val maxValueIndex13 = lst.indexOf(maxValue)\n        val minValueIndex14\
    \ = lst.indexOf(minValue)\n        val maxValueIndex14 = lst.indexOf(maxValue)\n\
    \        val minValueIndex15 = lst.indexOf(minValue)\n        val maxValueIndex15\
    \ = lst.indexOf(maxValue)\n        val minValueIndex16 = lst.indexOf(minValue)\n\
    \        val maxValueIndex16 = lst.indexOf(maxValue)\n        val minValueIndex17\
    \ = lst.indexOf(minValue)\n        val maxValueIndex17 = lst.indexOf(maxValue)\n\
    \        val minValueIndex18 = lst.indexOf(minValue)\n        val maxValueIndex18\
    \ = lst.indexOf(maxValue)\n        val minValueIndex19 = lst.indexOf(minValue)\n\
    \        val maxValueIndex19 = lst.indexOf(maxValue)\n        val minValueIndex20\
    \ = l\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_sbbnmd.scala:57:30 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex20\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf_sbbnmd.scala:58:5 ---------------------\e[0m\e\
    [0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(_.toLong)\n        val reversedList = sortedList.reverse\n    \
    \    reversedList.take(lst.size)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiu6x0he7.scala:20)\n\tat Problem.main(tmpiu6x0he7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex - 1\n        val maxIndex = maxIndex + 1\n        val minValue\
    \ = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue\
    \ = l\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bl7l4yr.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_bl7l4yr.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_bl7l4yr.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.apply(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_bl7l4yr.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = lst.apply(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_bl7l4yr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009552
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex) ++ newList.drop(maxIndex) ++ newList.take(minIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixo8g9s7.scala:23)\n\tat Problem.main(tmpixo8g9s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.filter((x, i) => i < minIndex ||\
    \ i > maxIndex)\n        newList2.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpz0n2e62s.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.filter((\e\
    [36mx\e[0m, \e[36mi\e[0m) => i < minIndex || i > maxIndex)\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a,\
    \ b) => a < b)\n        val newList2 = newList.filter((_, i) => i < minIndex ||\
    \ i > maxIndex)\n        newList2.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6v2m3qnw.scala:20:45 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewList2\e[0m = newList.filter((_,\
    \ \e[36mi\e[0m) => i < minIndex || i > maxIndex)\n\e[31m\e[31m   |\e[0m      \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(\
    \ (a,b) => a < b )\n        val newList2 = newList.filter( x => x != minValue\
    \ )\n        val newList3 = newList2.filter( x => x != maxValue )\n        newList3.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1s2xf_kj.scala:25)\n\tat Problem.main(tmp1s2xf_kj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009554
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        if (minIndex == maxIndex) {\n            newList\n   \
    \     } else {\n            newList.take(minIndex).reverse ++ newList.drop(minIndex\
    \ + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_8v5ro4.scala:27)\n\tat Problem.main(tmpx_8v5ro4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst,\
    \ minLstIndex + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex\
    \ + 1)\n        val minLstIndex3 = lst.indexOf(minLst, minLstIndex2 + 1)\n   \
    \     val maxLstIndex3 = lst.indexOf(maxLst, maxLstIndex2 + 1)\n        val minLstIndex4\
    \ = lst.indexOf(minLst, minLstIndex3 + 1)\n        val maxLstIndex4 = lst.indexOf(maxLst,\
    \ maxLstIndex3 + 1)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex4\
    \ + 1)\n        val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex4 + 1)\n   \
    \     val minLstIndex6 = lst.indexOf(minLst, minLstIndex5 + 1)\n        val maxLstIndex6\
    \ = lst.indexOf(maxLst, maxLstIndex5 + 1)\n        val minLstIndex7 = lst.indexOf(minLst,\
    \ minLstIndex6 + 1)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex6\
    \ + 1)\n        val minLstIndex8 = lst.indexOf(minLst, minLstIndex7 + 1)\n   \
    \     val maxLstIndex8 = lst.indexOf(maxLst, maxLstIndex7 + 1)\n        val minLstIndex9\
    \ = lst.indexOf(minLst, minLstIndex8 + 1)\n        val maxLstIndex9 = lst.indexOf(maxLst,\
    \ maxLstIndex8 + 1)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex9\
    \ + 1)\n        val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex9 + 1)\n  \
    \      val minLstIndex11 = lst.indexOf(minLst, minLstIndex10 + 1)\n        val\
    \ maxLstIndex11 = lst.indexOf(maxLst, maxLstIndex10 + 1)\n        val minLstIndex12\
    \ = lst.indexOf(minLst, minLstIndex11 + 1)\n        val maxLstIndex12 = lst.indexOf(maxLst,\
    \ maxLstIndex11 + 1)\n        val minLstIndex13 = lst.indexOf(minLst, minLstIndex12\
    \ + 1)\n        val maxLstIndex13 = l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmng7w85h.scala:42:28 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmng7w85h.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_ssl3wm.scala:25)\n\tat Problem.main(tmpw_ssl3wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex)\n       \
    \ val minValIndex2 = lst.indexOf(minVal, minIndex+1)\n        val maxValIndex2\
    \ = lst.indexOf(maxVal, maxIndex+1)\n        val minValIndex3 = lst.indexOf(minVal,\
    \ minIndex+2)\n        val maxValIndex3 = lst.indexOf(maxVal, maxIndex+2)\n  \
    \      val minValIndex4 = lst.indexOf(minVal, minIndex+3)\n        val maxValIndex4\
    \ = lst.indexOf(maxVal, maxIndex+3)\n        val minValIndex5 = lst.indexOf(minVal,\
    \ minIndex+4)\n        val maxValIndex5 = lst.indexOf(maxVal, maxIndex+4)\n  \
    \      val minValIndex6 = lst.indexOf(minVal, minIndex+5)\n        val maxValIndex6\
    \ = lst.indexOf(maxVal, maxIndex+5)\n        val minValIndex7 = lst.indexOf(minVal,\
    \ minIndex+6)\n        val maxValIndex7 = lst.indexOf(maxVal, maxIndex+6)\n  \
    \      val minValIndex8 = lst.indexOf(minVal, minIndex+7)\n        val maxValIndex8\
    \ = lst.indexOf(maxVal, maxIndex+7)\n        val minValIndex9 = lst.indexOf(minVal,\
    \ minIndex+8)\n        val maxValIndex9 = lst.indexOf(maxVal, maxIndex+8)\n  \
    \      val minValIndex10 = lst.indexOf(minVal, minIndex+9)\n        val maxValIndex10\
    \ = lst.indexOf(maxVal, maxIndex+9)\n        val minValIndex11 = lst.indexOf(minVal,\
    \ minIndex+10)\n        val maxValIndex11 = lst.indexOf(maxVal, maxIndex+10)\n\
    \        val minValIndex12 = lst.indexOf(minVal, minIndex+11)\n        val maxValIndex12\
    \ = lst.indexOf(maxVal, maxIndex+11)\n        val minValIndex13 = lst.indexOf(minVal,\
    \ minIndex+12)\n        val maxValIndex13 = lst.indexOf(maxVal, maxIndex+12)\n\
    \        val minValIndex14 = lst.indexOf(minVal, minIndex+13)\n        val maxValIndex14\
    \ = lst.indexOf(maxVal, maxIndex+13)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp21f_r9ow.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2oiwa3i.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe2oiwa3i.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_.compareTo(_) < 0)\n        val newList = sortedList.take(sortedList.size\
    \ - 1).reverse.take(sortedList.size)\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4qo4z3t.scala:20)\n\tat Problem.main(tmpg4qo4z3t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = 0\n        val newList = mutable.ListBuffer[Long]()\n      \
    \  for(i <- 0 until lst.size) {\n            val currentValue = lst(i)\n     \
    \       val currentIndex = i\n            val currentMinValue = minValue\n   \
    \         val currentMaxValue = maxValue\n            val currentMinIndex = minIndex\n\
    \            val currentMaxIndex = maxIndex\n            val currentMinValue =\
    \ if (currentValue < currentMinValue) currentMinValue else currentValue\n    \
    \        val currentMaxValue = if (currentValue > currentMaxValue) currentMaxValue\
    \ else currentValue\n            val currentMinIndex = if (currentIndex < currentMinIndex)\
    \ currentMinIndex else currentIndex\n            val currentMaxIndex = if (currentIndex\
    \ > currentMaxIndex) currentMaxIndex else currentIndex\n            val currentMinValue\
    \ = if (currentValue < currentMinValue) currentMinValue else currentValue\n  \
    \          val currentMaxValue = if (currentValue > currentMaxValue) currentMaxValue\
    \ else currentValue\n            val currentMinIndex = if (currentIndex < currentMinIndex)\
    \ currentMinIndex else currentIndex\n            val currentMaxIndex = if (currentIndex\
    \ > currentMaxIndex) currentMaxIndex else currentIndex\n            val currentMinValue\
    \ = if (currentValue < currentMinValue) currentMinValue else currentValue\n  \
    \          val currentMaxValue = if (currentValue > currentMaxValue) currentMaxValue\
    \ else currentValue\n            val currentMinIndex = if (currentIndex < currentMinIndex)\
    \ currentMinIndex else currentIndex\n            val currentMaxIndex = if (currentIndex\
    \ > currentMaxIndex) currentMaxIndex else currentIndex\n            val currentMinValue\
    \ = if (currentValue < currentMinValue) currentMinValue else currentValue\n  \
    \          val currentMaxValue = if (currentValue > currentMaxValue) currentMaxValue\
    \ else currentValue\n            val currentMinIndex = if (currentIndex < currentMinIndex)\
    \ currentMinIndex else currentIndex\n            val currentMaxIndex = if (currentIndex\
    \ > currentMaxIndex) currentMaxIndex else currentIndex\n            val currentMinValue\
    \ = if (currentValue < currentMinValue) currentMinValue else currentValue\n  \
    \          val currentMaxValue = if (currentValue > currentMaxValue) currentMaxValue\
    \ else currentValue\n            val currentMinIndex = if (currentIndex < currentMinIndex)\
    \ currentMinIndex else currentIndex\n            val currentMaxIndex = if (currentIndex\
    \ > currentMaxIndex) currentMaxIndex else currentIndex\n            val currentMinValue\
    \ = if (currentValue < currentMinValue) currentMinValue \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzwjggxf.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprzwjggxf.scala:19:22\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzwjggxf.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentMinValue\e[0m = \e[33mif\e[0m (currentValue < currentMinValue)\
    \ currentMinValue \e[33melse\e[0m currentValue\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentMinValue is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentMinValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzwjggxf.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mcurrentMaxValue\e[0m\
    \ = \e[33mif\e[0m (currentValue > currentMaxValue) currentMaxValue \e[33melse\e\
    [0m currentValue\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentMaxValue is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentMaxValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprzwjggxf.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mcurrentMinIndex\e[0m\
    \ = \e[33mif\e[0m (currentIndex < currentMinIndex) currentMinIndex \e[33melse\e\
    [0m currentIndex\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((a,\
    \ b) => a < b ? -1 : a > b ? 1 : 0)\n        val newList2 = newList.map((x, i)\
    \ => if (i == minIndex) x else maxValue)\n        newList2.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5mqpt7b2.scala:19:68 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                             ')' expected, but ':'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mqpt7b2.scala:19:60 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e[0m : \e[35ma\e[0m \e[35m>\e[0m\
    \ \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                       Not found: type\
    \ >\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5mqpt7b2.scala:19:51\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = lst.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a < b ? -\e[31m1\e\
    [0m : \e[35ma\e[0m \e[35m>\e[0m \e[35mb\e[0m \e[35m?\e[0m \e[31m1\e[0m : \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^\e\
    [0m\n\e[31m   |\e[0m                                         value ? is not a\
    \ member of Long\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5mqpt7b2.scala:20:42\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewList2\e[0m = newList.map((\e[36mx\e[0m, \e[36mi\e[0m) => \e[33mif\e\
    [0m (i == minIndex) x \e[33melse\e[0m maxValue)\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n4 errors found\n"
  stdout: ''
  timestamp: 1660009553
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(\
    \ (a,b) => a < b )\n        newList.take(minIndex) ++ newList.drop(maxIndex) ++\
    \ newList.take(minIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppm2wckvj.scala:23)\n\tat Problem.main(tmppm2wckvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_ < _)\n        val reversedList = sortedList.reverse\n     \
    \   reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppsc11fa1.scala:20)\n\tat Problem.main(tmppsc11fa1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => y > x)\n        val newList2 = newList.map((x) => minValue + x)\n    \
    \    val newList3 = newList2.map((x) => maxValue - x)\n        newList3.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdqdbdu6_.scala:25)\n\tat Problem.main(tmpdqdbdu6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex + 1)\n        val minAndMaxValues =\
    \ minValues ++ maxValues\n        val sortedList = minAndMaxValues.sorted\n  \
    \      sortedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwri_ovr.scala:26)\n\tat Problem.main(tmpjwri_ovr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minValueIndex = lst.indexWhere(_ == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex2 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex2 = lst.indexWhere(_ == maxValue)\n \
    \       val minValueIndex3 = lst.indexWhere(_ == minValue)\n        val maxValueIndex3\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex4 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex4 = lst.indexWhere(_ == maxValue)\n \
    \       val minValueIndex5 = lst.indexWhere(_ == minValue)\n        val maxValueIndex5\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex6 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex6 = lst.indexWhere(_ == maxValue)\n \
    \       val minValueIndex7 = lst.indexWhere(_ == minValue)\n        val maxValueIndex7\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex8 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex8 = lst.indexWhere(_ == maxValue)\n \
    \       val minValueIndex9 = lst.indexWhere(_ == minValue)\n        val maxValueIndex9\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex10 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex10 = lst.indexWhere(_ == maxValue)\n\
    \        val minValueIndex11 = lst.indexWhere(_ == minValue)\n        val maxValueIndex11\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex12 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex12 = lst.indexWhere(_ == maxValue)\n\
    \        val minValueIndex13 = lst.indexWhere(_ == minValue)\n        val maxValueIndex13\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex14 = lst.indexWhere(_\
    \ == minValue)\n        val maxValueIndex14 = lst.indexWhere(_ == maxValue)\n\
    \        val minValueIndex15 = lst.indexWhere(_ == minValue)\n        val maxValueIndex15\
    \ = lst.indexWhere(_ == maxValue)\n        val minValueIndex16 = lst.indexWhere(_\
    \ == minValue)\n\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_76id3kk.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009554
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        if (minIndex == maxIndex) {\n            newList\n   \
    \     } else {\n            newList.take(minIndex).reverse.take(maxIndex).reverse.sortWith((x,\
    \ y) => x < y).reverse\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm4zrhzo7.scala:27)\n\tat Problem.main(tmpm4zrhzo7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009557
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val newList = minList ++\
    \ maxList\n        newList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7z85kr30.scala:25)\n\tat Problem.main(tmp7z85kr30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith(_ < _)\n        val reversed = sorted.reverse\n        reversed.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ybcdfre.scala:20)\n\tat Problem.main(tmp9ybcdfre.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsefzb03m.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpsefzb03m.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6melll_.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6melll_.scala:50:25\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex17\e[0m = l\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         Not found: l\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpl6melll_.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxVal\
    \ = lst.max\n        val minVal = lst.min\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxVal)\n        val minIndex = lst.indexWhere(x => x == minVal)\n \
    \       val maxList = lst.take(maxIndex)\n        val minList = lst.drop(minIndex)\n\
    \        val newList = maxList ++ minList\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0uw_hn5r.scala:25)\n\tat Problem.main(tmp0uw_hn5r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minIndex2 = lst.indexWhere(_ == minValue)\n        val maxIndex2 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex3 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex3 = lst.indexWhere(_ == maxValue)\n        val minIndex4 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex4 = lst.indexWhere(_ == maxValue)\n      \
    \  val minIndex5 = lst.indexWhere(_ == minValue)\n        val maxIndex5 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex6 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex6 = lst.indexWhere(_ == maxValue)\n        val minIndex7 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex7 = lst.indexWhere(_ == maxValue)\n      \
    \  val minIndex8 = lst.indexWhere(_ == minValue)\n        val maxIndex8 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex9 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex9 = lst.indexWhere(_ == maxValue)\n        val minIndex10 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex10 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex11 = lst.indexWhere(_ == minValue)\n        val maxIndex11 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex12 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex12 = lst.indexWhere(_ == maxValue)\n        val minIndex13 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex13 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex14 = lst.indexWhere(_ == minValue)\n        val maxIndex14 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex15 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex15 = lst.indexWhere(_ == maxValue)\n        val minIndex16 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex16 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex17 = lst.indexWhere(_ == minValue)\n        val maxIndex17 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex18 = lst.indexWhere(_ == \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnlvce19p.scala:51:44 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mminIndex18\e[0m = lst.indexWhere(_\
    \ == \n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnlvce19p.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps6f0ng8u.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps6f0ng8u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Er"
  stdout: ''
  timestamp: 1659799024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue)\n\
    \        val maxIndex2 = lst.indexOf(maxValue)\n        val minIndex3 = lst.indexOf(minValue)\n\
    \        val maxIndex3 = lst.indexOf(maxValue)\n        val minIndex4 = lst.indexOf(minValue)\n\
    \        val maxIndex4 = lst.indexOf(maxValue)\n        val minIndex5 = lst.indexOf(minValue)\n\
    \        val maxIndex5 = lst.indexOf(maxValue)\n        val minIndex6 = lst.indexOf(minValue)\n\
    \        val maxIndex6 = lst.indexOf(maxValue)\n        val minIndex7 = lst.indexOf(minValue)\n\
    \        val maxIndex7 = lst.indexOf(maxValue)\n        val minIndex8 = lst.indexOf(minValue)\n\
    \        val maxIndex8 = lst.indexOf(maxValue)\n        val minIndex9 = lst.indexOf(minValue)\n\
    \        val maxIndex9 = lst.indexOf(maxValue)\n        val minIndex10 = lst.indexOf(minValue)\n\
    \        val maxIndex10 = lst.indexOf(maxValue)\n        val minIndex11 = lst.indexOf(minValue)\n\
    \        val maxIndex11 = lst.indexOf(maxValue)\n        val minIndex12 = lst.indexOf(minValue)\n\
    \        val maxIndex12 = lst.indexOf(maxValue)\n        val minIndex13 = lst.indexOf(minValue)\n\
    \        val maxIndex13 = lst.indexOf(maxValue)\n        val minIndex14 = lst.indexOf(minValue)\n\
    \        val maxIndex14 = lst.indexOf(maxValue)\n        val minIndex15 = lst.indexOf(minValue)\n\
    \        val maxIndex15 = lst.indexOf(maxValue)\n        val minIndex16 = lst.indexOf(minValue)\n\
    \        val maxIndex16 = lst.indexOf(maxValue)\n        val minIndex17 = lst.indexOf(minValue)\n\
    \        val maxIndex17 = lst.indexOf(maxValue)\n        val minIndex18 = lst.indexOf(minValue)\n\
    \        val maxIndex18 = lst.indexOf(maxValue)\n        val minIndex19 = lst.indexOf(minValue)\n\
    \        val maxIndex19 = lst.indexOf(maxValue)\n        val minIndex20 = lst.indexOf(minValue)\n\
    \        val maxIndex20 = lst.indexOf(maxValue)\n        val minIndex21 = lst.indexOf(minValue)\n\
    \        val maxIndex21 = lst.indexOf(maxValue)\n        val minIndex22 = lst.indexOf(minValue)\n\
    \        val maxIndex22 = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0feqsyjd.scala:60:24 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex22\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0feqsyjd.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer.empty[Long]\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(_ == minValue)\n \
    \       val maxIndex = lst.indexWhere(_ == maxValue)\n        val minIndex2 =\
    \ lst.indexWhere(_ == minValue)\n        val maxIndex2 = lst.indexWhere(_ == maxValue)\n\
    \        val minIndex3 = lst.indexWhere(_ == minValue)\n        val maxIndex3\
    \ = lst.indexWhere(_ == maxValue)\n        val minIndex4 = lst.indexWhere(_ ==\
    \ minValue)\n        val maxIndex4 = lst.indexWhere(_ == maxValue)\n        val\
    \ minIndex5 = lst.indexWhere(_ == minValue)\n        val maxIndex5 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex6 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex6 = lst.indexWhere(_ == maxValue)\n        val minIndex7 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex7 = lst.indexWhere(_ == maxValue)\n      \
    \  val minIndex8 = lst.indexWhere(_ == minValue)\n        val maxIndex8 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex9 = lst.indexWhere(_ == minValue)\n      \
    \  val maxIndex9 = lst.indexWhere(_ == maxValue)\n        val minIndex10 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex10 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex11 = lst.indexWhere(_ == minValue)\n        val maxIndex11 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex12 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex12 = lst.indexWhere(_ == maxValue)\n        val minIndex13 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex13 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex14 = lst.indexWhere(_ == minValue)\n        val maxIndex14 = lst.indexWhere(_\
    \ == maxValue)\n        val minIndex15 = lst.indexWhere(_ == minValue)\n     \
    \   val maxIndex15 = lst.indexWhere(_ == maxValue)\n        val minIndex16 = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex16 = lst.indexWhere(_ == maxValue)\n     \
    \   val minIndex17 = lst.indexWhere(_ == minValue)\n        val maxIndex17 = lst.indexWhere(_\
    \ == maxValue)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jf791f1.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5jf791f1.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val maxListIndex = maxList.indexOf(maxValue)\n\
    \        val maxListSize = maxListIndex + 1\n        val minListSize = minList.length\n\
    \        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxListSize = maxListIndex + 1\n        val maxListSize = maxListIndex\
    \ + 1\n        val maxList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzvkuwkw.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzvkuwkw.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListSize\e[0m = maxListIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzvkuwkw.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListSize\e[0m = maxListIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzvkuwkw.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListSize\e[0m = maxListIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzvkuwkw.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxListSize\e[0m = maxListIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxListSize is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxListSize\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzvkuwkw.scala:28:12\
    \ --"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex : Int = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex : Int = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndexToSwap = minIndex - 1\n        val maxIndexToSwap = maxIndex\
    \ + 1\n        val swappedList = lst.updated(minIndex, lst.updated(minIndexToSwap,\
    \ lst.updated(maxIndexToSwap, lst.updated(maxIndex, lst.updated(maxIndexToSwap,\
    \ minValue))))\n        swappedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8y3t2num.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        swappedList\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8y3t2num.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.sortWith((x, y) => x > y)\n   \
    \     val newList3 = newList2.sortWith((x, y) => x < y)\n        val newList4\
    \ = newList3.sortWith((x, y) => x > y)\n        val newList5 = newList4.sortWith((x,\
    \ y) => x < y)\n        val newList6 = newList5.sortWith((x, y) => x > y)\n  \
    \      val newList7 = newList6.sortWith((x, y) => x < y)\n        val newList8\
    \ = newList7.sortWith((x, y) => x > y)\n        val newList9 = newList8.sortWith((x,\
    \ y) => x < y)\n        val newList10 = newList9.sortWith((x, y) => x > y)\n \
    \       val newList11 = newList10.sortWith((x, y) => x < y)\n        val newList12\
    \ = newList11.sortWith((x, y) => x > y)\n        val newList13 = newList12.sortWith((x,\
    \ y) => x < y)\n        val newList14 = newList13.sortWith((x, y) => x > y)\n\
    \        val newList15 = newList14.sortWith((x, y) => x < y)\n        val newList16\
    \ = newList15.sortWith((x, y) => x > y)\n        val newList17 = newList16.sortWith((x,\
    \ y) => x < y)\n        val newList18 = newList17.sortWith((x, y) => x > y)\n\
    \        val newList19 = newList18.sortWith((x, y) => x < y)\n        val newList20\
    \ = newList19.sortWith((x, y) => x > y)\n        val newList21 = newList20.sortWith((x,\
    \ y) => x < y)\n        val newList22 = newList21.sortWith((x, y) => x > y)\n\
    \        val newList23 = newList22.sortWith((x, y) => x < y)\n        val newList24\
    \ = newList23.sortWith((x, y) => x > y)\n        val newList25 = newList24.sortWith((x,\
    \ y) => x < y)\n        val newList26 = newList25.sortWith((x, y) => x > y)\n\
    \        val newList27 = newList26.sortWith((x, y) => x < y)\n        val newList28\
    \ = newList27.sortWith((x, y) => x > y)\n        val newList29 = newList28.sortWith((x,\
    \ y) => x < y)\n        val newList30 = newList29.sortWith((x, y) => x > \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl1mtasho.scala:48:56 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x > \n\e[31m\e[31m   |\e[0m                     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl1mtasho.scala:49:5 ---------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_ < _)\n        val reversedList = sortedList.reverse\n     \
    \   val reversedSortedList = reversedList.sortWith(_ < _)\n        reversedSortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvt0zcpvo.scala:21)\n\tat Problem.main(tmpvt0zcpvo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex) ++ newList.drop(maxIndex) ++ newList.take(minIndex)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixo8g9s7.scala:23)\n\tat Problem.main(tmpixo8g9s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(x => x)\n        val reversedList = sortedList.reverse\n      \
    \  reversedList.map(x => x.toLong).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0gxdlw7.scala:20)\n\tat Problem.main(tmpg0gxdlw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val maxListIndex = maxList.indexOf(maxValue)\n\
    \        val maxListSize = maxList.length\n        val maxListMin = maxList.take(minListSize)\n\
    \        val maxListMax = maxList.drop(minListSize)\n        val maxListMaxIndex\
    \ = maxListMax.indexOf(maxValue)\n        val maxListMaxSize = maxListMax.length\n\
    \        val maxListMaxMin = maxListMax.take(minListSize)\n        val maxListMaxMax\
    \ = maxListMax.drop(minListSize)\n        val maxListMaxMaxIndex = maxListMaxMax.indexOf(maxValue)\n\
    \        val maxListMaxMaxSize = maxListMaxMax.length\n        val maxListMaxMaxMin\
    \ = maxListMaxMax.take(minListSize)\n        val maxListMaxMaxMax = maxListMaxMax.drop(minListSize)\n\
    \        val maxListMaxMaxMaxIndex = maxListMaxMaxMax.indexOf(maxValue)\n    \
    \    val maxListMaxMaxMaxSize = maxListMaxMaxMax.length\n        val maxListMaxMaxMaxMin\
    \ = maxListMaxMaxMax.take(minListSize)\n        val maxListMaxMaxMaxMax = maxListMaxMaxMax.drop(minListSize)\n\
    \        val maxListMaxMaxMaxMaxIndex = maxListMaxMaxMaxMax.indexOf(maxValue)\n\
    \        val maxListMaxMaxMaxMaxSize = maxListMaxMaxMaxMax.length\n        val\
    \ maxListMaxMaxMaxMaxMin = maxListMaxMaxMaxMax.take(minListSize)\n        val\
    \ maxListMaxMaxMaxMaxMax = maxListMaxMaxMaxMax.drop(minListSize)\n        val\
    \ maxListMaxMaxMaxMaxMaxIndex = maxListMaxMaxMaxMaxMax.indexOf(maxValue)\n   \
    \     val maxListMaxMaxMaxMaxMaxSize = maxListMaxMaxMaxMaxMax.length\n       \
    \ val maxListMaxMaxMaxMaxMaxMin = maxListMaxMaxMaxMaxMax.take(minListSize)\n \
    \       val maxListMaxMaxMaxMaxMaxMax = maxListMaxMaxMaxMaxMax.drop(minListSize)\n\
    \        val maxListMaxMaxMaxMaxMaxMaxIndex = maxListMaxMaxMaxMaxMaxMax.indexOf(maxValue)\n\
    \        val maxListMaxMaxMax\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphiqf6_6e.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqf6_6e.scala:23:38\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListMin\e[0m = maxList.take(minListSize)\n\e[31m\e[31m   |\e[0m       \
    \                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: minListSize\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphiqf6_6e.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListMax\e[0m = maxList.drop(minListSize)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      Not found: minListSize\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqf6_6e.scala:27:44\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListMaxMin\e[0m = maxListMax.take(minListSize)\n\e[31m\e[31m   |\e[0m \
    \                                           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                            Not found: minListSize\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqf6_6e.scala:28:44 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmaxListMaxMax\e[0m = maxListMax.drop(minListSize)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: minListSize\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphiqf6_6e.scala:31:50\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListMaxMaxMin\e[0m = "
  stdout: ''
  timestamp: 1660009567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList ++ minList\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp177ic5fo.scala:25)\n\tat Problem.main(tmp177ic5fo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList ++ minList\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5l0aqqn5.scala:25)\n\tat Problem.main(tmp5l0aqqn5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val listSize\
    \ = lst.size\n        val listMin = lst.min\n        val listMax = lst.max\n \
    \       val listMin2 = listMin + listSize\n        val listMax2 = listMax + listSize\n\
    \        val listMin3 = listMin + listSize + 1\n        val listMax3 = listMax\
    \ + listSize + 1\n        val listMin4 = listMin + listSize + 2\n        val listMax4\
    \ = listMax + listSize + 2\n        val listMin5 = listMin + listSize + 3\n  \
    \      val listMax5 = listMax + listSize + 3\n        val listMin6 = listMin +\
    \ listSize + 4\n        val listMax6 = listMax + listSize + 4\n        val listMin7\
    \ = listMin + listSize + 5\n        val listMax7 = listMax + listSize + 5\n  \
    \      val listMin8 = listMin + listSize + 6\n        val listMax8 = listMax +\
    \ listSize + 6\n        val listMin9 = listMin + listSize + 7\n        val listMax9\
    \ = listMax + listSize + 7\n        val listMin10 = listMin + listSize + 8\n \
    \       val listMax10 = listMax + listSize + 8\n        val listMin11 = listMin\
    \ + listSize + 9\n        val listMax11 = listMax + listSize + 9\n        val\
    \ listMin12 = listMin + listSize + 10\n        val listMax12 = listMax + listSize\
    \ + 10\n        val listMin13 = listMin + listSize + 11\n        val listMax13\
    \ = listMax + listSize + 11\n        val listMin14 = listMin + listSize + 12\n\
    \        val listMax14 = listMax + listSize + 12\n        val listMin15 = listMin\
    \ + listSize + 13\n        val listMax15 = listMax + listSize + 13\n        val\
    \ listMin16 = listMin + listSize + 14\n        val listMax16 = listMax + listSize\
    \ + 14\n        val listMin17 = listMin + listSize + 15\n        val listMax17\
    \ = listMax + listSize + 15\n        val listMin18 = listMin + listSize + 16\n\
    \        val listMax18 = listMax + listSize + 16\n        val listMin19 = listMin\
    \ + listSize + 17\n        val listMax19 = listMax + listSize + 17\n        val\
    \ listMin20 = listMin + list\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_15ei50.scala:54:34 ------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mlistMin20\e[0m = listMin\
    \ + list\n\e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e\
    [31m   |\e[0m                                  Not found: list\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk_15ei50.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValue = lst.take(minIndex).reverse\n        val maxValue = lst.drop(maxIndex).reverse\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex + 1\n\
    \        val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex).reverse\n\
    \        val maxValue = lst.drop(maxIndex).reverse\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValue = lst.take(minIndex).reverse\n        val maxValue = lst.drop(maxIndex).reverse\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex + 1\n\
    \        val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex).reverse\n\
    \        val maxValue = lst.drop(maxIndex).reverse\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValue = lst.take(minIndex).reverse\n        val maxValue = lst.drop(maxIndex).reverse\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex + 1\n\
    \        val maxIndex = maxIndex - 1\n        val minValue = lst.take(minIndex).reverse\n\
    \        val maxValue = lst.drop(maxIndex).reverse\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValue = lst.take(minIndex).reverse\n        val maxValue = lst.drop(maxIndex).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmbmus892.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmbmus892.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmbmus892.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.take(minIndex).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminValue is already defined as \e[33mvalue\e[0m \e[35mminValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmbmus892.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = lst.drop(maxIndex).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmbmus892.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val newList = lst.filterNot(_\
    \ == minVal)\n        val newList2 = lst.filterNot(_ == maxVal)\n        val newList3\
    \ = lst.filterNot(_ == minVal).filterNot(_ == maxVal)\n        val newList4 =\
    \ lst.filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal)\n \
    \       val newList5 = lst.filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_\
    \ == minVal).filterNot(_ == maxVal)\n        val newList6 = lst.filterNot(_ ==\
    \ minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_\
    \ == minVal)\n        val newList7 = lst.filterNot(_ == minVal).filterNot(_ ==\
    \ maxVal).filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_\
    \ == maxVal)\n        val newList8 = lst.filterNot(_ == minVal).filterNot(_ ==\
    \ maxVal).filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_\
    \ == maxVal).filterNot(_ == minVal)\n        val newList9 = lst.filterNot(_ ==\
    \ minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_\
    \ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_ == maxVal)\n\
    \        val newList10 = lst.filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_\
    \ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal).filterNot(_ == maxVal).filterNot(_\
    \ == minVal).filterNot(_ == maxVal).filterNot(_ == minVal)\n        val newList11\
    \ = lst.filterNot(_ == minVal).filterNot(_ == maxVal).filterNo\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9dru95vb.scala:29:74 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewList11\e[0m = lst.filterNot(_\
    \ == minVal).filterNot(_ == maxVal).filterNo\n\e[31m\e[31m   |\e[0m          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue filterNo is not a member of List[Long] - did you mean List[Long].filterNot?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9dru95vb.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_\
    \ == minValue).filterNot(_ == maxValue)\n        val newList2 = newList.filterNot(_\
    \ == minValue)\n        val newList3 = newList2.filterNot(_ == maxValue)\n   \
    \     val newList4 = newList3.filterNot(_ == minValue)\n        val newList5 =\
    \ newList4.filterNot(_ == maxValue)\n        val newList6 = newList5.filterNot(_\
    \ == minValue)\n        val newList7 = newList6.filterNot(_ == maxValue)\n   \
    \     val newList8 = newList7.filterNot(_ == minValue)\n        val newList9 =\
    \ newList8.filterNot(_ == maxValue)\n        val newList10 = newList9.filterNot(_\
    \ == minValue)\n        val newList11 = newList10.filterNot(_ == maxValue)\n \
    \       val newList12 = newList11.filterNot(_ == minValue)\n        val newList13\
    \ = newList12.filterNot(_ == maxValue)\n        val newList14 = newList13.filterNot(_\
    \ == minValue)\n        val newList15 = newList14.filterNot(_ == maxValue)\n \
    \       val newList16 = newList15.filterNot(_ == minValue)\n        val newList17\
    \ = newList16.filterNot(_ == maxValue)\n        val newList18 = newList17.filterNot(_\
    \ == minValue)\n        val newList19 = newList18.filterNot(_ == maxValue)\n \
    \       val newList20 = newList19.filterNot(_ == minValue)\n        val newList21\
    \ = newList20.filterNot(_ == maxValue)\n        val newList22 = newList21.filterNot(_\
    \ == minValue)\n        val newList23 = newList22.filterNot(_ == maxValue)\n \
    \       val newList24 = newList23.filterNot(_ == minValue)\n        val newList25\
    \ = newList24.filterNot(_ == maxValue)\n        val newList26 = newList25.filterNot(_\
    \ == minValue)\n        val newList27 = newList26.filterNot(_ == maxValue)\n \
    \       val newList28 = newList27.filterNot(_ == minValue)\n        val newList29\
    \ = newList28.filterNot(_ == maxValue)\n        val newList30 = new\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8q_fbpvw.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8q_fbpvw.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = lst.sortWith(_ < _)\n        val list2 = list.sortWith(_ > _)\n        val\
    \ list3 = list.sortWith(_ < _)\n        val list4 = list.sortWith(_ > _)\n   \
    \     val list5 = list.sortWith(_ < _)\n        val list6 = list.sortWith(_ >\
    \ _)\n        val list7 = list.sortWith(_ < _)\n        val list8 = list.sortWith(_\
    \ > _)\n        val list9 = list.sortWith(_ < _)\n        val list10 = list.sortWith(_\
    \ > _)\n        val list11 = list.sortWith(_ < _)\n        val list12 = list.sortWith(_\
    \ > _)\n        val list13 = list.sortWith(_ < _)\n        val list14 = list.sortWith(_\
    \ > _)\n        val list15 = list.sortWith(_ < _)\n        val list16 = list.sortWith(_\
    \ > _)\n        val list17 = list.sortWith(_ < _)\n        val list18 = list.sortWith(_\
    \ > _)\n        val list19 = list.sortWith(_ < _)\n        val list20 = list.sortWith(_\
    \ > _)\n        val list21 = list.sortWith(_ < _)\n        val list22 = list.sortWith(_\
    \ > _)\n        val list23 = list.sortWith(_ < _)\n        val list24 = list.sortWith(_\
    \ > _)\n        val list25 = list.sortWith(_ < _)\n        val list26 = list.sortWith(_\
    \ > _)\n        val list27 = list.sortWith(_ < _)\n        val list28 = list.sortWith(_\
    \ > _)\n        val list29 = list.sortWith(_ < _)\n        val list30 = list.sortWith(_\
    \ > _)\n        val list31 = list.sortWith(_ < _)\n        val list32 = list.sortWith(_\
    \ > _)\n        val list33 = list.sortWith(_ < _)\n        val list34 = list.sortWith(_\
    \ > _)\n        val list35 = list.sortWith(_ < _)\n        val list36 = list.sortWith(_\
    \ > _)\n        val list37 = list.sortWith(_ < _)\n        val list38 = list.sortWith(_\
    \ > _)\n        val list39 = list.sortWith(_ < _)\n        val list40 = list.sortWith(_\
    \ > _)\n        val list4\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3qj9jh3n.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3qj9jh3n.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex\
    \ + 1)\n        val newList = minList ++ maxList\n        newList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmb4jvow.scala:25)\n\tat Problem.main(tmpkmb4jvow.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val minList2 = minList.sortWith(_\
    \ < _)\n        val maxList2 = maxList.sortWith(_ > _)\n        val result = minList2\
    \ ++ maxList2\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuww66g6r.scala:27)\n\tat Problem.main(tmpuww66g6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_.compareTo(_) < 0)\n        val reversedList = sortedList.reverse\n\
    \        val reversedListWithFirstElement = reversedList.head :: reversedList\n\
    \        reversedListWithFirstElement\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82vz8m_g.scala:21)\n\tat Problem.main(tmp82vz8m_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val maxVal\
    \ = lst.max\n        val minVal = lst.min\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxVal)\n        val minIndex = lst.indexWhere(x => x == minVal)\n \
    \       val maxList = lst.take(maxIndex)\n        val minList = lst.drop(minIndex)\n\
    \        val newList = maxList ++ minList\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0uw_hn5r.scala:25)\n\tat Problem.main(tmp0uw_hn5r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val midIndex = math.floor((minIndex\
    \ + maxIndex) / 2)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val midIndex\
    \ = lst.indexOf(midValue)\n        val midValue = lst(midIndex)\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp32sumr26.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp32sumr26.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmidIndex\e[0m = lst.indexOf(midValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmidIndex is already defined as \e[33mvalue\e[0m \e[35mmidIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp32sumr26.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmidValue\e[0m = lst(midIndex)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmidValue is\
    \ already defined as \e[33mvalue\e[0m \e[35mmidValue\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp32sumr26.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmidIndex\e[0m = lst.indexOf(midValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmidIndex is already defined as \e[33mvalue\e[0m \e[35mmidIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32sumr26.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mmidValue\e[0m = lst(midIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmidValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmidValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: "
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_ < _)\n        val reversedList = sortedList.reverse\n     \
    \   val reversedList2 = reversedList.sortWith(_ < _)\n        val reversedList3\
    \ = reversedList2.sortWith(_ < _)\n        val reversedList4 = reversedList3.sortWith(_\
    \ < _)\n        reversedList4\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpenypry8u.scala:23)\n\tat Problem.main(tmpenypry8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        val newList2 = newList.sortWith((x, y) => y < x)\n   \
    \     newList2.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_wiq6kji.scala:24)\n\tat Problem.main(tmp_wiq6kji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n        val\
    \ maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue)\n\
    \        val maxIndex2 = lst.indexOf(maxValue)\n        val minIndex3 = lst.indexOf(minValue)\n\
    \        val maxIndex3 = lst.indexOf(maxValue)\n        val minIndex4 = lst.indexOf(minValue)\n\
    \        val maxIndex4 = lst.indexOf(maxValue)\n        val minIndex5 = lst.indexOf(minValue)\n\
    \        val maxIndex5 = lst.indexOf(maxValue)\n        val minIndex6 = lst.indexOf(minValue)\n\
    \        val maxIndex6 = lst.indexOf(maxValue)\n        val minIndex7 = lst.indexOf(minValue)\n\
    \        val maxIndex7 = lst.indexOf(maxValue)\n        val minIndex8 = lst.indexOf(minValue)\n\
    \        val maxIndex8 = lst.indexOf(maxValue)\n        val minIndex9 = lst.indexOf(minValue)\n\
    \        val maxIndex9 = lst.indexOf(maxValue)\n        val minIndex10 = lst.indexOf(minValue)\n\
    \        val maxIndex10 = lst.indexOf(maxValue)\n        val minIndex11 = lst.indexOf(minValue)\n\
    \        val maxIndex11 = lst.indexOf(maxValue)\n        val minIndex12 = lst.indexOf(minValue)\n\
    \        val maxIndex12 = lst.indexOf(maxValue)\n        val minIndex13 = lst.indexOf(minValue)\n\
    \        val maxIndex13 = lst.indexOf(maxValue)\n        val minIndex14 = lst.indexOf(minValue)\n\
    \        val maxIndex14 = lst.indexOf(maxValue)\n        val minIndex15 = lst.indexOf(minValue)\n\
    \        val maxIndex15 = lst.indexOf(maxValue)\n        val minIndex16 = lst.indexOf(minValue)\n\
    \        val maxIndex16 = lst.indexOf(maxValue)\n        val minIndex17 = lst.indexOf(minValue)\n\
    \        val maxIndex17 = lst.indexOf(maxValue)\n        val minIndex18 = lst.indexOf(minValue)\n\
    \        val maxIndex18 = lst.indexOf(maxValue)\n        val minIndex19 = lst.indexOf(minValue)\n\
    \        val maxIndex19 = lst.indexOf(maxValue)\n        val minIndex20 = lst.indexOf(minValue)\n\
    \        val maxIndex20 = lst.indexOf(maxValue)\n        val minIndex21 = lst.indexOf(minValue)\n\
    \        val maxIndex21 = lst.indexOf(maxValue)\n        val minIndex22\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5y9qw51m.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5y9qw51m.scala:15:23\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5y9qw51m.scala:61:5 ---------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.indexOf(maxVal, maxIndex - 1)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex = lst.indexOf(minVal, minIndex - 1)\n        val maxValIndex\
    \ = lst.\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx2pgwnji.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpx2pgwnji.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValIndex\e[0m = lst.indexOf(minVal, minIndex\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValIndex is already defined as \e[33mvalue\e[0m \e[35mminValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx2pgwnji.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValIndex\e[0m = lst.indexOf(maxVal,\
    \ maxIndex - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx2pgwnji.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminValIndex\e[0m = lst.indexOf(minVal,\
    \ minIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValIndex is already defined as \e[33mvalue\e[0m \e[35mminValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx2pgwnji.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValIndex\e[0m = lst.indexOf(maxVal,\
    \ maxIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1)\n        val maxIndex2 = lst.indexOf(maxValue, maxIndex + 1)\n\
    \        val minIndex3 = lst.indexOf(minValue, minIndex + 2)\n        val maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2)\n        val minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3)\n        val maxIndex4 = lst.indexOf(maxValue, maxIndex + 3)\n\
    \        val minIndex5 = lst.indexOf(minValue, minIndex + 4)\n        val maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4)\n        val minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5)\n        val maxIndex6 = lst.indexOf(maxValue, maxIndex + 5)\n\
    \        val minIndex7 = lst.indexOf(minValue, minIndex + 6)\n        val maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6)\n        val minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7)\n        val maxIndex8 = lst.indexOf(maxValue, maxIndex + 7)\n\
    \        val minIndex9 = lst.indexOf(minValue, minIndex + 8)\n        val maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8)\n        val minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9)\n        val maxIndex10 = lst.indexOf(maxValue, maxIndex + 9)\n\
    \        val minIndex11 = lst.indexOf(minValue, minIndex + 10)\n        val maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex + 10)\n        val minIndex12 = lst.indexOf(minValue,\
    \ minIndex + 11)\n        val maxIndex12 = lst.indexOf(maxValue, maxIndex + 11)\n\
    \        val minIndex13 = lst.indexOf(minValue, minIndex + 12)\n        val maxIndex13\
    \ = lst.indexOf(maxValue, maxIndex + 12)\n        val minIndex14 = lst.indexOf(minValue,\
    \ minIndex + 13)\n        val maxIndex14 = lst.indexOf(maxValue, maxIndex + 13)\n\
    \        val minIndex15 = lst.indexOf(minValue, minIndex + 14)\n        val maxIndex15\
    \ = lst.indexOf(maxValue, maxIndex + 14)\n        val minIndex16 = lst.indexOf(minValue,\
    \ minIndex + 15)\n        val maxIndex16 = lst.indexOf(maxValue, maxIndex + 15)\n\
    \        val minIndex17 = lst.indexOf(minValue, minIndex + 16)\n        val maxIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzb5wt7ak.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzb5wt7ak.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.filterNot(_\
    \ == minValue)\n        val newList2 = newList.filterNot(_ == maxValue)\n    \
    \    val newList3 = newList2.filterNot(_ == minValue)\n        val newList4 =\
    \ newList3.filterNot(_ == maxValue)\n        val newList5 = newList4.filterNot(_\
    \ == minValue)\n        val newList6 = newList5.filterNot(_ == maxValue)\n   \
    \     val newList7 = newList6.filterNot(_ == minValue)\n        val newList8 =\
    \ newList7.filterNot(_ == maxValue)\n        val newList9 = newList8.filterNot(_\
    \ == minValue)\n        val newList10 = newList9.filterNot(_ == maxValue)\n  \
    \      val newList11 = newList10.filterNot(_ == minValue)\n        val newList12\
    \ = newList11.filterNot(_ == maxValue)\n        val newList13 = newList12.filterNot(_\
    \ == minValue)\n        val newList14 = newList13.filterNot(_ == maxValue)\n \
    \       val newList15 = newList14.filterNot(_ == minValue)\n        val newList16\
    \ = newList15.filterNot(_ == maxValue)\n        val newList17 = newList16.filterNot(_\
    \ == minValue)\n        val newList18 = newList17.filterNot(_ == maxValue)\n \
    \       val newList19 = newList18.filterNot(_ == minValue)\n        val newList20\
    \ = newList19.filterNot(_ == maxValue)\n        val newList21 = newList20.filterNot(_\
    \ == minValue)\n        val newList22 = newList21.filterNot(_ == maxValue)\n \
    \       val newList23 = newList22.filterNot(_ == minValue)\n        val newList24\
    \ = newList23.filterNot(_ == maxValue)\n        val newList25 = newList24.filterNot(_\
    \ == minValue)\n        val newList26 = newList25.filterNot(_ == maxValue)\n \
    \       val newList27 = newList26.filterNot(_ == minValue)\n        val newList28\
    \ = newList27.filterNot(_ == maxValue)\n        val newList29 = newList28.filterNot(_\
    \ == minValue)\n        val newList30 = newList29.filterNot(_ == max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsffgrkqy.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpsffgrkqy.scala:48:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m48 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnewList30\e[0m = newList29.filterNot(_ == max\n\e[31m\e\
    [31m   |\e[0m                                            ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types Long and (Int, Int) => Int cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsffgrkqy.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => if (x == minValue) -1 else if (y == minValue) 1 else 0)\n        if (newList.size\
    \ < 2) newList\n        else strangeSortList(newList.drop(1)).::(newList.take(1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna90og9r.scala:19:64\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                     ^^\e[0m\n\e[31m   |\e[0m               \
    \                                     Found:    (\e[31m-1\e[0m : Int)\n\e[31m\
    \   |\e[0m                                                    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna90og9r.scala:19:91\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m                                                     Found:    (\e[31m1\e\
    [0m : Int)\n\e[31m   |\e[0m                                                  \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna90og9r.scala:19:98\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minValue)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minValue) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                           \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                                     Found:   \
    \ (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                                      \
    \               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling wi"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex).reverse\n        val newList = minValues\
    \ ++ maxValues ++ minValue.reverse\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjyxnaibz.scala:21:57 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = minValues\
    \ ++ maxValues ++ minValue.reverse\n\e[31m\e[31m   |\e[0m                    \
    \                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                         value reverse is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvxoa0xvj.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvxoa0xvj.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvxoa0xvj.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvxoa0xvj.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.apply(minIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mminValue is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvxoa0xvj.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = lst.apply(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvxoa0xvj.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33m"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val m = lst.min\n\
    \        val n = lst.max\n        val r = lst.sortWith((x, y) => x < y)\n    \
    \    val s = r.sortWith((x, y) => x < y)\n        val t = r.sortWith((x, y) =>\
    \ x > y)\n        val u = r.sortWith((x, y) => x > y)\n        val v = r.sortWith((x,\
    \ y) => x < y)\n        val w = r.sortWith((x, y) => x < y)\n        val x = r.sortWith((x,\
    \ y) => x > y)\n        val y = r.sortWith((x, y) => x > y)\n        val z = r.sortWith((x,\
    \ y) => x > y)\n        val a = r.sortWith((x, y) => x < y)\n        val b = r.sortWith((x,\
    \ y) => x < y)\n        val c = r.sortWith((x, y) => x < y)\n        val d = r.sortWith((x,\
    \ y) => x < y)\n        val e = r.sortWith((x, y) => x < y)\n        val f = r.sortWith((x,\
    \ y) => x < y)\n        val g = r.sortWith((x, y) => x < y)\n        val h = r.sortWith((x,\
    \ y) => x < y)\n        val i = r.sortWith((x, y) => x < y)\n        val j = r.sortWith((x,\
    \ y) => x < y)\n        val k = r.sortWith((x, y) => x < y)\n        val l = r.sortWith((x,\
    \ y) => x < y)\n        val m = r.sortWith((x, y) => x < y)\n        val n = r.sortWith((x,\
    \ y) => x < y)\n        val o = r.sortWith((x, y) => x < y)\n        val p = r.sortWith((x,\
    \ y) => x < y)\n        val q = r.sortWith((x, y) => x < y)\n        val r = r.sortWith((x,\
    \ y) => x < y)\n        val s = r.sortWith((x, y) => x < y)\n        val t = r.sortWith((x,\
    \ y) => x < y)\n        val u = r.sortWith((x, y) => x < y)\n        val v = r.sortWith((x,\
    \ y) => x < y)\n        val w = r.sortWith((x, y) => x < y)\n        val x = r.sortWith((x,\
    \ y) => x < y)\n        val y = r.sortWith((x, y) => x < y)\n        val z = r.sortWith((x,\
    \ y) => x < y)\n        val a = r.sortWith((x, y) => x < y)\n        val b = r.sortWith((x,\
    \ y) => x < y)\n        val c = r.sortWith((x, y) => x < y)\n        val d = r.sortWith((x,\
    \ y) => x < y)\n        val e = r.sortWith((x, y) => x < y)\n        val f = r.sortWith((x,\
    \ y) => x < y)\n        val g = r.sort\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj_g7sjxj.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = r.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_g7sjxj.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = r.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_g7sjxj.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_g7sjxj.scala:44:12 ---------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = r.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj_g7sjxj.scala:45:12 ---------------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = r.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x < y)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mt is already defined "
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val list = new mutable.ListBuffer[Long]()\n\
    \        while (maxIndex >= minIndex) {\n            val mid = (minIndex + maxIndex)\
    \ / 2\n            val value = lst(mid)\n            if (value < minValue) {\n\
    \                minIndex = mid + 1\n            } else if (value > maxValue)\
    \ {\n                maxIndex = mid - 1\n            } else {\n              \
    \  list += value\n                minIndex = mid + 1\n                maxIndex\
    \ = mid - 1\n            }\n        }\n        list += minValue\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp229po075.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp229po075.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                minIndex = mid + \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Reassignment to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp229po075.scala:26:25 -----------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                maxIndex = mid - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp229po075.scala:29:25 -----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                minIndex = mid + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp229po075.scala:30:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                maxIndex\
    \ = mid - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x.toLong < y.toLong)\n        if (minIndex == maxIndex) {\n          \
    \  newList\n        } else {\n            newList.take(minIndex).reverse ++ newList.drop(minIndex\
    \ + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr7u3127s.scala:27)\n\tat Problem.main(tmpr7u3127s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex)\n        val minValuesSorted = minValues.sortWith(_\
    \ < _)\n        val maxValuesSorted = maxValues.sortWith(_ > _)\n        val sortedList\
    \ = minValuesSorted ++ maxValuesSorted\n        sortedList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprbix93ai.scala:27)\n\tat Problem.main(tmprbix93ai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(\
    \ (a,b) => a < b )\n        val newList2 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList3 = newList.sortWith( (a,b) => a < b )\n        val newList4\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList5 = newList.sortWith(\
    \ (a,b) => a < b )\n        val newList6 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList7 = newList.sortWith( (a,b) => a < b )\n        val newList8\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList9 = newList.sortWith(\
    \ (a,b) => a < b )\n        val newList10 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList11 = newList.sortWith( (a,b) => a < b )\n        val newList12\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList13 = newList.sortWith(\
    \ (a,b) => a < b )\n        val newList14 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList15 = newList.sortWith( (a,b) => a < b )\n        val newList16\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList17 = newList.sortWith(\
    \ (a,b) => a < b )\n        val newList18 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList19 = newList.sortWith( (a,b) => a < b )\n        val newList20\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList21 = newList.sortWith(\
    \ (a,b) => a < b )\n        val newList22 = newList.sortWith( (a,b) => a > b )\n\
    \        val newList23 = newList.sortWith( (a,b) => a < b )\n        val newList24\
    \ = newList.sortWith( (a,b) => a > b )\n        val newList25 = newList.sortWith(\
    \ (a,b) => a < b )\n        \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4s176zv.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex)\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val maxValuesAndMinValues = maxValues ++ minValues\n\
    \        val minValuesAndMaxValuesAndMinValues = minValuesAndMaxValues ++ minValuesAndMaxValues\n\
    \        val maxValuesAndMinValuesAndMaxValues = maxValuesAndMinValues ++ maxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValues = minValuesAndMaxValuesAndMinValues\
    \ ++ minValuesAndMaxValuesAndMaxValues\n        val maxValuesAndMinValuesAndMinValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n \
    \       val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues = minValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ ++ minValuesAndMaxValuesAndMinValues\n        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ minValuesAndMaxValuesAndMinValues\n\
    \        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValues\n\
    \        val maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMaxValues\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMin\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39d1dk8c.scala:25:97 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mminValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValues ++ minValuesAndMaxValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: minValuesAndMaxValuesAndMaxValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39d1dk8c.scala:26:60\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValuesAndMinValuesAndMinValuesAndMaxValues\e[0m = maxValuesAndMinValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValues\n\e[31m\e[31m   |\e[0m                \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: maxValuesAndMinValuesAndMinValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39d1dk8c.scala:30:84\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e[0m\
    \ = maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: maxValuesAndMinValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39d1dk8c.scala:33:108\
    \ -----------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAnd"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortWith((a, b) => a < b)\n        val lst3 = lst2.sortWith((a, b) =>\
    \ a < b)\n        val lst4 = lst3.sortWith((a, b) => a < b)\n        val lst5\
    \ = lst4.sortWith((a, b) => a < b)\n        val lst6 = lst5.sortWith((a, b) =>\
    \ a < b)\n        val lst7 = lst6.sortWith((a, b) => a < b)\n        val lst8\
    \ = lst7.sortWith((a, b) => a < b)\n        val lst9 = lst8.sortWith((a, b) =>\
    \ a < b)\n        val lst10 = lst9.sortWith((a, b) => a < b)\n        val lst11\
    \ = lst10.sortWith((a, b) => a < b)\n        val lst12 = lst11.sortWith((a, b)\
    \ => a < b)\n        val lst13 = lst12.sortWith((a, b) => a < b)\n        val\
    \ lst14 = lst13.sortWith((a, b) => a < b)\n        val lst15 = lst14.sortWith((a,\
    \ b) => a < b)\n        val lst16 = lst15.sortWith((a, b) => a < b)\n        val\
    \ lst17 = lst16.sortWith((a, b) => a < b)\n        val lst18 = lst17.sortWith((a,\
    \ b) => a < b)\n        val lst19 = lst18.sortWith((a, b) => a < b)\n        val\
    \ lst20 = lst19.sortWith((a, b) => a < b)\n        val lst21 = lst20.sortWith((a,\
    \ b) => a < b)\n        val lst22 = lst21.sortWith((a, b) => a < b)\n        val\
    \ lst23 = lst22.sortWith((a, b) => a < b)\n        val lst24 = lst23.sortWith((a,\
    \ b) => a < b)\n        val lst25 = lst24.sortWith((a, b) => a < b)\n        val\
    \ lst26 = lst25.sortWith((a, b) => a < b)\n        val lst27 = lst26.sortWith((a,\
    \ b) => a < b)\n        val lst28 = lst27.sortWith((a, b) => a < b)\n        val\
    \ lst29 = lst28.sortWith((a, b) => a < b)\n        val lst30 = lst29.sortWith((a,\
    \ b) => a < b)\n        val lst31 = lst30.sortWith((a, b) => a < b)\n        val\
    \ lst32 = lst31.sortWith((a, b) => a < b)\n        val lst33 = lst32.sortWith((a,\
    \ b) => a < b)\n        val lst34 = lst33.sortWith((a, b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_7k7yxe.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_7k7yxe.scala:47:36\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mlst34\e[0m = lst33.sortWith((a, b\n\e[31m\e[31m   |\e[0m                 \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \  Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf_7k7yxe.scala:47:39\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mlst34\e[0m = lst33.sortWith((a, b\n\e[31m\e[31m   |\e[0m                 \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \        Not found: b\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_7k7yxe.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val tempList = lst.sortWith((x, y) =>\
    \ x.compareTo(y))\n        val newList = tempList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse.toList\n\
    \        newList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiy8s3nwj.scala:19:57\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mtempList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m\
    \   |\e[0m                                              ^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    Int\n\e[31m\
    \   |\e[0m                                              Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex + 1\n        val maxIndex = maxIndex - 1\n  \
    \      val minValues = lst.take(minIndex)\n        val maxValues = lst.drop(maxIndex)\n\
    \        val minValues = minValues.sortBy(x => x)\n        val maxValues = maxValues.sortBy(x\
    \ => x)\n        val newList = minValues ++ maxValues ++ minValues\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc7jw9uyw.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc7jw9uyw.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc7jw9uyw.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValues\e[0m = minValues.sortBy(\e[36mx\e\
    [0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValues is already defined as \e[33mvalue\e[0m \e[35mminValues\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc7jw9uyw.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValues\e[0m = maxValues.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValues is already defined as \e[33mvalue\e[0m \e[35mmaxValues\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n4 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith((x, y) => x < y)\n        val reversedList = sortedList.reverse\n\
    \        val newList = reversedList.take(lst.size)\n        newList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39614c20.scala:21)\n\tat Problem.main(tmp39614c20.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith((x, y) => x < y)\n        val reversed = sorted.reverse\n   \
    \     reversed\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0o481_c.scala:20)\n\tat Problem.main(tmpg0o481_c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex + 1)\n        val newList = minList ++\
    \ maxList ++ minList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapwkoh92.scala:25)\n\tat Problem.main(tmpapwkoh92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minValues = lst.take(minIndex)\n\
    \        val maxValues = lst.drop(maxIndex)\n        val minValuesAndMaxValues\
    \ = minValues ++ maxValues\n        val maxValuesAndMinValues = maxValues ++ minValues\n\
    \        val minValuesAndMaxValuesAndMinValues = minValuesAndMaxValues ++ minValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValues = minValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues ++ minValuesAndMaxValuesAndMinValuesAndMaxValues\n\
    \        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ ++ minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\n        val minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn22bm85v.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn22bm85v.scala:26:145\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e[0m\
    \ = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues ++ maxValuesAndMinValuesAndMaxValues\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    Not found: maxValuesAndMinValuesAndMaxValues\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn22bm85v.scala:28:193 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ ++ maxValuesAndMinValuesAndMaxValuesAndMinValues\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: maxValuesAndMinValuesAndMaxValuesAndMinValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn22bm85v.scala:30:241\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mminValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValues\e\
    [0m = minValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValuesAndMaxValuesAndMinValues\
    \ +"
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val maxValueIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minValueIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxValueIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minValueIndex = lst.indexWhere(x => x == minValue)\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsefzb03m.scala:48:11 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpsefzb03m.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValueIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValueIndex is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsefzb03m.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val min = lst.min\n        val max\
    \ = lst.max\n        val minIndex = lst.indexOf(min)\n        val maxIndex = lst.indexOf(max)\n\
    \        val minValue = lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex).reverse.take(minIndex).reverse\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvi98niiv.scala:61:40 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mmaxValueIndex\e[0m = lst.indexOf(\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi98niiv.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi98niiv.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi98niiv.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValueIndex\e[0m = lst.indexOf(minValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValueIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvi98niiv.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValueIndex\e[0m = lst.indexOf(maxValue)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex2\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex2 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex3 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n        val minIndex4\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex4 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex5 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n        val minIndex6\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex6 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex7 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n        val minIndex8\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex8 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex9 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n        val minIndex10\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex10 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex11 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n        val minIndex12\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex12 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex13 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n        val minIndex14\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex14 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex15 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk663ubix.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk663ubix.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb9h_vmm8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9h_vmm8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9h_vmm8.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == minValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9h_vmm8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = lst.indexWhere(\e[36mx\e\
    [0m => x == maxValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb9h_vmm8.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = lst.ind"
  stdout: ''
  timestamp: 1660009588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = 0\n      \
    \  val maxIndex = lst.size - 1\n        val tempList = lst.sortWith((x, y) =>\
    \ x.compareTo(y) < 0)\n        val newList = tempList.take(minIndex).zip(tempList.drop(minIndex)).map(x\
    \ => x._1 + x._2)\n        newList.zip(tempList.drop(maxIndex)).map(x => x._1\
    \ + x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4dhcld95.scala:24)\n\tat Problem.main(tmp4dhcld95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstIndex2 = lst.indexOf(minLst,\
    \ minLstIndex + 1)\n        val maxLstIndex2 = lst.indexOf(maxLst, maxLstIndex\
    \ + 1)\n        val minLstIndex3 = lst.indexOf(minLst, minLstIndex2 + 1)\n   \
    \     val maxLstIndex3 = lst.indexOf(maxLst, maxLstIndex2 + 1)\n        val minLstIndex4\
    \ = lst.indexOf(minLst, minLstIndex3 + 1)\n        val maxLstIndex4 = lst.indexOf(maxLst,\
    \ maxLstIndex3 + 1)\n        val minLstIndex5 = lst.indexOf(minLst, minLstIndex4\
    \ + 1)\n        val maxLstIndex5 = lst.indexOf(maxLst, maxLstIndex4 + 1)\n   \
    \     val minLstIndex6 = lst.indexOf(minLst, minLstIndex5 + 1)\n        val maxLstIndex6\
    \ = lst.indexOf(maxLst, maxLstIndex5 + 1)\n        val minLstIndex7 = lst.indexOf(minLst,\
    \ minLstIndex6 + 1)\n        val maxLstIndex7 = lst.indexOf(maxLst, maxLstIndex6\
    \ + 1)\n        val minLstIndex8 = lst.indexOf(minLst, minLstIndex7 + 1)\n   \
    \     val maxLstIndex8 = lst.indexOf(maxLst, maxLstIndex7 + 1)\n        val minLstIndex9\
    \ = lst.indexOf(minLst, minLstIndex8 + 1)\n        val maxLstIndex9 = lst.indexOf(maxLst,\
    \ maxLstIndex8 + 1)\n        val minLstIndex10 = lst.indexOf(minLst, minLstIndex9\
    \ + 1)\n        val maxLstIndex10 = lst.indexOf(maxLst, maxLstIndex9 + 1)\n  \
    \      val minLstIndex11 = lst.indexOf(minLst, minLstIndex10 + 1)\n        val\
    \ maxLstIndex11 = lst.indexOf(maxLst, maxLstIndex10 + 1)\n        val minLstIndex12\
    \ = lst.indexOf(minLst, minLstIndex11 + 1)\n        val maxLstIndex12 = lst.indexOf(maxLst,\
    \ maxLstIndex11 + 1)\n        val minLstIndex13 = lst.indexOf(minLst, minLstIndex12\
    \ + 1)\n        val maxLstIndex13 = l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmng7w85h.scala:42:28 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex13\e[0m = l\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: l\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpmng7w85h.scala:43:5 ---------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith((x, y) => x < y)\n        val reversedList = sortedList.reverse\n\
    \        reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfqsdrx39.scala:20)\n\tat Problem.main(tmpfqsdrx39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxIndex = lst.indexWhere(x => x == maxVal)\n \
    \       val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val maxValIndex = lst.indexWhere(x => x == maxVal)\n\
    \        val minValIndex = lst.indexWhere(x => x == minVal)\n        val maxValIndex\
    \ = lst.indexWhere(x => x == maxVal)\n        val minValIndex = lst.indexWhere(x\
    \ => x == minVal)\n        val max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4viql6k2.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4viql6k2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminValIndex\e[0m = lst.indexWhere(\e[36mx\e[0m => x == minVal)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminValIndex is already defined as \e[33mvalue\e[0m \e[35mminValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4viql6k2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxValIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxVal)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4viql6k2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminValIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == minVal)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminValIndex is already defined as \e[33mvalue\e[0m \e[35mminValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4viql6k2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxValIndex\e[0m = lst.indexWhere(\e\
    [36mx\e[0m => x == maxVal)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValIndex is already defined as \e[33mvalue\e[0m \e[35mmaxValIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex).last\n       \
    \ val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.take(minIndex)\n        val maxValue\
    \ = lst.drop(maxIndex).last\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex).last\n       \
    \ val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.take(minIndex)\n        val maxValue\
    \ = lst.drop(maxIndex).last\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex).last\n       \
    \ val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.take(minIndex)\n        val maxValue\
    \ = lst.drop(maxIndex).last\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.take(minIndex)\n        val maxValue = lst.drop(maxIndex).last\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgzz22isq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgzz22isq.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgzz22isq.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.take(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgzz22isq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = lst.drop(maxIndex).last\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgzz22isq.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mminIndex\e[0m = lst.indexWhere(\e[36mx\e[0m => x == minValue)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mminIndex is already defined as"
  stdout: ''
  timestamp: 1660009589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_.compareTo(_) < 0)\n        sortedList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowlpwk_p.scala:19)\n\tat Problem.main(tmpowlpwk_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val newList\
    \ = mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val maxValue\
    \ = lst.max\n        newList += minValue\n        newList += maxValue\n      \
    \  newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += minValue\n        newList += maxValue\n       \
    \ newList += minValue\n        newList += maxValue\n        newList += minValue\n\
    \        newList += maxValue\n        newList += minValue\n        newList +=\
    \ maxValue\n        newList += \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0_nlwpl2.scala:98:18 ---------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m        newList += \n\e[31m\e[31m   |\e[0m          \
    \        ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_nlwpl2.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnewList\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(x => x)\n        val reversedList = sortedList.reverse\n      \
    \  reversedList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpguv09gu4.scala:20)\n\tat Problem.main(tmpguv09gu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex.max(maxIndex)\n        val maxIndex = maxIndex.min(minIndex)\n\
    \        val minValue = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.min(minIndex)\n        val minValue = lst.apply(minIndex)\n\
    \        val maxValue = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex.max(maxIndex)\n        val maxIndex = maxIndex.min(minIndex)\n\
    \        val minValue = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.min(minIndex)\n        val minValue = lst.apply(minIndex)\n\
    \        val maxValue = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex.max(maxIndex)\n        val maxIndex = maxIndex.min(minIndex)\n\
    \        val minValue = lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n\
    \        val minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex = minIndex.max(maxIndex)\n\
    \        val maxIndex = maxIndex.min(minIndex)\n        val minValue = lst.apply(minIndex)\n\
    \        val maxValue = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex = minIndex.max(maxIndex)\n        val maxIndex = maxIndex.min(minIndex)\n\
    \        val minValue = lst.apply(minIndex)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpf92laq5e.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpf92laq5e.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex.max(maxIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mminIndex is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf92laq5e.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxIndex\e[0m = maxIndex.min(minIndex)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpf92laq5e.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.apply(minIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf92laq5e.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxValue\e[0m = lst.apply(maxIndex)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxValue is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.take(maxIndex)\n        val minListWithMax = minList\
    \ ++ maxList\n        val maxListWithMin = maxList ++ minList\n        val maxListWithMinAndMax\
    \ = minListWithMax ++ maxListWithMin\n        val maxListWithMinAndMaxAndMin =\
    \ minListWithMaxAndMin ++ maxListWithMinAndMax\n        val maxListWithMinAndMaxAndMinAndMax\
    \ = minListWithMaxAndMinAndMax ++ maxListWithMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMax\n   \
    \     val maxListWithMinAndMaxAndMinAndMaxAndMinAndMax = minListWithMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMax\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\n        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax ++ maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\n\
    \        val maxListWithMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = minListWithMaxAndMinAndMaxAndMinAndMaxAndMinAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8r84wvf.scala:24:41 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxListWithMinAndMaxAndMin\e\
    [0m = minListWithMaxAndMin ++ maxListWithMinAndMax\n\e[31m\e[31m   |\e[0m    \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                         Not found: minListWithMaxAndMin\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8r84wvf.scala:25:47\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMax\e[0m = minListWithMaxAndMinAndMax ++ maxListWithMinAndMaxAndMin\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: minListWithMaxAndMinAndMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8r84wvf.scala:26:53\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMaxAndMin\e[0m = minListWithMaxAndMinAndMaxAndMin\
    \ ++ maxListWithMinAndMaxAndMinAndMax\n\e[31m\e[31m   |\e[0m                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             Not found: minListWithMaxAndMinAndMaxAndMin\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8r84wvf.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxListWithMinAndMaxAndMinAndMaxAndMinAndMax\e[0m = minListWithMaxAndMinAndMaxAndMinAndMax\
    \ ++ maxListWithMinAndMaxAndMinAndMaxAndMin\n\e[31m\e[31m   |\e[0m           \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: minListWithMaxAndMinAndMaxAndMinAndMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available whe"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val newList = lst.sortWith((x,\
    \ y) => if (x == minVal) -1 else if (y == minVal) 1 else 0)\n        newList.take(minIndex)\
    \ ++ newList.drop(maxIndex) ++ newList.take(minIndex)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeditxy0v.scala:19:62\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal)\
    \ -\e[31m1\e[0m \e[33melse\e[0m \e[33mif\e[0m (y == minVal) \e[31m1\e[0m \e[33melse\e\
    [0m \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \                         ^^\e[0m\n\e[31m   |\e[0m                           \
    \                         Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m   \
    \                                                 Required: Boolean\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeditxy0v.scala:19:87 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (y == minVal) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m\
    \                                                     Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeditxy0v.scala:19:94 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m (x == minVal) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (y == minVal) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                    Found:    (\e[31m0\e[0m : Int)\n\e[31m  \
    \ |\e[0m                                                     Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors"
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith(_ < _)\n        val reversed = sorted.reverse\n        reversed.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ybcdfre.scala:20)\n\tat Problem.main(tmp9ybcdfre.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex+1)\n        val newList = minList ++\
    \ maxList ++ minList\n        newList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_9i02q4v.scala:25)\n\tat Problem.main(tmp_9i02q4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minVal\
    \ = lst.min\n        val maxVal = lst.max\n        val minIndex = lst.indexOf(minVal)\n\
    \        val maxIndex = lst.indexOf(maxVal)\n        val minValIndex = lst.indexOf(minVal,\
    \ minIndex + 1)\n        val maxValIndex = lst.indexOf(maxVal, maxIndex + 1)\n\
    \        val minValIndex2 = lst.indexOf(minVal, minIndex + 2)\n        val maxValIndex2\
    \ = lst.indexOf(maxVal, maxIndex + 2)\n        val minValIndex3 = lst.indexOf(minVal,\
    \ minIndex + 3)\n        val maxValIndex3 = lst.indexOf(maxVal, maxIndex + 3)\n\
    \        val minValIndex4 = lst.indexOf(minVal, minIndex + 4)\n        val maxValIndex4\
    \ = lst.indexOf(maxVal, maxIndex + 4)\n        val minValIndex5 = lst.indexOf(minVal,\
    \ minIndex + 5)\n        val maxValIndex5 = lst.indexOf(maxVal, maxIndex + 5)\n\
    \        val minValIndex6 = lst.indexOf(minVal, minIndex + 6)\n        val maxValIndex6\
    \ = lst.indexOf(maxVal, maxIndex + 6)\n        val minValIndex7 = lst.indexOf(minVal,\
    \ minIndex + 7)\n        val maxValIndex7 = lst.indexOf(maxVal, maxIndex + 7)\n\
    \        val minValIndex8 = lst.indexOf(minVal, minIndex + 8)\n        val maxValIndex8\
    \ = lst.indexOf(maxVal, maxIndex + 8)\n        val minValIndex9 = lst.indexOf(minVal,\
    \ minIndex + 9)\n        val maxValIndex9 = lst.indexOf(maxVal, maxIndex + 9)\n\
    \        val minValIndex10 = lst.indexOf(minVal, minIndex + 10)\n        val maxValIndex10\
    \ = lst.indexOf(maxVal, maxIndex + 10)\n        val minValIndex11 = lst.indexOf(minVal,\
    \ minIndex + 11)\n        val maxValIndex11 = lst.indexOf(maxVal, maxIndex + 11)\n\
    \        val minValIndex12 = lst.indexOf(minVal, minIndex + 12)\n        val maxValIndex12\
    \ = lst.indexOf(maxVal, maxIndex + 12)\n        val minValIndex13 = lst.indexOf(minVal,\
    \ minIndex + 13)\n        val maxValIndex13 = lst.indexOf(maxVal, maxIndex + 13)\n\
    \        val minValIndex14 = lst.indexOf(minVal, minIndex + 14)\n        val maxValIndex14\
    \ = lst.indexOf(maxVal, max\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1n2se5y7.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1n2se5y7.scala:46:48\
    \ -----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxValIndex14\e[0m = lst.indexOf(maxVal, max\n\e[31m\e[31m   |\e[0m\
    \                                                ^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ expected type Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1n2se5y7.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith(\
    \ (a,b) => if (a < b) -1 else if (a > b) 1 else 0 )\n        newList.take(minIndex).reverse\
    \ ++ newList.drop(maxIndex+1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilmcmfsa.scala:19:56\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e\
    [0m = lst.sortWith( (\e[36ma\e[0m,\e[36mb\e[0m) => \e[33mif\e[0m (a < b) -\e[31m1\e\
    [0m \e[33melse\e[0m \e[33mif\e[0m (a > b) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m )\n\e[31m\e[31m   |\e[0m                                                 \
    \       ^^\e[0m\n\e[31m   |\e[0m                                             \
    \       Found:    (\e[31m-1\e[0m : Int)\n\e[31m   |\e[0m                     \
    \                               Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpilmcmfsa.scala:19:75 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\
    \ (\e[36ma\e[0m,\e[36mb\e[0m) => \e[33mif\e[0m (a < b) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (a > b) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m )\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \           Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                  \
    \                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpilmcmfsa.scala:19:82 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = lst.sortWith(\
    \ (\e[36ma\e[0m,\e[36mb\e[0m) => \e[33mif\e[0m (a < b) -\e[31m1\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (a > b) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m )\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \                  Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m           \
    \                                          Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortBy(x => x)\n        val reversedList = sortedList.reverse\n      \
    \  val reversedList2 = reversedList.sortBy(x => x)\n        val reversedList3\
    \ = reversedList2.sortBy(x => x)\n        val reversedList4 = reversedList3.sortBy(x\
    \ => x)\n        val reversedList5 = reversedList4.sortBy(x => x)\n        val\
    \ reversedList6 = reversedList5.sortBy(x => x)\n        val reversedList7 = reversedList6.sortBy(x\
    \ => x)\n        val reversedList8 = reversedList7.sortBy(x => x)\n        val\
    \ reversedList9 = reversedList8.sortBy(x => x)\n        val reversedList10 = reversedList9.sortBy(x\
    \ => x)\n        val reversedList11 = reversedList10.sortBy(x => x)\n        val\
    \ reversedList12 = reversedList11.sortBy(x => x)\n        val reversedList13 =\
    \ reversedList12.sortBy(x => x)\n        val reversedList14 = reversedList13.sortBy(x\
    \ => x)\n        val reversedList15 = reversedList14.sortBy(x => x)\n        val\
    \ reversedList16 = reversedList15.sortBy(x => x)\n        val reversedList17 =\
    \ reversedList16.sortBy(x => x)\n        val reversedList18 = reversedList17.sortBy(x\
    \ => x)\n        val reversedList19 = reversedList18.sortBy(x => x)\n        val\
    \ reversedList20 = reversedList19.sortBy(x => x)\n        val reversedList21 =\
    \ reversedList20.sortBy(x => x)\n        val reversedList22 = reversedList21.sortBy(x\
    \ => x)\n        val reversedList23 = reversedList22.sortBy(x => x)\n        val\
    \ reversedList24 = reversedList23.sortBy(x => x)\n        val reversedList25 =\
    \ reversedList24.sortBy(x => x)\n        val reversedList26 = reversedList25.sortBy(x\
    \ => x)\n        val reversedList27 = reversedList26.sortBy(x => x)\n        val\
    \ reversedList28 = reversedList27.sortBy(x => x)\n        val reversedList29 =\
    \ reversedList28.sortBy(x => x)\n        val reversedList30 = reversedList29.sortBy(x\
    \ => x)\n        val reversedList31 = reversedList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgcvnrgup.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        if (newList.size < lst.size) {\n            newList\n\
    \        } else {\n            newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp77e6xzt9.scala:27)\n\tat Problem.main(tmp77e6xzt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex +\
    \ 1)\n        val minList2 = minList.map(_ + minValue)\n        val maxList2 =\
    \ maxList.map(_ - maxValue)\n        val minList3 = minList2.map(_ - minValue)\n\
    \        val maxList3 = maxList2.map(_ + minValue)\n        val minList4 = minList3.map(_\
    \ + minValue)\n        val maxList4 = maxList3.map(_ - maxValue)\n        val\
    \ minList5 = minList4.map(_ - minValue)\n        val maxList5 = maxList4.map(_\
    \ + minValue)\n        val minList6 = minList5.map(_ + minValue)\n        val\
    \ maxList6 = maxList5.map(_ - maxValue)\n        val minList7 = minList6.map(_\
    \ - minValue)\n        val maxList7 = maxList6.map(_ + minValue)\n        val\
    \ minList8 = minList7.map(_ + minValue)\n        val maxList8 = maxList7.map(_\
    \ - maxValue)\n        val minList9 = minList8.map(_ - minValue)\n        val\
    \ maxList9 = maxList8.map(_ + minValue)\n        val minList10 = minList9.map(_\
    \ + minValue)\n        val maxList10 = maxList9.map(_ - maxValue)\n        val\
    \ minList11 = minList10.map(_ - minValue)\n        val maxList11 = maxList10.map(_\
    \ + minValue)\n        val minList12 = minList11.map(_ + minValue)\n        val\
    \ maxList12 = maxList11.map(_ - maxValue)\n        val minList13 = minList12.map(_\
    \ - minValue)\n        val maxList13 = maxList12.map(_ + minValue)\n        val\
    \ minList14 = minList13.map(_ + minValue)\n        val maxList14 = maxList13.map(_\
    \ - maxValue)\n        val minList15 = minList14.map(_ - minValue)\n        val\
    \ maxList15 = maxList14.map(_ + minValue)\n        val minList16 = minList15.map(_\
    \ + minValue)\n        val maxList16 = maxList15.map(_ - maxValue)\n        val\
    \ minList17 = minList16.map(_ - minValue)\n        val maxList17 = max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlc1_84w.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val min = lst.min\n        val max\
    \ = lst.max\n        val len = lst.size\n        for(i <- 0 until len){\n    \
    \        val curr = lst.apply(i)\n            if(curr < min){\n              \
    \  list.add(min)\n            }\n            else if(curr > max){\n          \
    \      list.add(max)\n            }\n            else{\n                list.add(curr)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30tbcqro.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val m = lst.min\n\
    \        val n = lst.max\n        val r = lst.sortBy(x => if (x < m) x else m)\n\
    \        val s = lst.sortBy(x => if (x > n) x else n)\n        val t = lst.sortBy(x\
    \ => if (x < m) x else m)\n        val u = lst.sortBy(x => if (x > n) x else n)\n\
    \        (r ++ s ++ t ++ u).distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrx9ixs_.scala:24)\n\tat Problem.main(tmphrx9ixs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted\
    \ = lst.sortWith(_.compareTo(_) < 0)\n        val result = new mutable.ListBuffer[Long]()\n\
    \        result.+=(sorted.head)\n        sorted.tail.foreach(x => result.+=(x.toLong))\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a1d5fmr.scala:16:25 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sortedList\
    \ = lst.sortWith(_ < _)\n        val reversedList = sortedList.reverse\n     \
    \   val reversedSortedList = reversedList.sortWith(_ < _)\n        val reversedSortedList2\
    \ = reversedSortedList.reverse\n        val reversedSortedList3 = reversedSortedList2.sortWith(_\
    \ < _)\n        val reversedSortedList4 = reversedSortedList3.sortWith(_ < _)\n\
    \        val reversedSortedList5 = reversedSortedList4.sortWith(_ < _)\n     \
    \   val reversedSortedList6 = reversedSortedList5.sortWith(_ < _)\n        val\
    \ reversedSortedList7 = reversedSortedList6.sortWith(_ < _)\n        val reversedSortedList8\
    \ = reversedSortedList7.sortWith(_ < _)\n        val reversedSortedList9 = reversedSortedList8.sortWith(_\
    \ < _)\n        val reversedSortedList10 = reversedSortedList9.sortWith(_ < _)\n\
    \        val reversedSortedList11 = reversedSortedList10.sortWith(_ < _)\n   \
    \     val reversedSortedList12 = reversedSortedList11.sortWith(_ < _)\n      \
    \  val reversedSortedList13 = reversedSortedList12.sortWith(_ < _)\n        val\
    \ reversedSortedList14 = reversedSortedList13.sortWith(_ < _)\n        val reversedSortedList15\
    \ = reversedSortedList14.sortWith(_ < _)\n        val reversedSortedList16 = reversedSortedList15.sortWith(_\
    \ < _)\n        val reversedSortedList17 = reversedSortedList16.sortWith(_ < _)\n\
    \        val reversedSortedList18 = reversedSortedList17.sortWith(_ < _)\n   \
    \     val reversedSortedList19 = reversedSortedList18.sortWith(_ < _)\n      \
    \  val reversedSortedList20 = reversedSortedList19.sortWith(_ < _)\n        val\
    \ reversedSortedList21 = reversedSortedList20.sortWith(_ < _)\n        val reversedSortedList22\
    \ = reversedSortedList21.sortWith(_ < _)\n        val reversedSortedList23 = reversedSortedList22.sortWith(_\
    \ < _)\n        val reversedSortedList24 = reversedSortedList23.sortWith(_ < _)\n\
    \        val reversedSortedList25 = reversedSortedList24.sortWith(_ < _)\n   \
    \     val reversedSortedList26 = reversedSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdzub7n7l.scala:42:35 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mreversedSortedList26\e[0m\
    \ = reversedSorted\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: reversedSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzub7n7l.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minLst\
    \ = lst.min\n        val maxLst = lst.max\n        val minLstIndex = lst.indexOf(minLst)\n\
    \        val maxLstIndex = lst.indexOf(maxLst)\n        val minLstValue = lst.apply(minLstIndex)\n\
    \        val maxLstValue = lst.apply(maxLstIndex)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = lst.indexOf(maxLstValue)\n        val minLstIndex =\
    \ lst.indexOf(minLstValue)\n        val maxLstIndex = lst.indexOf(maxLstValue)\n\
    \        val minLstIndex = lst.indexOf(minLstValue)\n        val maxLstIndex =\
    \ lst.indexOf(maxLstValue)\n        val minLstIndex = lst.indexOf(minLstValue)\n\
    \        val maxLstIndex = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_v9els6a.scala:52:25 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp_v9els6a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mvalue\e[0m \e[35mmaxLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mminLstIndex\e[0m = lst.indexOf(minLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mminLstIndex is already defined as \e[33mvalue\e[0m \e[35mminLstIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_v9els6a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxLstIndex\e[0m = lst.indexOf(maxLstValue)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxLstIndex is already defined as \e[33mva"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex2 = lst.indexWhere(x => x == minValue)\n        val maxIndex2\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex3 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex3 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex4 = lst.indexWhere(x => x == minValue)\n        val maxIndex4\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex5 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex5 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex6 = lst.indexWhere(x => x == minValue)\n        val maxIndex6\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex7 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex7 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex8 = lst.indexWhere(x => x == minValue)\n        val maxIndex8\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex9 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex9 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex10 = lst.indexWhere(x => x == minValue)\n        val maxIndex10\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex11 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex11 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex12 = lst.indexWhere(x => x == minValue)\n        val maxIndex12\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex13 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex13 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex14 = lst.indexWhere(x => x == minValue)\n        val maxIndex14\
    \ = lst.indexWhere(x => x == maxValue)\n        val minIndex15 = lst.indexWhere(x\
    \ => x == minValue)\n        val maxIndex15 = lst.indexWhere(x => x == maxValue)\n\
    \        val minIndex16 = lst.indexWhere(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))));\n\
    \    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
    \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong,\
    \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1944kfz2.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1944kfz2.scala:47:40\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mminIndex16\e[0m = lst.indexWhere(x \n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1944kfz2.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val minValue = lst.min\n        val\
    \ maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex = minIndex + 1\n        val maxIndex\
    \ = maxIndex - 1\n        val minValue = lst.apply(minIndex)\n        val maxValue\
    \ = lst.apply(maxIndex)\n        val minIndex = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minIndex\
    \ = minIndex + 1\n        val maxIndex = maxIndex - 1\n        val minValue =\
    \ lst.apply(minIndex)\n        val maxValue = lst.apply(maxIndex)\n        val\
    \ minIndex = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpot17whly.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpot17whly.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndex\e[0m = minIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot17whly.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndex\e[0m = maxIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot17whly.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mminValue\e[0m = lst.apply(minIndex)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mminValue is already defined as \e[33mvalue\e[0m \e[35mminValue\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpot17whly.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxValue\e[0m = lst.apply(maxIndex)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxValue\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpot17whly.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33m"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val lst2\
    \ = lst.sortBy(x => x)\n        val lst3 = lst2.sortBy(x => x)\n        val lst4\
    \ = lst3.sortBy(x => x)\n        val lst5 = lst4.sortBy(x => x)\n        val lst6\
    \ = lst5.sortBy(x => x)\n        val lst7 = lst6.sortBy(x => x)\n        val lst8\
    \ = lst7.sortBy(x => x)\n        val lst9 = lst8.sortBy(x => x)\n        val lst10\
    \ = lst9.sortBy(x => x)\n        val lst11 = lst10.sortBy(x => x)\n        val\
    \ lst12 = lst11.sortBy(x => x)\n        val lst13 = lst12.sortBy(x => x)\n   \
    \     val lst14 = lst13.sortBy(x => x)\n        val lst15 = lst14.sortBy(x =>\
    \ x)\n        val lst16 = lst15.sortBy(x => x)\n        val lst17 = lst16.sortBy(x\
    \ => x)\n        val lst18 = lst17.sortBy(x => x)\n        val lst19 = lst18.sortBy(x\
    \ => x)\n        val lst20 = lst19.sortBy(x => x)\n        val lst21 = lst20.sortBy(x\
    \ => x)\n        val lst22 = lst21.sortBy(x => x)\n        val lst23 = lst22.sortBy(x\
    \ => x)\n        val lst24 = lst23.sortBy(x => x)\n        val lst25 = lst24.sortBy(x\
    \ => x)\n        val lst26 = lst25.sortBy(x => x)\n        val lst27 = lst26.sortBy(x\
    \ => x)\n        val lst28 = lst27.sortBy(x => x)\n        val lst29 = lst28.sortBy(x\
    \ => x)\n        val lst30 = lst29.sortBy(x => x)\n        val lst31 = lst30.sortBy(x\
    \ => x)\n        val lst32 = lst31.sortBy(x => x)\n        val lst33 = lst32.sortBy(x\
    \ => x)\n        val lst34 = lst33.sortBy(x => x)\n        val lst35 = lst34.sortBy(x\
    \ => x)\n        val lst36 = lst35.sortBy(x => x)\n        val lst37 = lst36.sortBy(x\
    \ => x)\n        val lst38 = lst37.sortBy(x => x)\n        val lst39 = lst38.sortBy(x\
    \ => x)\n        val lst40 = lst39.sortBy(x => x)\n        val lst41 = lst40.sortBy(x\
    \ => x)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmddrolcf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex)\n        val newList = minList ++ maxList\
    \ ++ minList\n        newList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4kcnz36p.scala:25)\n\tat Problem.main(tmp4kcnz36p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val m = lst.min\n\
    \        val n = lst.max\n        val r = lst.filter(_ < m)\n        val s = lst.filter(_\
    \ > n)\n        val t = lst.filter(_ < n)\n        val u = lst.filter(_ > m)\n\
    \        val v = lst.filter(_ < m)\n        val w = lst.filter(_ > n)\n      \
    \  val x = lst.filter(_ < n)\n        val y = lst.filter(_ > m)\n        val z\
    \ = lst.filter(_ < m)\n        val a = lst.filter(_ > n)\n        val b = lst.filter(_\
    \ < m)\n        val c = lst.filter(_ > n)\n        val d = lst.filter(_ < m)\n\
    \        val e = lst.filter(_ > n)\n        val f = lst.filter(_ < m)\n      \
    \  val g = lst.filter(_ > n)\n        val h = lst.filter(_ < m)\n        val i\
    \ = lst.filter(_ > n)\n        val j = lst.filter(_ < m)\n        val k = lst.filter(_\
    \ > n)\n        val l = lst.filter(_ < m)\n        val m = lst.filter(_ > n)\n\
    \        val n = lst.filter(_ < m)\n        val o = lst.filter(_ > n)\n      \
    \  val p = lst.filter(_ < m)\n        val q = lst.filter(_ > n)\n        val r\
    \ = lst.filter(_ < m)\n        val s = lst.filter(_ > n)\n        val t = lst.filter(_\
    \ < m)\n        val u = lst.filter(_ > n)\n        val v = lst.filter(_ < m)\n\
    \        val w = lst.filter(_ > n)\n        val x = lst.filter(_ < n)\n      \
    \  val y = lst.filter(_ > m)\n        val z = lst.filter(_ < m)\n        val a\
    \ = lst.filter(_ > n)\n        val b = lst.filter(_ < m)\n        val c = lst.filter(_\
    \ > n)\n        val d = lst.filter(_ < m)\n        val e = lst.filter(_ > n)\n\
    \        val f = lst.filter(_ < m)\n        val g = lst.filter(_ > n)\n      \
    \  val h = lst.filter(_ < m)\n        val i = lst.filter(_ > n)\n        val j\
    \ = lst.filter(_ < m)\n        val k = lst.filter(_ > n)\n        val l = lst.filter(_\
    \ < m)\n        val m = lst.filter(_ > n)\n        val n = lst.filter(_ < m)\n\
    \        val o = lst.filter(_ > \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 2l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong,\
    \ 9l.toLong, 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp30gpg0p1.scala:66:30 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36mo\e[0m = lst.filter(_ >\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30gpg0p1.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = lst.filter(_ > n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp30gpg0p1.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = lst.filter(_ < m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already\
    \ defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30gpg0p1.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = lst.filter(_ <\
    \ m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30gpg0p1.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36ms\e[0m = lst.filter(_ > n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp30gpg0p1.sca"
  stdout: ''
  timestamp: 1660009597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given list of integers, return list in strange order.\n    // Strange\
    \ sorting, is when you start with the minimum value,\n    // then maximum of the\
    \ remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n\
    \    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexWhere(_\
    \ == minValue)\n        val maxIndex = lst.indexWhere(_ == maxValue)\n       \
    \ val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val newList = minList ++ maxList\n        newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong,\
    \ 7l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong,\
    \ 6l.toLong, 8l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 5l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 9l.toLong, 5l.toLong, 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
    \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong,\
    \ 8l.toLong, 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n\
    \    assert(strangeSortList((List[Long](0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
    \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
    \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpblovwviq.scala:25)\n\tat Problem.main(tmpblovwviq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009597
