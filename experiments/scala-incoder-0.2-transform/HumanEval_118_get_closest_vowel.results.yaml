language: scala
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpol27pdm7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount2 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount3 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount4\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount5 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount6 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount7 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount8 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount9\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount10 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount11 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount12 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount13 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount14 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount15\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount16 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount17 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount18 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount19 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount23 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount24 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount25 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount26 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount27\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount28 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount29 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount30 = word.filter(x => vowels.contains(x)).size\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:22:60\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:23:60\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorIterator = vowelsSetIterator.iterator\n        val consonantsSetIteratorIterator\
    \ = consonantsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize\
    \ = vowelsSetIteratorIterator.size\n        val consonantsSetIteratorIteratorSize\
    \ = consonantsSetIteratorIterator.size\n        val vowelsSetIteratorIteratorIterator\
    \ = vowelsSetIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIterator\
    \ = consonantsSetIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9vzrxt8h.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vzrxt8h.scala:44:88\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: consonantsSetIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vzrxt8h.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7g11jg2u.scala:25:834 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"u\n\e[31m\e[31m   |\e[0m                       \
    \              "
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwzsm2w2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdwzsm2w2.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdwzsm2w2.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    No"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\"))\n    \
    \    val vowelsSet3 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"))\n\
    \        val vowelsSet4 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"\
    y\",\"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"y\",\"u\",\"r\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\"))\n        val vowelsSet7\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"\
    d\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\"))\n        val vowelsSet9 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\"))\n    \
    \    val vowelsSet10 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"\
    ,\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\"))\n        val vowelsSet11 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"\
    m\"))\n        val vowelsSet12 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"m\",\"v\"))\n        val\
    \ vowelsSet13 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"\
    r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"m\",\"v\",\"w\"))\n        val vowelsSet14\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"\
    d\",\"g\",\"c\",\"b\",\"m\",\"v\",\"w\",\"y\"))\n        val vowelsSet15 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6d0vco5o.scala:34:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet15\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e\
    [0m,\e[31m\"y\"\e[0m,\e[31m\"u\"\e[0m,\"r\n\e[31m\e[31m   |\e[0m             \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp6d0vco5o.scala:36:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6d0vco5o.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6d0vco5o.scala:36:4 -------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: rdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"u\")\n        val consonantsIndex = word.lastIndexWhere(_.toLowerCase ==\
    \ \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase ==\
    \ \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase ==\
    \ \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase ==\
    \ \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"p\" || _.toLowerCase ==\
    \ \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase ==\
    \ \"t\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase ==\
    \ \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\")\n        val vowelsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase == \"u\")\n        val consonantsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb361jdzl.scala:27:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \"\n\e[31m\e[31m   |\e[0m                                               \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb361jdzl.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase == \e[31m\"a\"\e\
    [0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"i\"\e[0m\
    \ || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb361jdzl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \e[31m\"b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"d\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e\
    [31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"\
    j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e\
    [0m || _.toLowerCase == \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m\
    \ || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase\
    \ == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e\
    [31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.tail\n        val vowelsAfter = vowels.toList\n        val consonantsBefore\
    \ = consonants.toList.tail\n        val consonantsAfter = consonants.toList\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeLength\e[0m\
    \ = vowelsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBeforeLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfterLength\e[0m =\
    \ vowelsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAfterLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBeforeLength\e\
    [0m = consonantsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBeforeLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfterLength\e\
    [0m = consonantsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAfterLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebaxj969.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpebaxj969.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpebaxj969.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcon"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppwcctd7b.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppwcctd7b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonants\
    \ = word.filter(x => !vowels.contains(x))\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount2 = vowelsCount - consonantsCount\n        val consonantsCount2\
    \ = consonants.length - vowelsCount\n        val vowelsCount3 = consonantsCount\
    \ - consonantsCount2\n        val consonantsCount3 = consonants.length - vowelsCount2\n\
    \        val vowelsCount4 = consonantsCount3 - consonantsCount2\n        val consonantsCount4\
    \ = consonants.length - vowelsCount3\n        val vowelsCount5 = consonantsCount4\
    \ - consonantsCount3\n        val consonantsCount5 = consonants.length - vowelsCount4\n\
    \        val vowelsCount6 = consonantsCount5 - consonantsCount4\n        val consonantsCount6\
    \ = consonants.length - vowelsCount5\n        val vowelsCount7 = consonantsCount6\
    \ - consonantsCount5\n        val consonantsCount7 = consonants.length - vowelsCount6\n\
    \        val vowelsCount8 = consonantsCount7 - consonantsCount6\n        val consonantsCount8\
    \ = consonants.length - vowelsCount7\n        val vowelsCount9 = consonantsCount8\
    \ - consonantsCount7\n        val consonantsCount9 = consonants.length - vowelsCount8\n\
    \        val vowelsCount10 = consonantsCount9 - consonantsCount8\n        val\
    \ consonantsCount10 = consonants.length - vowelsCount9\n        val vowelsCount11\
    \ = consonantsCount10 - consonantsCount9\n        val consonantsCount11 = consonants.length\
    \ - vowelsCount10\n        val vowelsCount12 = consonantsCount11 - consonantsCount10\n\
    \        val consonantsCount12 = consonants.length - vowelsCount11\n        val\
    \ vowelsCount13 = consonantsCount12 - consonantsCount11\n        val consonantsCount13\
    \ = consonants.length - vowelsCount12\n        val vowelsCount14 = consonantsCount13\
    \ - \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj39dqf9g.scala:48:47 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount14\e[0m = consonantsCount13\
    \ - \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj39dqf9g.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpj39dqf9g.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m              \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj39dqf9g.scala:21:59 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = word.filter(\e\
    [36mx\e[0m => !vowels.contains(x))\n\e[31m\e[31m   |\e[0m                    \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                      Found:    (x : Char)\n\e[31m   |\e[0m \
    \                                                   Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1y_eu4pc.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1y_eu4pc.scala:23:54 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did you mean\
    \ vowelsSetIterator.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1y_eu4pc.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(vowel =>\
    \ word.count(vowel))\n        val vowelsSum = vowelsCount.sum\n        val vowelsSum2\
    \ = vowelsCount.map(vowel => vowel * vowel).sum\n        val vowelsSum3 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel).sum\n        val vowelsSum4 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel).sum\n        val vowelsSum5 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum6 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum7\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n\
    \        val vowelsSum8 = vowelsCount.map(vowel => vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel).sum\n        val vowelsSum9 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n\
    \        val vowelsSum10 = vowelsCount.map(vowel => vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum11\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum12 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel).sum\n        val vowelsSum13 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel).sum\n        val vowelsSum14 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum15\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl3igfbpj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl3igfbpj.scala:20:57 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.map(\e[36mvowel\e[0m =>\
    \ word.count(vowel))\n\e[31m\e[31m   |\e[0m                                  \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                    Found:    (vowel : String)\n\e[31m   |\e[0m             \
    \                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3igfbpj.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).max\n\
    \        val vowelsIndex = vowelsIndex.getOrElse(\"\")\n        vowels(vowelsIndex.indexOf(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp37ks2d2e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp37ks2d2e.scala:23:27 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        vowels(vowelsIndex.indexOf(\e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value indexOf is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsLeft = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        var vowelsRight = Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        var vowelsCount = 0\n        var vowelsCountLeft = 0\n     \
    \   var vowelsCountRight = 0\n        var vowelsCountLeftRight = 0\n        var\
    \ vowelsCountLeftLeft = 0\n        var vowelsCountLeftRightLeft = 0\n        var\
    \ vowelsCountRightLeft = 0\n        var vowelsCountRightLeftLeft = 0\n       \
    \ var vowelsCountRightRightLeft = 0\n        var vowelsCountRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightLeft = 0\n        var vowelsCountRightRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightLeftLeft = 0\n        var vowelsCountRightRightRightRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeft = 0\n    \
    \    var vowelsCountRightRightRightRightRightRightLeftLeftLeft = 0\n        var\
    \ vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\
    \        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n  \
    \      var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n    \
    \    var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n      \
    \  var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n        var\
    \ vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\
    \        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n  \
    \      var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaewurl04.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpajl2q0w7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5kciyq48.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kciyq48.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kciyq48.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kciyq48.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5kciyq48.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = word.filter(x => !vowels.contains(x))\n        val consonantsCount\
    \ = consonants.size\n        val vowelsCount = consonantsCount - vowelsCount\n\
    \        val vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n\
    \        val vowelsIndex = vowelsIndex.orElse(vowelsCount)\n        val vowelsIndex\
    \ = vowelsIndex - 1\n        val vowel = vowels(vowelsIndex)\n        vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplcadhrn4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonantsCount\
    \ - vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplcadhrn4.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.orElse(vowelsCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplcadhrn4.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmplcadhrn4.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m                \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                          Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplcadhrn4.scala:21:59 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e["
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsList = vowelsAndConsonants.toList\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConson\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpny96vuew.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpny96vuew.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpny96vuew.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpny96vuew.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsList.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonants\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tz0xjpn.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4tz0xjpn.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4tz0xjpn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4tz0xjpn.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4tz0xjpn.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorPrevNextPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorNextPrevNextPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevNext = vowelsSetIteratorPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevNextPrevPrev = vowelsSetIteratorPrevPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevNext = vowelsSetIteratorPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevNextPrevPrevPrev = vowelsSetIteratorPrevPrevNextPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNextPrevPrevNext = vowelsSetIteratorPrevPrevNextPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrevPrev = vowelsSetIteratorPrevNextPrevPrevPrevPrev.prev\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbtj_oudo.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbtj_oudo.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpbtj_oudo.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbtj_oudo.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbtj_oudo.scala:36:48 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevNextNextPrev\e\
    [0m = vowelsSetIteratorNextPrevNextPrev.prev\n\e[31m\e[31m   |\e[0m          \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: vowelsSetIteratorNextPrevNextPrev\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbtj_oudo.scala:37:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mv"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != \"y\")\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet5 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet6 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet7 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet9 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet10 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet11 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet12 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet13 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet14 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet15 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet17 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet18 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet19 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet20 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet21 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet22 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet23 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet24 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet25 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet26 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet27 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet29 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet30 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet31 = vowelsSet.filter(_\
    \ != \"y\")\n        val vowelsSet32 = vowelsSet.filter(_ != \"y\")\n        val\
    \ vowelsSet33 = vowelsSet.filter(_ != \"y\")\n        val vowelsSet34 = vowelsSet.filter(_\
    \ != \"y\")\n        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0dmdg9s.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = mutable.Set[Char]()\n\
    \        var vowelsCount = mutable.Map[Char, Int]()\n        var vowelsCount2\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount3 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount4 = mutable.Map[Char, Int]()\n        var vowelsCount5\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount6 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount7 = mutable.Map[Char, Int]()\n        var vowelsCount8\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount9 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount10 = mutable.Map[Char, Int]()\n        var vowelsCount11\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount12 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount13 = mutable.Map[Char, Int]()\n        var vowelsCount14\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount15 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount16 = mutable.Map[Char, Int]()\n        var vowelsCount17\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount18 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount19 = mutable.Map[Char, Int]()\n        var vowelsCount20\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount21 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount22 = mutable.Map[Char, Int]()\n        var vowelsCount23\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount24 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount25 = mutable.Map[Char, Int]()\n        var vowelsCount26\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount27 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount28 = mutable.Map[Char, Int]()\n        var vowelsCount29\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount30 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount31 = mutable.Map[Char, Int]()\n        var vowelsCount32\
    \ = mutable.Map[Char, Int]()\n        var vowelsCount33 = mutable.Map[Char, Int]()\n\
    \        var vowelsCount34 = mutable.Map[Char, Int]()\n        var vowelsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ap_fdry.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ap_fdry.scala:19:21\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowels\e[0m = mutable.Set[\e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ap_fdry.scala:20:26\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4ap_fdry.scala:21:27 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ap_fdry.scala:22:27\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount3\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4ap_fdry.scala:23:27 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660009459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.count(vowels)\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.toInt\n        val vowelsCount = vowelsCount.toInt\n\
    \        val vowelsCount = vowelsCount.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp53iu8ixi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp53iu8ixi.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp53iu8ixi.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp53iu8ixi.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp53iu8ixi.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined "
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelFound\
    \ = false\n        var vowel = \"\"\n        var consonantIndex = 0\n        var\
    \ consonantFound = false\n        var consonant = \"\"\n        var vowelFoundIndex\
    \ = -1\n        var consonantFoundIndex = -1\n        var vowelFoundConsonantIndex\
    \ = -1\n        var vowelFoundConsonantIndex2 = -1\n        var vowelFoundConsonantIndex3\
    \ = -1\n        var vowelFoundConsonantIndex4 = -1\n        var vowelFoundConsonantIndex5\
    \ = -1\n        var vowelFoundConsonantIndex6 = -1\n        var vowelFoundConsonantIndex7\
    \ = -1\n        var vowelFoundConsonantIndex8 = -1\n        var vowelFoundConsonantIndex9\
    \ = -1\n        var vowelFoundConsonantIndex10 = -1\n        var vowelFoundConsonantIndex11\
    \ = -1\n        var vowelFoundConsonantIndex12 = -1\n        var vowelFoundConsonantIndex13\
    \ = -1\n        var vowelFoundConsonantIndex14 = -1\n        var vowelFoundConsonantIndex15\
    \ = -1\n        var vowelFoundConsonantIndex16 = -1\n        var vowelFoundConsonantIndex17\
    \ = -1\n        var vowelFoundConsonantIndex18 = -1\n        var vowelFoundConsonantIndex19\
    \ = -1\n        var vowelFoundConsonantIndex20 = -1\n        var vowelFoundConsonantIndex21\
    \ = -1\n        var vowelFoundConsonantIndex22 = -1\n        var vowelFoundConsonantIndex23\
    \ = -1\n        var vowelFoundConsonantIndex24 = -1\n        var vowelFoundConsonantIndex25\
    \ = -1\n        var vowelFoundConsonantIndex26 = -1\n        var vowelFoundConsonantIndex27\
    \ = -1\n        var vowelFoundConsonantIndex28 = -1\n        var vowelFoundConsonantIndex29\
    \ = -1\n        var vowelFoundConsonantIndex30 = -1\n        var vowelFoundConsonantIndex31\
    \ = -1\n        var vowelFoundConsonantIndex32 = -1\n        var vowelFoundConsonantIndex33\
    \ = -1\n        var vowelFoundConsonantIndex34 = -1\n        var vowelFoundConsonantIndex35\
    \ = -1\n        var vowelFoundConsonantIndex36 = -1\n        var vowelFoundConsonantIndex37\
    \ = -1\n        var vowelFoundConsonantIndex38 = -1\n        var vowelFoundConsonantIndex39\
    \ = -1\n        var vowelFoundConsonantIndex40 = -1\n        var vowelFoundConsonantIndex41\
    \ = -1\n        var vowelFoundConsonantIndex42 = -1\n        var vowelFoundConsonantIndex43\
    \ = -1\n        var vowelFoundConsonantIndex44 = -1\n        var vowelFound\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptbd_o8k1.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptbd_o8k1.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.count(vowels)\n        val consonants = Set(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = word.count(consonants)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonants\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsyge95bk.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsyge95bk.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsyge95bk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpsyge95bk.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsyge95bk.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"u\").reverse\n \
    \       val vowelsSet5 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\")\n   \
    \     val vowelsSet6 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").reverse\n\
    \        val vowelsSet7 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").reverse\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\")\n       \
    \ val vowelsSet10 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_ !=\
    \ \"e\").filter(_ != \"i\").reverse\n        val vowelsSet11 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_\
    \ != \"o\")\n        val vowelsSet12 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_ != \"o\").reverse\n  \
    \      val vowelsSet13 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\")\n       \
    \ val vowelsSet14 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_ !=\
    \ \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\").reverse\n  \
    \      val vowelsSet15 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\").filter(_\
    \ != \"a\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ !=\
    \ \"u\").filter(_ != \"a\").reverse\n        val vowelsSet17 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_\
    \ != \"o\").filter(_ != \"u\").filter(_ != \"a\").filter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != \e[31m\"u\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:25:69 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.filter(_\
    \ != \e[31m\"u\"\e[0m).filter(_ != \e[31m\"a\"\e[0m).reverse\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean\
    \ Set[String].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:27:86\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet8\e[0m = vowelsSet.filter(_ != \e[31m\"u\"\e[0m).filter(_ != \e[31m\"\
    a\"\e[0m).filter(_ != \e[31m\"e\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean\
    \ Set[String].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:29:104\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet10\e[0m = vowelsSet.filter(_ != \e[31m\"u\"\e[0m).filter(_ != \e\
    [31m\"a\"\e[0m).filter(_ != \e[31m\"e\"\e[0m).filter(_ != \e[31m\"i\"\e[0m).reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a memb"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n        var lastVowel\
    \ = \"\"\n        var lastConsonant = \"\"\n        var lastConsonantIndex = 0\n\
    \        var consonantIndex = 0\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val wordLength\
    \ = word.length\n        val wordChars = word.chars\n        val wordCharsLength\
    \ = wordChars.length\n        val vowelsIndex = 0\n        val consonantsIndex\
    \ = 0\n        val consonantsCount = consonants.size\n        val vowelsCount\
    \ = vowels.size\n        val vowelsIndex = 0\n        val consonantsIndex = 0\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowels.size\n\
    \        val vowelsIndex = 0\n        val consonantsIndex = 0\n        val consonantsCount\
    \ = consonants.size\n        val vowelsCount = vowels.size\n        val vowelsIndex\
    \ = 0\n        val consonantsIndex = 0\n        val consonantsCount = consonants.size\n\
    \        val vowelsCount = vowels.size\n        val vowelsIndex = 0\n        val\
    \ consonantsIndex = 0\n        val consonantsCount = consonants.size\n       \
    \ val vowelsCount = vowels.size\n        val vowelsIndex = 0\n        val consonantsIndex\
    \ = 0\n        val consonantsCount = consonants.size\n        val vowelsCount\
    \ = vowels.size\n        val vowelsIndex = 0\n        val consonantsIndex = 0\n\
    \        val consonantsCount = consonants.size\n        val vowelsCount = vowels.size\n\
    \        val vowelsIndex = 0\n        val consonantsIndex = 0\n        val consonantsCount\
    \ = consonants.size\n        val vowelsCount = vowels.size\n        val vowelsIndex\
    \ = 0\n        val consonantsIndex = 0\n        val consonantsCount = consonants.size\n\
    \        val vowelsCount = vowels.size\n        val vowelsIndex = 0\n        val\
    \ consonantsIndex = 0\n        val consonantsCount = consonants.size\n       \
    \ val vowelsCount = vowels.size\n        val vowelsIndex = 0\n        val consonantsIndex\
    \ = 0\n        val consonantsCount = consonants.size\n        val vowelsCount\
    \ = vowels.size\n\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjw4_sp2.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjw4_sp2.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjw4_sp2.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgjw4_sp2.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantsIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantsIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgjw4_sp2.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsCount\e[0m = consonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toSet.diff(consonants)\n        val vowelsAfter = consonants.toSet.diff(vowels)\n\
    \        val vowelsBetween = vowelsBefore.union(vowelsAfter)\n        val vowelsBetweenReverse\
    \ = vowelsAfter.union(vowelsBefore)\n        val vowelsBetweenReverseReverse =\
    \ vowelsBefore.union(vowelsAfter.reverse)\n        val vowelsBetweenReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse)\n        val vowelsBetweenReverseReverseReverseReverse\
    \ = vowelsBefore.union(vowelsAfter.reverse.reverse)\n        val vowelsBetweenReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse)\n        val vowelsBetweenReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse)\n        val vowelsBetweenReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse)\n        val\
    \ vowelsBetweenReverseReverseReverseReverseReverseReverse = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverse =\
    \ vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \        val vowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptgaaef3v.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptgaaef3v.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsBetweenReverseReverseReverseReverseReverseReverse\e[0m = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetweenReverseReverseReverseReverseReverseReverse is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsBetweenReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptgaaef3v.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenReverseReverseReverseReverseReverseReverse\e\
    [0m = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBetweenReverseReverseReverseReverseReverseReverse is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsBetweenReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptgaaef3v.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = vowelsAfter.union(vowelsBefore.reverse.reverse.reverse.reverse.reverse.reverse.reverse)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsEnd = word.lastIndexWhere(vowels.contains, vowelsIndex + 1)\n\
    \        val consonantsEnd = word.lastIndexWhere(consonants.contains, consonantsIndex\
    \ + 1)\n        val vowelsStart = word.lastIndexWhere(vowels.contains, vowelsIndex\
    \ - 1)\n        val consonantsStart = word.lastIndexWhere(consonants.contains,\
    \ consonantsIndex - 1)\n        val vowelsMiddle = word.lastIndexWhere(vowels.contains,\
    \ vowelsIndex - vowelsEnd + 1)\n        val consonantsMiddle = word.lastIndexWhere(consonants.contains,\
    \ consonantsIndex - consonantsEnd + 1)\n        val vowelsRight = word.lastIndexWhere(vowels.contains,\
    \ vowelsIndex + vowelsCount)\n        val consonantsRight = word.lastIndexWhere(consonants.contains,\
    \ consonantsIndex + consonantsCount)\n        val vowelsLeft = word.lastIndexWhere(vowels.contains,\
    \ vowelsIndex - vowelsCount)\n        val consonantsLeft = word.lastIndexWhere(consonants.contains,\
    \ consonantsIndex - consonantsCount)\n        if (vowelsIndex == -1 || consonantsIndex\
    \ == -1) {\n            return \"\"\n        }\n        if (vowelsIndex == vowelsEnd\
    \ || consonantsIndex == consonantsEnd) {\n            return \"\"\n        }\n\
    \        if (vowelsIndex == vowelsStart || consonantsIndex == consonantsStart)\
    \ {\n            return \"\"\n        }\n        if (vowelsIndex == vowelsMiddle\
    \ || consonantsIndex == consonantsMiddle) {\n            return \"\"\n       \
    \ }\n        if (vowelsIndex == vowelsRight || consonantsIndex == consonantsRight)\
    \ {\n            return \"\"\n        }\n        if (vowelsIndex == vowelsLeft\
    \ || consonantsIndex == consonantsLeft) {\n            return \"\"\n        }\n\
    \        if (vowelsIndex < vowelsStart && consonantsIndex < consonantsStart) {\n\
    \            return \"\"\n        }\n        if (\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptivhu7un.scala:56:12 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mif\e[0m (\n\e[31m\e[31m   |\e[0m      \
    \      ^\e[0m\n\e[31m   |\e[0m            expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptivhu7un.scala:23:46\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           Found:    (elem : Char)\n\e[31m   |\e[0m         \
    \                                     Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptivhu7un.scala:24:50 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (elem\
    \ : Char)\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptivhu7un.scala:25:44\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsEnd\e\
    [0m = word.lastIndexWhere(vowels.contains, vowelsIndex + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                            ^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    (elem : Char)\n\e[31m\
    \   |\e[0m                                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptivhu7un.scala:26:48 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsEnd\e[0m "
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.previous\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.previous\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.previous\n     \
    \   val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.previous\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp61sn6ywt.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.previous\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp61sn6ywt.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value previous is not a member of Iterator[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp61sn6ywt.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp61sn6ywt.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp61sn6ywt.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.previous\n\e[31m\e[31m   |\e[0m\
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1660009462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = word.count(vowels)\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonant\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30jet_ry.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp30jet_ry.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp30jet_ry.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp30jet_ry.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp30jet_ry.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount = word.count(_ == 'a')\n        val vowelsCount = word.count(_\
    \ == 'e')\n        val vowelsCount = word.count(_ == 'i')\n        val vowelsCount\
    \ = word.count(_ == 'o')\n        val vowelsCount = word.count(_ == 'u')\n   \
    \     val vowelsCount = word.count(_ == 'A')\n        val vowelsCount = word.count(_\
    \ == 'E')\n        val vowelsCount = word.count(_ == 'I')\n        val vowelsCount\
    \ = word.count(_ == 'O')\n        val vowelsCount = word.count(_ == 'U')\n   \
    \     val vowelsCount = word.count(_ == 'a')\n        val vowelsCount = word.count(_\
    \ == 'e')\n        val vowelsCount = word.count(_ == 'i')\n        val vowelsCount\
    \ = word.count(_ == 'o')\n        val vowelsCount = word.count(_ == 'u')\n   \
    \     val vowelsCount = word.count(_ == 'A')\n        val vowelsCount = word.count(_\
    \ == 'E')\n        val vowelsCount = word.count(_ == 'I')\n        val vowelsCount\
    \ = word.count(_ == 'O')\n        val vowelsCount = word.count(_ == 'U')\n   \
    \     val vowelsCount = word.count(_ == 'a')\n        val vowelsCount = word.count(_\
    \ == 'e')\n        val vowelsCount = word.count(_ == 'i')\n        val vowelsCount\
    \ = word.count(_ == 'o')\n        val vowelsCount = word.count(_ == 'u')\n   \
    \     val vowelsCount = word.count(_ == 'A')\n        val vowelsCount = word.count(_\
    \ == 'E')\n        val vowelsCount = word.count(_ == 'I')\n        val vowelsCount\
    \ = word.count(_ == 'O')\n        val vowelsCount = word.count(_ == 'U')\n   \
    \     val vowelsCount = word.count(_ == 'a')\n        val vowelsCount = word.count(_\
    \ == 'e')\n        val vowelsCount = word.count(_ == 'i')\n        val vowelsCount\
    \ = word.count(_ == 'o')\n        val vowelsCount = word.count(_ == 'u')\n   \
    \     val vowelsCount = word.count(_ == 'A')\n        val vowelsCount = word.count(_\
    \ == 'E')\n        val vowelsCount = word.count(_ == 'I')\n        val vowelsCount\
    \ = word.count(_ == 'O')\n        val vowelsCount = word.count(_ == 'U')\n   \
    \     val vowelsCount = word.count(_ == 'a')\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfex0mf2y.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(_\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfex0mf2y.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(_ == \e\
    [31m'e'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfex0mf2y.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(_ == \e\
    [31m'i'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfex0mf2y.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(_ == \e\
    [31m'o'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfex0mf2y.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(_ == \e\
    [31m'u'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        var currentVowel = \"\"\n        var\
    \ currentVowelIndex = 0\n        var currentVowelCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentVowel = \"\"\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentVowel = \"\"\n        var\
    \ currentVowelIndex = 0\n        var currentVowelCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentVowel = \"\"\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentVowel = \"\"\n        var\
    \ currentVowelIndex = 0\n        var currentVowelCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentVowel = \"\"\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsg6mfxsu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowel\e[0m = \e[31m\"\
    \"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcurrentVowel is already defined as \e[33mvariable\e[0m \e[35mcurrentVowel\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpsg6mfxsu.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsg6mfxsu.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelCount\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowelCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsg6mfxsu.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowel is\
    \ already defined as \e[33mvariable\e[0m \e[35mcurrentVowel\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsg6mfxsu.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentVowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvariable\e[0m\
    \ \e[35"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowelsSet.toSet;\n        val vowelsSet3 = vowelsSet2.toSet;\n\
    \        val vowelsSet4 = vowelsSet3.toSet;\n        val vowelsSet5 = vowelsSet4.toSet;\n\
    \        val vowelsSet6 = vowelsSet5.toSet;\n        val vowelsSet7 = vowelsSet6.toSet;\n\
    \        val vowelsSet8 = vowelsSet7.toSet;\n        val vowelsSet9 = vowelsSet8.toSet;\n\
    \        val vowelsSet10 = vowelsSet9.toSet;\n        val vowelsSet11 = vowelsSet10.toSet;\n\
    \        val vowelsSet12 = vowelsSet11.toSet;\n        val vowelsSet13 = vowelsSet12.toSet;\n\
    \        val vowelsSet14 = vowelsSet13.toSet;\n        val vowelsSet15 = vowelsSet14.toSet;\n\
    \        val vowelsSet16 = vowelsSet15.toSet;\n        val vowelsSet17 = vowelsSet16.toSet;\n\
    \        val vowelsSet18 = vowelsSet17.toSet;\n        val vowelsSet19 = vowelsSet18.toSet;\n\
    \        val vowelsSet20 = vowelsSet19.toSet;\n        val vowelsSet21 = vowelsSet20.toSet;\n\
    \        val vowelsSet22 = vowelsSet21.toSet;\n        val vowelsSet23 = vowelsSet22.toSet;\n\
    \        val vowelsSet24 = vowelsSet23.toSet;\n        val vowelsSet25 = vowelsSet24.toSet;\n\
    \        val vowelsSet26 = vowelsSet25.toSet;\n        val vowelsSet27 = vowelsSet26.toSet;\n\
    \        val vowelsSet28 = vowelsSet27.toSet;\n        val vowelsSet29 = vowelsSet28.toSet;\n\
    \        val vowelsSet30 = vowelsSet29.toSet;\n        val vowelsSet31 = vowelsSet30.toSet;\n\
    \        val vowelsSet32 = vowelsSet31.toSet;\n        val vowelsSet33 = vowelsSet32.toSet;\n\
    \        val vowelsSet34 = vowelsSet33.toSet;\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd76qd3oq.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsLeft = word.lastIndexOfAny(vowels)\n        val consonantsRight\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsRight = word.lastIndexOfAny(vowels)\n\
    \        val consonantsLeft = word.lastIndexOfAny(consonants)\n        val vowelsLeft\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsRight = word.lastIndexOfAny(consonants)\n\
    \        val vowelsRight = word.lastIndexOfAny(vowels)\n        val consonantsLeft\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsLeft = word.lastIndexOfAny(vowels)\n\
    \        val consonantsRight = word.lastIndexOfAny(consonants)\n        val vowelsRight\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsLeft = word.lastIndexOfAny(consonants)\n\
    \        val vowelsLeft = word.lastIndexOfAny(vowels)\n        val consonantsRight\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsRight = word.lastIndexOfAny(vowels)\n\
    \        val consonantsLeft = word.lastIndexOfAny(consonants)\n        val vowelsLeft\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsRight = word.lastIndexOfAny(consonants)\n\
    \        val vowelsRight = word.lastIndexOfAny(vowels)\n        val consonantsLeft\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsLeft = word.lastIndexOfAny(vowels)\n\
    \        val consonantsRight = word.lastIndexOfAny(consonants)\n        val vowelsRight\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsLeft = word.lastIndexOfAny(consonants)\n\
    \        val vowelsLeft = word.lastIndexOfAny(vowels)\n        val consonantsRight\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsRight = word.lastIndexOfAny(vowels)\n\
    \        val consonantsLeft = word.lastIndexOfAny(consonants)\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08xiulck.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsLeft\e[0m = word.lastIndexOfAny(vowels)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsLeft is already defined as \e[33mvalue\e[0m \e[35mvowelsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08xiulck.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsRight\e[0m = word.lastIndexOfAny(consonants)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsRight is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsRight\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp08xiulck.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsRight\e[0m = word.lastIndexOfAny(vowels)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsRight is already defined as \e[33mvalue\e[0m \e[35mvowelsRight\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08xiulck.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsLeft\e[0m = word.lastIndexOfAny(consonants)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsLeft is already defined as \e[33mvalue\e[0m \e[35mconsonantsLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp08xiulck.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsLeft\e[0m = word.last"
  stdout: ''
  timestamp: 1660009462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndexes\
    \ = vowels.toSeq.zipWithIndex.toMap\n        val consonantsIndexes = consonants.toSeq.zipWithIndex.toMap\n\
    \        val vowelsIndexesCount = vowelsIndexes.size\n        val consonantsIndexesCount\
    \ = consonantsIndexes.size\n        val vowelsIndexesIndexes = vowelsIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val consonantsIndexesIndexes = consonantsIndexes.toSeq.sortBy(_._1).reverse\n\
    \        val vowelsIndexesIndexesCount = vowelsIndexesIndexes.size\n        val\
    \ consonantsIndexesIndexesCount = consonantsIndexesIndexes.size\n        val vowelsIndexesIndexesIndexes\
    \ = vowelsIndexesIndexes.toSeq.sortBy(_._1).reverse\n        val consonantsIndexesIndexesCount\
    \ = consonantsIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = vowelsIndexesIndexesIndexes.size\n        val vowelsIndexesIndexesIndexesCount\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxbwyiqjz.scala:44:46 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesIndexesIndexesCount\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxbwyiqjz.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndexesIndexesCount\e[0m = consonantsIndexesIndexes.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndexesIndexesCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsIndexesIndexesCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbwyiqjz.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesIndexesIndexesCount\e\
    [0m = vowelsIndexesIndexesIndexes.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexesIndexesIndexesCount is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsIndexesIndexesIndexesCount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxbwyiqjz.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndexesIndexesIndexesCount\e[0m = vowelsIndexesIndexesIndexes.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexesIndexesIndexesCount is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsIndexesIndexesIndexesCount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same "
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val vowelsSet = vowels.toSet\n        val consonantsSet =\
    \ consonants.toSet\n        val vowelsSet2 = vowels.toSet.reverse\n        val\
    \ consonantsSet2 = consonants.toSet.reverse\n        val vowelsSet3 = vowels.toSet.reverse.tail\n\
    \        val consonantsSet3 = consonants.toSet.reverse.tail\n        val vowelsSet4\
    \ = vowels.toSet.reverse.tail.reverse\n        val consonantsSet4 = consonants.toSet.reverse.tail.reverse\n\
    \        val vowelsSet5 = vowels.toSet.reverse.tail.reverse.tail\n        val\
    \ consonantsSet5 = consonants.toSet.reverse.tail.reverse.tail\n        val vowelsSet6\
    \ = vowels.toSet.reverse.tail.reverse.tail.reverse\n        val consonantsSet6\
    \ = consonants.toSet.reverse.tail.reverse.tail.reverse\n        val vowelsSet7\
    \ = vowels.toSet.reverse.tail.reverse.tail.reverse.tail\n        val consonantsSet7\
    \ = consonants.toSet.reverse.tail.reverse.tail.reverse.tail\n        val vowelsSet8\
    \ = vowels.toSet.reverse.tail.reverse.tail.reverse.tail.reverse\n        val consonantsSet8\
    \ = consonants.toSet.reverse.tail.reverse.tail.reverse.tail.reverse\n        val\
    \ vowelsSet9 = vowels.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail\n\
    \        val consonantsSet9 = consonants.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail\n\
    \        val vowelsSet10 = vowels.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse\n\
    \        val consonantsSet10 = consonants.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse\n\
    \        val vowelsSet11 = vowels.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.tail\n\
    \        val consonantsSet11 = consonants.toSet.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.tail.reverse.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7kwgy8l.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpu7kwgy8l.scala:23:38 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7kwgy8l.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet2\e[0m = consonants.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7kwgy8l.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse.tail\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7kwgy8l.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet3\e[0m = consonants.toSet.reverse.tail\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7kwgy8l.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse.tail.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7kwgy8l.scala:28:46 ------------------------\e\
    [0m\e[0"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorNext = vowelsSetIterator.next\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ consonantsSetIteratorNextNext = consonantsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n   \
    \     val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNextNext = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0przco36.scala:46:55 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp0przco36.scala:33:62 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0przco36.scala:34:70 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0przco36.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex\
    \ = vowelsIndex.orElse(vowelsCount)\n        val vowelsIndex = vowelsIndex.toInt\n\
    \        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n   \
    \     val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n   \
    \     val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n   \
    \     val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n   \
    \     val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n   \
    \     val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n   \
    \     val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex\
    \ = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex + 1\n   \
    \     val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex = vowelsIndex\
    \ + 1\n        val vowelsIndex = vowelsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaxkwl3p1.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.orElse(vowelsCount)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxkwl3p1.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxkwl3p1.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxkwl3p1.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex % vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaxkwl3p1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex2\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex3 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex4 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex5 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex6\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex7 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex8 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex9 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex10\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex11 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex12 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex13 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex14\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex15 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex16 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex17 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex18\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex19 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex20 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex21 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex22\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex23 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex24 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex25 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex26\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex27 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex28 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex29 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex30\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex31 = word.lastIndexWhere(vowels.contain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7wgozot0.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7wgozot0.scala:21:46 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wgozot0.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (elem : Char)\n\e[31m   |\e[0m       \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wgozot0.scala:23:47 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex3\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (elem :\
    \ Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7wgozot0.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex4\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                       "
  stdout: ''
  timestamp: 1660009479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsBefore = word.substring(vowelsIndex - vowelsCount, vowelsIndex).toLowerCase\
    \ \n        val consonantsBefore = word.substring(consonantsIndex - consonantsCount,\
    \ consonantsIndex).toLowerCase \n        val vowelsAfter = word.substring(vowelsIndex\
    \ + vowelsCount, word.length).toLowerCase \n        val consonantsAfter = word.substring(consonantsIndex\
    \ + consonantsCount, word.length).toLowerCase \n        if(vowelsBefore == consonantsBefore\
    \ && vowelsAfter == consonantsAfter){\n            return \"\"\n        }\n  \
    \      if(vowelsBefore == consonantsBefore && vowelsAfter == consonantsAfter &&\
    \ vowelsIndex == consonantsIndex){\n            return \"\"\n        }\n     \
    \   if(vowelsBefore == consonantsBefore && vowelsAfter == consonantsAfter && vowelsIndex\
    \ < consonantsIndex){\n            return word.substring(vowelsIndex + 1, word.length)\n\
    \        }\n        if(vowelsBefore == consonantsBefore && vowelsAfter == consonantsAfter\
    \ && vowelsIndex > consonantsIndex){\n            return word.substring(vowelsIndex\
    \ - 1, word.length)\n        }\n        if(vowelsBefore == consonantsBefore &&\
    \ vowelsIndex < consonantsIndex){\n            return word.substring(vowelsIndex\
    \ + 1, vowelsIndex + 1 + consonantsCount)\n        }\n        if(vowelsBefore\
    \ == consonantsBefore && vowelsIndex > consonantsIndex){\n            return word.substring(vowelsIndex\
    \ - 1, vowelsIndex - 1 + consonantsCount)\n        }\n        if(vowelsIndex <\
    \ consonantsIndex){\n            return word.substring(vowelsIndex + 1, vowelsIndex\
    \ + 1 + vowelsCount)\n        }\n        if(vowelsIndex > consonantsIndex){\n\
    \            return word.substring(vowelsIndex - 1, vowelsIndex - 1 + vowelsCount)\n\
    \        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6sqxmj_.scala:23:46\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           Found:    (elem : Char)\n\e[31m   |\e[0m         \
    \                                     Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps6sqxmj_.scala:24:50 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (elem\
    \ : Char)\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIterator.prev\n        val\
    \ vowelsSetIteratorPrevPrevPrevNext = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIterator.prev\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe9062pcu.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe9062pcu.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe9062pcu.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe9062pcu.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660009477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toSeq.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex2\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex3 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex4 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex5 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex6\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex7 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex8 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex9 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex10\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex11 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex12 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex13 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex14\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex15 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex16 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex17 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex18\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex19 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex20 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex21 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex22\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex23 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex24 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex25 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex26\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex27 = word.lastIndexWhere(vowels.contains)\n\
    \        val vowelsIndex28 = word.lastIndexWhere(vowels.contains)\n        val\
    \ vowelsIndex29 = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex30\
    \ = word.lastIndexWhere(vowels.contains)\n        val vowelsIndex31 = word.lastIndexWhere(vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7vxogg0h.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7vxogg0h.scala:21:46 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vxogg0h.scala:22:47\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                             Found:    (elem : Char)\n\e[31m   |\e[0m       \
    \                                        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vxogg0h.scala:23:47 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex3\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                               ^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (elem :\
    \ Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vxogg0h.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex4\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                       "
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrevPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextPrevNext\
    \ = vowelsSetIteratorNextPrev.next\n        val vowelsSetIteratorNextPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevNext\
    \ = vowelsSetIteratorNextPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevNext.next\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevPrev\
    \ = vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevNext.prev\n        val vowelsSetIteratorNextPrevPrevPrevPrevPrevPrevPrevPrevNext\
    \ = vowelsSetIteratorNextPrevPrevPrevPrev\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ffhpkf1.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6ffhpkf1.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6ffhpkf1.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6ffhpkf1.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).size\n        val consonants\
    \ = word.filter(c => !vowels.contains(c))\n        val consonantsCount = consonants.size\n\
    \        val vowelsCount = consonantsCount - vowelsCount\n        val vowelsIndex\
    \ = consonants.lastIndexWhere(c => vowels.contains(c))\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c =>\
    \ vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndexWhere(c => vowels.contains(c))\n        val\
    \ vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = consonants.lastIndexWhere(c\
    \ => vowels.contains(c))\n        val vowelsIndex = vowelsIndex + 1\n        val\
    \ vowelsIndex = consonants.lastIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp8hhhwej.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonantsCount\
    \ - vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp8hhhwej.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp8hhhwej.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastIndexWhere(\e\
    [36mc\e[0m => vowels.contains(c))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp8hhhwej.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp8hhhwej.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = consonants.lastInde"
  stdout: ''
  timestamp: 1660009475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val consonantsIndex = word.zipWithIndex.filter(_._2 % consonantsCount\
    \ == 0).map(_._1).last\n        val consonantsIndex = consonantsIndex + 1\n  \
    \      val vowelsIndex = vowelsIndex + 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowelsIndex = vowelsIndex\
    \ - 1\n        val vowelsIndex = vowelsIndex - 1\n        val vowels\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpubo08fdc.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubo08fdc.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsIndex\e[0m = consonantsIndex + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantsIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mconsonantsIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubo08fdc.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubo08fdc.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubo08fdc.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsIndex is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubo08fd"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var vowelCount = 0\n        var consonantIndex = 0\n       \
    \ var consonant = \"\"\n        var consonantCount = 0\n        val wordArray\
    \ = word.split(\"\")\n        val wordArrayLength = wordArray.length\n       \
    \ for(i <- 0 until wordArrayLength) {\n            val currentChar = wordArray(i)\n\
    \            if(vowels.contains(currentChar)) {\n                vowelIndex =\
    \ i\n                vowel = currentChar\n                vowelCount = 1\n   \
    \         }\n            else if(consonants.contains(currentChar)) {\n       \
    \         consonantIndex = i\n                consonant = currentChar\n      \
    \          consonantCount = 1\n            }\n            else {\n           \
    \     if(vowelIndex < consonantIndex) {\n                    vowelIndex += 1\n\
    \                    vowel = currentChar\n                    vowelCount = 1\n\
    \                }\n                else if(vowelIndex > consonantIndex) {\n \
    \                   consonantIndex += 1\n                    consonant = currentChar\n\
    \                    consonantCount = 1\n                }\n            }\n  \
    \      }\n        if(vowelCount > consonantCount) {\n            vowel\n     \
    \   }\n        else {\n            consonant\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpljbk8qbz.scala:35:20 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(consonants.contains(currentChar))\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: consonants\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsCount = consonantsIndex - consonantsIndex % consonantsCount\n    \
    \    val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsIndex\
    \ = consonantsIndex - consonantsIndex % consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsIndex = consonantsIndex\
    \ - consonantsIndex % consonantsCount\n        val vowelsIndex = vowelsIndex -\
    \ vowelsIndex % vowelsCount\n        val consonantsIndex = consonantsIndex - consonantsIndex\
    \ % consonantsCount\n        val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n\
    \        val consonantsIndex = consonantsIndex - consonantsIndex % consonantsCount\n\
    \        val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsIndex = consonantsIndex - consonantsIndex % consonantsCount\n    \
    \    val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsIndex\
    \ = consonantsIndex - consonantsIndex % consonantsCount\n        val vowelsIndex\
    \ = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsIndex = consonantsIndex\
    \ - consonantsIndex % consonantsCount\n        val vowelsIndex = vowelsIndex -\
    \ vowelsIndex % vowelsCount\n        val consonantsIndex = consonantsIndex - consonantsIndex\
    \ % consonantsCount\n        val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n\
    \        val consonantsIndex = consonantsIndex - consonantsIndex % consonantsCount\n\
    \        val vowelsIndex = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx7ot3scm.scala:46:29 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx7ot3scm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx7ot3scm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsIndex\
    \ - consonantsIndex % consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx7ot3scm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx7ot3scm.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = conson"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"a\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet33\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfiekpifs.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfiekpifs.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.previous\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.previous\n    \
    \    val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.previous\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.previous\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNextPrev.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.previous\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkqcevy5w.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.previous\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkqcevy5w.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.previous\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value previous is not a member of Iterator[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkqcevy5w.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.previous\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                            value previous is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkqcevy5w.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpkqcevy5w.scala:37:72 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev.next\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mval"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val vowelsSetIteratorNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextSize\
    \ = vowelsSetIteratorNextNext.size\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextSize\
    \ = vowelsSetIteratorNextNextNext.size\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe13lh5p4.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe13lh5p4.scala:26:62\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe13lh5p4.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe13lh5p4.scala:40:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe13lh5p4.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660009476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toSet.size;\n\
    \        val vowelsSet = vowels.toSet;\n        val vowelsSetSize = vowelsSet.size;\n\
    \        val vowelsSetIterator = vowelsSet.iterator;\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size;\n        val vowelsSetIteratorNext = vowelsSetIterator.next;\n\
    \        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size;\n       \
    \ val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n        val vowelsSetIteratorNextNextSize\
    \ = vowelsSetIteratorNextNext.size;\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next;\n        val vowelsSetIteratorNextNextNextSize\
    \ = vowelsSetIteratorNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next;\n        val vowelsSetIteratorNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next;\n        val vowelsSetIteratorNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next;\n        val vowelsSetIteratorNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next;\n        val vowelsSetIteratorNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.size;\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size;\n\
    \        val vowelsSet\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxborg7j3.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxborg7j3.scala:27:62\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next;\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxborg7j3.scala:39:64 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\e[31m\e[31m  \
    \ |\e[0m                                                                ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxborg7j3.scala:41:68\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxborg7j3.scala:42:72\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.size;\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexWhere(vowels.contains, vowelsLength)\n \
    \       val consonantsIndex = word.lastIndexWhere(consonants.contains, consonantsLength)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexWhere(vowels.contains, vowelsLength)\n \
    \       val consonantsIndex = word.lastIndexWhere(consonants.contains, consonantsLength)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexWhere(vowels.contains, vowelsLength)\n \
    \       val consonantsIndex = word.lastIndexWhere(consonants.contains, consonantsLength)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexWhere(vowels.contains, vowelsLength)\n \
    \       val consonantsIndex = word.lastIndexWhere(consonants.contains, consonantsLength)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsLength = consonantsIndex - consonantsIndex % consonantsCount\n   \
    \     val vowelsIndex = word.lastIndexWhere(vowels.contains, vowelsLength)\n \
    \       val consonantsIndex = word.lastIndexWhere(consonants.contains, consonantsLength)\n\
    \        val vowelsLength = vowelsIndex - vowelsIndex % \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7r6ir3gi.scala:45:54 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mvowelsLength\e[0m = vowelsIndex\
    \ - vowelsIndex % \n\e[31m\e[31m   |\e[0m                                    \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp7r6ir3gi.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains,\
    \ vowelsLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r6ir3gi.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains,\
    \ consonantsLength)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7r6ir3gi.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsLength\e[0m = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsLength is already defined as \e[33mvalue\e[0m \e[35mvowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7r6ir3gi.scala:30:12 ---"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsCount = consonantsIndex - consonantsIndex % consonantsCount\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n        val consonantsCount = consonantsIndex -\
    \ consonantsIndex % consonantsCount\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsCount\
    \ = consonantsIndex - consonantsIndex % consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowelsIndex - vowelsIndex % vowelsCount\n        val\
    \ consonantsCount = consonantsIndex - consonantsIndex % consonantsCount\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n        val consonantsCount = consonantsIndex -\
    \ consonantsIndex % consonantsCount\n        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n\
    \        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n    \
    \    val vowelsCount = vowelsIndex - vowelsIndex % vowelsCount\n        val consonantsCount\
    \ = consonantsIndex - consonantsIndex % consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy2mnraph.scala:48:29 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2mnraph.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsIndex\
    \ - vowelsIndex % vowelsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mnraph.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonantsIndex\
    \ - consonantsIndex % consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpy2mnraph.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mnraph.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastInd"
  stdout: ''
  timestamp: 1660009477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.count(vowels)\n        val vowelsCount2 = word.count(vowels.toList)\n\
    \        val vowelsCount3 = word.count(vowels.toSet)\n        val vowelsCount4\
    \ = word.count(vowels.toSeq)\n        val vowelsCount5 = word.count(vowels.toIterator)\n\
    \        val vowelsCount6 = word.count(vowels.toList)\n        val vowelsCount7\
    \ = word.count(vowels.toSet)\n        val vowelsCount8 = word.count(vowels.toSeq)\n\
    \        val vowelsCount9 = word.count(vowels.toIterator)\n        val vowelsCount10\
    \ = word.count(vowels.toList)\n        val vowelsCount11 = word.count(vowels.toSet)\n\
    \        val vowelsCount12 = word.count(vowels.toSeq)\n        val vowelsCount13\
    \ = word.count(vowels.toIterator)\n        val vowelsCount14 = word.count(vowels.toList)\n\
    \        val vowelsCount15 = word.count(vowels.toSet)\n        val vowelsCount16\
    \ = word.count(vowels.toSeq)\n        val vowelsCount17 = word.count(vowels.toIterator)\n\
    \        val vowelsCount18 = word.count(vowels.toList)\n        val vowelsCount19\
    \ = word.count(vowels.toSet)\n        val vowelsCount20 = word.count(vowels.toSeq)\n\
    \        val vowelsCount21 = word.count(vowels.toIterator)\n        val vowelsCount22\
    \ = word.count(vowels.toList)\n        val vowelsCount23 = word.count(vowels.toSet)\n\
    \        val vowelsCount24 = word.count(vowels.toSeq)\n        val vowelsCount25\
    \ = word.count(vowels.toIterator)\n        val vowelsCount26 = word.count(vowels.toList)\n\
    \        val vowelsCount27 = word.count(vowels.toSet)\n        val vowelsCount28\
    \ = word.count(vowels.toSeq)\n        val vowelsCount29 = word.count(vowels.toIterator)\n\
    \        val vowelsCount30 = word.count(vowels.toList)\n        val vowelsCount31\
    \ = word.count(vowels.toSet)\n        val vowelsCount32 = word.count(vowels.toSeq)\n\
    \        val vowelsCount33 = word.count(vowels.toIterator)\n        val vowelsCount34\
    \ = word.count(vowels.toList)\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkx2wpjzy.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkx2wpjzy.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkx2wpjzy.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.count(vowels.toList)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    List[String]\n\e\
    [31m   |\e[0m                                      Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkx2wpjzy.scala:23:45\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e\
    [0m = word.count(vowels.toSeq)\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    Seq[String]\n\e[31m   |\e[0m                            \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkx2wpjzy.scala:24:45 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount5\e[0m = word.count(vowels.toIterator)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    Iterator[String]\n\
    \e[31m   |\e[0m                                      Requi"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toList.map(_.length).sum;\n\
    \        val vowelsIndex = word.lastIndexOfAny(vowels);\n        if (vowelsIndex\
    \ == -1) return \"\";\n        val vowelsLength = vowels(vowelsIndex);\n     \
    \   val vowelsIndex = word.lastIndexOfAny(vowels.reverse);\n        if (vowelsIndex\
    \ == -1) return \"\";\n        val vowelsLengthReverse = vowels(vowelsIndex);\n\
    \        val vowelsIndex2 = word.lastIndexOfAny(vowels.reverse.tail);\n      \
    \  if (vowelsIndex2 == -1) return \"\";\n        val vowelsLengthReverse2 = vowels(vowelsIndex2);\n\
    \        val vowelsIndex3 = word.lastIndexOfAny(vowels.reverse.tail.tail);\n \
    \       if (vowelsIndex3 == -1) return \"\";\n        val vowelsLengthReverse3\
    \ = vowels(vowelsIndex3);\n        val vowelsIndex4 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail);\n\
    \        if (vowelsIndex4 == -1) return \"\";\n        val vowelsLengthReverse4\
    \ = vowels(vowelsIndex4);\n        val vowelsIndex5 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail);\n\
    \        if (vowelsIndex5 == -1) return \"\";\n        val vowelsLengthReverse5\
    \ = vowels(vowelsIndex5);\n        val vowelsIndex6 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail);\n\
    \        if (vowelsIndex6 == -1) return \"\";\n        val vowelsLengthReverse6\
    \ = vowels(vowelsIndex6);\n        val vowelsIndex7 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail);\n\
    \        if (vowelsIndex7 == -1) return \"\";\n        val vowelsLengthReverse7\
    \ = vowels(vowelsIndex7);\n        val vowelsIndex8 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail);\n\
    \        if (vowelsIndex8 == -1) return \"\";\n        val vowelsLengthReverse8\
    \ = vowels(vowelsIndex8);\n        val vowelsIndex9 = word.lastIndexOfAny(vowels.reverse.tail.tail.tail.tail.tail.tail.tail.tail);\n\
    \        if (vowelsIndex9 == -1) return \"\";\n        val vowelsLengthReverse9\
    \ = vowels(vowelsIndex9);\n        val vowelsIndex10 = word.lastIndexOfAny(vowels.reverse.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvjxlowvy.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvjxlowvy.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels.reverse);\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpvjxlowvy.scala:21:31 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels);\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvjxlowvy.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse.tail);\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean word.lastIndexOf?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvjxlowvy.scala:27:54 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex2\e[0m = word.lastIndexOfAny(vowels.reverse.tail);\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvjxlowvy.scala:30:32\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsIndex3\e[0m = word.lastIndexOfAny(vowels.reverse.tail.tail);\n\e[31m\e\
    [31m   |\e[0m                           ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsEnd = vowelsIndex + vowelsCount - 1\n        val consonantsEnd\
    \ = consonantsIndex + consonantsCount - 1\n        val vowelsStart = vowelsIndex\
    \ - 1\n        val consonantsStart = consonantsIndex - 1\n        val vowelsMid\
    \ = (vowelsIndex + vowelsEnd) / 2\n        val consonantsMid = (consonantsIndex\
    \ + consonantsEnd) / 2\n        val vowelsMidEnd = (vowelsIndex + vowelsEnd) %\
    \ 2\n        val consonantsMidEnd = (consonantsIndex + consonantsEnd) % 2\n  \
    \      val vowelsMidStart = vowelsIndex % 2\n        val consonantsMidStart =\
    \ consonantsIndex % 2\n        val vowelsMidEnd = (vowelsIndex + vowelsEnd) %\
    \ 2\n        val consonantsMidEnd = (consonantsIndex + consonantsEnd) % 2\n  \
    \      val vowelsMidStart = (vowelsIndex + vowelsEnd) / 2\n        val consonantsMidStart\
    \ = (consonantsIndex + consonantsEnd) / 2\n        val vowelsMidStartEnd = (vowelsIndex\
    \ + vowelsEnd) % 2\n        val consonantsMidStartEnd = (consonantsIndex + consonantsEnd)\
    \ % 2\n        val vowelsMidStartEnd2 = (vowelsIndex + vowelsEnd) % 2\n      \
    \  val consonantsMidStartEnd2 = (consonantsIndex + consonantsEnd) % 2\n      \
    \  val vowelsMidStartEnd3 = (vowelsIndex + vowelsEnd) % 2\n        val consonantsMidStartEnd3\
    \ = (consonantsIndex + consonantsEnd) % 2\n        val vowelsMidStartEnd4 = (vowelsIndex\
    \ + vowelsEnd) % 2\n        val consonantsMidStartEnd4 = (consonantsIndex + consonantsEnd)\
    \ % 2\n        val vowelsMidStartEnd5 = (vowelsIndex + vowelsEnd) % 2\n      \
    \  val con\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6l1c186n.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6l1c186n.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsMidEnd\e[0m = (vowelsIndex + vowelsEnd) % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsMidEnd is already defined as \e[33mvalue\e[0m \e[35mvowelsMidEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6l1c186n.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mconsonantsMidEnd\e[0m = (consonantsIndex\
    \ + consonantsEnd) % \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsMidEnd is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsMidEnd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6l1c186n.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsMidStart\e[0m = (vowelsIndex\
    \ + vowelsEnd) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsMidStart is already defined as \e[33mvalue\e[0m \e[35mvowelsMidStart\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6l1c186n.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mconsonantsMidStart\e[0m = (consonantsIndex\
    \ + consonantsEnd) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsMidStart is already defined as \e[33mvalue\e[0m\
    \ \e[35mconson"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.isLetter).map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndex.map(_.length).sum\n        val vowelsIndex\
    \ = vowelsIndex.map(_.toString.toInt)\n        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n     \
    \   val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val\
    \ vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount\
    \ = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n     \
    \   val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val\
    \ vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount\
    \ = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n     \
    \   val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val\
    \ vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount\
    \ = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n     \
    \   val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val\
    \ vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount\
    \ = vowelsIndexCount.map(_.toString.toInt)\n        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n\
    \        val vowelsIndexCount = vowelsIndexCount.map(_.toString.toInt)\n     \
    \   val vowelsIndexCount = vowelsIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5jowofmu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5jowofmu.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexCount\e[0m = vowelsIndexCount.map(_.toString.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCount is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsIndexCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5jowofmu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexCount\e[0m =\
    \ vowelsIndexCount.map(_.toString.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCount is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsIndexCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5jowofmu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexCount\e[0m =\
    \ vowelsIndexCount.map(_.toString.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndexCount is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsIndexCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp5jowofmu.scala:27:12 ---"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet13 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet17 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet21 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet25 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet29 = vowelsSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5scsl3_y.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5scsl3_y.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels : mutable.Set[Char]\
    \ = mutable.Set()\n        var vowelIndex : Int = -1\n        var vowelIndex1\
    \ : Int = -1\n        var vowelIndex2 : Int = -1\n        var vowelIndex3 : Int\
    \ = -1\n        var vowelIndex4 : Int = -1\n        var vowelIndex5 : Int = -1\n\
    \        var vowelIndex6 : Int = -1\n        var vowelIndex7 : Int = -1\n    \
    \    var vowelIndex8 : Int = -1\n        var vowelIndex9 : Int = -1\n        var\
    \ vowelIndex10 : Int = -1\n        var vowelIndex11 : Int = -1\n        var vowelIndex12\
    \ : Int = -1\n        var vowelIndex13 : Int = -1\n        var vowelIndex14 :\
    \ Int = -1\n        var vowelIndex15 : Int = -1\n        var vowelIndex16 : Int\
    \ = -1\n        var vowelIndex17 : Int = -1\n        var vowelIndex18 : Int =\
    \ -1\n        var vowelIndex19 : Int = -1\n        var vowelIndex20 : Int = -1\n\
    \        var vowelIndex21 : Int = -1\n        var vowelIndex22 : Int = -1\n  \
    \      var vowelIndex23 : Int = -1\n        var vowelIndex24 : Int = -1\n    \
    \    var vowelIndex25 : Int = -1\n        var vowelIndex26 : Int = -1\n      \
    \  var vowelIndex27 : Int = -1\n        var vowelIndex28 : Int = -1\n        var\
    \ vowelIndex29 : Int = -1\n        var vowelIndex30 : Int = -1\n        var vowelIndex31\
    \ : Int = -1\n        var vowelIndex32 : Int = -1\n        var vowelIndex33 :\
    \ Int = -1\n        var vowelIndex34 : Int = -1\n        var vowelIndex35 : Int\
    \ = -1\n        var vowelIndex36 : Int = -1\n        var vowelIndex37 : Int =\
    \ -1\n        var vowelIndex38 : Int = -1\n        var vowelIndex39 : Int = -1\n\
    \        var vowelIndex40 : Int = -1\n        var vowelIndex41 : Int = -1\n  \
    \      var vowelIndex42 : Int = -1\n        var vowelIndex43 : Int = -1\n    \
    \    var vowelIndex44 : Int = -1\n        var vowelIndex45 : Int = -1\n      \
    \  var vowelIndex46 : Int = -1\n        var vowelIndex47 : Int = -1\n        var\
    \ vowelIndex48 : Int = -1\n        var vowelIndex49 : Int = -1\n        var vowelIndex50\
    \ : Int = -1\n        var vowelIndex51 : Int = -1\n        var vowelIndex52 :\
    \ Int = -1\n        var vowelIndex53 : Int = -1\n        var vowelIndex54 : Int\
    \ = -1\n        var vowelIndex55 : \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa0ov47o8.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpa0ov47o8.scala:19:21 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowels\e[0m : mutable.Set[\e[35mChar\e[0m]\
    \ = mutable.Set()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpa0ov47o8.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mvowels\e[0m : mutable.Set[\e\
    [35mChar\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa0ov47o8.scala:76:5 ---------------------\e[0m\e[0m\n\e[31m76\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8syekwex.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8syekwex.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8syekwex.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8syekwex.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8syekwex.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1660009484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet13 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet17 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet21 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet25 = vowelsSet.filter(_ != vowels.last)\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet29 = vowelsSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5scsl3_y.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5scsl3_y.scala:49:5 ---------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val consonantsCount\
    \ = consonants.toList.map(x => word.toLowerCase contains x).sum\n        val vowelsIndex\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsIndex = word.lastIndexOfAny(consonants)\n\
    \        val vowelsCount = vowels.toList.map(x => word.toLowerCase contains x).sum\n\
    \        val consonantsCount = consonants.toList.map(x => word.toLowerCase contains\
    \ x).sum\n        val vowelsIndex = word.lastIndexOfAny(vowels)\n        val consonantsIndex\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val consonantsCount = consonants.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsIndex = word.lastIndexOfAny(vowels)\n\
    \        val consonantsIndex = word.lastIndexOfAny(consonants)\n        val vowelsCount\
    \ = vowels.toList.map(x => word.toLowerCase contains x).sum\n        val consonantsCount\
    \ = consonants.toList.map(x => word.toLowerCase contains x).sum\n        val vowelsIndex\
    \ = word.lastIndexOfAny(vowels)\n        val consonantsIndex = word.lastIndexOfAny(consonants)\n\
    \        val vowelsCount = vowels.toList.map(x => word.toLowerCase contains x).sum\n\
    \        val consonantsCount = consonants.toList.map(x => word.toLowerCase contains\
    \ x).sum\n        val vowelsIndex = word.lastIndexOfAny(vowels)\n        val consonantsIndex\
    \ = word.lastIndexOfAny(consonants)\n        val vowelsCount = vowels.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val consonantsCount = consonants.toList.map(x\
    \ => word.toLowerCase contains x).sum\n        val vowelsIndex = word.lastIndexOfAny(vowels)\n\
    \        val consonantsIndex = word.lastIndexOfAny(consonants)\n        val vowelsCount\
    \ = vowels.toList.map(x => word.toLowerCase contains x).sum\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgqaus86g.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.map(\e\
    [36mx\e[0m => word.toLowerCase contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgqaus86g.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.map(\e\
    [36mx\e[0m => word.toLowerCase contains x).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgqaus86g.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexOfAny(vowels)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgqaus86g.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexOfAny(consonants)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsIndex = word.zipWithIndex.filter(_._2\
    \ % vowelsCount == 0).map(_._1).last\n        val vowelsIndex = vowelsIndex.getOrElse(\"\
    \")\n        val vowelsIndex = vowelsIndex.substring(vowelsIndex.length-1)\n \
    \       val vowelsIndex = vowelsIndex.charAt(0)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-1)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-2)\n        val\
    \ vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-3)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length-4)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-5)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-6)\n        val\
    \ vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-7)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length-8)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-9)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-10)\n       \
    \ val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-11)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length-12)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-13)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-14)\n       \
    \ val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-15)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length-16)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-17)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-18)\n       \
    \ val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-19)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length-20)\n        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-21)\n\
    \        val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-22)\n       \
    \ val vowelsIndex = vowelsIndex.charAt(vowelsIndex.length-23)\n        val vowelsIndex\
    \ = vowelsIndex.charAt(vowelsIndex.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_w68zsd.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi_w68zsd.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi_w68zsd.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.substring(vowelsIndex.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_w68zsd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi_w68zsd.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.charAt(vowelsIndex.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded metho"
  stdout: ''
  timestamp: 1660009486
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsArray\
    \ = vowels.toArray\n        val consonantsArray = consonants.toArray\n       \
    \ val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val consonantsArrayLength = consonantsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val consonantsArrayLength\
    \ = consonantsArray.length\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val consonantsArrayLength = consonantsArray.length\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph3zg44o2.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph3zg44o2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph3zg44o2.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph3zg44o2.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsArrayLength\e\
    [0m = consonantsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph3zg44o2.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \        val vowelsCount = word.filter(c => vowels.contains(c)).length\n     \
    \   val vowelsCount = word.filter(c => vowels.contains(c)).length\n        val\
    \ vowelsCount = word.filter(c => vowels.contains(c)).length\n        val vowelsCount\
    \ = word.filter(c => vowels.contains(c)).length\n        val vowelsCount = word.filter(c\
    \ => vowels.contains(c)).length\n        val vowelsCount = word.filter(c => vowels.contains(c)).length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplzq8gq73.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mc\e[0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplzq8gq73.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplzq8gq73.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplzq8gq73.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mc\e\
    [0m => vowels.contains(c)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/t"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsIndex = vowelsIndex + vowelsCount\n        val consonantsIndex\
    \ = consonantsIndex + consonantsCount\n        val vowelsIndex = vowelsIndex -\
    \ consonantsIndex\n        val consonantsIndex = consonantsIndex - vowelsIndex\n\
    \        val vowelsIndex = vowelsIndex / consonantsCount\n        val consonantsIndex\
    \ = consonantsIndex / vowelsCount\n        val vowelsIndex = vowelsIndex % consonantsCount\n\
    \        val consonantsIndex = consonantsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex - consonantsIndex\n        val consonantsIndex = consonantsIndex\
    \ - vowelsIndex\n        val vowelsIndex = vowelsIndex / consonantsCount\n   \
    \     val consonantsIndex = consonantsIndex / vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex % consonantsCount\n        val consonantsIndex = consonantsIndex\
    \ % vowelsCount\n        val vowelsIndex = vowelsIndex - consonantsIndex\n   \
    \     val consonantsIndex = consonantsIndex - vowelsIndex\n        val vowelsIndex\
    \ = vowelsIndex / consonantsCount\n        val consonantsIndex = consonantsIndex\
    \ / vowelsCount\n        val vowelsIndex = vowelsIndex % consonantsCount\n   \
    \     val consonantsIndex = consonantsIndex % vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex - consonantsIndex\n        val consonantsIndex = consonantsIndex\
    \ - vowelsIndex\n        val vowelsIndex = vowelsIndex / consonantsCount\n   \
    \     val consonantsIndex = consonantsIndex / vowelsCount\n        val vowelsIndex\
    \ = vowelsIndex % consonantsCount\n        val consonantsIndex = consonantsIndex\
    \ % vowelsCount\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprecs6v2v.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmprecs6v2v.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprecs6v2v.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprecs6v2v.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprecs6v2v.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ - consonantsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIn"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubch522l.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpubch522l.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpubch522l.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpubch522l.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        if(vowelsIndex < 0 || consonantsIndex\
    \ < 0) \"\"\n        else word.substring(vowelsIndex + 1, consonantsIndex).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe89xzeg3.scala:23:46\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e\
    [0m = word.lastIndexWhere(vowels.contains)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           Found:    (elem : Char)\n\e[31m   |\e[0m         \
    \                                     Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe89xzeg3.scala:24:50 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    (elem\
    \ : Char)\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe89xzeg3.scala:26:62\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m word.substring(vowelsIndex\
    \ + \e[31m1\e[0m, consonantsIndex).last\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Char\n\e[31m   |\e[0m             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCoun\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_7wprg_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelIndex2\
    \ = word.length - 1\n        var vowelIndex3 = word.length\n        var vowelIndex4\
    \ = word.length\n        var vowelIndex5 = word.length\n        var vowelIndex6\
    \ = word.length\n        var vowelIndex7 = word.length\n        var vowelIndex8\
    \ = word.length\n        var vowelIndex9 = word.length\n        var vowelIndex10\
    \ = word.length\n        var vowelIndex11 = word.length\n        var vowelIndex12\
    \ = word.length\n        var vowelIndex13 = word.length\n        var vowelIndex14\
    \ = word.length\n        var vowelIndex15 = word.length\n        var vowelIndex16\
    \ = word.length\n        var vowelIndex17 = word.length\n        var vowelIndex18\
    \ = word.length\n        var vowelIndex19 = word.length\n        var vowelIndex20\
    \ = word.length\n        var vowelIndex21 = word.length\n        var vowelIndex22\
    \ = word.length\n        var vowelIndex23 = word.length\n        var vowelIndex24\
    \ = word.length\n        var vowelIndex25 = word.length\n        var vowelIndex26\
    \ = word.length\n        var vowelIndex27 = word.length\n        var vowelIndex28\
    \ = word.length\n        var vowelIndex29 = word.length\n        var vowelIndex30\
    \ = word.length\n        var vowelIndex31 = word.length\n        var vowelIndex32\
    \ = word.length\n        var vowelIndex33 = word.length\n        var vowelIndex34\
    \ = word.length\n        var vowelIndex35 = word.length\n        var vowelIndex36\
    \ = word.length\n        var vowelIndex37 = word.length\n        var vowelIndex38\
    \ = word.length\n        var vowelIndex39 = word.length\n        var vowelIndex40\
    \ = word.length\n        var vowelIndex41 = word.length\n        var vowelIndex42\
    \ = word.length\n        var vowelIndex43 = word.length\n        var vowelIndex44\
    \ = word.length\n        var vowelIndex45 = word.length\n        var vowelIndex46\
    \ = word.length\n        var vowelIndex47 = word.length\n        var vowelIndex48\
    \ = word.length\n        var vowelIndex49 = word.length\n        var vowelIndex50\
    \ = word.length\n        var vowelIndex51 = word.length\n        var vowelIndex52\
    \ = word.length\n        var vowelIndex53 = word.length\n        var vowelIndex54\
    \ = word.length\n        var vowelIndex55 = word.length\n        var vowelIndex56\
    \ = word.length\n        var vowelIndex57 = word.length\n        var vowelIndex58\
    \ = word.length\n        var vowelIndex59 = word.length\n        var vowelIndex60\
    \ = word.length\n        var vowelIndex61 = word.length\n        var vowelIndex62\
    \ = word.length\n        var vowelIndex63 = word.length\n        var vowelIndex64\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpets_8b8r.scala:83:26 ---------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex64\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpets_8b8r.scala:84:5 ---------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"i\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"e\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"i\")\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpahyx0wgu.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009488
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorNextPrevNext.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevNext = vowelsSetIteratorNextPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevNextPrevPrev = vowelsSetIteratorNextPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextPrevPrevPrevPrevNext = vowelsSetIteratorNextPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ccl1t3j.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9ccl1t3j.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9ccl1t3j.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9ccl1t3j.scala:38:52 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevPrevPrevPrevPrev\e\
    [0m = vowelsSetIteratorNextPrevPrevPrevPrev.prev\n\e[31m\e[31m   |\e[0m      \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: vowelsSetIteratorNextPrevPrevPrevPrev\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ccl1t3j.scala:39:52\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrevPrevPrevPrevNext\e[0m = vowelsSetIteratorNextPrevPrevPrevNext.prev\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: vowelsSetIteratorNextPr"
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSet2\
    \ = vowelsSet.diff(consonantsSet)\n        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n\
    \        val vowelsSet4 = vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 =\
    \ vowelsSet.diff(vowelsSet4)\n        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n\
    \        val vowelsSet7 = vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 =\
    \ vowelsSet.diff(vowelsSet7)\n        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n\
    \        val vowelsSet10 = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11\
    \ = vowelsSet.diff(vowelsSet10)\n        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n\
    \        val vowelsSet13 = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14\
    \ = vowelsSet.diff(vowelsSet13)\n        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n\
    \        val vowelsSet16 = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17\
    \ = vowelsSet.diff(vowelsSet16)\n        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n\
    \        val vowelsSet19 = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20\
    \ = vowelsSet.diff(vowelsSet19)\n        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n\
    \        val vowelsSet22 = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23\
    \ = vowelsSet.diff(vowelsSet22)\n        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n\
    \        val vowelsSet25 = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26\
    \ = vowelsSet.diff(vowelsSet25)\n        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n\
    \        val vowelsSet28 = vowelsSet.diff(vowelsSet27)\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp41fogvt0.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp41fogvt0.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val vowelsSetIteratorNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextSize\
    \ = vowelsSetIteratorNextNext.size\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextSize\
    \ = vowelsSetIteratorNextNextNext.size\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextSize\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplqtp7yek.scala:42:67 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplqtp7yek.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmplqtp7yek.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplqtp7yek.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wi"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowelsCount < consonantsCount) {\n            return \"\"\n        }\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowelsCount < consonantsCount) {\n            return \"\"\n        }\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowelsCount < consonantsCount) {\n            return \"\"\n        }\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowelsCount < consonantsCount) {\n            return \"\"\n        }\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowelsCount < consonantsCount) {\n            return \"\"\n        }\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowelsIndex\
    \ - vowels\n        val consonantsCount = consonantsIndex - consonants\n     \
    \   if(vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphyg3o84g.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyg3o84g.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsIndex - vowels\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphyg3o84g.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mconsonantsCount\e[0m = consonantsIndex - consonants\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyg3o84g.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphyg3o84g.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelIndex = 0;\n      \
    \  var vowelCount = 0;\n        var vowelIndex2 = word.length-1;\n        var\
    \ vowelCount2 = 0;\n        var vowelIndex3 = word.length-1;\n        var vowelCount3\
    \ = 0;\n        var vowelIndex4 = word.length-1;\n        var vowelCount4 = 0;\n\
    \        var vowelIndex5 = word.length-1;\n        var vowelCount5 = 0;\n    \
    \    var vowelIndex6 = word.length-1;\n        var vowelCount6 = 0;\n        var\
    \ vowelIndex7 = word.length-1;\n        var vowelCount7 = 0;\n        var vowelIndex8\
    \ = word.length-1;\n        var vowelCount8 = 0;\n        var vowelIndex9 = word.length-1;\n\
    \        var vowelCount9 = 0;\n        var vowelIndex10 = word.length-1;\n   \
    \     var vowelCount10 = 0;\n        var vowelIndex11 = word.length-1;\n     \
    \   var vowelCount11 = 0;\n        var vowelIndex12 = word.length-1;\n       \
    \ var vowelCount12 = 0;\n        var vowelIndex13 = word.length-1;\n        var\
    \ vowelCount13 = 0;\n        var vowelIndex14 = word.length-1;\n        var vowelCount14\
    \ = 0;\n        var vowelIndex15 = word.length-1;\n        var vowelCount15 =\
    \ 0;\n        var vowelIndex16 = word.length-1;\n        var vowelCount16 = 0;\n\
    \        var vowelIndex17 = word.length-1;\n        var vowelCount17 = 0;\n  \
    \      var vowelIndex18 = word.length-1;\n        var vowelCount18 = 0;\n    \
    \    var vowelIndex19 = word.length-1;\n        var vowelCount19 = 0;\n      \
    \  var vowelIndex20 = word.length-1;\n        var vowelCount20 = 0;\n        var\
    \ vowelIndex21 = word.length-1;\n        var vowelCount21 = 0;\n        var vowelIndex22\
    \ = word.length-1;\n        var vowelCount22 = 0;\n        var vowelIndex23 =\
    \ word.length-1;\n        var vowelCount23 = 0;\n        var vowelIndex24 = word.length-1;\n\
    \        var vowelCount24 = 0;\n        var vowelIndex25 = word.length-1;\n  \
    \      var vowelCount25 = 0;\n        var vowelIndex26 = word.length-1;\n    \
    \    var vowelCount26 = 0;\n        var vowelIndex27 = word.length-1;\n      \
    \  var vowelCount27 = 0;\n        var vowelIndex28 = word.length-1;\n        var\
    \ vowelCount28 = 0;\n        var vowelIndex29 = word.length-1;\n        var vowelCount29\
    \ = 0;\n        var vowelIndex30 = word.length-1;\n        var vowelCount30 =\
    \ 0;\n        var vowelIndex31 = word.length-1;\n        var vowelCount31 = 0;\n\
    \        var vowelIndex32 = word.length-1;\n        var vowelCount32 = 0;\n  \
    \      var vowelIndex33 = word.length-1;\n        var vowelCount33 = 0;\n    \
    \    var vowelIndex34 = word.length-1;\n        var vowelCount34 = 0;\n      \
    \  var vowelIndex35 = \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcrfn6326.scala:88:26 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex35\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcrfn6326.scala:89:5 ---------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8melyaib.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8melyaib.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8melyaib.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp351e4wzy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(x => vowels.contains(x))\n        val consonantsIndex\
    \ = word.lastIndexWhere(x => consonants.contains(x))\n        val vowelsIndex\
    \ = vowelsIndex + vowelsCount - 1\n        val consonantsIndex = consonantsIndex\
    \ + consonantsCount - 1\n        val vowelsIndex = vowelsIndex - consonantsIndex\n\
    \        val vowel = word.substring(vowelsIndex + 1, vowelsIndex + vowelsCount)\n\
    \        vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5mf_7nk.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5mf_7nk.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex + vowelsCount\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps5mf_7nk.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = consonantsIndex\
    \ + consonantsCount - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps5mf_7nk.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex\
    \ - consonantsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmps5mf_7nk.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36m"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowels.toSet\n\
    \        val vowelsSet4 = vowels.toSet.reverse\n        val vowelsSet5 = vowels.toSet\n\
    \        val vowelsSet6 = vowels.toSet.reverse\n        val vowelsSet7 = vowels.toSet\n\
    \        val vowelsSet8 = vowels.toSet.reverse\n        val vowelsSet9 = vowels.toSet\n\
    \        val vowelsSet10 = vowels.toSet.reverse\n        val vowelsSet11 = vowels.toSet\n\
    \        val vowelsSet12 = vowels.toSet.reverse\n        val vowelsSet13 = vowels.toSet\n\
    \        val vowelsSet14 = vowels.toSet.reverse\n        val vowelsSet15 = vowels.toSet\n\
    \        val vowelsSet16 = vowels.toSet.reverse\n        val vowelsSet17 = vowels.toSet\n\
    \        val vowelsSet18 = vowels.toSet.reverse\n        val vowelsSet19 = vowels.toSet\n\
    \        val vowelsSet20 = vowels.toSet.reverse\n        val vowelsSet21 = vowels.toSet\n\
    \        val vowelsSet22 = vowels.toSet.reverse\n        val vowelsSet23 = vowels.toSet\n\
    \        val vowelsSet24 = vowels.toSet.reverse\n        val vowelsSet25 = vowels.toSet\n\
    \        val vowelsSet26 = vowels.toSet.reverse\n        val vowelsSet27 = vowels.toSet\n\
    \        val vowelsSet28 = vowels.toSet.reverse\n        val vowelsSet29 = vowels.toSet\n\
    \        val vowelsSet30 = vowels.toSet.reverse\n        val vowelsSet31 = vowels.toSet\n\
    \        val vowelsSet32 = vowels.toSet.reverse\n        val vowelsSet33 = vowels.toSet\n\
    \        val vowelsSet34 = vowels.toSet.reverse\n        val vowelsSet35 = vowels.toSet\n\
    \        val vowelsSet36 = vowels.toSet.reverse\n        val vowelsSet37 = vowels.toSet\n\
    \        val vowelsSet38 = vowels.toSet.reverse\n        val vowelsSet39 = vowels.toSet\n\
    \        val vowelsSet40 = vowels.toSet.reverse\n        val vowelsSet41 = vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet8\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:29:39 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet10\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpihbzjcpa.scala:31:39 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet12\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m"
  stdout: ''
  timestamp: 1660009494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowel = \"\"\n        var index\
    \ = 0\n        val wordList = word.split(\"\\\\W+\")\n        val wordListLength\
    \ = wordList.length\n        val wordListLength = wordListLength - 1\n       \
    \ val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n        val wordListLength = wordListLength\
    \ - 1\n        val wordListLength = wordListLength - 1\n        val wordListLength\
    \ = wordListLength - 1\n        val wordListLength = wordListLength - 1\n    \
    \    val wordListLength = wordListLength - 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgwm5u_t1.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mwordListLength\e[0m = wordListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListLength is already defined as \e[33mvalue\e[0m \e[35mwordListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgwm5u_t1.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mwordListLength\e[0m = wordListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListLength is already defined as \e[33mvalue\e[0m \e[35mwordListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgwm5u_t1.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mwordListLength\e[0m = wordListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListLength is already defined as \e[33mvalue\e[0m \e[35mwordListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgwm5u_t1.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mwordListLength\e[0m = wordListLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordListLength is already defined as \e[33mvalue\e[0m \e[35mwordListLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgwm5u_t1.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mwordListLength\e[0m = wordListLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660009492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpol27pdm7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = vowels.toList.map(_.length).sum\n        val vowelsIndex = word.map(_.toUpperCase).zipWithIndex.filter(_._2\
    \ % vowelsCount == 0).map(_._1).last\n        val vowelsIndex = vowelsIndex.map(_.toUpperCase)\n\
    \        val vowelsIndex = vowelsIndex.filter(x => vowels.contains(x))\n     \
    \   vowelsIndex.headOption.getOrElse(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2lzr4yxf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.map(_.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2lzr4yxf.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.filter(\e\
    [36mx\e[0m => vowels.contains(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2lzr4yxf.scala:21:37 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.map(_.toUpperCase).zipWithIndex.filter(_._2\
    \ % vowelsCount == \e[31m0\e[0m).map(_._1).last\n\e[31m\e[31m   |\e[0m       \
    \                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value toUpperCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        val wordLength = word.length\n      \
    \  var i = 0\n        var j = 0\n        var consonantIndex = 0\n        var consonantCount\
    \ = 0\n        var consonant = \"\"\n        var vowelIndex = 0\n        var \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxlwbaxfl.scala:111:11 --------------------------\e\
    [0m\e[0m\n\e[31m111 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxlwbaxfl.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mvowelIndex\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxlwbaxfl.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelCount is already defined as \e[33mvariable\e[0m \e[35mvowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxlwbaxfl.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36mvowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowel is already defined\
    \ as \e[33mvariable\e[0m \e[35mvowel\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxlwbaxfl.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mwordLength\e[0m = word.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mwordLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxlwbaxfl.scala:33:12\
    \ ------------------------"
  stdout: ''
  timestamp: 1660009493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(vowels.contains).length\n        val consonants =\
    \ Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val consonantsCount = word.filter(consonants.contains).length\n      \
    \  val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount =\
    \ vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda36iron.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda36iron.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda36iron.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda36iron.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpda36iron.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660009497
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowels.toSet.reverse\n\
    \        val vowelsSet4 = vowels.toSet.reverse\n        val vowelsSet5 = vowels.toSet.reverse\n\
    \        val vowelsSet6 = vowels.toSet.reverse\n        val vowelsSet7 = vowels.toSet.reverse\n\
    \        val vowelsSet8 = vowels.toSet.reverse\n        val vowelsSet9 = vowels.toSet.reverse\n\
    \        val vowelsSet10 = vowels.toSet.reverse\n        val vowelsSet11 = vowels.toSet.reverse\n\
    \        val vowelsSet12 = vowels.toSet.reverse\n        val vowelsSet13 = vowels.toSet.reverse\n\
    \        val vowelsSet14 = vowels.toSet.reverse\n        val vowelsSet15 = vowels.toSet.reverse\n\
    \        val vowelsSet16 = vowels.toSet.reverse\n        val vowelsSet17 = vowels.toSet.reverse\n\
    \        val vowelsSet18 = vowels.toSet.reverse\n        val vowelsSet19 = vowels.toSet.reverse\n\
    \        val vowelsSet20 = vowels.toSet.reverse\n        val vowelsSet21 = vowels.toSet.reverse\n\
    \        val vowelsSet22 = vowels.toSet.reverse\n        val vowelsSet23 = vowels.toSet.reverse\n\
    \        val vowelsSet24 = vowels.toSet.reverse\n        val vowelsSet25 = vowels.toSet.reverse\n\
    \        val vowelsSet26 = vowels.toSet.reverse\n        val vowelsSet27 = vowels.toSet.reverse\n\
    \        val vowelsSet28 = vowels.toSet.reverse\n        val vowelsSet29 = vowels.toSet.reverse\n\
    \        val vowelsSet30 = vowels.toSet.reverse\n        val vowelsSet31 = vowels.toSet.reverse\n\
    \        val vowelsSet32 = vowels.toSet.reverse\n        val vowelsSet33 = vowels.toSet.reverse\n\
    \        val vowelsSet34 = vowels.toSet.reverse\n        val vowelsSet35 = vowels.toSet.reverse\n\
    \        val vowelsSet36 = vowels.toSet.reverse\n        val vowelsSet37 = vowels.toSet.reverse\n\
    \        val vowelsSet38 = vowels.toSet.reverse\n        val vowelsSet39 = vowels.toSet.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp37xy786m.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.scala:24:38 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet5\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp37xy786m.s"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val vowelsSetIteratorIterator = vowelsSetIterator.iterator\n\
    \        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n     \
    \   val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpibc1sc5z.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpibc1sc5z.scala:40:104\
    \ --------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpibc1sc5z.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuowfiqlw.scala:27:404 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet8\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \"\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                        unclosed string literal\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuowfiqlw.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var vowelIndex2 = -1\n        var vowel2 = \"\"\n        var\
    \ vowelIndex3 = -1\n        var vowel3 = \"\"\n        var vowelIndex4 = -1\n\
    \        var vowel4 = \"\"\n        var vowelIndex5 = -1\n        var vowel5 =\
    \ \"\"\n        var vowelIndex6 = -1\n        var vowel6 = \"\"\n        var vowelIndex7\
    \ = -1\n        var vowel7 = \"\"\n        var vowelIndex8 = -1\n        var vowel8\
    \ = \"\"\n        var vowelIndex9 = -1\n        var vowel9 = \"\"\n        var\
    \ vowelIndex10 = -1\n        var vowel10 = \"\"\n        var vowelIndex11 = -1\n\
    \        var vowel11 = \"\"\n        var vowelIndex12 = -1\n        var vowel12\
    \ = \"\"\n        var vowelIndex13 = -1\n        var vowel13 = \"\"\n        var\
    \ vowelIndex14 = -1\n        var vowel14 = \"\"\n        var vowelIndex15 = -1\n\
    \        var vowel15 = \"\"\n        var vowelIndex16 = -1\n        var vowel16\
    \ = \"\"\n        var vowelIndex17 = -1\n        var vowel17 = \"\"\n        var\
    \ vowelIndex18 = -1\n        var vowel18 = \"\"\n        var vowelIndex19 = -1\n\
    \        var vowel19 = \"\"\n        var vowelIndex20 = -1\n        var vowel20\
    \ = \"\"\n        var vowelIndex21 = -1\n        var vowel21 = \"\"\n        var\
    \ vowelIndex22 = -1\n        var vowel22 = \"\"\n        var vowelIndex23 = -1\n\
    \        var vowel23 = \"\"\n        var vowelIndex24 = -1\n        var vowel24\
    \ = \"\"\n        var vowelIndex25 = -1\n        var vowel25 = \"\"\n        var\
    \ vowelIndex26 = -1\n        var vowel26 = \"\"\n        var vowelIndex27 = -1\n\
    \        var vowel27 = \"\"\n        var vowelIndex28 = -1\n        var vowel28\
    \ = \"\"\n        var vowelIndex29 = -1\n        var vowel29 = \"\"\n        var\
    \ vowelIndex30 = -1\n        var vowel30 = \"\"\n        var vowelIndex31 = -1\n\
    \        var vowel31 = \"\"\n        var vowelIndex32 = -1\n        var vowel32\
    \ = \"\"\n        var vowelIndex33 = -1\n        var vowel33 = \"\"\n        var\
    \ vowelIndex34 = -1\n        var vowel34 = \"\"\n        var vowelIndex35 = -1\n\
    \        var vowel35 = \"\"\n        var vowelIndex36 = -1\n        var vowel36\
    \ = \"\"\n        var vowelIndex37 = -1\n        var vowel37 = \"\"\n        var\
    \ vowelIndex38 = -1\n        var vowel38 = \"\"\n        var vowelIndex39 = -1\n\
    \        var vowel39 = \"\"\n        var vowelIndex40 = -1\n        var vowel40\
    \ = \"\"\n        var vowelIndex41 = -1\n        var vowel41 = \"\"\n        var\
    \ vowelIndex42 = -1\n        var vowel42 = \"\"\n        var vowelIndex43 = -1\n\
    \        var vowel43 = \"\"\n        var vowelIndex44 = -1\n        var vowel44\
    \ = \"\"\n        var vowelIndex45\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymiv89gj.scala:109:4 ---------------------------\e\
    [0m\e[0m\n\e[31m109 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpymiv89gj.scala:109:5 --------------------\e[0m\e[0m\n\e[31m109 |\e[0m\
    \    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\
    \e[31m    |\e[0m     Required: String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp36axs4fi.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36axs4fi.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36axs4fi.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36axs4fi.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36axs4fi.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount is\
    \ already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp36axs4fi.sca"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelFound\
    \ = false\n        var vowel = \"\"\n        var consonantIndex = 0\n        var\
    \ consonantFound = false\n        var consonant = \"\"\n        var vowelCount\
    \ = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n        var\
    \ consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel = \"\"\n        var consonant = \"\"\n        var\
    \ vowelCount = 0\n        var consonantCount = 0\n        var vowelIndex = 0\n\
    \        var consonantIndex = 0\n        var vowelFound = false\n        var consonantFound\
    \ = false\n        var vowel\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzwpxn6il.scala:105:4 ---------------------------\e\
    [0m\e[0m\n\e[31m105 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzwpxn6il.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvariable\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzwpxn6il.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mvar\e[0m \e[36mconsonantIndex\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mconsonantIndex\
    \ is already defined as \e[33mvariable\e[0m \e[35mconsonantIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzwpxn6il.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mvar\e[0m \e[36mvowelFound\e[0m = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelFound is\
    \ already defined as \e[33mvariable\e[0m \e[35mvowelFound\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzwpxn6il.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mconsonantFound\e[0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantFound is already defined as \e[33mvariable\e[0m \e\
    [35mconsonantFound\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzwpxn6il.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36m"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsIndexes\
    \ = vowels.toList.zipWithIndex.toMap\n        val consonantsIndexes = consonants.toList.zipWithIndex.toMap\n\
    \        val vowelsIndexesReverse = vowelsIndexes.reverse\n        val consonantsIndexesReverse\
    \ = consonantsIndexes.reverse\n        val vowelsIndexesReverseReverse = vowelsIndexesReverse.reverse\n\
    \        val consonantsIndexesReverseReverse = consonantsIndexesReverse.reverse\n\
    \        val vowelsIndexesReverseReverseReverse = vowelsIndexesReverseReverse.reverse\n\
    \        val consonantsIndexesReverseReverseReverse = consonantsIndexesReverseReverse.reverse.reverse\n\
    \        val vowelsIndexesReverseReverseReverseReverse = vowelsIndexesReverseReverseReverse.reverse.reverse\n\
    \        val consonantsIndexesReverseReverseReverseReverse = consonantsIndexesReverseReverseReverse.reverse.reverse.reverse\n\
    \        val vowelsIndexesReverseReverseReverseReverse = vowelsIndexesReverseReverseReverseReverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3lmzpml6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndexesReverseReverseReverseReverse\e\
    [0m = vowelsIndexesReverseReverseReverseReverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reve"
  stdout: ''
  timestamp: 1660009503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount = vowels.toSet.size;\n\
    \        var vowelsCount2 = vowels.toSet.size;\n        var vowelsCount3 = vowels.toSet.size;\n\
    \        var vowelsCount4 = vowels.toSet.size;\n        var vowelsCount5 = vowels.toSet.size;\n\
    \        var vowelsCount6 = vowels.toSet.size;\n        var vowelsCount7 = vowels.toSet.size;\n\
    \        var vowelsCount8 = vowels.toSet.size;\n        var vowelsCount9 = vowels.toSet.size;\n\
    \        var vowelsCount10 = vowels.toSet.size;\n        var vowelsCount11 = vowels.toSet.size;\n\
    \        var vowelsCount12 = vowels.toSet.size;\n        var vowelsCount13 = vowels.toSet.size;\n\
    \        var vowelsCount14 = vowels.toSet.size;\n        var vowelsCount15 = vowels.toSet.size;\n\
    \        var vowelsCount16 = vowels.toSet.size;\n        var vowelsCount17 = vowels.toSet.size;\n\
    \        var vowelsCount18 = vowels.toSet.size;\n        var vowelsCount19 = vowels.toSet.size;\n\
    \        var vowelsCount20 = vowels.toSet.size;\n        var vowelsCount21 = vowels.toSet.size;\n\
    \        var vowelsCount22 = vowels.toSet.size;\n        var vowelsCount23 = vowels.toSet.size;\n\
    \        var vowelsCount24 = vowels.toSet.size;\n        var vowelsCount25 = vowels.toSet.size;\n\
    \        var vowelsCount26 = vowels.toSet.size;\n        var vowelsCount27 = vowels.toSet.size;\n\
    \        var vowelsCount28 = vowels.toSet.size;\n        var vowelsCount29 = vowels.toSet.size;\n\
    \        var vowelsCount30 = vowels.toSet.size;\n        var vowelsCount31 = vowels.toSet.size;\n\
    \        var vowelsCount32 = vowels.toSet.size;\n        var vowelsCount33 = vowels.toSet.size;\n\
    \        var vowelsCount34 = vowels.toSet.size;\n        var vowelsCount35 = vowels.toSet.size;\n\
    \        var vowelsCount36 = vowels.toSet.size;\n        var vowelsCount37 = vowels.toSet.size;\n\
    \        var vowelsCount38 = vowels.toSet.size;\n        var vowelsCount39 = vowels.toSet.size;\n\
    \        var vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7uehdrxk.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7uehdrxk.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009501
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toSeq.groupBy(x\
    \ => x).mapValues(_.size).max;\n        val vowelsCountMap = vowelsCount.toMap;\n\
    \        val vowelsCountMapKeys = vowelsCountMap.keys;\n        val vowelsCountMapValues\
    \ = vowelsCountMap.values;\n        val vowelsCountMapKeysSorted = vowelsCountMapKeys.sortWith(_\
    \ < _);\n        val vowelsCountMapValuesSorted = vowelsCountMapValues.sortWith(_\
    \ < _);\n        val vowelsCountMapKeysSortedIndex = vowelsCountMapKeys.zipWithIndex.filter(x\
    \ => vowelsCountMapValuesSorted.contains(x._)).map(_._2);\n        val vowelsCountMapValuesSortedIndex\
    \ = vowelsCountMapValues.zipWithIndex.filter(x => vowelsCountMapKeysSorted.contains(x._)).map(_._2);\n\
    \        val vowelsCountMapKeysSortedIndexReverse = vowelsCountMapKeys.zipWithIndex.filter(x\
    \ => vowelsCountMapValuesSorted.contains(x._)).map(_._2).reverse;\n        val\
    \ vowelsCountMapValuesSortedIndexReverse = vowelsCountMapValues.zipWithIndex.filter(x\
    \ => vowelsCountMapKeysSorted.contains(x._)).map(_._2).reverse;\n        val vowelsCountMapKeysSortedIndexReverse2\
    \ = vowelsCountMapKeys.zipWithIndex.filter(x => vowelsCountMapValuesSorted.contains(x._)).map(_._2).reverse;\n\
    \        val vowelsCountMapValuesSortedIndexReverse2 = vowelsCountMapValues.zipWithIndex.filter(x\
    \ => vowelsCountMapKeysSorted.contains(x._)).map(_._2).reverse;\n        val vowelsCountMapKeysSortedIndexReverse3\
    \ = vowelsCountMapKeys.zipWithIndex.filter(x => vowelsCountMapValuesSorted.contains(x._)).map(_._2).reverse;\n\
    \        val vowelsCountMapValuesSortedIndexReverse3 = vowelsCountMapValues.zipWithIndex.filter(x\
    \ => vowelsCountMapKeysSorted.contains(x._)).map(_._2).reverse;\n        val vowelsCountMapKeysSortedIndexReverse4\
    \ = vowelsCountMapKeys.zipWithIndex.filter(x => vowelsCountMapValuesSorted.contains(x._)).map(_._2).reverse;\n\
    \        val vowelsCountMapValuesSortedIndexReverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejuh_xz.scala:26:126 --------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountMapKeysSortedIndex\e\
    [0m = vowelsCountMapKeys.zipWithIndex.filter(\e[36mx\e[0m => vowelsCountMapValuesSorted.contains(x._)).map(_._2);\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                   an identifier expected, but\
    \ '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejuh_xz.scala:27:128\
    \ --------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountMapValuesSortedIndex\e[0m = vowelsCountMapValues.zipWithIndex.filter(\e\
    [36mx\e[0m => vowelsCountMapKeysSorted.contains(x._)).map(_._2);\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                   an identifier expected, but '_' found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejuh_xz.scala:28:133\
    \ --------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountMapKeysSortedIndexReverse\e[0m = vowelsCountMapKeys.zipWithIndex.filter(\e\
    [36mx\e[0m => vowelsCountMapValuesSorted.contains(x._)).map(_._2).reverse;\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                   an identifier expected,\
    \ but '_' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbejuh_xz.scala:29:135\
    \ --------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCountMapValuesSortedIndexReverse\e[0m = vowelsCountMapValues.zipWit"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount2 = word.count(vowels.toList)\n        val vowelsCount3\
    \ = word.count(vowels.toSeq)\n        val vowelsCount4 = word.count(vowels.toSet)\n\
    \        val vowelsCount5 = word.count(vowels.toMap)\n        val vowelsCount6\
    \ = word.count(vowels.toSeq.toMap)\n        val vowelsCount7 = word.count(vowels.toSeq.toSet)\n\
    \        val vowelsCount8 = word.count(vowels.toSeq.toMap.toSet)\n        val\
    \ vowelsCount9 = word.count(vowels.toSeq.toMap.toSeq)\n        val vowelsCount10\
    \ = word.count(vowels.toSeq.toMap.toSeq.toMap)\n        val vowelsCount11 = word.count(vowels.toSeq.toMap.toSeq.toSet)\n\
    \        val vowelsCount12 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSet)\n\
    \        val vowelsCount13 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq)\n\
    \        val vowelsCount14 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq)\n\
    \        val vowelsCount15 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount16 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount17 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount18 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount19 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount20 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount21 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq.toSeq)\n\
    \        val vowelsCount22 = word.count(vowels.toSeq.toMap.toSeq.toMap.toSeq.toSeq.toSeq.toSeq.toSeq.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2uzcnqcc.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2uzcnqcc.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2uzcnqcc.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.count(vowels.toList)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    List[String]\n\e\
    [31m   |\e[0m                                      Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2uzcnqcc.scala:22:45\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount3\e\
    [0m = word.count(vowels.toSeq)\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    Seq[String]\n\e[31m   |\e[0m                            \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp2uzcnqcc.scala:24:50 -----------------------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount5\e[0m = word.count(vowels.toMap)\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m               Cannot prove that String <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m               where:    K is a type variable with c"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\")\n        val vowelsSet = vowels.toSet\n        val consonantsSet =\
    \ consonants.toSet\n        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize\
    \ = consonantsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n \
    \       val consonantsSetIterator = consonantsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val consonantsSetIteratorSize = consonantsSetIterator.size\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val consonantsSetIteratorNext\
    \ = consonantsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val consonantsSetIteratorNextSize = consonantsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ consonantsSetIteratorNextNext = consonantsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ consonantsSetIteratorNextNextSize = consonantsSetIteratorNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n   \
    \     val consonantsSetIteratorNextNextNext = consonantsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextSize = consonantsSetIteratorNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val consonantsSetIteratorNextNextNextNext = consonantsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val consonantsSetIteratorNextNextNextNextSize = consonantsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val consonants\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqv9mgcwm.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqv9mgcwm.scala:33:62\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqv9mgcwm.scala:34:70 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetIteratorNextNext\e\
    [0m = consonantsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ next is not a member of String - did you mean consonantsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqv9mgcwm.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSet2\
    \ = vowels.toSet.reverse\n        val consonantsSet2 = consonants.toSet.reverse\n\
    \        val vowelsSet3 = vowels.toSet.reverse\n        val consonantsSet3 = consonants.toSet.reverse\n\
    \        val vowelsSet4 = vowels.toSet.reverse\n        val consonantsSet4 = consonants.toSet.reverse\n\
    \        val vowelsSet5 = vowels.toSet.reverse\n        val consonantsSet5 = consonants.toSet.reverse\n\
    \        val vowelsSet6 = vowels.toSet.reverse\n        val consonantsSet6 = consonants.toSet.reverse\n\
    \        val vowelsSet7 = vowels.toSet.reverse\n        val consonantsSet7 = consonants.toSet.reverse\n\
    \        val vowelsSet8 = vowels.toSet.reverse\n        val consonantsSet8 = consonants.toSet.reverse\n\
    \        val vowelsSet9 = vowels.toSet.reverse\n        val consonantsSet9 = consonants.toSet.reverse\n\
    \        val vowelsSet10 = vowels.toSet.reverse\n        val consonantsSet10 =\
    \ consonants.toSet.reverse\n        val vowelsSet11 = vowels.toSet.reverse\n \
    \       val consonantsSet11 = consonants.toSet.reverse\n        val vowelsSet12\
    \ = vowels.toSet.reverse\n        val consonantsSet12 = consonants.toSet.reverse\n\
    \        val vowelsSet13 = vowels.toSet.reverse\n        val consonantsSet13 =\
    \ consonants.toSet.reverse\n        val vowelsSet14 = vowels.toSet.reverse\n \
    \       val consonantsSet14 = consonants.toSet.reverse\n        val vowelsSet15\
    \ = vowels.toSet.reverse\n        val consonantsSet15 = consonants.toSet.reverse\n\
    \        val vowelsSet16 = vowels.toSet.reverse\n        val consonantsSet16 =\
    \ consonants.toSet.reverse\n        val vowelsSet17 = vowels.toSet.reverse\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpopsfg767.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet2\e[0m = consonants.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet3\e[0m = consonants.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorPrevNext = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNextPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNext = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrev\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppglh3xx5.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppglh3xx5.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNextPrevNext\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppglh3xx5.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppglh3xx5.scala:25:58 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevNext\e[0m\
    \ = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                            \
    \            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmppglh3xx5.scala:26:62 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevNextPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \             "
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.diff(Set(\"a\"))\n        val vowelsSet3 =\
    \ vowelsSet.diff(Set(\"e\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"i\"\
    ))\n        val vowelsSet5 = vowelsSet.diff(Set(\"o\"))\n        val vowelsSet6\
    \ = vowelsSet.diff(Set(\"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    y\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"A\"))\n        val vowelsSet9\
    \ = vowelsSet.diff(Set(\"E\"))\n        val vowelsSet10 = vowelsSet.diff(Set(\"\
    I\"))\n        val vowelsSet11 = vowelsSet.diff(Set(\"O\"))\n        val vowelsSet12\
    \ = vowelsSet.diff(Set(\"U\"))\n        val vowelsSet13 = vowelsSet.diff(Set(\"\
    Y\"))\n        val vowelsSet14 = vowelsSet.diff(Set(\"a\"))\n        val vowelsSet15\
    \ = vowelsSet.diff(Set(\"e\"))\n        val vowelsSet16 = vowelsSet.diff(Set(\"\
    i\"))\n        val vowelsSet17 = vowelsSet.diff(Set(\"o\"))\n        val vowelsSet18\
    \ = vowelsSet.diff(Set(\"u\"))\n        val vowelsSet19 = vowelsSet.diff(Set(\"\
    y\"))\n        val vowelsSet20 = vowelsSet.diff(Set(\"A\"))\n        val vowelsSet21\
    \ = vowelsSet.diff(Set(\"E\"))\n        val vowelsSet22 = vowelsSet.diff(Set(\"\
    I\"))\n        val vowelsSet23 = vowelsSet.diff(Set(\"O\"))\n        val vowelsSet24\
    \ = vowelsSet.diff(Set(\"U\"))\n        val vowelsSet25 = vowelsSet.diff(Set(\"\
    Y\"))\n        val vowelsSet26 = vowelsSet.diff(Set(\"a\"))\n        val vowelsSet27\
    \ = vowelsSet.diff(Set(\"e\"))\n        val vowelsSet28 = vowelsSet.diff(Set(\"\
    i\"))\n        val vowelsSet29 = vowelsSet.diff(Set(\"o\"))\n        val vowelsSet30\
    \ = vowelsSet.diff(Set(\"u\"))\n        val vowelsSet31 = vowelsSet.diff(Set(\"\
    y\"))\n        val vowelsSet32 = vowelsSet.diff(Set(\"A\"))\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv2g27oy4.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppwcctd7b.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppwcctd7b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val consonants = Set(\"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\");\n        val vowelsAndConsonants\
    \ = vowels ++ consonants;\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size;\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.toSet.size;\n   \
    \     val vowelsAndConsonantsLength = vowelsAndConsonants.toSeq.size;\n      \
    \  val vowelsAndConsonantsLength = vowelsAndConsonants.toList.size;\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.toIndexedSeq.size;\n       \
    \ val vowelsAndConsonantsLength = vowelsAndConsonants.toArray.size;\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.toSet.size;\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.toSeq.size;\n        val vowelsAndConsonantsLength = vowelsAndConsonants.toList.size;\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.toIndexedSeq.size;\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.toArray.size;\n \
    \       val vowelsAndConsonantsLength = vowelsAndConsonants.toSet.size;\n    \
    \    val vowelsAndConsonantsLength = vowelsAndConsonants.toSeq.size;\n       \
    \ val vowelsAndConsonantsLength = vowelsAndConsonants.toList.size;\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.toIndexedSeq.size;\n       \
    \ val vowelsAndConsonantsLength = vowelsAndConsonants.toArray.size;\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.toSet.size;\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.toSeq.size;\n        val vowelsAndConsonantsLength = vowelsAndConsonants.toList.size;\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.toIndexedSeq.size;\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.toArray.size;\n \
    \       val vowelsAndConsonantsLength = vowelsAndConsonants.toSet.size;\n    \
    \    val vowelsAndConsonantsLength = vowelsAndConsonants.toSeq.size;\n       \
    \ val vowelsAndConsonantsLength = vowelsAndCon\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvdlygyom.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.toSet.size;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvdlygyom.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.toSeq.size;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvdlygyom.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.toList.size;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvdlygyom.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.toIndexedSeq.size;\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded method"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp351e4wzy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet5 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet6 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet7 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet8 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet10 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet11 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet13 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet14 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet15 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet17 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet18 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet19 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet20 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet21 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet22 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet23 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet25 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet26 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet27 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet28 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet29 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet30 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet31 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet32 = vowelsSet.filter(_ != \"u\")\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6h25dxq_.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.count(vowels.contains)\n        val consonantsCount = consonants.toList.count(consonants.contains)\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsBefore = word.substring(vowelsIndex\
    \ - vowelsCount, vowelsIndex).toUpperCase\n        val vowelsAfter = word.substring(vowelsIndex,\
    \ vowelsIndex + vowelsCount).toUpperCase\n        val consonantsBefore = word.substring(consonantsIndex\
    \ - consonantsCount, consonantsIndex).toUpperCase\n        val consonantsAfter\
    \ = word.substring(consonantsIndex, consonantsIndex + consonantsCount).toUpperCase\n\
    \        if (vowelsBefore == \"\" && vowelsAfter == \"\" && consonantsBefore ==\
    \ \"\" && consonantsAfter == \"\") {\n            return \"\"\n        }\n   \
    \     if (vowelsBefore == \"\" && vowelsAfter == \"\" && consonantsBefore != \"\
    \" && consonantsAfter == \"\") {\n            return consonantsBefore\n      \
    \  }\n        if (vowelsBefore != \"\" && vowelsAfter == \"\" && consonantsBefore\
    \ == \"\" && consonantsAfter == \"\") {\n            return vowelsBefore\n   \
    \     }\n        if (vowelsBefore != \"\" && vowelsAfter == \"\" && consonantsBefore\
    \ != \"\" && consonantsAfter == \"\") {\n            return vowelsBefore + consonantsAfter\n\
    \        }\n        if (vowelsBefore == \"\" && vowelsAfter == \"\" && consonantsBefore\
    \ != \"\" && consonantsAfter != \"\") {\n            return consonantsBefore +\
    \ consonantsAfter\n        }\n        if (vowelsBefore == \"\" && vowelsAfter\
    \ == \"\" && consonantsBefore == \"\" && consonantsAfter != \"\") {\n        \
    \    return vowelsBefore + consonantsAfter\n        }\n        if (vowelsBefore\
    \ != \"\" && vowelsAfter == \"\" && consonantsBefore != \"\" && consonantsAfter\
    \ != \"\") {\n            return vowelsBefore + consonantsAfter\n        }\n \
    \       if (vowelsBefore != \"\" && vowelsAfter == \"\" && consonantsBefore ==\
    \ \"\" && consonantsAfter \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5izpbgu0.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5izpbgu0.scala:23:46 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5izpbgu0.scala:24:50\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e\
    [0m = word.lastIndexWhere(consonants.contains)\n\e[31m\e[31m   |\e[0m        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    (elem : Char)\n\e[31m   |\e[0m\
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5izpbgu0.scala:50:81 --------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mif\e[0m (vowelsBefore != \e[31m\"\"\e[0m\
    \ && vowelsAfter == \e[31m\"\"\e[0m && consonantsBefore == \e[31m\"\"\e[0m &&\
    \ consonantsAfter \n\e[31m\e[31m   |\e[0m                                    \
    \                                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    Found:    (consonantsAfter : String)\n\e\
    [31m   |\e[0m                                    Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowel\
    \ = \"\"\n        var consonantIndex = 0\n        var consonant = \"\"\n     \
    \   var vowelCount = 0\n        var consonantCount = 0\n        var lastVowel\
    \ = \"\"\n        var lastConsonant = \"\"\n        var lastVowelIndex = 0\n \
    \       var lastConsonantIndex = 0\n        var lastVowelCount = 0\n        var\
    \ lastConsonantCount = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelCount = 0\n        var lastConsonantCount = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelCount = 0\n        var lastConsonantCount = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelCount = 0\n  \
    \      var lastConsonantCount = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelCount = 0\n        var lastConsonantCount\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelCount = 0\n        var lastConsonantCount = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelCount\
    \ = 0\n        var lastConsonantCount = 0\n        var lastVowelIndex = 0\n  \
    \      var lastConsonantIndex = 0\n        var lastVowelCount = 0\n        var\
    \ lastConsonantCount = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex\
    \ = 0\n        var lastVowelCount = 0\n        var lastConsonantCount = 0\n  \
    \      var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var\
    \ lastVowelCount = 0\n        var lastConsonantCount = 0\n        var lastVowelIndex\
    \ = 0\n        var lastConsonantIndex = 0\n        var lastVowelCount = 0\n  \
    \      var lastConsonantCount = 0\n        var lastVowelIndex = 0\n        var\
    \ lastConsonantIndex = 0\n        var lastVowelCount = 0\n        var lastConsonantCount\
    \ = 0\n        var lastVowelIndex = 0\n        var lastConsonantIndex = 0\n  \
    \      var lastVowelCount = 0\n        var lastConsonantCount = 0\n        var\
    \ lastVowelIndex = 0\n        var lastConsonantIndex = 0\n        var lastVowelCount\
    \ = 0\n        var lastConsonantCount\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfgzq00z_.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfgzq00z_.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastVowelIndex\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastVowelIndex is already defined as \e[33mvariable\e[0m \e\
    [35mlastVowelIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfgzq00z_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mvar\e[0m \e[36mlastConsonantIndex\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlastConsonantIndex is already defined as \e[33mvariable\e[0m \e\
    [35mlastConsonantIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfgzq00z_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mlastVowelCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mlastVowelCount is already defined as \e[33mvariable\e[0m \e[35mlastVowelCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgzq00z_.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mlastConsonantCount\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlastConsonantCount is already defined as \e[33mvariable\e[0m \e[35mlastConsonantCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfgzq00z_.scala:36:12 ---------------------------\e[0"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.isLetter)\n        val consonantsIndex\
    \ = word.lastIndexWhere(_.isLetter)\n        val vowelsEnd = vowelsIndex + vowelsCount\
    \ - 1\n        val consonantsEnd = consonantsIndex + consonantsCount - 1\n   \
    \     val vowelsStart = vowelsIndex - vowelsCount\n        val consonantsStart\
    \ = consonantsIndex - consonantsCount\n        val vowelsMid = (vowelsIndex +\
    \ vowelsCount) / 2\n        val consonantsMid = (consonantsIndex + consonantsCount)\
    \ / 2\n        val vowelsMidEnd = vowelsMid + vowelsCount - 1\n        val consonantsMidEnd\
    \ = consonantsMid + consonantsCount - 1\n        val vowelsMidStart = vowelsMid\
    \ - vowelsCount\n        val consonantsMidStart = consonantsMid - consonantsCount\n\
    \        val vowelsMidMid = (vowelsMid + vowelsCount) / 2\n        val consonantsMidMid\
    \ = (consonantsMid + consonantsCount) / 2\n        val vowelsMidMidEnd = vowelsMidMid\
    \ + vowelsCount - 1\n        val consonantsMidMidEnd = consonantsMidMid + consonantsCount\
    \ - 1\n        val vowelsMidMidStart = vowelsMidMid - vowelsCount\n        val\
    \ consonantsMidMidStart = consonantsMidMid - consonantsCount\n        val vowelsMidMidMid\
    \ = (vowelsMidMid + vowelsCount) / 2\n        val consonantsMidMidMid = (consonantsMidMid\
    \ + consonantsCount) / 2\n        val vowelsMidMidMidEnd = vowelsMidMidMid + vowelsCount\
    \ - 1\n        val consonantsMidMidMidEnd = consonantsMidMidMid + consonantsCount\
    \ - 1\n        val vowelsMidMidMidStart = vowelsMidMidMid - vowelsCount\n    \
    \    val consonantsMidMidMidStart = consonantsMidMidMid - consonantsCount\n  \
    \      val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp95jpmr45.scala:47:11 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95jpmr45.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        var vowelsCount = word.filter(x\
    \ => vowels.contains(x)).length;\n        var vowelsCount2 = word.filter(x =>\
    \ vowels.contains(x)).length;\n        var vowelsCount3 = word.filter(x => vowels.contains(x)).length;\n\
    \        var vowelsCount4 = word.filter(x => vowels.contains(x)).length;\n   \
    \     var vowelsCount5 = word.filter(x => vowels.contains(x)).length;\n      \
    \  var vowelsCount6 = word.filter(x => vowels.contains(x)).length;\n        var\
    \ vowelsCount7 = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount8\
    \ = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount9 = word.filter(x\
    \ => vowels.contains(x)).length;\n        var vowelsCount10 = word.filter(x =>\
    \ vowels.contains(x)).length;\n        var vowelsCount11 = word.filter(x => vowels.contains(x)).length;\n\
    \        var vowelsCount12 = word.filter(x => vowels.contains(x)).length;\n  \
    \      var vowelsCount13 = word.filter(x => vowels.contains(x)).length;\n    \
    \    var vowelsCount14 = word.filter(x => vowels.contains(x)).length;\n      \
    \  var vowelsCount15 = word.filter(x => vowels.contains(x)).length;\n        var\
    \ vowelsCount16 = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount17\
    \ = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount18 =\
    \ word.filter(x => vowels.contains(x)).length;\n        var vowelsCount19 = word.filter(x\
    \ => vowels.contains(x)).length;\n        var vowelsCount20 = word.filter(x =>\
    \ vowels.contains(x)).length;\n        var vowelsCount21 = word.filter(x => vowels.contains(x)).length;\n\
    \        var vowelsCount22 = word.filter(x => vowels.contains(x)).length;\n  \
    \      var vowelsCount23 = word.filter(x => vowels.contains(x)).length;\n    \
    \    var vowelsCount24 = word.filter(x => vowels.contains(x)).length;\n      \
    \  var vowelsCount25 = word.filter(x => vowels.contains(x)).length;\n        var\
    \ vowelsCount26 = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount27\
    \ = word.filter(x => vowels.contains(x)).length;\n        var vowelsCount28 =\
    \ word.filter(x => vowels.contains(x)).length;\n        var vowelsCount29 = word.filter(x\
    \ => vowels.contains(x)).length;\n        var vowelsCount30 = word.filter(x =>\
    \ vowels.contains(x)).length;\n        var vowelsCount31 = word.filter(x => vowels.contains(x)).length;\n\
    \        var vowelsCount32 = word.filter(x => vowels.contains(\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6ti335qt.scala:51:61 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount32\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(\n\e[31m\e[31m   |\e[0m                        \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ti335qt.scala:20:59 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length;\n\e[31m\e[31m   |\e[0m             \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                             Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ti335qt.scala:21:60 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length;\n\e[31m\e[31m   |\e[0m             \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                              Found:    (x : Char)\n\e[31m  \
    \ |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ti335qt.scala:22:60\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length;\n\e[31m\e[31m  \
    \ |\e[0m                                                            ^\e[0m\n\e\
    [31m   |\e[0m                                                    Found:    (x\
    \ : Char)\n\e[31m   |\e[0m                                                   \
    \ Required: String\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphuvn6vtt.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuvn6vtt.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuvn6vtt.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuvn6vtt.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorSize\
    \ = vowelsSetIterator.size\n        val vowelsSetIteratorIterator = vowelsSetIterator.iterator\n\
    \        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n     \
    \   val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpibc1sc5z.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpibc1sc5z.scala:40:104\
    \ --------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpibc1sc5z.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n     \
    \   val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwvr7qm0q.scala:40:104 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwvr7qm0q.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelIndex2\
    \ = word.length - 1\n        var vowelIndex3 = word.length - 1\n        var vowelIndex4\
    \ = word.length - 1\n        var vowelIndex5 = word.length - 1\n        var vowelIndex6\
    \ = word.length - 1\n        var vowelIndex7 = word.length - 1\n        var vowelIndex8\
    \ = word.length - 1\n        var vowelIndex9 = word.length - 1\n        var vowelIndex10\
    \ = word.length - 1\n        var vowelIndex11 = word.length - 1\n        var vowelIndex12\
    \ = word.length - 1\n        var vowelIndex13 = word.length - 1\n        var vowelIndex14\
    \ = word.length - 1\n        var vowelIndex15 = word.length - 1\n        var vowelIndex16\
    \ = word.length - 1\n        var vowelIndex17 = word.length - 1\n        var vowelIndex18\
    \ = word.length - 1\n        var vowelIndex19 = word.length - 1\n        var vowelIndex20\
    \ = word.length - 1\n        var vowelIndex21 = word.length - 1\n        var vowelIndex22\
    \ = word.length - 1\n        var vowelIndex23 = word.length - 1\n        var vowelIndex24\
    \ = word.length - 1\n        var vowelIndex25 = word.length - 1\n        var vowelIndex26\
    \ = word.length - 1\n        var vowelIndex27 = word.length - 1\n        var vowelIndex28\
    \ = word.length - 1\n        var vowelIndex29 = word.length - 1\n        var vowelIndex30\
    \ = word.length - 1\n        var vowelIndex31 = word.length - 1\n        var vowelIndex32\
    \ = word.length - 1\n        var vowelIndex33 = word.length - 1\n        var vowelIndex34\
    \ = word.length - 1\n        var vowelIndex35 = word.length - 1\n        var vowelIndex36\
    \ = word.length - 1\n        var vowelIndex37 = word.length - 1\n        var vowelIndex38\
    \ = word.length - 1\n        var vowelIndex39 = word.length - 1\n        var vowelIndex40\
    \ = word.length - 1\n        var vowelIndex41 = word.length - 1\n        var vowelIndex42\
    \ = word.length - 1\n        var vowelIndex43 = word.length - 1\n        var vowelIndex44\
    \ = word.length - 1\n        var vowelIndex45 = word.length - 1\n        var vowelIndex46\
    \ = word.length - 1\n        var vowelIndex47 = word.length - 1\n        var vowelIndex48\
    \ = word.length - 1\n        var vowelIndex49 = word.length - 1\n        var vowelIndex50\
    \ = word.length - 1\n        var vowelIndex51 = word.length - 1\n        var vowelIndex52\
    \ = word.length - 1\n        var vowelIndex53 = word.length - 1\n        var vowelIndex54\
    \ = word.length - 1\n        var vowelIndex55 = word.length - 1\n        var vowelIndex56\
    \ = word.length - 1\n        var vowelIndex57 = word.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5aqpzld2.scala:77:5\
    \ ---------------------\e[0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = vowels.toSeq.groupBy(x => x).mapValues(_.size).maxBy(_._1)._1\n\
    \        val vowelsCountMap = vowelsCount.toSeq.groupBy(x => x).mapValues(_.size).maxBy(_._1)._1\n\
    \        val vowelsCountMapKeys = vowelsCountMap.keys.toSeq\n        val vowelsCountMapValues\
    \ = vowelsCountMap.toSeq\n        val vowelsCountMapKeysSize = vowelsCountMapKeys.size\n\
    \        val vowelsCountMapValuesSize = vowelsCountMapValues.size\n        val\
    \ vowelsCountMapKeysMax = vowelsCountMapKeys.max\n        val vowelsCountMapValuesMax\
    \ = vowelsCountMapValuesMax.size\n        val vowelsCountMapKeysMin = vowelsCountMapKeys.min\n\
    \        val vowelsCountMapValuesMin = vowelsCountMapValuesMin.size\n        val\
    \ vowelsCountMapKeysAvg = vowelsCountMapKeys.sum / vowelsCountMapKeysSize\n  \
    \      val vowelsCountMapValuesAvg = vowelsCountMapValues.sum / vowelsCountMapValuesSize\n\
    \        val vowelsCountMapKeysSum = vowelsCountMapKeys.sum\n        val vowelsCountMapValuesSum\
    \ = vowelsCountMapValues.sum\n        val vowelsCountMapKeysSumSquare = vowelsCountMapKeys.sum\
    \ * vowelsCountMapKeys.sum\n        val vowelsCountMapValuesSumSquare = vowelsCountMapValues.sum\
    \ * vowelsCountMapValues.sum\n        val vowelsCountMapKeysSumSquareRoot = vowelsCountMapKeys.sum\
    \ * vowelsCountMapKeys.sum\n        val vowelsCountMapValuesSumSquareRoot = vowelsCountMapValues.sum\
    \ * vowelsCountMapValues.sum\n        val vowelsCountMapKeysSumSquareRootOfTwo\
    \ = vowelsCountMapKeys.sum * vowelsCountMapKeys.sum\n        val vowelsCountMapValuesSumSquareRootOfTwo\
    \ = vowelsCountMapValues.sum * vowelsCountMapValues.sum\n        val vowelsCountMapKeysSumSquareRootOfThree\
    \ = vowelsCountMapKeys.sum * vowelsCountMapKeys.sum * vowelsCountMapKeys.sum\n\
    \        val vowelsCountMapValuesSumSquareRootOfThree = vowelsCountMapValues.sum\
    \ * vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxa3k7sfx.scala:22:48 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountMapKeys\e[0m\
    \ = vowelsCountMap.keys.toSeq\n\e[31m\e[31m   |\e[0m                         \
    \        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      value keys is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxa3k7sfx.scala:23:50 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsCountMapValues\e[0m = vowelsCountMap.toSeq\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toSeq is not a member of Char - did you mean vowelsCountMap.toInt?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxa3k7sfx.scala:27:38 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountMapValuesMax\e\
    [0m = vowelsCountMapValuesMax.size\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e\
    [0m \e[35mvowelsCountMapValuesMax\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpxa3k7sfx.scala:29:38 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountMapValuesMin\e\
    [0m = vowelsCountMapValuesMin.size\n\e[31m\e[31m   |\e[0m                    \
    \                  ^\e[0m\n\e[31m   |\e[0m                      Recursive \e[33mvalue\e\
    [0m \e[35mvowelsCountMapValuesMin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxa3k7sfx.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x => consonants.contains(x)).length\n  \
    \      val vowelsCount = word.filter(x => vowels.contains(x)).length\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).length\n    \
    \    val vowelsCount = word.filter(x => vowels.contains(x)).length\n        val\
    \ consonantsCount = word.filter(x => consonants.contains(x)).length\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).length\n        val vowelsCount =\
    \ word.filter(x => vowels.contains(x)).length\n        val consonantsCount = word.filter(x\
    \ => consonants.contains(x)).length\n        val vowelsCount = word.filter(x =>\
    \ vowels.contains(x)).length\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).length\n     \
    \   val consonantsCount = word.filter(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxuy5xg14.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxuy5xg14.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxuy5xg14.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxuy5xg14.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxuy5xg14.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase contains\
    \ \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"e\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"c\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"i\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"d\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"f\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"g\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"h\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"j\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"k\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"l\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"m\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"n\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"p\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"q\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"r\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"s\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"t\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"v\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph8fizu42.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph8fizu42.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase contains\
    \ \e[31m\"e\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph8fizu42.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"c\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph8fizu42.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"i\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph8fizu42.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"d\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1660009513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsCount = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsCount2 = vowelsAndConsonants.toSet.size\n    \
    \    val vowelsAndConsonantsCount3 = vowelsAndConsonants.toSeq.size\n        val\
    \ vowelsAndConsonantsCount4 = vowelsAndConsonants.toList.size\n        val vowelsAndConsonantsCount5\
    \ = vowelsAndConsonants.toArray.size\n        val vowelsAndConsonantsCount6 =\
    \ vowelsAndConsonants.toIterable.size\n        val vowelsAndConsonantsCount7 =\
    \ vowelsAndConsonants.toStream.size\n        val vowelsAndConsonantsCount8 = vowelsAndConsonants.toStream.mkString.size\n\
    \        val vowelsAndConsonantsCount9 = vowelsAndConsonants.toStream.toString.size\n\
    \        val vowelsAndConsonantsCount10 = vowelsAndConsonants.toStream.toArray.size\n\
    \        val vowelsAndConsonantsCount11 = vowelsAndConsonants.toStream.toIterable.size\n\
    \        val vowelsAndConsonantsCount12 = vowelsAndConsonants.toStream.toList.size\n\
    \        val vowelsAndConsonantsCount13 = vowelsAndConsonants.toStream.toArray.mkString.size\n\
    \        val vowelsAndConsonantsCount14 = vowelsAndConsonants.toStream.toList.toArray.size\n\
    \        val vowelsAndConsonantsCount15 = vowelsAndConsonants.toStream.toList.toArray.mkString.size\n\
    \        val vowelsAndConsonantsCount16 = vowelsAndConsonants.toStream.toList.toList.toArray.size\n\
    \        val vowelsAndConsonantsCount17 = vowelsAndConsonants.toStream.toList.toList.toArray.mkString.size\n\
    \        val vowelsAndConsonantsCount18 = vowelsAndConsonants.toStream.toList.toList.toList.toArray.size\n\
    \        val vowelsAndConsonantsCount19 = vowelsAndConsonants.toStream.toList.toList.toList.toArray.mkString.size\n\
    \        val vowelsAndConsonantsCount20 = vowelsAndConsonants.to\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5xel4_fv.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = word.count(vowels);\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        val consonantsCount = word.count(consonants);\n    \
    \    val vowelsIndex = word.lastIndexWhere(vowels.contains);\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains);\n        if(vowelsIndex == -1 ||\
    \ consonantsIndex == -1){\n            return \"\";\n        }\n        val vowelsCount\
    \ = word.count(vowels);\n        val consonantsCount = word.count(consonants);\n\
    \        if(vowelsCount < consonantsCount){\n            return \"\";\n      \
    \  }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains);\n      \
    \  val consonantsIndex = word.lastIndexWhere(consonants.contains);\n        if(vowelsIndex\
    \ == -1 || consonantsIndex == -1){\n            return \"\";\n        }\n    \
    \    val vowelsCount = word.count(vowels);\n        val consonantsCount = word.count(consonants);\n\
    \        if(vowelsCount < consonantsCount){\n            return \"\";\n      \
    \  }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains);\n      \
    \  val consonantsIndex = word.lastIndexWhere(consonants.contains);\n        if(vowelsIndex\
    \ == -1 || consonantsIndex == -1){\n            return \"\";\n        }\n    \
    \    val vowelsCount = word.count(vowels);\n        val consonantsCount = word.count(consonants);\n\
    \        if(vowelsCount < consonantsCount){\n            return \"\";\n      \
    \  }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains);\n      \
    \  val consonantsIndex = word.lastIndexWhere(consonants.contains);\n        if(vowelsIndex\
    \ == -1 || consonantsIndex == -1){\n            return \"\";\n        }\n    \
    \    val vowelsCount = word.count(vowels);\n        val consonantsCount = word.count(consonants);\n\
    \        if(vowelsCount < consonantsCount){\n            return \"\";\n      \
    \  }\n        val vowelsIndex = word.lastIndexWhere(vowels.contains);\n      \
    \  val consonantsIndex = word.lastIndexWhere(consonants.contains);\n        if(vowelsIndex\
    \ == -1 || consonantsIndex == -1){\n            return \"\";\n        }\n    \
    \    val vowelsCount = word.count(vowels);\n        val consonantsCount = word.count(con\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphuixmy0a.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphuixmy0a.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.count(vowels);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuixmy0a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.count(consonants);\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuixmy0a.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains);\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphuixmy0a.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains);\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in "
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp83k0bnvt.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp83k0bnvt.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelIndex = 0\n        var vowelCount\
    \ = 0\n        var vowel = \"\"\n        var vowelIndex2 = 0\n        var vowelCount2\
    \ = 0\n        var vowel2 = \"\"\n        var vowelIndex3 = 0\n        var vowelCount3\
    \ = 0\n        var vowel3 = \"\"\n        var vowelIndex4 = 0\n        var vowelCount4\
    \ = 0\n        var vowel4 = \"\"\n        var vowelIndex5 = 0\n        var vowelCount5\
    \ = 0\n        var vowel5 = \"\"\n        var vowelIndex6 = 0\n        var vowelCount6\
    \ = 0\n        var vowel6 = \"\"\n        var vowelIndex7 = 0\n        var vowelCount7\
    \ = 0\n        var vowel7 = \"\"\n        var vowelIndex8 = 0\n        var vowelCount8\
    \ = 0\n        var vowel8 = \"\"\n        var vowelIndex9 = 0\n        var vowelCount9\
    \ = 0\n        var vowel9 = \"\"\n        var vowelIndex10 = 0\n        var vowelCount10\
    \ = 0\n        var vowel10 = \"\"\n        var vowelIndex11 = 0\n        var vowelCount11\
    \ = 0\n        var vowel11 = \"\"\n        var vowelIndex12 = 0\n        var vowelCount12\
    \ = 0\n        var vowel12 = \"\"\n        var vowelIndex13 = 0\n        var vowelCount13\
    \ = 0\n        var vowel13 = \"\"\n        var vowelIndex14 = 0\n        var vowelCount14\
    \ = 0\n        var vowel14 = \"\"\n        var vowelIndex15 = 0\n        var vowelCount15\
    \ = 0\n        var vowel15 = \"\"\n        var vowelIndex16 = 0\n        var vowelCount16\
    \ = 0\n        var vowel16 = \"\"\n        var vowelIndex17 = 0\n        var vowelCount17\
    \ = 0\n        var vowel17 = \"\"\n        var vowelIndex18 = 0\n        var vowelCount18\
    \ = 0\n        var vowel18 = \"\"\n        var vowelIndex19 = 0\n        var vowelCount19\
    \ = 0\n        var vowel19 = \"\"\n        var vowelIndex20 = 0\n        var vowelCount20\
    \ = 0\n        var vowel20 = \"\"\n        var vowelIndex21 = 0\n        var vowelCount21\
    \ = 0\n        var vowel21 = \"\"\n        var vowelIndex22 = 0\n        var vowelCount22\
    \ = 0\n        var vowel22 = \"\"\n        var vowelIndex23 = 0\n        var vowelCount23\
    \ = 0\n        var vowel23 = \"\"\n        var vowelIndex24 = 0\n        var vowelCount24\
    \ = 0\n        var vowel24 = \"\"\n        var vowelIndex25 = 0\n        var vowelCount25\
    \ = 0\n        var vowel25 = \"\"\n        var vowelIndex26 = 0\n        var vowelCount26\
    \ = 0\n        var vowel26 = \"\"\n        var vowelIndex27 = 0\n        var vowelCount27\
    \ = 0\n        var vowel27 = \"\"\n        var vowelIndex28 = 0\n        var vowelCount28\
    \ = 0\n        var vowel28 = \"\"\n        var vowelIndex29 = 0\n        var vowelCount29\
    \ = 0\n        var vowel29 = \"\"\n        var vowelIndex30 = 0\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vi85poj.scala:109:5\
    \ --------------------\e[0m\e[0m\n\e[31m109 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ String\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp83k0bnvt.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp83k0bnvt.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp83k0bnvt.scala:39:126\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrevPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextPrevNext\
    \ = vowelsSetIteratorNextPrev.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextPrevPrev\
    \ = vowelsSetIteratorNextNextPrev.prev\n        val vowelsSetIteratorNextNextPrevNext\
    \ = vowelsSetIteratorNextNextPrev.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextPrevPrev\
    \ = vowelsSetIteratorNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextPrevNext\
    \ = vowelsSetIteratorNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrevPrev\
    \ = vowelsSetIteratorNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextPrevNext\
    \ = vowelsSetIteratorNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextPrevPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextPrevNext\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrevPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrevNext\
    \ = vowelsSetIteratorNextNextNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptis6wlrt.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptis6wlrt.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptis6wlrt.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptis6wlrt.scala:40:60 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextPrevPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextPrev.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: vowelsSetIteratorNextNextNextNextNextPrev\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptis6wlrt.scala:41:60\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextPrevNext\e[0m = vowelsSetIteratorNextNextNextNextNextPrev.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          "
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsBefore = word.substring(vowelsIndex\
    \ - vowelsCount, vowelsIndex).toUpperCase\n        val vowelsAfter = word.substring(vowelsIndex,\
    \ vowelsIndex + vowelsCount).toUpperCase\n        val consonantsBefore = word.substring(consonantsIndex\
    \ - consonantsCount, consonantsIndex).toUpperCase\n        val consonantsAfter\
    \ = word.substring(consonantsIndex, consonantsIndex + consonantsCount).toUpperCase\n\
    \        val vowelsBeforeCount = vowelsBefore.toList.size\n        val vowelsAfterCount\
    \ = vowelsAfter.toList.size\n        val consonantsBeforeCount = consonantsBefore.toList.size\n\
    \        val consonantsAfterCount = consonantsAfter.toList.size\n        val vowelsBeforeIndex\
    \ = vowelsIndex - vowelsBeforeCount\n        val vowelsAfterIndex = vowelsIndex\
    \ + vowelsAfterCount\n        val consonantsBeforeIndex = consonantsIndex - consonantsBeforeCount\n\
    \        val consonantsAfterIndex = consonantsIndex + consonantsAfterCount\n \
    \       val vowelsBeforeVowel = vowelsBefore.toList.last\n        val vowelsAfterVowel\
    \ = vowelsAfter.toList.last\n        val consonantsBeforeVowel = consonantsBefore.toList.last\n\
    \        val consonantsAfterVowel = consonantsAfter.toList.last\n        if(vowelsBeforeIndex\
    \ > -1 && vowelsAfterIndex > -1 && consonantsBeforeIndex > -1 && consonantsAfterIndex\
    \ > -1 && vowelsBeforeCount > 0 && vowelsAfterCount > 0 && consonantsBeforeCount\
    \ > 0 && consonantsAfterCount > 0 && vowelsBeforeVowel != null && vowelsAfterVowel\
    \ != null && consonantsBeforeVowel != null && consonantsAfterVowel != null){\n\
    \            if(vowelsBeforeVowel == \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9w7xfg4x.scala:42:35 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m            \e[33mif\e[0m(vowelsBeforeVowel == \n\e[31m\e\
    [31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m      \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9w7xfg4x.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp9w7xfg4x.scala:23:46 --------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (elem : Char)\n\
    \e[31m   |\e[0m                                              Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9w7xfg4x.scala:24:50\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e\
    [0m = word.lastIndexWhere(consonants.contains)\n\e[31m\e[31m   |\e[0m        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    (elem : Char)\n\e[31m   |\e[0m\
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp9w7xfg4x.scala:41:227 ----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mif\e[0m(vowelsBeforeIndex > -\e[31m1\e\
    [0m && vowelsAfterIndex > -\e[31m1\e[0m && consonantsBeforeIndex > -\e[31m1\e\
    [0m && consonantsAfterIndex > -\e[31m1\e[0m && vowelsBeforeCount > \e[31m0\e[0m\
    \ && vowelsAfterCount > \e[31m0\e[0m && consonantsBeforeCount > \e[31m0\e[0m &&\
    \ consonantsAfterCount > \e[31m0\e[0m && vowelsBeforeVowe"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4qhjfnpl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qhjfnpl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qhjfnpl.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qhjfnpl.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4qhjfnpl.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined "
  stdout: ''
  timestamp: 1660009516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet3\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet4 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet5 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet6 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet7\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet9 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet10 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet11\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet12 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet13 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet14 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet15\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet16 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet17 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet18 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet19\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet21 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet22 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet23\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet24 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet25 = vowelsSet.filter(_ != vowels.first)\n\
    \        val vowelsSet26 = vowelsSet.filter(_ != vowels.last)\n        val vowelsSet27\
    \ = vowelsSet.filter(_ != vowels.first)\n        val vowelsSet28 = vowelsSet.filter(_\
    \ != vowels.last)\n        val vowelsSet29 = vowelsSet.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdct0a269.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpdct0a269.scala:22:54 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowelsSet.filter(_ != vowels.first)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue first is not a member of scala.collection.mutable.Set[String]\
    \ - did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdct0a269.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet5\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdct0a269.scala:26:54\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet7\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdct0a269.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet9\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue first is not a member of scala.collection.mutable.Set[String] -\
    \ did you mean vowels.find?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdct0a269.scala:30:55\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet11\e[0m = vowelsSet.filter(_ != vowels.first)\n\e[31m\e[31m   |\e\
    [0m                                                ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue first is not a member of "
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ vowelIndex = 0\n        var vowelCount = 0\n        var vowel = \"\"\n     \
    \   var currentIndex = 0\n        var currentCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentWord = \"\"\n        var currentWordIndex = 0\n \
    \       var currentWordCount = 0\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentVowel = \"\"\n        var\
    \ currentVowelIndex = 0\n        var currentVowelCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentVowel = \"\"\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentVowel = \"\"\n        var\
    \ currentVowelIndex = 0\n        var currentVowelCount = 0\n        var currentVowel\
    \ = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount = 0\n\
    \        var currentVowel = \"\"\n        var currentVowelIndex = 0\n        var\
    \ currentVowelCount = 0\n        var currentVowel = \"\"\n        var currentVowelIndex\
    \ = 0\n        var currentVowelCount = 0\n        var currentVowel = \"\"\n  \
    \      var currentVowelIndex = 0\n        var currentVowelCount = 0\n        var\
    \ currentVowel = \"\"\n        var currentVowelIndex = 0\n        var currentVowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentVowelIndex = 0\n  \
    \      var currentVowelCount = 0\n        var currentVowel = \"\"\n        var\
    \ currentV\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdzezvopp.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdzezvopp.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentVowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentVowel is already defined as \e[33mvariable\e[0m \e\
    [35mcurrentVowel\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpdzezvopp.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelIndex\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mcurrentVowelIndex is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdzezvopp.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowelCount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowelCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentVowelCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdzezvopp.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrentVowel\e[0m = \e[31m\"\"\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentVowel is\
    \ already defined as \e[33mvariable\e[0m \e[35mcurrentVowel\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdzezvopp.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m "
  stdout: ''
  timestamp: 1660009515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        val vowelsCount\
    \ = word.filter(vowels.contains).size\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val vowelsCount = word.filter(vowels.contains).size\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp951136a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp951136a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp951136a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp951136a.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp951136a.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = "
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSet2\
    \ = vowels.toSet.reverse\n        val consonantsSet2 = consonants.toSet.reverse\n\
    \        val vowelsSet3 = vowels.toSet.reverse\n        val consonantsSet3 = consonants.toSet.reverse\n\
    \        val vowelsSet4 = vowels.toSet.reverse\n        val consonantsSet4 = consonants.toSet.reverse\n\
    \        val vowelsSet5 = vowels.toSet.reverse\n        val consonantsSet5 = consonants.toSet.reverse\n\
    \        val vowelsSet6 = vowels.toSet.reverse\n        val consonantsSet6 = consonants.toSet.reverse\n\
    \        val vowelsSet7 = vowels.toSet.reverse\n        val consonantsSet7 = consonants.toSet.reverse\n\
    \        val vowelsSet8 = vowels.toSet.reverse\n        val consonantsSet8 = consonants.toSet.reverse\n\
    \        val vowelsSet9 = vowels.toSet.reverse\n        val consonantsSet9 = consonants.toSet.reverse\n\
    \        val vowelsSet10 = vowels.toSet.reverse\n        val consonantsSet10 =\
    \ consonants.toSet.reverse\n        val vowelsSet11 = vowels.toSet.reverse\n \
    \       val consonantsSet11 = consonants.toSet.reverse\n        val vowelsSet12\
    \ = vowels.toSet.reverse\n        val consonantsSet12 = consonants.toSet.reverse\n\
    \        val vowelsSet13 = vowels.toSet.reverse\n        val consonantsSet13 =\
    \ consonants.toSet.reverse\n        val vowelsSet14 = vowels.toSet.reverse\n \
    \       val consonantsSet14 = consonants.toSet.reverse\n        val vowelsSet15\
    \ = vowels.toSet.reverse\n        val consonantsSet15 = consonants.toSet.reverse\n\
    \        val vowelsSet16 = vowels.toSet.reverse\n        val consonantsSet16 =\
    \ consonants.toSet.reverse\n        val vowelsSet17 = vowels.toSet.reverse\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpopsfg767.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet2\e[0m = consonants.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:25:38 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet3\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSet3\e[0m = consonants.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpopsfg767.scala:27:38 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not"
  stdout: ''
  timestamp: 1660009506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val consonants = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.map(_.length).sum\n\
    \        val consonantsIndex = word.zipWithIndex.filter(_._2 % consonantsCount\
    \ == 0).map(_._1).last\n        val index = vowelsIndex - consonantsIndex\n  \
    \      if (index < 0) \"\"\n        else vowels(index)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwah52r80.scala:30)\n\tat Problem.main(tmpwah52r80.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.tail\n        val vowelsAfter = vowels.toList\n        val consonantsBefore\
    \ = consonants.toList.tail\n        val consonantsAfter = consonants.toList\n\
    \        val vowelsBeforeAndAfter = vowelsBefore.toList ++ vowelsAfter\n     \
    \   val consonantsBeforeAndAfter = consonantsBefore.toList ++ consonantsAfter\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfter = vowelsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAfter\n        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfter.toList ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\n\
    \        val vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\
    \ = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig_8f1h5.scala:28:147 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\e\
    [0m = vowelsBeforeAndAfterAndConsonantsBeforeAndAfter.toList ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m          Not found: consonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig_8f1h5.scala:29:201\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\e\
    [0m = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: consonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig_8f1h5.scala:30:255\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter\e\
    [0m = vowelsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfterAndConsonantsBeforeAndAfter.toList\
    \ ++ consonantsBeforeAndAft"
  stdout: ''
  timestamp: 1660009517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsCount2 = vowels.toList.map(_.length).reduce((a, b) => a + b)\n\
    \        val consonantsCount2 = consonants.toList.map(_.length).reduce((a, b)\
    \ => a + b)\n        val vowelsCount3 = vowels.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val consonantsCount3 = consonants.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val vowelsCount4 = vowels.toList.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val consonantsCount4 = consonants.toList.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val vowelsCount5 = vowels.toList.map(_.length).reduce((a,\
    \ b) => a + b)\n        val consonantsCount5 = consonants.toList.map(_.length).reduce((a,\
    \ b) => a + b)\n        val vowelsCount6 = vowels.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val consonantsCount6 = consonants.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val vowelsCount7 = vowels.toList.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val consonantsCount7 = consonants.toList.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val vowelsCount8 = vowels.toList.map(_.length).reduce((a,\
    \ b) => a + b)\n        val consonantsCount8 = consonants.toList.map(_.length).reduce((a,\
    \ b) => a + b)\n        val vowelsCount9 = vowels.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val consonantsCount9 = consonants.toList.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val vowelsCount10 = vowels.toList.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val consonants\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0081nvv8.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0081nvv8.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        var\
    \ vowelIndex = 0\n        var vowelIndex2 = word.length - 1\n        var vowelIndex3\
    \ = word.length - 1\n        var vowelIndex4 = word.length - 1\n        var vowelIndex5\
    \ = word.length - 1\n        var vowelIndex6 = word.length - 1\n        var vowelIndex7\
    \ = word.length - 1\n        var vowelIndex8 = word.length - 1\n        var vowelIndex9\
    \ = word.length - 1\n        var vowelIndex10 = word.length - 1\n        var vowelIndex11\
    \ = word.length - 1\n        var vowelIndex12 = word.length - 1\n        var vowelIndex13\
    \ = word.length - 1\n        var vowelIndex14 = word.length - 1\n        var vowelIndex15\
    \ = word.length - 1\n        var vowelIndex16 = word.length - 1\n        var vowelIndex17\
    \ = word.length - 1\n        var vowelIndex18 = word.length - 1\n        var vowelIndex19\
    \ = word.length - 1\n        var vowelIndex20 = word.length - 1\n        var vowelIndex21\
    \ = word.length - 1\n        var vowelIndex22 = word.length - 1\n        var vowelIndex23\
    \ = word.length - 1\n        var vowelIndex24 = word.length - 1\n        var vowelIndex25\
    \ = word.length - 1\n        var vowelIndex26 = word.length - 1\n        var vowelIndex27\
    \ = word.length - 1\n        var vowelIndex28 = word.length - 1\n        var vowelIndex29\
    \ = word.length - 1\n        var vowelIndex30 = word.length - 1\n        var vowelIndex31\
    \ = word.length - 1\n        var vowelIndex32 = word.length - 1\n        var vowelIndex33\
    \ = word.length - 1\n        var vowelIndex34 = word.length - 1\n        var vowelIndex35\
    \ = word.length - 1\n        var vowelIndex36 = word.length - 1\n        var vowelIndex37\
    \ = word.length - 1\n        var vowelIndex38 = word.length - 1\n        var vowelIndex39\
    \ = word.length - 1\n        var vowelIndex40 = word.length - 1\n        var vowelIndex41\
    \ = word.length - 1\n        var vowelIndex42 = word.length - 1\n        var vowelIndex43\
    \ = word.length - 1\n        var vowelIndex44 = word.length - 1\n        var vowelIndex45\
    \ = word.length - 1\n        var vowelIndex46 = word.length - 1\n        var vowelIndex47\
    \ = word.length - 1\n        var vowelIndex48 = word.length - 1\n        var vowelIndex49\
    \ = word.length - 1\n        var vowelIndex50 = word.length - 1\n        var vowelIndex51\
    \ = word.length - 1\n        var vowelIndex52 = word.length - 1\n        var vowelIndex53\
    \ = word.length - 1\n        var vowelIndex54 = word.length - 1\n        var vowelIndex55\
    \ = word.length - 1\n        var vowelIndex56 = word.length - 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3z33pro.scala:76:5\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009518
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSetIterator = vowelsSet.iterator;\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next;\n        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next;\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkucm147x.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next;\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkucm147x.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkucm147x.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next;\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ is already"
  stdout: ''
  timestamp: 1660009519
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.dropRight(word.length)\n        val vowelsAfter = vowels.toList.dropLeft(word.length)\n\
    \        val vowelsBetween = vowelsBefore.zip(vowelsAfter)\n        val vowelsBetweenWithConsonants\
    \ = vowelsBetween.zip(consonants)\n        val vowelsBetweenWithConsonantsWithVowels\
    \ = vowelsBetweenWithConsonants.filter(_._1.toUpperCase == _._2.toUpperCase)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLength = vowelsBetweenWithConsonantsWithVowels.length\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMin = vowelsBetweenWithConsonantsWithVowelsLength.min\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMax = vowelsBetweenWithConsonantsWithVowelsLength.max\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMinIndex = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._1)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMaxIndex = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._2)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMinIndexUpper = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._1.toUpperCase)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMaxIndexUpper = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._2.toUpperCase)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMinIndexLower = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._1.toLowerCase)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLengthMaxIndexLower = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._2.toLowerCase)\n\
    \        val vowelsBetweenWithConsonantsWithVowelsLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmewmjjh7.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmewmjjh7.scala:22:40\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsAfter\e[0m = vowels.toList.dropLeft(word.length)\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                      value dropLeft is not a member of List[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmewmjjh7.scala:25:109 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonantsWithVowels\e\
    [0m = vowelsBetweenWithConsonants.filter(_._1.toUpperCase == _._2.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      value _2 is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmewmjjh7.scala:29:110 -----------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBetweenWithConsonantsWithVowelsLengthMinIndex\e\
    [0m = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._1)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value indexOf is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmewmjjh7.scala:30:110\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsBetweenWithConsonantsWithVowelsLengthMaxIndex\e[0m = vowelsBetweenWithConsonantsWithVowelsLength.indexOf(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    value indexOf is not a member of Int\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmewmjjh7.scala:31:115 ------"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonants\
    \ = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\
    \ \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsIndex\
    \ = word.lastIndexWhere(x => vowels.contains(x))\n        val consonantsIndex\
    \ = word.lastIndexWhere(x => consonants.contains(x))\n        val vowelsIndex\
    \ = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if\
    \ (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex\
    \ < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex <\
    \ 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0\
    \ else vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0 else\
    \ consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n\
    \        val consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex < 0) 0 else consonantsIndex\n        val vowelsIndex =\
    \ if (vowelsIndex < 0) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ < 0) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0)\
    \ 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0\
    \ else consonantsIndex\n        val vowelsIndex = if (vowelsIndex < 0) 0 else\
    \ vowelsIndex\n        val consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex < 0) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex < 0) 0 else consonantsIndex\n        val\
    \ vowelsIndex = if (vowelsIndex < 0) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpychllgo2.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpychllgo2.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpychllgo2.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex < \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpychllgo2.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m consonantsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpychllgo2.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e\
    [0m (vowelsIndex < \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m vowelsIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase contains\
    \ \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"e\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"c\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"i\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"d\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"o\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"u\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"y\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"c\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"d\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"e\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"f\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"g\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"h\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"i\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"j\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"k\")\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpode24bh7.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"e\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpode24bh7.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"c\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpode24bh7.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"i\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpode24bh7.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"d\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorPrevNextPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorNextPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevNext = vowelsSetIteratorPrevPrevNext.next\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorNextNextPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextNext = vowelsSetIteratorNextNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrevPrev = vowelsSetIteratorPrevPrevPrevNext.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevNextPrev = vowelsSetIteratorPrevPrevNextPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevPrevNextNext = vowelsSetIteratorPrevPrevNextPrev.next\n\
    \        val vowelsSetIteratorPrevNextNextPrev = vowelsSetIteratorPrevNextNextPrev.prev\n\
    \        val vowelsSetIteratorPrevNextNextNextPrev = vowelsSetIteratorPrevNextNextPrev.next\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0_hcs3i.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrevNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevNextNextPrev is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsSetIteratorPrevNextNextPrev\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0_hcs3i.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorPrevPrevPrevPrev\e[0m = vowelsSetIteratorPrevPrevPrevNext.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevPrevPrevPrev is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsSetIteratorPrevPrevPrevPrev\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0_hcs3i.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorPrevNextNextPrev\e[0m = vowelsSetIteratorPrevNextNextPrev.prev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorPrevNextNextPrev is already defined as \e\
    [33mvalue\e[0m \e[35mvowelsSetIteratorPrevNextNextPrev\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb0_hcs3i.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mea"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase contains\
    \ \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsEnd = vowelsIndex + vowelsCount - 1\n   \
    \     val consonantsEnd = consonantsIndex + consonantsCount - 1\n        val vowelsStart\
    \ = vowelsIndex - 1\n        val consonantsStart = consonantsIndex - 1\n     \
    \   val vowelsMid = (vowelsIndex + vowelsCount) / 2\n        val consonantsMid\
    \ = (consonantsIndex + consonantsCount) / 2\n        val vowelsMidEnd = (vowelsIndex\
    \ + vowelsCount + consonantsCount) / 2\n        val vowelsMidStart = vowelsIndex\
    \ + vowelsCount\n        val vowelsMidEnd = vowelsIndex + vowelsCount + consonantsCount\n\
    \        val vowelsMidStartEnd = vowelsIndex + vowelsCount + consonantsCount +\
    \ vowelsCount * consonantsCount\n        val vowelsMidStartEnd2 = vowelsIndex\
    \ + vowelsCount + consonantsCount + vowelsCount * consonantsCount + consonantsCount\
    \ * vowelsCount\n        val vowelsMidStartEnd3 = vowelsIndex + vowelsCount +\
    \ consonantsCount + vowelsCount * consonantsCount + consonantsCount * vowelsCount\
    \ + vowelsCount * consonantsCount\n        val vowelsMidStartEnd4 = vowelsIndex\
    \ + vowelsCount + consonantsCount + vowelsCount * consonantsCount + consonantsCount\
    \ * vowelsCount + consonantsCount * vowelsCount + vowelsCount * consonantsCount\
    \ + consonantsCount * vowelsCount\n        val vowelsMidStartEnd5 = vowelsIndex\
    \ + vowelsCount + consonantsCount + vowelsCount * consonantsCount + consonantsCount\
    \ * vowelsCount + consonantsCount * vowelsCount + consonantsCount * vowelsCount\
    \ + vowels\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsq3_41_d.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mvowelsMidEnd\e[0m = vowelsIndex\
    \ + vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsMidEnd is already defined as \e[33mvalue\e[0m \e[35mvowelsMidEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpsq3_41_d.scala:38:205 ----------------------------\e[0m\e[0m\n\
    \e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsMidStartEnd5\e[0m = vowelsIndex\
    \ + vowelsCount + consonantsCount + vowelsCount * consonantsCount + consonantsCount\
    \ * vowelsCount + consonantsCount * vowelsCount + consonantsCount * vowelsCount\
    \ + vowels\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m  (x: String): String\n\e[31m   |\e[0m match arguments ((vowels : scala.collection.mutable.Set[String]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsq3_41_d.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSet2 = vowelsSet.toSet\n       \
    \ val vowelsSet3 = vowelsSet2.toSet\n        val vowelsSet4 = vowelsSet3.toSet\n\
    \        val vowelsSet5 = vowelsSet4.toSet\n        val vowelsSet6 = vowelsSet5.toSet\n\
    \        val vowelsSet7 = vowelsSet6.toSet\n        val vowelsSet8 = vowelsSet7.toSet\n\
    \        val vowelsSet9 = vowelsSet8.toSet\n        val vowelsSet10 = vowelsSet9.toSet\n\
    \        val vowelsSet11 = vowelsSet10.toSet\n        val vowelsSet12 = vowelsSet11.toSet\n\
    \        val vowelsSet13 = vowelsSet12.toSet\n        val vowelsSet14 = vowelsSet13.toSet\n\
    \        val vowelsSet15 = vowelsSet14.toSet\n        val vowelsSet16 = vowelsSet15.toSet\n\
    \        val vowelsSet17 = vowelsSet16.toSet\n        val vowelsSet18 = vowelsSet17.toSet\n\
    \        val vowelsSet19 = vowelsSet18.toSet\n        val vowelsSet20 = vowelsSet19.toSet\n\
    \        val vowelsSet21 = vowelsSet20.toSet\n        val vowelsSet22 = vowelsSet21.toSet\n\
    \        val vowelsSet23 = vowelsSet22.toSet\n        val vowelsSet24 = vowelsSet23.toSet\n\
    \        val vowelsSet25 = vowelsSet24.toSet\n        val vowelsSet26 = vowelsSet25.toSet\n\
    \        val vowelsSet27 = vowelsSet26.toSet\n        val vowelsSet28 = vowelsSet27.toSet\n\
    \        val vowelsSet29 = vowelsSet28.toSet\n        val vowelsSet30 = vowelsSet29.toSet\n\
    \        val vowelsSet31 = vowelsSet30.toSet\n        val vowelsSet32 = vowelsSet31.toSet\n\
    \        val vowelsSet33 = vowelsSet32.toSet\n        val vowelsSet34 = vowelsSet33.toSet\n\
    \        val vowelsSet35 = vowelsSet34.toSet\n        val vowelsSet36 = vowelsSet35.toSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_79f6ne.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount2\
    \ = vowelsCount + consonantsCount\n        val vowelsCount3 = vowelsCount + consonantsCount\n\
    \        val vowelsCount4 = vowelsCount + consonantsCount\n        val vowelsCount5\
    \ = vowelsCount + consonantsCount\n        val vowelsCount6 = vowelsCount + consonantsCount\n\
    \        val vowelsCount7 = vowelsCount + consonantsCount\n        val vowelsCount8\
    \ = vowelsCount + consonantsCount\n        val vowelsCount9 = vowelsCount + consonantsCount\n\
    \        val vowelsCount10 = vowelsCount + consonantsCount\n        val vowelsCount11\
    \ = vowelsCount + consonantsCount\n        val vowelsCount12 = vowelsCount + consonantsCount\n\
    \        val vowelsCount13 = vowelsCount + consonantsCount\n        val vowelsCount14\
    \ = vowelsCount + consonantsCount\n        val vowelsCount15 = vowelsCount + consonantsCount\n\
    \        val vowelsCount16 = vowelsCount + consonantsCount\n        val vowelsCount17\
    \ = vowelsCount + consonantsCount\n        val vowelsCount18 = vowelsCount + consonantsCount\n\
    \        val vowelsCount19 = vowelsCount + consonantsCount\n        val vowelsCount20\
    \ = vowelsCount + consonantsCount\n        val vowelsCount21 = vowelsCount + consonantsCount\n\
    \        val vowelsCount22 = vowelsCount + consonantsCount\n        val vowelsCount23\
    \ = vowelsCount + consonantsCount\n        val vowelsCount24 = vowelsCount + consonantsCount\n\
    \        val vowelsCount25 = vowelsCount + consonantsCount\n        val vowelsCount26\
    \ = vowelsCount + consonantsCount\n        val vowelsCount27 = vowelsCount + consonantsCount\n\
    \        val vowelsCount\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkxoxf2vz.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkxoxf2vz.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = vowelsCount + consonantsCount\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvowelsCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxoxf2vz.scala:20:38\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(vowels.contains).size\n\e[31m\e[31m   |\e[0m               \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \        Found:    (elem : Char)\n\e[31m   |\e[0m                            \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkxoxf2vz.scala:22:42 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).size\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    (elem : Char)\n\e\
    [31m   |\e[0m                                          Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkxoxf2vz.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase contains\
    \ \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"e\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"c\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"i\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"d\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"o\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"u\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"y\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"a\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"b\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"e\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"c\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"i\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"d\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"o\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"u\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"y\")\n        val consonantsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \"a\")\n        \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpst4t63gr.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"e\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpst4t63gr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"c\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpst4t63gr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"i\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpst4t63gr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toString.toLowerCase\
    \ contains \e[31m\"d\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660009526
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpol27pdm7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorIterator\
    \ = vowelsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize = vowelsSetIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIterator = vowelsSetIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIterator = vowelsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n     \
    \   val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIterator\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb8kvr0p7.scala:40:104 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb8kvr0p7.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextPrev = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNextPrev.next\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNextPrev.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextPrev.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev.next\n\
    \        val vowelsSet\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaatbrvvg.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaatbrvvg.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsSetIteratorNextPrev\e[0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaatbrvvg.scala:24:54 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpaatbrvvg.scala:25:62 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpaatbrvvg.scala:26:62 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpaatbrvvg.scala:28:44 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextPrev.n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSet2 = vowelsSet.filter(_ != \"\
    a\")\n        val vowelsSet3 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet4\
    \ = vowelsSet.filter(_ != \"i\")\n        val vowelsSet5 = vowelsSet.filter(_\
    \ != \"o\")\n        val vowelsSet6 = vowelsSet.filter(_ != \"u\")\n        val\
    \ vowelsSet7 = vowelsSet.filter(_ != \"A\")\n        val vowelsSet8 = vowelsSet.filter(_\
    \ != \"E\")\n        val vowelsSet9 = vowelsSet.filter(_ != \"I\")\n        val\
    \ vowelsSet10 = vowelsSet.filter(_ != \"O\")\n        val vowelsSet11 = vowelsSet.filter(_\
    \ != \"U\")\n        val vowelsSet12 = vowelsSet.filter(_ != \"a\")\n        val\
    \ vowelsSet13 = vowelsSet.filter(_ != \"e\")\n        val vowelsSet14 = vowelsSet.filter(_\
    \ != \"i\")\n        val vowelsSet15 = vowelsSet.filter(_ != \"o\")\n        val\
    \ vowelsSet16 = vowelsSet.filter(_ != \"u\")\n        val vowelsSet17 = vowelsSet.filter(_\
    \ != \"A\")\n        val vowelsSet18 = vowelsSet.filter(_ != \"E\")\n        val\
    \ vowelsSet19 = vowelsSet.filter(_ != \"I\")\n        val vowelsSet20 = vowelsSet.filter(_\
    \ != \"O\")\n        val vowelsSet21 = vowelsSet.filter(_ != \"U\")\n        val\
    \ vowelsSet22 = vowelsSet.filter(_ != \"a\")\n        val vowelsSet23 = vowelsSet.filter(_\
    \ != \"e\")\n        val vowelsSet24 = vowelsSet.filter(_ != \"i\")\n        val\
    \ vowelsSet25 = vowelsSet.filter(_ != \"o\")\n        val vowelsSet26 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet27 = vowelsSet.filter(_ != \"A\")\n        val\
    \ vowelsSet28 = vowelsSet.filter(_ != \"E\")\n        val vowelsSet29 = vowelsSet.filter(_\
    \ != \"I\")\n        val vowelsSet30 = vowelsSet.filter(_ != \"O\")\n        val\
    \ vowelsSet31 = vowelsSet.filter(_ != \"U\")\n        val vowelsSet32 = vowelsSet.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpryb3q196.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8i4oo08z.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8i4oo08z.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8i4oo08z.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8i4oo08z.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonantsCount\
    \ = word.filter(consonants.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val consonantsCount = word.filter(consonants.contains).length\n     \
    \   val vowelsCount = word.filter(vowels.contains).length\n        val consonants\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tz0xjpn.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4tz0xjpn.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4tz0xjpn.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4tz0xjpn.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4tz0xjpn.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660009463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4krthw6y.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4krthw6y.scala:26:565 -------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsSet7\e[0m = vowelsSet.diff(Set(\e[31m\"a\"\
    \e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                    "
  stdout: ''
  timestamp: 1660009529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNext.prev\n        val vowelsSetIteratorNextNextPrev = vowelsSetIteratorNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextPrev = vowelsSetIteratorNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextPrev = vowelsSetIteratorNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n \
    \       val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk7e3ru58.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk7e3ru58.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpk7e3ru58.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk7e3ru58.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpk7e3ru58.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found:"
  stdout: ''
  timestamp: 1660009529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorSize = vowelsSetIterator.size\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextSize = vowelsSetIteratorNext.size\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val\
    \ vowelsSetIteratorNextNextSize = vowelsSetIteratorNextNext.size\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIteratorNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextSize = vowelsSetIteratorNextNextNext.size\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIteratorNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextSize = vowelsSetIteratorNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIteratorNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextSize = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext = vowelsSetIteratorNextNextNextNextNext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpubch522l.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpubch522l.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextSize is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpubch522l.scala:26:62 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e[0m = vowelsSetIteratorNext.next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpubch522l.scala:38:64 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                  "
  stdout: ''
  timestamp: 1660009489
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n        var vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount2 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount3 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount4\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount5 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount6 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount7 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount8 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount9\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount10 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount11 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount12 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount13 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount14 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount15\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount16 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount17 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount18 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount19 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount23 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount24 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount25 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount26 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount27\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount28 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount29 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount30 = word.filter(x => vowels.contains(x)).size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqjowfj.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqjowfj.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqjowfj.scala:22:60\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mqjowfj.scala:23:60\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgfk908p4.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfk908p4.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorPrevPrev\
    \ = vowelsSetIteratorPrev.prev\n        val vowelsSetIteratorPrevNext = vowelsSetIteratorPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrev = vowelsSetIteratorNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNext = vowelsSetIteratorNextPrev.next\n\
    \        val vowelsSetIteratorPrevPrevPrev = vowelsSetIteratorPrevPrev.prev\n\
    \        val vowelsSetIteratorPrevPrevNext = vowelsSetIteratorPrevPrev.next\n\
    \        val vowelsSetIteratorPrevNextPrev = vowelsSetIteratorPrevNext.prev\n\
    \        val vowelsSetIteratorPrevNextNext = vowelsSetIteratorPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrev = vowelsSetIteratorNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNext = vowelsSetIteratorNextPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevNextPrev = vowelsSetIteratorNextPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevNextNext = vowelsSetIteratorNextPrevNext.next\n\
    \        val vowelsSetIteratorNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevPrevNext = vowelsSetIteratorNextPrevPrevPrev.next\n\
    \        val vowelsSetIteratorNextPrevPrevNextPrev = vowelsSetIteratorNextPrevNextPrev.prev\n\
    \        val vowelsSetIteratorNextPrevPrevNextNext = vowelsSetIteratorNextPrevNextPrev.next\n\
    \        val vowelsSetIteratorNextPrevNextPrevPrevPrev = vowelsSetIteratorNextPrevNextPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrevNextPrevPrevNext = vowelsSetIteratorNextPrevNextPrevNext.prev\n\
    \        val vowelsSetIteratorNextPrevNextPrevPrevPrevPrev = vowelsSetIteratorNextPrevNextPrevPrevPrev.prev\n\
    \        val vowelsSetIteratorNextPrev\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4511ztuj.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4511ztuj.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue prev is not a member of Iterator[String] - did you mean vowelsSetIterator.drop?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4511ztuj.scala:24:62 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev\
    \ is not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4511ztuj.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4511ztuj.scala:42:56 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrevNextPrevPrevPrev\e\
    [0m = vowelsSetIteratorNextPrevNextPrevPrev.prev\n\e[31m\e[31m   |\e[0m      \
    \                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: vowelsSetIteratorNextPrevNextPrevPrev\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4511ztuj.scala:43:56\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextPrevNextPrevPrevNext\e[0m = vowelsSetIteratorNextPr"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        var vowelIndex = 0\n        var\
    \ vowel = \"\"\n        var vowelCount = 0\n        var consonantIndex = 0\n \
    \       var consonant = \"\"\n        var consonantCount = 0\n        for(i <-\
    \ 0 until word.length){\n            if(vowels.contains(word.charAt(i))){\n  \
    \              vowelIndex = i\n                vowel = word.charAt(i)\n      \
    \          vowelCount = 1\n            }\n            else if(consonants.contains(word.charAt(i))){\n\
    \                consonantIndex = i\n                consonant = word.charAt(i)\n\
    \                consonantCount = 1\n            }\n            else if(vowelIndex\
    \ > 0 && consonantIndex > 0){\n                if(word.charAt(i) == word.charAt(vowelIndex)\
    \ && word.charAt(i) == word.charAt(consonantIndex)){\n                    vowelCount\
    \ += 1\n                    consonantCount += 1\n                }\n         \
    \   }\n        }\n        if(vowelCount > consonantCount){\n            vowel\n\
    \        }\n        else{\n            \"\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidkcvjo7.scala:27:42\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(vowels.contains(word.charAt(i))){\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    Char\n\e[31m   |\e[0m     \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpidkcvjo7.scala:29:35 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                vowel = word.charAt(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 Found:    Char\n\e[31m   |\e[0m                        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpidkcvjo7.scala:32:20\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m(consonants.contains(word.charAt(i))){\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ consonants\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpidkcvjo7.scala:34:39\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                consonant = word.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                            Found:    Char\n\e[31m   |\e[0m         \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp351e4wzy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptnet0ty5.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptnet0ty5.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1660009474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = List(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.count(vowel => word.contains(vowel))\n        val consonantsCount =\
    \ consonants.count(consonant => word.contains(consonant))\n        val vowelsCountMinusConsonantsCount\
    \ = vowelsCount - consonantsCount\n        val vowelsCountMinusConsonantsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCount - vowelsCount\n        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCount - vowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount - vowelsCountMinusVowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ - vowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\n        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ - vowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyi1ayzqu.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyi1ayzqu.scala:25:128\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount\e[0m = vowelsCountMinusConsonantsCountMinusVowelsCount\
    \ - vowelsCountMinusVowelsCount\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  Not found: vowelsCountMinusVowelsCount\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyi1ayzqu.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).last\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val consonantsIndex = word.zipWithIndex.filter(_._2 % consonantsCount\
    \ == 0).map(_._1).last\n        val index = vowelsIndex - consonantsIndex\n  \
    \      if (index < 0) \"\"\n        else vowels(index)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfqult8jn.scala:27:20\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m vowels(index)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (index : Int)\n\e[31m   |\e[0m                    Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCoun\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_7wprg_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_7wprg_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = conson\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1_zup1t9.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_zup1t9.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_zup1t9.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_zup1t9.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1_zup1t9.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).length\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).length\n\
    \        val vowelsCount = vowelsCount + consonantsCount\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n        val vowelsCount = vowelsCount + 1\n        val vowelsCount\
    \ = vowelsCount + 1\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5sxjvy0j.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount\
    \ + consonantsCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5sxjvy0j.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5sxjvy0j.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5sxjvy0j.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5sxjvy0j.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonants\
    \ = word.filter(x => !vowels.contains(x))\n        val consonantsCount = consonants.size\n\
    \        val vowelsIndex = consonants.lastIndexWhere(x => vowels.contains(x))\n\
    \        val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n       \
    \ val consonantsIndex = consonants.lastIndexWhere(x => !vowels.contains(x))\n\
    \        val consonantsIndex = if (consonantsIndex == -1) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n       \
    \ val consonantsIndex = if (consonantsIndex == -1) 0 else consonantsIndex\n  \
    \      val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n        val\
    \ consonantsIndex = if (consonantsIndex == -1) 0 else consonantsIndex\n      \
    \  val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n        val consonantsIndex\
    \ = if (consonantsIndex == -1) 0 else consonantsIndex\n        val vowelsIndex\
    \ = if (vowelsIndex == -1) 0 else vowelsIndex\n        val consonantsIndex = if\
    \ (consonantsIndex == -1) 0 else consonantsIndex\n        val vowelsIndex = if\
    \ (vowelsIndex == -1) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex\
    \ == -1) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex ==\
    \ -1) 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex ==\
    \ -1) 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex == -1)\
    \ 0 else vowelsIndex\n        val consonantsIndex = if (consonantsIndex == -1)\
    \ 0 else consonantsIndex\n        val vowelsIndex = if (vowelsIndex == -1) 0 else\
    \ vowelsIndex\n        val consonantsIndex = if (consonantsIndex == -1) 0 else\
    \ consonantsIndex\n        val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n\
    \        val consonantsIndex = if (consonantsIndex == -1) 0 else consonantsIndex\n\
    \        val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n       \
    \ val consonantsIndex = if (consonantsIndex == -1) 0 else consonantsIndex\n  \
    \      val vowelsIndex = if (vowelsIndex == -1) 0 else vowelsIndex\n        val\
    \ conson\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd0h966rr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd0h966rr.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = \e[33mif\e[0m (vowelsIndex == -\e[31m1\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m vowelsIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0h966rr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m consonantsIndex\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpd0h966rr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = \e[33mif\e\
    [0m (vowelsIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m vowelsIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpd0h966rr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = \e[33mif\e[0m\
    \ (consonantsIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m consonantsIndex\n\
    \e[31"
  stdout: ''
  timestamp: 1660009534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount = word.count(vowels.toList)\n        val vowelsCount\
    \ = word.count(vowels.toSet)\n        val vowelsCount = word.count(vowels.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toIterator)\n        val vowelsCount\
    \ = word.count(vowels.toStream)\n        val vowelsCount = word.count(vowels.toList)\n\
    \        val vowelsCount = word.count(vowels.toSet)\n        val vowelsCount =\
    \ word.count(vowels.toSeq)\n        val vowelsCount = word.count(vowels.toIterator)\n\
    \        val vowelsCount = word.count(vowels.toStream)\n        val vowelsCount\
    \ = word.count(vowels.toList)\n        val vowelsCount = word.count(vowels.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq)\n        val vowelsCount =\
    \ word.count(vowels.toIterator)\n        val vowelsCount = word.count(vowels.toStream)\n\
    \        val vowelsCount = word.count(vowels.toList)\n        val vowelsCount\
    \ = word.count(vowels.toSet)\n        val vowelsCount = word.count(vowels.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toIterator)\n        val vowelsCount\
    \ = word.count(vowels.toStream)\n        val vowelsCount = word.count(vowels.toList)\n\
    \        val vowelsCount = word.count(vowels.toSet)\n        val vowelsCount =\
    \ word.count(vowels.toSeq)\n        val vowelsCount = word.count(vowels.toIterator)\n\
    \        val vowelsCount = word.count(vowels.toStream)\n        val vowelsCount\
    \ = word.count(vowels.toList)\n        val vowelsCount = word.count(vowels.toSet)\n\
    \        val vowelsCount = word.count(vowels.toSeq)\n        val vowelsCount =\
    \ word.count(vowels.toIterator)\n        val vowelsCount = word.count(vowels.toStream)\n\
    \        val vowelsCount = word.count(vowels.toList)\n        val vowelsCount\
    \ = word.count(vowels.toSet)\n        val vowelsCount = word.count(vowels.toSeq)\n\
    \        val vowelsCount = word.count(vowels.toIterator)\n        val vowelsCount\
    \ = word.count(vowels.toStream)\n        val vowelsCount = word.count(vowels.toList)\n\
    \        val vowelsCount = word.count(vowels.toSet)\n        val vowelsCount =\
    \ word.count(vowels.toSeq)\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo1sn65dz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels.toList)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo1sn65dz.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels.toSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo1sn65dz.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels.toSeq)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo1sn65dz.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels.toIterator)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo1sn65dz.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels.toStream)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        val vowelsSet = vowels.toSet;\n\
    \        val vowelsSet2 = vowels.toSet;\n        val vowelsSet3 = vowels.toSet;\n\
    \        val vowelsSet4 = vowels.toSet;\n        val vowelsSet5 = vowels.toSet;\n\
    \        val vowelsSet6 = vowels.toSet;\n        val vowelsSet7 = vowels.toSet;\n\
    \        val vowelsSet8 = vowels.toSet;\n        val vowelsSet9 = vowels.toSet;\n\
    \        val vowelsSet10 = vowels.toSet;\n        val vowelsSet11 = vowels.toSet;\n\
    \        val vowelsSet12 = vowels.toSet;\n        val vowelsSet13 = vowels.toSet;\n\
    \        val vowelsSet14 = vowels.toSet;\n        val vowelsSet15 = vowels.toSet;\n\
    \        val vowelsSet16 = vowels.toSet;\n        val vowelsSet17 = vowels.toSet;\n\
    \        val vowelsSet18 = vowels.toSet;\n        val vowelsSet19 = vowels.toSet;\n\
    \        val vowelsSet20 = vowels.toSet;\n        val vowelsSet21 = vowels.toSet;\n\
    \        val vowelsSet22 = vowels.toSet;\n        val vowelsSet23 = vowels.toSet;\n\
    \        val vowelsSet24 = vowels.toSet;\n        val vowelsSet25 = vowels.toSet;\n\
    \        val vowelsSet26 = vowels.toSet;\n        val vowelsSet27 = vowels.toSet;\n\
    \        val vowelsSet28 = vowels.toSet;\n        val vowelsSet29 = vowels.toSet;\n\
    \        val vowelsSet30 = vowels.toSet;\n        val vowelsSet31 = vowels.toSet;\n\
    \        val vowelsSet32 = vowels.toSet;\n        val vowelsSet33 = vowels.toSet;\n\
    \        val vowelsSet34 = vowels.toSet;\n        val vowelsSet35 = vowels.toSet;\n\
    \        val vowelsSet36 = vowels.toSet;\n        val vowelsSet37 = vowels.toSet;\n\
    \        val vowelsSet38 = vowels.toSet;\n        val vowelsSet39 = vowels.toSet;\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2stz6ow0.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpuowfiqlw.scala:27:404 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet8\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \"\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                        unclosed string literal\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuowfiqlw.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.count(vowels)\n\
    \        val vowelsCount2 = word.count(vowels.toList)\n        val vowelsCount3\
    \ = word.count(vowels.toSet)\n        val vowelsCount4 = word.count(vowels.toSeq)\n\
    \        val vowelsCount5 = word.count(vowels.toIterator)\n        val vowelsCount6\
    \ = word.count(vowels.toList)\n        val vowelsCount7 = word.count(vowels.toSet)\n\
    \        val vowelsCount8 = word.count(vowels.toSeq)\n        val vowelsCount9\
    \ = word.count(vowels.toIterator)\n        val vowelsCount10 = word.count(vowels.toList)\n\
    \        val vowelsCount11 = word.count(vowels.toSet)\n        val vowelsCount12\
    \ = word.count(vowels.toSeq)\n        val vowelsCount13 = word.count(vowels.toIterator)\n\
    \        val vowelsCount14 = word.count(vowels.toList)\n        val vowelsCount15\
    \ = word.count(vowels.toSet)\n        val vowelsCount16 = word.count(vowels.toSeq)\n\
    \        val vowelsCount17 = word.count(vowels.toIterator)\n        val vowelsCount18\
    \ = word.count(vowels.toList)\n        val vowelsCount19 = word.count(vowels.toSet)\n\
    \        val vowelsCount20 = word.count(vowels.toSeq)\n        val vowelsCount21\
    \ = word.count(vowels.toIterator)\n        val vowelsCount22 = word.count(vowels.toList)\n\
    \        val vowelsCount23 = word.count(vowels.toSet)\n        val vowelsCount24\
    \ = word.count(vowels.toSeq)\n        val vowelsCount25 = word.count(vowels.toIterator)\n\
    \        val vowelsCount26 = word.count(vowels.toList)\n        val vowelsCount27\
    \ = word.count(vowels.toSet)\n        val vowelsCount28 = word.count(vowels.toSeq)\n\
    \        val vowelsCount29 = word.count(vowels.toIterator)\n        val vowelsCount30\
    \ = word.count(vowels.toList)\n        val vowelsCount31 = word.count(vowels.toSet)\n\
    \        val vowelsCount32 = word.count(vowels.toSeq)\n        val vowelsCount33\
    \ = word.count(vowels.toIterator)\n        val vowelsCount34 = word.count(vowels.toList)\n\
    \        val vowelsCount35 = word.count(vowels.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfoov_soq.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfoov_soq.scala:20:37 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m               Found:    (vowels : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpfoov_soq.scala:21:45 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount2\e[0m = word.count(vowels.toList)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    List[String]\n\e\
    [31m   |\e[0m                                      Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfoov_soq.scala:23:45\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount4\e\
    [0m = word.count(vowels.toSeq)\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \          Found:    Seq[String]\n\e[31m   |\e[0m                            \
    \          Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfoov_soq.scala:24:45 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount5\e[0m = word.count(vowels.toIterator)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    Iterator[String]\n\
    \e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).toSet.size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(consonants.contains).toSet.size\n        val vowelsCount\
    \ = word.filter(vowels.contains).toSet.size\n        val consonantsCount = word.filter(consonants.contains).toSet.size\n\
    \        val vowelsCount = word.filter(vowels.contains).toSet.size\n        val\
    \ consonantsCount = word.filter(con\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32uz6o0k.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp32uz6o0k.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsCount\e[0m = word.filter(vowels.contains).toSet.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32uz6o0k.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp32uz6o0k.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp32uz6o0k.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(consonants.contains).toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsona"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsSet = vowels.toSet\n        val vowelsSetIterator = vowelsSet.iterator\n\
    \        val vowelsSetIteratorNext = vowelsSetIterator.next\n        val vowelsSetIteratorPrev\
    \ = vowelsSetIterator.prev\n        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNext = vowelsSetIterator.nextNext\n        val\
    \ vowelsSetIteratorNextNextPrev = vowelsSetIterator.nextNextPrev\n        val\
    \ vowelsSetIteratorNextNextNext = vowelsSetIterator.nextNextNext\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.nextNextNextPrev\n   \
    \     val vowelsSetIteratorNextNextNextNext = vowelsSetIterator.nextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNext = vowelsSetIterator.nextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIterator.nextNextNextNextNextNextNextNextNextNextNextNextPrev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.nextNext\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7wf7d_g7.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.nextNextNextNextNextNextNextPrev\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextPrev is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7wf7d_g7.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.nextNextNextNextNextNextNextNextNextNextNextNextPrev\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7wf7d_g7.scala:23:54 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did you mean\
    \ vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7wf7d_g7.scala:25:58\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNext\e[0m = vowelsSetIterator.nextNext\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp351e4wzy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet.filter(_\
    \ != \"u\")\n        val vowelsSet4 = vowelsSet.filter(_ != \"u\").reverse\n \
    \       val vowelsSet5 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\")\n   \
    \     val vowelsSet6 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").reverse\n\
    \        val vowelsSet7 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\")\n        val vowelsSet8 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").reverse\n        val vowelsSet9 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\")\n       \
    \ val vowelsSet10 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_ !=\
    \ \"e\").filter(_ != \"i\").reverse\n        val vowelsSet11 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_\
    \ != \"o\")\n        val vowelsSet12 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_ != \"o\").reverse\n  \
    \      val vowelsSet13 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\")\n       \
    \ val vowelsSet14 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_ !=\
    \ \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\").reverse\n  \
    \      val vowelsSet15 = vowelsSet.filter(_ != \"u\").filter(_ != \"a\").filter(_\
    \ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ != \"u\").filter(_\
    \ != \"a\")\n        val vowelsSet16 = vowelsSet.filter(_ != \"u\").filter(_ !=\
    \ \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_ != \"o\").filter(_ !=\
    \ \"u\").filter(_ != \"a\").reverse\n        val vowelsSet17 = vowelsSet.filter(_\
    \ != \"u\").filter(_ != \"a\").filter(_ != \"e\").filter(_ != \"i\").filter(_\
    \ != \"o\").filter(_ != \"u\").filter(_ != \"a\").filter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:23:52 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet4\e[0m = vowelsSet.filter(_\
    \ != \e[31m\"u\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of Set[String] - did you mean Set[String].reversed?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:25:69 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.filter(_\
    \ != \e[31m\"u\"\e[0m).filter(_ != \e[31m\"a\"\e[0m).reverse\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean\
    \ Set[String].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:27:86\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet8\e[0m = vowelsSet.filter(_ != \e[31m\"u\"\e[0m).filter(_ != \e[31m\"\
    a\"\e[0m).filter(_ != \e[31m\"e\"\e[0m).reverse\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Set[String] - did you mean\
    \ Set[String].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0h6_bfc4.scala:29:104\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSet10\e[0m = vowelsSet.filter(_ != \e[31m\"u\"\e[0m).filter(_ != \e\
    [31m\"a\"\e[0m).filter(_ != \e[31m\"e\"\e[0m).filter(_ != \e[31m\"i\"\e[0m).reverse\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a memb"
  stdout: ''
  timestamp: 1660009464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet6 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet7 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet8 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\",\
    \ \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet9 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\",\
    \ \"o\", \"\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpduvv_vaj.scala:28:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet9\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                              unclosed string literal\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpduvv_vaj.scala:29:5 ---------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp351e4wzy.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp351e4wzy.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defi"
  stdout: ''
  timestamp: 1660009490
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp34cve8zx.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp34cve8zx.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp34cve8zx.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp34cve8zx.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp34cve8zx.scala:39:68\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val vowelsSet = vowels.toSet\n\
    \        val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev = vowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9duzi53i.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9duzi53i.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp9duzi53i.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp9duzi53i.scala:37:64 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNextNextNext.next\n\e[31m\e[31m   |\e\
    [0m                                                                ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9duzi53i.scala:39:68\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e[0m = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.size\n        val consonantsCount = consonants.size\n        val vowelsSet\
    \ = vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        val vowelsSetSize = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr0dyu64a.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0dyu64a.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0dyu64a.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvowelsSetSize is already defined as \e[33mvalue\e[0m \e[35mvowelsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0dyu64a.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mconsonantsSetSize\e[0m = consonantsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsSetSize is already defined as \e[33mvalue\e[0m \e[35mconsonantsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr0dyu64a.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetSize\e[0m = vowelsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.tail\n        val vowelsAfter = vowels.toList\n        val consonantsBefore\
    \ = consonants.toList.tail\n        val consonantsAfter = consonants.toList\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp646hppdv.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp646hppdv.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeLength\e[0m = vowelsBefore.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsBeforeLength is already defined as \e[33mvalue\e[0m \e[35mvowelsBeforeLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp646hppdv.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfterLength\e[0m = vowelsAfter.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAfterLength is already defined as \e[33mvalue\e[0m \e[35mvowelsAfterLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp646hppdv.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBeforeLength\e[0m = consonantsBefore.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBeforeLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp646hppdv.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfterLength\e\
    [0m = consonantsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAfterLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsList = vowelsAndConsonants.toList\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsList.length\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsListLength = vowelsAndConsonantsListLength - 1\n\
    \        val vowelsAndConsonantsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6_qk8wry.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6_qk8wry.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsListLength\e[0m = vowelsAndConsonantsListLength - \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6_qk8wry.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6_qk8wry.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsListLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6_qk8wry.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsListLength\e\
    [0m = vowelsAndConsonantsLi"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsAndConsonants\
    \ = vowels ++ consonants\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val\
    \ vowelsAndConsonantsLength = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength\
    \ = vowelsAndConsonants.size\n        val vowelsAndConsonantsLength = vowelsAndConsonants.size\n\
    \        val vowel\n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6omuncal.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6omuncal.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsAndConsonantsLength\e[0m = vowelsAndConsonants.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6omuncal.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6omuncal.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsAndConsonantsLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6omuncal.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsAndConsonantsLength\e\
    [0m = vowelsAndConsonants.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAndConsonantsLength is "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        val vowelsCount = vowels.toSet.size\n        val vowelsCount = vowels.toSet.size\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyqqv9crh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqqv9crh.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqqv9crh.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqqv9crh.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqqv9crh.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = word.count(vowels)\n        val consonantsCount = word.count(consonants)\n\
    \        val vowelsCountMinusConsonantsCount = vowelsCount - consonantsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCount = vowelsCountMinusConsonantsCount\
    \ - vowelsCount\n        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCount - vowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount - vowelsCountMinusVowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ - vowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ = vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\
    \ - vowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCountMinusVowelsCount\n\
    \        val vowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCountMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpljkx3zfm.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpljkx3zfm.scala:21:37 --------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.count(vowels)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               Found:    (vowels : scala.collection.mutable.Set[String])\n\e\
    [31m   |\e[0m               Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpljkx3zfm.scala:22:41 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.count(consonants)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Found:    (consonants : scala.collection.mutable.Set[String])\n\
    \e[31m   |\e[0m           Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpljkx3zfm.scala:25:128 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCountMinusConsonantsCountMinusVowelsCountMinusVowelsCount\e\
    [0m = vowelsCountMinusConsonantsCountMinusVowelsCount - vowelsCountMinusVowelsCount\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: vowelsCountMinusVowelsCount\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljkx3zfm.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1660009539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.size\n\
    \        val consonantsCount = consonants.toList.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.size\n\
    \        val consonantsCount = consonants.toList.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.size\n\
    \        val consonantsCount = consonants.toList.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = vowels.toList.size\n        val consonantsCount = consonants.toList.size\n\
    \        val vowelsIndex = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex\
    \ = word.lastIndexWhere(consonants.contains)\n        val vowelsCount = vowels.toList.size\n\
    \        val consonantsCount = consonants.toList.size\n        val vowelsIndex\
    \ = word.lastIndexWhere(vowels.contains)\n        val consonantsIndex = word.lastIndexWhere(consonants.contains)\n\
    \        val vowelsCount = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2jyabulv.scala:53:25 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2jyabulv.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.toList.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2jyabulv.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = consonants.toList.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e[35mconsonantsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2jyabulv.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(vowels.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2jyabulv.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(consonants.contains)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009539
