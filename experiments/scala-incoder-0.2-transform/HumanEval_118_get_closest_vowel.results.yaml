language: scala
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextNext = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = vowelsSetIterator.next\n\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpol27pdm7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNext is already\
    \ defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpol27pdm7.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659799104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount2 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount3 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount4\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount5 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount6 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount7 = word.filter(x => vowels.contains(x)).size\n      \
    \  var vowelsCount8 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount9\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount10 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount11 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount12 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount13 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount14 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount15\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount16 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount17 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount18 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount19 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount20 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount21\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount22 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount23 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount24 = word.filter(x => vowels.contains(x)).size\n     \
    \   var vowelsCount25 = word.filter(x => vowels.contains(x)).size\n        var\
    \ vowelsCount26 = word.filter(x => vowels.contains(x)).size\n        var vowelsCount27\
    \ = word.filter(x => vowels.contains(x)).size\n        var vowelsCount28 = word.filter(x\
    \ => vowels.contains(x)).size\n        var vowelsCount29 = word.filter(x => vowels.contains(x)).size\n\
    \        var vowelsCount30 = word.filter(x => vowels.contains(x)).size\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:20:59\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                           ^\e[0m\n\e[31m \
    \  |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:22:60\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount3\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t05qsfm.scala:23:60\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount4\e\
    [0m = word.filter(\e[36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                                    Found:    (x : Char)\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659799421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsSet =\
    \ vowels.toSet\n        val consonantsSet = consonants.toSet\n        val vowelsSetSize\
    \ = vowelsSet.size\n        val consonantsSetSize = consonantsSet.size\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val consonantsSetIterator\
    \ = consonantsSet.iterator\n        val vowelsSetIteratorSize = vowelsSetIterator.size\n\
    \        val consonantsSetIteratorSize = consonantsSetIterator.size\n        val\
    \ vowelsSetIteratorIterator = vowelsSetIterator.iterator\n        val consonantsSetIteratorIterator\
    \ = consonantsSetIterator.iterator\n        val vowelsSetIteratorIteratorSize\
    \ = vowelsSetIteratorIterator.size\n        val consonantsSetIteratorIteratorSize\
    \ = consonantsSetIteratorIterator.size\n        val vowelsSetIteratorIteratorIterator\
    \ = vowelsSetIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIterator\
    \ = consonantsSetIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIteratorIterator\
    \ = vowelsSetIteratorIteratorIteratorIterator.iterator\n        val consonantsSetIteratorIteratorIteratorIteratorIteratorIterator\
    \ = consonantsSetIteratorIteratorIteratorIterator.iterator\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n        val vowelsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = vowelsSetIteratorIteratorIteratorIteratorIterator.size\n        val consonantsSetIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9vzrxt8h.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vzrxt8h.scala:44:88\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mconsonantsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = consonantsSetIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: consonantsSetIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9vzrxt8h.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet4 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\")).diff(Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7g11jg2u.scala:25:834 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet6\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"\
    u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"\
    e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"\
    a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"u\"\e\
    [0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"\
    o\"\e[0m, \e[31m\"u\"\e[0m)).diff(Set(\e[31m\"a\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"\
    i\"\e[0m, \e[31m\"o\"\e[0m, \"u\n\e[31m\e[31m   |\e[0m                       \
    \              "
  stdout: ''
  timestamp: 1659799116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIteratorNext.prev\n        val\
    \ vowelsSetIteratorNextNext = vowelsSetIteratorNext.next\n        val vowelsSetIteratorNextPrev\
    \ = vowelsSetIteratorNextPrev.prev\n        val vowelsSetIteratorNextNextPrev\
    \ = vowelsSetIteratorNextNext.prev\n        val vowelsSetIteratorNextNextNext\
    \ = vowelsSetIteratorNextNext.next\n        val vowelsSetIteratorNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIteratorNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIteratorNextNextNextNext.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNext.prev\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext.prev\n        val\
    \ vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.prev\n\
    \        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIteratorNextNextNextNextNextNextNextNextNextNext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdwzsm2w2.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e\
    [0m = vowelsSetIteratorNextPrev.prev\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextPrev is already defined as \e[33mvalue\e\
    [0m \e[35mvowelsSetIteratorNextPrev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:23:54 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e\
    [0m = vowelsSetIterator.prev\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is not a member\
    \ of Iterator[String] - did you mean vowelsSetIterator.drop?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdwzsm2w2.scala:24:62 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextPrev\e[0m\
    \ = vowelsSetIteratorNext.prev\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue prev is\
    \ not a member of String - did you mean vowelsSetIteratorNext.trim?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpdwzsm2w2.scala:25:62 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNext\e\
    [0m = vowelsSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue next\
    \ is not a member of String - did you mean vowelsSetIteratorNext.indent?\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdwzsm2w2.scala:34:60 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIteratorNextNextNextNextNextNext.prev\n\e[31m\e[31m   |\e[0m  \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    No"
  stdout: ''
  timestamp: 1659799076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\"))\n    \
    \    val vowelsSet3 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"))\n\
    \        val vowelsSet4 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"\
    y\",\"u\"))\n        val vowelsSet5 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"\
    o\",\"u\",\"y\",\"u\",\"r\"))\n        val vowelsSet6 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\"))\n        val vowelsSet7\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"\
    d\"))\n        val vowelsSet8 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\"))\n        val vowelsSet9 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\"))\n    \
    \    val vowelsSet10 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"\
    ,\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\"))\n        val vowelsSet11 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"\
    m\"))\n        val vowelsSet12 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"\
    u\",\"y\",\"u\",\"r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"m\",\"v\"))\n        val\
    \ vowelsSet13 = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"\
    r\",\"l\",\"d\",\"g\",\"c\",\"b\",\"m\",\"v\",\"w\"))\n        val vowelsSet14\
    \ = vowelsSet.diff(Set(\"a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\",\"l\",\"\
    d\",\"g\",\"c\",\"b\",\"m\",\"v\",\"w\",\"y\"))\n        val vowelsSet15 = vowelsSet.diff(Set(\"\
    a\",\"e\",\"i\",\"o\",\"u\",\"y\",\"u\",\"r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6d0vco5o.scala:34:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet15\e[0m = vowelsSet.diff(Set(\e\
    [31m\"a\"\e[0m,\e[31m\"e\"\e[0m,\e[31m\"i\"\e[0m,\e[31m\"o\"\e[0m,\e[31m\"u\"\e\
    [0m,\e[31m\"y\"\e[0m,\e[31m\"u\"\e[0m,\"r\n\e[31m\e[31m   |\e[0m             \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp6d0vco5o.scala:36:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6d0vco5o.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6d0vco5o.scala:36:4 -------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: rdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val consonants = Set(\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowelsCount\
    \ = vowels.toList.map(_.length).sum\n        val consonantsCount = consonants.toList.map(_.length).sum\n\
    \        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"u\")\n        val consonantsIndex = word.lastIndexWhere(_.toLowerCase ==\
    \ \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase ==\
    \ \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase ==\
    \ \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase ==\
    \ \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"p\" || _.toLowerCase ==\
    \ \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase ==\
    \ \"t\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase ==\
    \ \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\")\n        val vowelsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"a\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"o\" || _.toLowerCase == \"u\")\n        val consonantsIndex\
    \ = word.lastIndexWhere(_.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\")\n        val vowelsIndex = word.lastIndexWhere(_.toLowerCase == \"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb361jdzl.scala:27:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \"\n\e[31m\e[31m   |\e[0m                                               \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \            unclosed string literal\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb361jdzl.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mvowelsIndex\e[0m = word.lastIndexWhere(_.toLowerCase == \e[31m\"a\"\e\
    [0m || _.toLowerCase == \e[31m\"e\"\e[0m || _.toLowerCase == \e[31m\"i\"\e[0m\
    \ || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb361jdzl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsIndex\e[0m = word.lastIndexWhere(_.toLowerCase\
    \ == \e[31m\"b\"\e[0m || _.toLowerCase == \e[31m\"c\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"d\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e\
    [31m\"g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"\
    j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m || _.toLowerCase == \e[31m\"l\"\e\
    [0m || _.toLowerCase == \e[31m\"m\"\e[0m || _.toLowerCase == \e[31m\"n\"\e[0m\
    \ || _.toLowerCase == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase\
    \ == \e[31m\"t\"\e[0m || _.toLowerCase == \e[31m\"v\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e[0m || _.toLowerCase == \e\
    [31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.diff(Set(\"a\", \"e\", \"i\", \"o\", \"u\"))\n\
    \        val vowelsSet3 = vowelsSet.diff(vowelsSet2)\n        val vowelsSet4 =\
    \ vowelsSet.diff(vowelsSet3)\n        val vowelsSet5 = vowelsSet.diff(vowelsSet4)\n\
    \        val vowelsSet6 = vowelsSet.diff(vowelsSet5)\n        val vowelsSet7 =\
    \ vowelsSet.diff(vowelsSet6)\n        val vowelsSet8 = vowelsSet.diff(vowelsSet7)\n\
    \        val vowelsSet9 = vowelsSet.diff(vowelsSet8)\n        val vowelsSet10\
    \ = vowelsSet.diff(vowelsSet9)\n        val vowelsSet11 = vowelsSet.diff(vowelsSet10)\n\
    \        val vowelsSet12 = vowelsSet.diff(vowelsSet11)\n        val vowelsSet13\
    \ = vowelsSet.diff(vowelsSet12)\n        val vowelsSet14 = vowelsSet.diff(vowelsSet13)\n\
    \        val vowelsSet15 = vowelsSet.diff(vowelsSet14)\n        val vowelsSet16\
    \ = vowelsSet.diff(vowelsSet15)\n        val vowelsSet17 = vowelsSet.diff(vowelsSet16)\n\
    \        val vowelsSet18 = vowelsSet.diff(vowelsSet17)\n        val vowelsSet19\
    \ = vowelsSet.diff(vowelsSet18)\n        val vowelsSet20 = vowelsSet.diff(vowelsSet19)\n\
    \        val vowelsSet21 = vowelsSet.diff(vowelsSet20)\n        val vowelsSet22\
    \ = vowelsSet.diff(vowelsSet21)\n        val vowelsSet23 = vowelsSet.diff(vowelsSet22)\n\
    \        val vowelsSet24 = vowelsSet.diff(vowelsSet23)\n        val vowelsSet25\
    \ = vowelsSet.diff(vowelsSet24)\n        val vowelsSet26 = vowelsSet.diff(vowelsSet25)\n\
    \        val vowelsSet27 = vowelsSet.diff(vowelsSet26)\n        val vowelsSet28\
    \ = vowelsSet.diff(vowelsSet27)\n        val vowelsSet29 = vowelsSet.diff(vowelsSet28)\n\
    \        val vowelsSet30 = vowelsSet.diff(vowelsSet29)\n        val vowelsSet31\
    \ = vowelsSet.diff(vowelsSet30)\n        val vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpah2y8hsq.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpah2y8hsq.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"y\")\n        val consonants = Set(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\")\n        val vowelsBefore\
    \ = vowels.toList.tail\n        val vowelsAfter = vowels.toList\n        val consonantsBefore\
    \ = consonants.toList.tail\n        val consonantsAfter = consonants.toList\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n        val consonantsAfterLength\
    \ = consonantsAfter.length\n        val vowelsBeforeLength = vowelsBefore.length\n\
    \        val vowelsAfterLength = vowelsAfter.length\n        val consonantsBeforeLength\
    \ = consonantsBefore.length\n        val consonantsAfterLength = consonantsAfter.length\n\
    \        val vowelsBeforeLength = vowelsBefore.length\n        val vowelsAfterLength\
    \ = vowelsAfter.length\n        val consonantsBeforeLength = consonantsBefore.length\n\
    \        val consonantsAfterLength = consonantsAfter.length\n        val vowelsBeforeLength\
    \ = vowelsBefore.length\n        val vowelsAfterLength = vowelsAfter.length\n\
    \        val consonantsBeforeLength = consonantsBefore.length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mvowelsBeforeLength\e[0m\
    \ = vowelsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsBeforeLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mvowelsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mvowelsAfterLength\e[0m =\
    \ vowelsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsAfterLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mconsonantsBeforeLength\e\
    [0m = consonantsBefore.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsBeforeLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsBeforeLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mconsonantsAfterLength\e\
    [0m = consonantsAfter.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsAfterLength is already defined as \e[33mvalue\e\
    [0m \e[35mconsonantsAfterLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfpf7bg0j.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        "
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowelsSet.toSet\n        val vowelsSet3 = vowelsSet2.toSet\n\
    \        val vowelsSet4 = vowelsSet3.toSet\n        val vowelsSet5 = vowelsSet4.toSet\n\
    \        val vowelsSet6 = vowelsSet5.toSet\n        val vowelsSet7 = vowelsSet6.toSet\n\
    \        val vowelsSet8 = vowelsSet7.toSet\n        val vowelsSet9 = vowelsSet8.toSet\n\
    \        val vowelsSet10 = vowelsSet9.toSet\n        val vowelsSet11 = vowelsSet10.toSet\n\
    \        val vowelsSet12 = vowelsSet11.toSet\n        val vowelsSet13 = vowelsSet12.toSet\n\
    \        val vowelsSet14 = vowelsSet13.toSet\n        val vowelsSet15 = vowelsSet14.toSet\n\
    \        val vowelsSet16 = vowelsSet15.toSet\n        val vowelsSet17 = vowelsSet16.toSet\n\
    \        val vowelsSet18 = vowelsSet17.toSet\n        val vowelsSet19 = vowelsSet18.toSet\n\
    \        val vowelsSet20 = vowelsSet19.toSet\n        val vowelsSet21 = vowelsSet20.toSet\n\
    \        val vowelsSet22 = vowelsSet21.toSet\n        val vowelsSet23 = vowelsSet22.toSet\n\
    \        val vowelsSet24 = vowelsSet23.toSet\n        val vowelsSet25 = vowelsSet24.toSet\n\
    \        val vowelsSet26 = vowelsSet25.toSet\n        val vowelsSet27 = vowelsSet26.toSet\n\
    \        val vowelsSet28 = vowelsSet27.toSet\n        val vowelsSet29 = vowelsSet28.toSet\n\
    \        val vowelsSet30 = vowelsSet29.toSet\n        val vowelsSet31 = vowelsSet30.toSet\n\
    \        val vowelsSet32 = vowelsSet31.toSet\n        val vowelsSet33 = vowelsSet32.toSet\n\
    \        val vowelsSet34 = vowelsSet33.toSet\n        val vowelsSet35 = vowelsSet34.toSet\n\
    \        val vowelsSet36 = vowelsSet35.toSet\n        val vowelsSet37 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphexu38ah.scala:56:25 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet37\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphexu38ah.scala:57:5 ---------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799091
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonants = Set(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\")\n        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).size\n\
    \        val vowelsCount = word.filter(x => vowels.contains(x)).size\n       \
    \ val consonantsCount = word.filter(x => consonants.contains(x)).size\n      \
    \  val vowelsCount = word.filter(x => vowels.contains(x)).size\n        val consonantsCount\
    \ = word.filter(x => consonants.contains(x)).size\n        val vowelsCount = word.filter(x\
    \ => vowels.contains(x)).size\n        val consonantsCount = word.filter(x =>\
    \ consonants.contains(x)).size\n        val vowelsCount = word.filter(x => vowels.contains(x)).size\n\
    \        val consonantsCount = word.filter(x => consonants.contains(x)).\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpebaxj969.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpebaxj969.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e[36mx\e\
    [0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsonantsCount is already defined as \e[33mvalue\e[0m \e\
    [35mconsonantsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpebaxj969.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpebaxj969.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mconsonantsCount\e[0m = word.filter(\e\
    [36mx\e[0m => consonants.contains(x)).size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcon"
  stdout: ''
  timestamp: 1659799135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val vowelsCount\
    \ = word.filter(vowels.contains).length\n        val vowelsCount = word.filter(vowels.contains).length\n\
    \        val vowelsCount = word.filter(vowels.contains).length\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmppwcctd7b.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmppwcctd7b.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppwcctd7b.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(vowels.contains).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n        val\
    \ vowelsCount = word.filter(x => vowels.contains(x)).length\n        val consonants\
    \ = word.filter(x => !vowels.contains(x))\n        val consonantsCount = consonants.length\n\
    \        val vowelsCount = consonants.filter(x => vowels.contains(x)).length\n\
    \        val vowelsCount2 = vowelsCount - consonantsCount\n        val consonantsCount2\
    \ = consonants.length - vowelsCount\n        val vowelsCount3 = consonantsCount\
    \ - consonantsCount2\n        val consonantsCount3 = consonants.length - vowelsCount2\n\
    \        val vowelsCount4 = consonantsCount3 - consonantsCount2\n        val consonantsCount4\
    \ = consonants.length - vowelsCount3\n        val vowelsCount5 = consonantsCount4\
    \ - consonantsCount3\n        val consonantsCount5 = consonants.length - vowelsCount4\n\
    \        val vowelsCount6 = consonantsCount5 - consonantsCount4\n        val consonantsCount6\
    \ = consonants.length - vowelsCount5\n        val vowelsCount7 = consonantsCount6\
    \ - consonantsCount5\n        val consonantsCount7 = consonants.length - vowelsCount6\n\
    \        val vowelsCount8 = consonantsCount7 - consonantsCount6\n        val consonantsCount8\
    \ = consonants.length - vowelsCount7\n        val vowelsCount9 = consonantsCount8\
    \ - consonantsCount7\n        val consonantsCount9 = consonants.length - vowelsCount8\n\
    \        val vowelsCount10 = consonantsCount9 - consonantsCount8\n        val\
    \ consonantsCount10 = consonants.length - vowelsCount9\n        val vowelsCount11\
    \ = consonantsCount10 - consonantsCount9\n        val consonantsCount11 = consonants.length\
    \ - vowelsCount10\n        val vowelsCount12 = consonantsCount11 - consonantsCount10\n\
    \        val consonantsCount12 = consonants.length - vowelsCount11\n        val\
    \ vowelsCount13 = consonantsCount12 - consonantsCount11\n        val consonantsCount13\
    \ = consonants.length - vowelsCount12\n        val vowelsCount14 = consonantsCount13\
    \ - \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj39dqf9g.scala:48:47 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount14\e[0m = consonantsCount13\
    \ - \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj39dqf9g.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = consonants.filter(\e[36mx\e\
    [0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpj39dqf9g.scala:20:59 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = word.filter(\e\
    [36mx\e[0m => vowels.contains(x)).length\n\e[31m\e[31m   |\e[0m              \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                            Found:    (x : Char)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj39dqf9g.scala:21:59 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mconsonants\e[0m = word.filter(\e\
    [36mx\e[0m => !vowels.contains(x))\n\e[31m\e[31m   |\e[0m                    \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                                      Found:    (x : Char)\n\e[31m   |\e[0m \
    \                                                   Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m--"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSet2 = vowels.toSet.reverse\n        val vowelsSet3 = vowelsSet2.reverse\n\
    \        val vowelsSet4 = vowelsSet3.reverse\n        val vowelsSet5 = vowelsSet4.reverse\n\
    \        val vowelsSet6 = vowelsSet5.reverse\n        val vowelsSet7 = vowelsSet6.reverse\n\
    \        val vowelsSet8 = vowelsSet7.reverse\n        val vowelsSet9 = vowelsSet8.reverse\n\
    \        val vowelsSet10 = vowelsSet9.reverse\n        val vowelsSet11 = vowelsSet10.reverse\n\
    \        val vowelsSet12 = vowelsSet11.reverse\n        val vowelsSet13 = vowelsSet12.reverse\n\
    \        val vowelsSet14 = vowelsSet13.reverse\n        val vowelsSet15 = vowelsSet14.reverse\n\
    \        val vowelsSet16 = vowelsSet15.reverse\n        val vowelsSet17 = vowelsSet16.reverse\n\
    \        val vowelsSet18 = vowelsSet17.reverse\n        val vowelsSet19 = vowelsSet18.reverse\n\
    \        val vowelsSet20 = vowelsSet19.reverse\n        val vowelsSet21 = vowelsSet20.reverse\n\
    \        val vowelsSet22 = vowelsSet21.reverse\n        val vowelsSet23 = vowelsSet22.reverse\n\
    \        val vowelsSet24 = vowelsSet23.reverse\n        val vowelsSet25 = vowelsSet24.reverse\n\
    \        val vowelsSet26 = vowelsSet25.reverse\n        val vowelsSet27 = vowelsSet26.reverse\n\
    \        val vowelsSet28 = vowelsSet27.reverse\n        val vowelsSet29 = vowelsSet28.reverse\n\
    \        val vowelsSet30 = vowelsSet29.reverse\n        val vowelsSet31 = vowelsSet30.reverse\n\
    \        val vowelsSet32 = vowelsSet31.reverse\n        val vowelsSet33 = vowelsSet32.reverse\n\
    \        val vowelsSet34 = vowelsSet33.reverse\n        val vowelsSet35 = vowelsSet34.reverse\n\
    \        val vowelsSet36 = vowelsSet35.reverse\n        val vowelsSet37 = vowelsSet36.reverse\n\
    \        val vowelsSet38 = vowelsSet37.reverse\n        val vowelsSet39 = vowelsSet38.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphvnmo59x.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphvnmo59x.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsSet2\e[0m = vowels.toSet.reverse\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Set[String] - did you mean Set[String].reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvnmo59x.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799130
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsSet = vowels.toSet\n     \
    \   val vowelsSetIterator = vowelsSet.iterator\n        val vowelsSetIteratorNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorPrev = vowelsSetIterator.prev\n\
    \        val vowelsSetIteratorNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextPrev = vowelsSetIterator.next\n\
    \        val vowelsSetIteratorNextNextNext = vowelsSetIterator.next\n        val\
    \ vowelsSetIteratorNextNextNextPrev = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNext\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n        val vowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ = vowelsSetIterator.next\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1y_eu4pc.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m = vowelsSetIterator.next\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\
    \ is already defined as \e[33mvalue\e[0m \e[35mvowelsSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextPrev\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1y_eu4pc.scala:23:54 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsSetIteratorPrev\e[0m = vowelsSetIterator.prev\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue prev is not a member of Iterator[String] - did you mean\
    \ vowelsSetIterator.drop?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1y_eu4pc.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(vowel =>\
    \ word.count(vowel))\n        val vowelsSum = vowelsCount.sum\n        val vowelsSum2\
    \ = vowelsCount.map(vowel => vowel * vowel).sum\n        val vowelsSum3 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel).sum\n        val vowelsSum4 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel).sum\n        val vowelsSum5 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum6 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum7\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n\
    \        val vowelsSum8 = vowelsCount.map(vowel => vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel).sum\n        val vowelsSum9 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n\
    \        val vowelsSum10 = vowelsCount.map(vowel => vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum11\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum12 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel).sum\n        val vowelsSum13 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel).sum\n        val vowelsSum14 = vowelsCount.map(vowel\
    \ => vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel * vowel).sum\n        val vowelsSum15\
    \ = vowelsCount.map(vowel => vowel * vowel * vowel * vowel * vowel * vowel * vowel\
    \ * vowel * vowel * vowel * vowel * vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl3igfbpj.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl3igfbpj.scala:20:57 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowels.map(\e[36mvowel\e[0m =>\
    \ word.count(vowel))\n\e[31m\e[31m   |\e[0m                                  \
    \                       ^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                    Found:    (vowel : String)\n\e[31m   |\e[0m             \
    \                                 Required: Char => Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3igfbpj.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.map(_.length).sum\n\
    \        val vowelsIndex = word.zipWithIndex.filter(_._2 % vowelsCount == 0).map(_._1).max\n\
    \        val vowelsIndex = vowelsIndex.getOrElse(\"\")\n        vowels(vowelsIndex.indexOf(0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp37ks2d2e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsIndex\e[0m = vowelsIndex.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsIndex is already defined as \e[33mvalue\e[0m \e[35mvowelsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp37ks2d2e.scala:23:27 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m        vowels(vowelsIndex.indexOf(\e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value indexOf is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        var vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        var vowelsLeft = Set(\"a\", \"e\", \"\
    i\", \"o\", \"u\")\n        var vowelsRight = Set(\"a\", \"e\", \"i\", \"o\",\
    \ \"u\")\n        var vowelsCount = 0\n        var vowelsCountLeft = 0\n     \
    \   var vowelsCountRight = 0\n        var vowelsCountLeftRight = 0\n        var\
    \ vowelsCountLeftLeft = 0\n        var vowelsCountLeftRightLeft = 0\n        var\
    \ vowelsCountRightLeft = 0\n        var vowelsCountRightLeftLeft = 0\n       \
    \ var vowelsCountRightRightLeft = 0\n        var vowelsCountRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightLeft = 0\n        var vowelsCountRightRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightLeftLeft = 0\n        var vowelsCountRightRightRightRightRightLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeft = 0\n    \
    \    var vowelsCountRightRightRightRightRightRightLeftLeftLeft = 0\n        var\
    \ vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\
    \        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n  \
    \      var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n    \
    \    var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n      \
    \  var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n        var\
    \ vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ = 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft =\
    \ 0\n        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\
    \        var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n  \
    \      var vowelsCountRightRightRightRightRightLeftLeftLeftLeftLeft = 0\n\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpaewurl04.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\
    \ is already defined as \e[33mvariable\e[0m \e[35mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpaewurl04.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCountRightRightRightRightRightRightLeftLeftLeftLeftLeft\e\
    [0m = \e[31m0\e[0m\n"
  stdout: ''
  timestamp: 1659799419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    // two consonants from the right side of the word (case\
    \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n    // find any vowel met the above condition. \n\
    \    // You may assume that the given string contains English letter only.\n \
    \   // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n  \
    \  // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    def getClosestVowel(word : String) : String = {\n        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsCount = vowels.toList\n  \
    \      val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowelsCount.toSeq\n        val vowelsCount = vowelsCount.toList\n\
    \        val vowelsCount = vowelsCount.toSet\n        val vowelsCount = vowelsCount.toSeq\n\
    \        val vowelsCount = vowelsCount.toList\n        val vowelsCount = vowelsCount.toSet\n\
    \        val vowelsCount = vowel\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpajl2q0w7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already defined as \e[33mvalue\e[0m \e[35mvowelsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpajl2q0w7.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = vowelsCount.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowelsCount is already define"
  stdout: ''
  timestamp: 1659799154
