name: HumanEval_15_string_sequence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n\
  \    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        var result = \"\"\n        for (i <- 0 until n) {\n       \
    \     result += i.toString + \" \";\n        }\n        result", "        val\
    \ s = \"\"\n        for (i <- 0 until n) {\n            s += i\n        }\n  \
    \      s", "        val result = new StringBuilder\n        for (i <- 0 until\
    \ n) {\n            result.append(i).append(\" \")\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for (i <-\
    \ 0 until n) {\n            result.append(i).append(\" \")\n        }\n      \
    \  result.toString", "        val s = mutable.StringBuilder()\n        for (i\
    \ <- 0 until n) {\n            s += i\n        }\n        s.toString()", "   \
    \     var s = \"\"\n        for (i <- 0 until n) {\n            s = s + \" \"\
    \ + i\n        }\n        s", "        var s = \"\"\n        for (i <- 0 until\
    \ n) {\n            s += i\n        }\n        s", "        val s = mutable.StringBuilder()\n\
    \        for (i <- 0 until n) {\n            s.append(i).append(\" \")\n     \
    \   }\n        s.toString()", "        val s = mutable.StringBuilder()\n     \
    \   for (i <- 0 until n) {\n            s += i\n        }\n        s.toString()",
  "        var s = \"\"\n        var i = 0\n        while (i < n) {\n            s\
    \ += i\n            i += 1\n        }\n        s", "        var s = \"\"\n   \
    \     for (i <- 0 until n) {\n            s = s + i\n        }\n        s", " \
    \       val result = new StringBuilder\n        for (i <- 0 until n) {\n     \
    \       result.append(i).append(\" \")\n        }\n        result.toString", " \
    \       val list = mutable.ListBuffer[String]()\n        for (i <- 0 until n)\
    \ list += i.toString\n        list.toString.trim", "        var s = \"\"\n   \
    \     for (i <- 0 until n) {\n            s = s + \" \" + i\n        }\n     \
    \   s", "        var s = \"\"\n        for (i <- 0 until n) {\n            s +=\
    \ i\n        }\n        s", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until n) {\n            result.append(i).append(\" \")\n        }\n\
    \        return result.toString", "        var s = \"\"\n        for (i <- 0 until\
    \ n) {\n            s += i\n        }\n        s", "        var s = \"\"\n   \
    \     for (i <- 0 until n) {\n            s += i\n        }\n        s", "   \
    \     val result = new StringBuilder\n        for (i <- 0 until n) {\n       \
    \     result.append(i).append(\" \")\n        }\n        result.toString", " \
    \       var result = \"\"\n        var i = 0\n        while (i < n) {\n      \
    \      result += (i + 1).asInstanceOf[String]\n            i += 1\n        }\n\
    \        result"]
stop_tokens:
- "\n    }\n"
