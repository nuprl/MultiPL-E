name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val numberSet = numbers.toSet\n        val mean = numberSet.sum\
    \ / numberSet.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        val mad = deviations.sum / deviations.size\n        mad", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfSquares\
    \ = numbers.map(x => math.pow((x - mean), 2)).sum\n        math.sqrt(sumOfSquares\
    \ / n)", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.length", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        numbers.map(x\
    \ => (x - mean) * (x - mean)).sum / n", "        val numberSet = numbers.toSet\n\
    \        val mean = numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / numberSet.size", "       \
    \ val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / numbers.size", "        val\
    \ numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n \
    \       val deviations = numbers.map(x => (x - mean).abs)\n        val average\
    \ = deviations.sum / deviations.size\n        average", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val numberSet\
    \ = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n       \
    \ val deviations = numbers.map { x =>\n            math.abs(x - mean)\n      \
    \  }\n        deviations.sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / n", "        val sum = 0.0f\n\
    \        val mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum\
    \ += math.abs(x - mean))\n        sum / numbers.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        val mad = deviations.sum / n\n\
    \        mad", "        val mean: Float = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs /\
    \ n", "        val mean: Float = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / deviations.size",
  "        val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean: Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.length", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        val mad = deviations.sum / deviations.length\n \
    \       mad", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length",
  "        val sum = 0.0f\n        numbers.foreach(x => sum += Math.abs(x - numbers.mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val numbersList = numbers.toList\n      \
    \  val mean = numbersList.sum / numbersList.length\n        val deviations = numbersList.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val mean = numbers.sum / numbers.size\n        val diffs = numbers.map(x =>\
    \ x - mean)\n        diffs.sum / diffs.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ x - mean)\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.length\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val sum = 0.0f\n        val count = 0.0f\n   \
    \     numbers.foreach(x => sum += Math.abs(x))\n        numbers.foreach(x => count\
    \ += 1.0f)\n        sum / count", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        val average\
    \ = deviations.sum / deviations.size\n        average", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val sum = 0.0f\n        numbers.foreach(x\
    \ => sum += math.abs(x - numbers.sum))\n        sum / numbers.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map { x => math.abs(x - mean) }\n        deviations.sum / n", "  \
    \      val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val numberSet\
    \ = numbers.toSet\n        val mean = numberSet.iterator.next\n        val sum\
    \ = 0.0f\n        numberSet.foreach(x => sum += math.abs(x - mean))\n        sum\
    \ / numberSet.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n   \
    \     sumOfDiffs / n", "        val mean = numbers.sum / numbers.size\n      \
    \  val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val sum\
    \ = 0.0f\n        val count = 0.0f\n        for (number <- numbers) {\n      \
    \      sum += number\n            count += 1\n        }\n        if (count ==\
    \ 0.0f) 0.0f else sum / count", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.length", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map { x =>\n            math.abs(x - mean)\n\
    \        }\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => x - mean)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.length\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.size\n       \
    \ numbers.map(x => math.abs(x - mean)).sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        numbers.map( x => Math.abs(x - mean)\
    \ ).sum / n", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val sum = 0.0f\n        val count = 0.0f\n        numbers.foreach{ x =>\n  \
    \          sum += x\n            count += 1\n        }\n        val mean = sum\
    \ / count\n        val deviations = numbers.map{ x =>\n            math.abs(x\
    \ - mean)\n        }\n        deviations.sum", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => math.abs(x - mean)).sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val sum =\
    \ 0.0f\n        numbers.foreach(x => sum += math.abs(x - numbers.mean))\n    \
    \    sum / numbers.size", "        val mean: Float = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val mean: Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val mean =\
    \ numbers.sum / numbers.length\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.length", "        val sum = 0.0f\n\
    \        val mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum\
    \ += math.abs(x - mean))\n        sum / numbers.size", "        val mean: Float\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => x -\
    \ mean)\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val n = numbers.size\n    \
    \    val mean = numbers.sum / n\n        val deviations = numbers.map { x => math.abs(x\
    \ - mean) }\n        deviations.sum / n", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.length", "        val sum = 0.0f\n        numbers.foreach(x =>\
    \ sum += Math.abs(x - numbers.sum))\n        sum / numbers.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / deviations.size", "        val mean:\
    \ Float = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.length", "        val mean\
    \ = numbers.sum / numbers.size\n        val diffs = numbers.map(x => x - mean)\n\
    \        diffs.sum / diffs.size", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val diffs = numbers.map(x => x - mean)\n        val\
    \ sumOfDiffs = diffs.sum\n        val squareDiffs = diffs.map(x => x * x)\n  \
    \      val absSum = squareDiffs.sum\n        val absDiff = absSum / n\n      \
    \  absDiff", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.length", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ numbersList = numbers.toList\n        val mean: Float = numbersList.sum / numbersList.length\n\
    \        val deviations = numbersList.map { x =>\n            Math.abs(x - mean)\n\
    \        }\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n  \
    \      deviations.sum / deviations.size", "        val mean: Float = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        val mad = deviations.sum / n\n        mad", " \
    \       val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val sum =\
    \ 0.0f\n        numbers.foreach{ x => sum += Math.abs(x - mean) }\n        sum\
    \ / numbers.size", "        val numberSet = numbers.toSet\n        val mean =\
    \ numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach {\
    \ x =>\n            sum += math.abs(x - mean)\n        }\n        sum / numberSet.size",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += math.abs(x - mean))\n        sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val sum = 0.0f\n\
    \        numbers.foreach(x => sum += math.abs(x - numbers.sum))\n        sum /\
    \ numbers.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n  \
    \      deviations.sum / n", "        val numbersList = numbers.toList\n      \
    \  val mean: Float = numbersList.sum / numbersList.length\n        val deviations\
    \ = numbersList.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val sum = 0.0f\n        numbers.foreach(x => sum += Math.abs(x - numbers.mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ deviations.sum / n", "        val mean = numbers.sum / numbers.size\n      \
    \  val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val diffs = numbers.map(x => (x - mean))\n        val sumOfDiffs\
    \ = diffs.sum\n        val absSumOfDiffs = Math.abs(sumOfDiffs)\n        val absMeanOfDiffs\
    \ = Math.abs(mean)\n        val absMean = absSumOfDiffs / n\n        absMeanOfDiffs\
    \ / absMean", "        val n = numbers.size\n        val mean = numbers.sum /\
    \ n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean))\n        val\
    \ mad = sumOfDiffs.sum / n\n        mad", "        val mean: Float = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean) * (x -\
    \ mean))\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n        val\
    \ MAD = sumOfDiffsSum / n\n        MAD", "        val numberSet = numbers.toSet\n\
    \        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / deviations.size", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => (x -\
    \ mean).abs)\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.length", "        val sum = 0.0f\n      \
    \  numbers.foreach(x => sum += math.abs(x - numbers.mean))\n        sum / numbers.size",
  "        val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.length",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val mean: Float = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n        val\
    \ mad = math.abs(sumOfDiffsSum / n)\n        mad", "        val sum = 0.0f\n \
    \       numbers.foreach(x => sum += math.abs(x - numbers.sum))\n        sum /\
    \ numbers.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => (x - mean).abs)\n        val\
    \ mad = deviations.sum / n\n        mad", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        val mad =\
    \ deviations.reduce((x, y) => x + y)\n        mad.toFloat", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / deviations.length", "      \
    \  val mean = numbers.sum / numbers.length\n        numbers.map(x => Math.abs(x\
    \ - mean)).sum / numbers.length", "        val n = numbers.size\n        val mean\
    \ = numbers.sum / n\n        val deviations = numbers.map(x => x - mean)\n   \
    \     deviations.sum / n", "        val numberSet = numbers.toSet\n        val\
    \ mean = numberSet.sum / numberSet.size\n        val deviations = numbers.map\
    \ { x =>\n            math.abs(x - mean)\n        }\n        deviations.sum /\
    \ numberSet.size", "        val mean = numbers.sum / numbers.length\n        val\
    \ deviations = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum\
    \ / deviations.length", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n   \
    \     sumOfDiffs / n", "        val mean = numbers.sum / numbers.size\n      \
    \  val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => math.abs(x - mean))\n       \
    \ val mad = deviations.sum / n\n        mad", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => x - mean)\n    \
    \    deviations.sum / deviations.length", "        val n = numbers.size\n    \
    \    val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val numbers_mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - numbers_mean).abs)\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        val mad = deviations.sum / n\n        mad", "        val n\
    \ = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs =\
    \ numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs / n", "       \
    \ val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size ", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => x -\
    \ mean)\n        deviations.sum / deviations.size", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.length\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.length", "        val sum = 0.0f\n      \
    \  numbers.foreach(x => sum += math.abs(x - numbers.mean))\n        sum / numbers.size",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n       \
    \ numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => math.abs(x - mean)).sum / numbers.size",
  "        val sum = 0.0f\n        numbers.foreach(x => sum += math.abs(x - numbers.mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.length", "        val sum = 0.0f\n        val mean = numbers.sum\
    \ / numbers.length\n        numbers.foreach(x => sum += math.abs(x - mean))\n\
    \        sum / numbers.length", "        val numberSet = numbers.toSet\n     \
    \   val mean = numberSet.iterator.next\n        val deviations = numberSet.map\
    \ { x =>\n            Math.abs(x - mean)\n        }\n        val sum = deviations.sum\n\
    \        val average = sum / deviations.length\n        average", "        val\
    \ mean = numbers.sum / numbers.size\n        val diffs = numbers.map(x => (x -\
    \ mean))\n        val sumOfDiffs = diffs.sum\n        val absSumOfDiffs = diffs.map(x\
    \ => math.abs(x)).sum\n        val MAD = absSumOfDiffs / sumOfDiffs\n        return\
    \ MAD", "        val mean: Float = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean))\n        val mad = sumOfDiffs.sum / n\n\
    \        mad", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / n", "        val sum = 0.0f\n        numbers.foreach(x => sum += abs(x - mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.length",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.length\n     \
    \   numbers.foreach(x => sum += (x - mean) * (x - mean))\n        sum / numbers.length",
  "        val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n       \
    \ numbers.foreach(x => sum += math.abs(x - mean))\n        sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => x - mean)\n        deviations.sum / deviations.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map { x\
    \ =>\n            math.abs(x - mean)\n        }\n        deviations.sum / n",
  "        val numberSet = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n\
    \        val deviations = numbers.map { x => math.abs(x - mean) }\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.size\n     \
    \   val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        val deviations = numbers.map(x => x - mean)\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => x - mean)\n        deviations.sum / deviations.size", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        val\
    \ sumOfDiffs = numbers.map(x => math.abs(x - mean)).sum\n        sumOfDiffs /\
    \ n", "        val sum = 0.0f\n        numbers.foreach(x => sum += abs(x - mean))\n\
    \        sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum /\
    \ deviations.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.size",
  "        val sum = 0.0f\n        numbers.foreach(x => sum += Math.abs(x))\n    \
    \    sum / numbers.size", "        val mean = numbers.sum / numbers.size\n   \
    \     val deviations = numbers.map(x => x - mean)\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        numbers.map(x => math.abs(x\
    \ - mean)).sum / numbers.size", "        val mean = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size ", "        val mean = numbers.sum / numbers.length\n    \
    \    val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean: Float = numbers.sum / numbers.size\n\
    \        val deviations = numbers.map(x => (x - mean).abs)\n        deviations.sum\
    \ / deviations.size", "        val mean = numbers.sum / numbers.size\n       \
    \ numbers.map(x => math.abs(x - mean)).sum / numbers.size", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => x\
    \ - mean)\n        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val sumOfDiffs = numbers.map(x =>\
    \ math.abs(x - mean)).sum\n        sumOfDiffs / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n"]
stop_tokens:
- "\n    }\n"
