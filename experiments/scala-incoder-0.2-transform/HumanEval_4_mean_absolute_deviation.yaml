name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val numberSet = numbers.toSet\n        val mean = numberSet.sum\
    \ / numberSet.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        val mad = deviations.sum / deviations.size\n        mad", "        val\
    \ mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / deviations.size", "        val\
    \ n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfSquares\
    \ = numbers.map(x => math.pow((x - mean), 2)).sum\n        math.sqrt(sumOfSquares\
    \ / n)", "        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => (x - mean).abs)\n        deviations.sum / deviations.length",
  "        val mean: Float = numbers.sum / numbers.size\n        val deviations =\
    \ numbers.map(x => math.abs(x - mean))\n        deviations.sum / deviations.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.length", " \
    \       val n = numbers.size\n        val mean = numbers.sum / n\n        numbers.map(x\
    \ => (x - mean) * (x - mean)).sum / n", "        val numberSet = numbers.toSet\n\
    \        val mean = numberSet.iterator.next\n        val sum = 0.0f\n        numberSet.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / numberSet.size", "       \
    \ val sum = 0.0f\n        val mean = numbers.sum / numbers.size\n        numbers.foreach(x\
    \ => sum += (x - mean) * (x - mean))\n        sum / numbers.size", "        val\
    \ numberSet = numbers.toSet\n        val mean = numbers.sum / numbers.size\n \
    \       val deviations = numbers.map(x => (x - mean).abs)\n        val average\
    \ = deviations.sum / deviations.size\n        average", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean) * (x - mean))\n        deviations.sum / n", "        val numberSet\
    \ = numbers.toSet\n        val mean = numberSet.sum / numberSet.size\n       \
    \ val deviations = numbers.map { x =>\n            math.abs(x - mean)\n      \
    \  }\n        deviations.sum / numbers.size", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => math.abs(x - mean))\n\
    \        deviations.sum / deviations.size", "        val n = numbers.size\n  \
    \      val mean = numbers.sum / n\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / n", "        val sum = 0.0f\n\
    \        val mean = numbers.sum / numbers.size\n        numbers.foreach(x => sum\
    \ += math.abs(x - mean))\n        sum / numbers.size", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ (x - mean).abs)\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum / numbers.size"]
stop_tokens:
- "\n    }\n"
