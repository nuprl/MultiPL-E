name: HumanEval_90_next_smallest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
  \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    //\
  \ None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
  \    }\n\n}\n"
completions: ["        val smallest = lst.min\n        val index = lst.indexWhere(_\
    \ == smallest)\n        if (index < lst.size) {\n            Some(lst(index +\
    \ 1))\n        } else {\n            None\n        }", "        val smallest =\
    \ lst.min\n        val index = lst.indexWhere(x => x < smallest)\n        if (index\
    \ < 0) None else Some(lst(index + 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(_ == smallest)\n        if (index == 0) None\n\
    \        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n \
    \       val index = lst.indexWhere(x => x == smallest)\n        if (index == 0)\
    \ None\n        else Some(lst.apply(index + 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x == smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        if (lst.isEmpty) None\n        else {\n            val smallest\
    \ = lst.head\n            val rest = lst.tail\n            if (smallest.compareTo(rest.head)\
    \ < 0) Some(rest.head)\n            else nextSmallest(rest)\n        }", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if(index == 0) None\n        else Some(lst.apply(index - 1))", "        val\
    \ smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n    \
    \    if(index == lst.size - 1) None\n        else Some(lst.apply(index + 1))",
  "        val smallest = lst.min\n        val secondSmallest = lst.filter(_ < smallest).min\n\
    \        secondSmallest match {\n            case Some(x) => Some(x)\n       \
    \     case None => None\n        }", "        val smallest = lst.min\n       \
    \ val index = lst.indexOf(smallest)\n        if (index < lst.size - 1) {\n   \
    \         Some(lst(index + 1))\n        } else {\n            None\n        }",
  "        val smallest = lst.min\n        val index = lst.indexWhere(_ == smallest)\n\
    \        if (index == 0) None else Some(lst.apply(index - 1))", "        val smallest\
    \ = lst.min\n        val index = lst.indexOf(smallest)\n        if(index == 0)\
    \ None\n        else Some(lst.apply(index - 1))", "        val smallest = lst.min\n\
    \        val index = lst.indexWhere(x => x < smallest)\n        if (index < lst.size)\
    \ {\n            Some(lst.apply(index + 1))\n        } else {\n            None\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexWhere(x => x == smallest)\n\
    \        if (index == -1) {\n            None\n        } else {\n            val\
    \ nextSmallest = lst(index + 1)\n            Some(nextSmallest)\n        }", " \
    \       val smallest = lst.min\n        val index = lst.indexWhere(x => x < smallest)\n\
    \        if (index < lst.size) {\n            Some(lst.apply(index + 1))\n   \
    \     } else {\n            None\n        }", "        val smallest = lst.min\n\
    \        val index = lst.indexOf(smallest)\n        if (index == 0) None\n   \
    \     else Some(lst.apply(index - 1))", "        val smallest = lst.min\n    \
    \    val index = lst.indexWhere(x => x == smallest)\n        if (index == lst.size)\
    \ {\n            None\n        } else {\n            Some(lst.apply(index + 1))\n\
    \        }", "        val smallest = lst.min\n        val index = lst.indexOf(smallest)\n\
    \        if (index == 0) None\n        else Some(lst.apply(index - 1))", "   \
    \     val smallest = lst.min\n        val index = lst.indexOf(smallest)\n    \
    \    if (index > 0) {\n            Some(lst.apply(index - 1))\n        } else\
    \ {\n            None\n        }"]
stop_tokens:
- "\n    }\n"
