name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n\
  \    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n\
  \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
  \    // a string of binary number\n    def solve(N : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\")(_ + _)\n        binary.reverse.grouped(2).map(_.mkString).reverse",
  "        val binary = N.toBinaryString\n        val digits = binary.toList\n   \
    \     val sum = 0\n        val result = new mutable.ListBuffer[String]()\n   \
    \     while(digits.nonEmpty) {\n            val digit = digits.head\n        \
    \    sum += digit.toLong\n            digits.remove(digit)\n            result\
    \ += (sum.toBinaryString).reverse\n        }\n        result.reverse", "     \
    \   val binary = N.toBinaryString\n        val digits = binary.toList\n      \
    \  val sum = digits.foldLeft(0)(_ + _)\n        val result = sum.toBinaryString\n\
    \        result + \" \"", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)", "      \
    \  val binary = N.toBinaryString\n        val binary = binary.reverse\n      \
    \  val binary = binary.dropRight(1)\n        val binary = binary.reverse\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) => acc + (digit + digit.dropRight(1))\
    \ }\n        binary.reverse", "        var sum = 0\n        var binary = \"\"\n\
    \        var remainder = 0\n        while(N !=0){\n            remainder = N %\
    \ 2\n            N = N / 2\n            sum = sum + remainder\n            binary\
    \ = binary + remainder\n        }\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse", "        val\
    \ binary = N.toBinaryString\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = 0\n        digits.foreach(sum ++= _)\n        sum.toString", "        val\
    \ s = N.toBinaryString\n        val l = s.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < l) {\n           \
    \ val c = s(i).toInt\n            sum += c\n            i += 1\n            if\
    \ (sum > 9) {\n                result.append((sum / 10).toString)\n          \
    \      sum += (sum % 10).toInt\n            }\n        }\n        if (sum > 0)\
    \ {\n            result.append((sum / 10).toString)\n        }\n        result.mkString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n\
    \        val bin2 = bin.map(x => if (x == '1') 1 else 0)\n        val bin3 = bin2.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin4 = bin3.map(x => if (x == '1') 1\
    \ else 0)\n        val bin5 = bin4.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin6 = bin5.map(x => if (x == '1') 1 else 0)\n        val bin7 = bin6.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin8 = bin7.map(x => if (x == '1') 1\
    \ else 0)\n        val bin9 = bin8.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin10 = bin9.map(x => if (x == '1') 1 else 0)\n        val bin11 = bin10.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin12 = bin11.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin13 = bin12.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin14 = bin13.map(x => if (x == '1') 1 else 0)\n        val bin15 = bin14.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin16 = bin15.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin17 = bin16.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin18 = bin17.map(x => if (x == '1') 1 else 0)\n        val bin19 = bin18.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin20 = bin19.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin21 = bin20.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin22 = bin21.map(x => if (x == '1') 1 else 0)\n        val bin23 = bin22.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin24 = bin23.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin25 = bin24.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin26 = bin25.map(x => if (x == '1') 1 else 0)\n        val bin27 = bin26.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin28 = bin27.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin29 = bin28.map(x => if (x == '1", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = bin", "      \
    \  val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n      \
    \  val sum = 0\n        digits.foreach { digit =>\n            val binary = digit.charAt(0).toInt\n\
    \            val decimal = digit.charAt(1).toInt\n            sum += binary +\
    \ decimal\n        }\n        val result = sum.toString.reverse\n        result\
    \ match {\n            case x if x.length < 2 => \"\"\n            case x if x.length\
    \ == 2 => result\n            case x if x.length == 3 => result + result\n   \
    \         case x if x.length == 4 => result + result + result\n            case\
    \ x if x.length == 5 => result + result + result + result\n            case x\
    \ if x.length == 6 => result + result + result + result + result\n           \
    \ case x if x.length == 7 => result + result + result + result + result + result\n\
    \            case x if x.length == 8 => result + result + result + result + result\
    \ + result + result\n            case x if x.length >= 9 => result + result +\
    \ result + result + result + result + result + result\n        }", "        val\
    \ s = N.toBinaryString\n        val l = s.length\n        val sum = 0\n      \
    \  var i = 0\n        while (i < l) {\n            val x = s(i)\n            val\
    \ y = s(i + 1)\n            val z = s(i + 2)\n            sum += x.toInt + y.toInt\
    \ + z.toInt\n            i += 3\n        }\n        val result = sum.toBinaryString\n\
    \        if (result.length < l) {\n            result + s.substring(l - result.length)\n\
    \        } else {\n            result\n        }", "        val binary = N.toBinaryString\n\
    \        val bins = binary.toList\n        val binsSum = bins.foldLeft(0)(_ +\
    \ _)\n        val binsSumStr = binsSum.toBinaryString\n        val binsSumStr\
    \ = binsSumStr.substring(0, binsSumStr.length - 1)\n        binsSumStr", "   \
    \     val binary = N.toBinaryString\n        val bin = binary.toList\n       \
    \ val binSum = bin.foldLeft(0)((sum, digit) => sum + digit.asInstanceOf[Int])\n\
    \        val binSumStr = binSum.toBinaryString\n        binSumStr.substring(0,\
    \ binSumStr.length - 1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val result = new mutable.StringBuilder\n       \
    \ digits.foreach { digit =>\n            sum += digit._1\n            result +=\
    \ digit._2\n        }\n        result + sum.toString", "        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        val sum = 0\n        while(N /= 10) {\n            val digit = N % 10\n\
    \            val sum = sum + digit\n            N = (N - digit) / 10\n       \
    \     nums.append(digit)\n        }\n        val result = nums.reverse.mkString(\"\
    \")\n        if(sum > 0) result + sum.toString\n        else result", "      \
    \  val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val binary = N.toBinaryString\n\
    \        val bin = binary.toList\n        val sum = 0\n        val binSum = bin.foldLeft(0)(_\
    \ + _)\n        val binSumString = binSum.toString\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        val binSumStringLength\
    \ = binSumString.length\n        val binSumStringLength = binSumString.length\n\
    \        val binSumStringLength = binSumString.length\n        ", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary(i)\n        }\n        binary.reverse", "     \
    \   val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until digits.length){\n            val digit = digits(i)\n\
    \            val bin = digits(i).reverse\n            val binary = binary.filter(_\
    \ != bin)\n            val binary = binary.filter(_ != digit)\n            val\
    \ binary = binary.filter(_ != bin)\n            val binary = binary.filter(_ !=\
    \ digit)\n            val binary = binary.filter(_ != bin)\n            val binary\
    \ = binary.filter(_ != digit)\n            val binary = binary.filter(_ != bin)\n\
    \            val binary = binary.filter(_ != digit)\n            val binary =\
    \ binary.filter(_ != bin)\n            val binary = binary.filter(_ != digit)\n\
    \            val binary = binary.filter(_ != bin)\n            val binary = binary.filter(_\
    \ != digit)\n            val binary = binary.filter(_ != bin)\n            val\
    \ binary = binary.filter(_ != digit)\n            val binary = binary.filter(_\
    \ != bin)\n            val binary = binary.filter(_ != digit)\n            val\
    \ binary = binary.filter(_ != bin)\n            val binary = binary.filter(_ !=\
    \ digit)\n            val binary = binary.filter(_ != bin)\n            val binary\
    \ = binary.filter(_ != digit)\n            val binary = binary.filter(_ != bin)\n\
    \            val binary = binary.filter(_ != digit)\n            val binary =\
    \ binary.filter(_ != bin)\n            val binary = binary.filter(_ != digit)\n\
    \            val binary = binary.filter(_ != bin)\n            val binary = binary.filter(_\
    \ != digit)\n            val binary = binary.filter(_ != bin)\n            val\
    \ binary = binary.filter(_ != digit)\n            val binary = binary.filter(_\
    \ != bin)\n            val binary = binary.filter(_ != digit)\n            val\
    \ binary = binary.filter(_ != bin)\n            val binary = binary.filter(_ !=\
    \ digit)\n            val binary = binary.filter(_ != bin)\n            val binary\
    \ = binary.filter(_ != digit)\n            val binary = binary.filter(_ != bin)\n\
    \            val binary = binary.filter(_ != digit)\n            val binary =\
    \ binary.filter(_ != bin)\n            ", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) \"\" else x.reverse).mkString(\"\
    \")\n        binary.reverse", "        val binary = N.toBinaryString\n       \
    \ val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse.foldLeft(\"\") {\n            case(acc, c)\
    \ => acc + c.toChar\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val binary = digits.map(x\
    \ => if (x == 0) \"0\" else \"1\").mkString\n        binary.reverse.grouped(2).map(_.toInt).sum.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val binary\
    \ = binary.reverse\n        for(i <- 0 until binary.length){\n            val\
    \ temp = binary(i)\n            sum += temp.charAt(0)\n        }\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt)\n        val sum = sums.sum\n        val\
    \ result = sums.map(_.toBinaryString).mkString\n        result + (if (sum > 9)\
    \ \"\" else \"\") + sum.toBinaryString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val digits = binary.toList\n        val result = mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        for (i <- 0 until digits.size) {\n            sum\
    \ += digits(i)\n        }\n        val remainder = sum % 2\n        if (remainder\
    \ == 0) {\n            result += \"0\"\n        }\n        else {\n          \
    \  result += \"1\"\n        }\n        result.mkString", "        val binary =\
    \ N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n \
    \       val binary = binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     while(N /= 10) {\n            sum += N % 10\n            N = (N - sum) /\
    \ 10\n        }\n        while(sum > 0) {\n            binary = sum % 2 == 0 ?\
    \ \"1\" + binary : \"0\" + binary\n            sum = (sum - sum / 2) / 2\n   \
    \     }\n        remainder = N % 10\n        binary = remainder == 0 ? binary\
    \ : binary + remainder\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) => acc + digit.toString\
    \ }\n        binary.reverse", "        var sum = 0\n        var binary = \"\"\n\
    \        var remainder = 0\n        var remainder2 = 0\n        var remainder3\
    \ = 0\n        var remainder4 = 0\n        var remainder5 = 0\n        var remainder6\
    \ = 0\n        var remainder7 = 0\n        var remainder8 = 0\n        var remainder9\
    \ = 0\n        var remainder10 = 0\n        var remainder11 = 0\n        var remainder12\
    \ = 0\n        var remainder13 = 0\n        var remainder14 = 0\n        var remainder15\
    \ = 0\n        var remainder16 = 0\n        var remainder17 = 0\n        var remainder18\
    \ = 0\n        var remainder19 = 0\n        var remainder20 = 0\n        var remainder21\
    \ = 0\n        var remainder22 = 0\n        var remainder23 = 0\n        var remainder24\
    \ = 0\n        var remainder25 = 0\n        var remainder26 = 0\n        var remainder27\
    \ = 0\n        var remainder28 = 0\n        var remainder29 = 0\n        var remainder30\
    \ = 0\n        var remainder31 = 0\n        var remainder32 = 0\n        var remainder33\
    \ = 0\n        var remainder34 = 0\n        var remainder35 = 0\n        var remainder36\
    \ = 0\n        var remainder37 = 0\n        var remainder38 = 0\n        var remainder39\
    \ = 0\n        var remainder40 = 0\n        var remainder41 = 0\n        var remainder42\
    \ = 0\n        var remainder43 = 0\n        var remainder44 = 0\n        var remainder45\
    \ = 0\n        var remainder46 = 0\n        var remainder47 = 0\n        var remainder48\
    \ = 0\n        var remainder49 = 0\n        var remainder50 = 0\n        var remainder51\
    \ = 0\n        var remainder52 = 0\n        var remainder53 = 0\n        var remainder54\
    \ = 0\n        var remainder55 = 0\n        var remainder56 = 0\n        var remainder57\
    \ = 0\n        var remainder58 = 0\n        var remainder59 = 0\n        var remainder60\
    \ = 0\n        var remainder61 = 0\n        var remainder62 = 0\n        var remainder63\
    \ = 0\n        var remainder64 = 0\n        var remainder65 = 0\n        var remainder66\
    \ = 0\n        var remainder67 = 0\n        var remainder68 = 0\n        var remainder69\
    \ = 0\n        var remainder70 = 0\n        var remainder71 = 0\n        var remainder72\
    \ = 0\n        var remainder73 = 0\n        var remainder74 = 0\n        var remainder75\
    \ = 0\n        var remainder76 = 0\n        var remainder77 = 0\n        var remainder78\
    \ = 0\n        var remainder79 = 0\n        var remainder80 = 0\n        var remainder81\
    \ = 0\n        var remainder82 = 0\n        var remainder83 = 0\n        var remainder84\
    \ = 0\n", "        val binary = N.toBinaryString\n        val bins = binary.toList\n\
    \        val sum = 0\n        val binsSum = bins.map(x => sum + x.toInt)\n   \
    \     val binsSumSum = binsSum.map(x => sum + x)\n        val binsSumSumSum =\
    \ binsSumSum.map(x => sum + x)\n        val binsSumSumSumSum = binsSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSum = binsSumSumSumSum.map(x => sum\
    \ + x)\n        val binsSumSumSumSumSumSum = binsSumSumSumSumSum.map(x => sum\
    \ + x)\n        val binsSumSumSumSumSumSumSum = binsSumSumSumSumSumSum.map(x =>\
    \ sum + x)\n        val binsSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSumSumSumSum = binsSumSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => sum + x)\n        val binsSumSumSumSumSumSumSumSumSum", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropWhile(_ == '0').reverse\n        val binary = binary.takeWhile(_\
    \ != '0')\n        binary.reverse", "        val binary = N.toBinaryString\n \
    \       val binary = binary.reverse\n        val binary = binary.dropWhile(_ ==\
    \ '0').reverse\n        val binary = binary.takeWhile(_ == '1').reverse\n    \
    \    binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val result = mutable.ListBuffer.empty[String]\n        var sum = 0\n\
    \        for (i <- 0 until digits.length) {\n            sum += digits(i).toLong\n\
    \            val binary = sum.toBinaryString\n            val str = binary.padToLength(binary.length,\
    \ \"0\")\n            result += str\n            sum -= digits(i).toLong\n   \
    \     }\n        val str = result.reverse.mkString\n        val length = str.length\n\
    \        val zeros = length - str.length\n        val zeroPad = if (zeros > 0)\
    \ \"0\" * zeros else \"\"\n        val str = zeroPad + str\n        str.substring(0,\
    \ length)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            sum += digit._1\n            binary.append(digit._2)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        digits.foreach(d => {\n            val bin = d.toInt\n            val\
    \ binStr = bin.toString\n            val binLen = binStr.length\n            val\
    \ binSum = binStr.drop(binLen - 1).sum\n            val binSumStr = binSum.toString\n\
    \            val binSumLen = binSumStr.length\n            val binSumSum = binSumStr.drop(binSumLen\
    \ - 1).sum\n            val binSumSumStr = binSumSum.toString\n            val\
    \ binSumSumLen = binSumSumStr.length\n            val binSumSumSum = binSumSumStr.drop(binSumSumLen\
    \ - 1).sum\n            val binSumSumSumStr = binSumSumSum.toString\n        \
    \    val binSumSumSumLen = binSumSumSumStr.length\n            val binSumSumSumSum\
    \ = binSumSumSumStr.drop(binSumSumSumLen - 1).sum\n            val binSumSumSumSumStr\
    \ = binSumSumSumSum.toString\n            val binSumSumSumSumLen = binSumSumSumSumStr.length\n\
    \            val binSumSumSumSumSum = binSumSumSumSumStr.drop(binSumSumSumSumLen\
    \ - 1).sum\n            val binSumSumSumSumSumStr = binSumSumSumSumSum.toString\n\
    \            val binSumSumSumSumSumLen = binSumSumSumSumSumStr.length\n      \
    \      val binSumSumSumSumSumSum = binSumSumSumSumSumStr.drop(binSumSumSumSumLen\
    \ - 1).sum\n            val binSumSumSumSumSumSumStr = binSumSumSumSumSumSum.toString\n\
    \            val binSumSumSumSumSumSumLen = binSumSumSumSumSumSumStr.length\n\
    \            val binSumSumSumSumSumSumSum = binSumSumSumSumSumSumStr.drop(binSumSumSumSumSumLen\
    \ - 1).sum\n            val binSumSumSumSumSumSumSumStr = binSumSumSumSumSumSumSum.toString\n\
    \            val binSumSumSumSumSumSumSumLen = binSumSumSumSumSumSumSumStr.length\n\
    \            val binSumSumSumSumSumSumSumSum = binSumSumSumSumSumSumSumStr.drop(binSumSumSumSumSumSumLen\
    \ - 1).sum\n            val binSumSumSumSumSumSumSum", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until digits.length) {\n            val digit = digits(i)\n\
    \            val binary = digits(i).reverse\n            val sum = sum + binary.toInt\n\
    \            val bin = binary.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val bin = bin.reverse\n            val binary = binary.reverse\n\
    \            val ", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x == \"1\") \"1\" else \"0\").reverse\n\
    \        binary.foldLeft(\"\") { (acc, x) =>\n            acc + (if (x == \"1\"\
    ) \"1\" else \"0\") + x\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val result = mutable.StringBuilder()\n        val sum = 0\n        for\
    \ (i <- 0 until digits.size) {\n            val digit = digits(i)\n          \
    \  sum += digit.charAt(0).toInt * Math.pow(10, digit.size - i - 1)\n        }\n\
    \        result += (sum % 10).asInstanceOf[String]\n        result.toString",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val sumsString = sums.mkString(\"\
    \")\n        sumsString.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val result = sums.foldLeft(\"\"\
    ) { (result, sum) =>\n            val remainder = sum % 2\n            val remainderString\
    \ = if (remainder == 0) \"0\" else \"1\"\n            result + remainderString\n\
    \        }\n        result", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        val binary = binary.toCharArray\n        val binary = binary.filter(_\
    \ != '0')\n        val binary = binary.filter(_ != '1')\n        val binary =\
    \ binary.filter(_ != 'l')\n        val binary = binary.filter(_ != 'L')\n    \
    \    val binary = binary.filter(_ != 'l')\n        val binary = binary.filter(_\
    \ != 'L')\n        val binary = binary.filter(_ != 'l')\n        val binary =\
    \ binary.filter(_ != 'L')\n        val binary = binary.filter(_ != 'l')\n    \
    \    val binary = binary.filter(_ != 'L')\n        val binary = binary.filter(_\
    \ != 'l')\n        val binary = binary.filter(_ != 'L')\n        val binary =\
    \ binary.filter(_ != 'l')\n        val binary = binary.filter(_ != 'L')\n    \
    \    val binary = binary.filter(_ != 'l')\n        val binary = binary.filter(_\
    \ != 'L')\n        val binary = binary.filter(_ != 'l')\n        val binary =\
    \ binary.filter(_ != 'L')\n        val binary = binary.filter(_ != 'l')\n    \
    \    val binary = binary.filter(_ != 'L')\n        val binary = binary.filter(_\
    \ != 'l')\n        val binary = binary.filter(_ != 'L')\n        val binary =\
    \ binary.filter(_ != 'l')\n        val binary = binary.filter(_ != 'L')\n    \
    \    val binary = binary.filter(_ != 'l')\n        val binary = binary.filter(_\
    \ != 'L')\n        val binary = binary.filter(_ != 'l')\n        val binary =\
    \ binary.filter(_ != 'L')\n        val binary = binary.filter(_ != 'l')\n    \
    \    val binary = binary.filter(_ != 'L')\n        val binary = binary.filter(_\
    \ != 'l')\n        val binary = binary.filter(_ != 'L')\n        val binary =\
    \ binary.filter(_ != 'l')\n        val binary = binary.filter(_ != 'L')\n    \
    \    val binary = binary.filter(_ != 'l')\n        val binary = binary.filter(_\
    \ != 'L')\n        val binary = binary.filter(_ != 'l')\n        val binary =\
    \ binary.filter(_ != 'L')\n        val binary = binary.filter(_ != 'l')\n    \
    \    val binary = binary.filter(_ != 'L')\n        val binary = binary.filter(_\
    \ != 'l", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            val bin = digit.charAt(0).toInt\
    \ + digit.charAt(1).toInt\n            sum += bin\n            binary.append(bin)\n\
    \        }\n        val result = sum.toString.reverse\n        binary.reverse.mkString(\"\
    \") + result", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            sum += digit._1\n            binary.append(digit._2)\n\
    \        }\n        if (sum > 0) {\n            binary.reverse.mkString(\"\")\n\
    \        } else {\n            binary.mkString(\"\")\n        }", "        val\
    \ binary = N.toBinaryString\n        val bin = binary.toList\n        val binSum\
    \ = bin.foldLeft(0)((sum, digit) => sum + digit.toInt)\n        val binSumStr\
    \ = binSum.toBinaryString\n        val binSumStrLen = binSumStr.length\n     \
    \   val binSumStrLenMinusOne = binSumStrLen - 1\n        val binSumStrLenMinusOneMinusOne\
    \ = binSumStrLenMinusOne - 1\n        val binSumStrLenMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOne - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOneMinusOneMinusOne - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n       \
    \ val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val binSumStrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val result\
    \ = new StringBuilder\n        for(i <- 0 to binary.length-1){\n            val\
    \ c = binary.charAt(i)\n            val v = if (c == '1') 1 else 0\n         \
    \   sum += v\n            result.append(v)\n        }\n        result.toString",
  "        var sum = 0\n        var binary = \"\"\n        while(N !=0){\n       \
    \     sum = sum + N % 2\n            N = N / 2\n        }\n        while(sum !=\
    \ 0){\n            binary = binary + sum % 2\n            sum = sum / 2\n    \
    \    }\n        binary", "        val binary = N.toBinaryString\n        val sum\
    \ = 0\n        val binary = binary.toCharArray\n        for(i <- 0 until binary.length){\n\
    \            sum += binary(i)\n        }\n        sum.toString", "        val\
    \ nums = N.toBinaryString\n        val sums = nums.toList.map(_.toInt)\n     \
    \   val sumsSum = sums.sum\n        val sumsSumString = sumsSum.toString\n   \
    \     val sumsSumStringLen = sumsSumString.length\n        val sumsSumStringLenMinusOne\
    \ = sumsSumStringLen - 1\n        val sumsSumStringLenMinusOneString = sumsSumStringLen\
    \ - \"1\"\n        val sumsSumStringLenMinusOneStringLen = sumsSumStringLenMinusOne\
    \ - \"0\"\n        val sumsSumStringLenMinusOneStringLenMinusOne = sumsSumStringLenMinusOne\
    \ - \"1\"\n        val sumsSumStringLenMinusOneStringLenMinusOneString = sumsSumStringLenMinusOneString\
    \ - \"0\"\n        val sumsSumStringLenMinusOneStringLenMinusOneStringLen = sumsSumStringLenMinusOneStringLen\
    \ - \"1\"\n        val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOne\
    \ = sumsSumStringLenMinusOneStringLenMinusOne - \"0\"\n        val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneString\
    \ = sumsSumStringLenMinusOneStringLenMinusOneString - \"1\"\n        val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLen\
    \ = sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOne - \"0\"\n     \
    \   val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOne\
    \ = sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLen - \"1\"\
    \n        val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLen\
    \ = sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOne\
    \ - \"0\"\n        val sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLen\
    \ = sumsSumStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLenMinusOneStringLen\
    \ - \"1\"\n        val sum", "        var sum = 0\n        var binary = \"\"\n\
    \        while(N /= 10) {\n            sum += N % 10\n            N /= 10\n  \
    \      }\n        while(sum > 0) {\n            binary += (sum % 2).toString\n\
    \            sum /= 2\n        }\n        binary", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(new mutable.HashMap[Int, Int]()) {\n     \
    \       case (acc, digit) =>\n                acc + (digit._1 -> (digit._2 + acc.get(digit._1)))\n\
    \        }\n        val result = sums.filter(_._2 > 0).map(_._1).mkString\n  \
    \      result + (if (sums.isEmpty) \"\" else \" \") + (if (sums.size == 1) \"\"\
    \ else \" \")", "        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (d <- digits) {\n            sum += d.toInt\n\
    \        }\n        val result = sum.toBinaryString\n        val result = result.substring(0,\
    \ result.length - 1)\n        result", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toCharArray\n        val binary\
    \ = new mutable.ArrayBuffer(bin)\n        binary.reverse.foreach(x => {\n    \
    \        val y = x.toInt\n            sum += y\n        })\n        val result\
    \ = binary.reverse.toString.reverse\n        result + sum.toString", "       \
    \ val binary = N.toBinaryString\n        val binary = binary.reverse\n       \
    \ val binary = binary.dropRight(1)\n        val binary = binary.reverse\n    \
    \    val binary = binary.dropRight(1)\n        val binary = binary.reverse\n \
    \       val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ val digit = digits(i)\n            val bin = digit.toInt\n            val binStr\
    \ = bin.toString\n            val binLen = binStr.length\n            val binDigit\
    \ = binStr.charAt(binLen - 1)\n            val binDigitStr = binDigit.toString\n\
    \            val binDigitLen = binDigitStr.length\n            val binDigitSum\
    \ = binDigitStr.charAt(binDigitLen - 1)\n            val binDigitSumStr = binDigitSum.toString\n\
    \            val binDigitSumLen = binDigitSumStr.length\n            val binDigitSumSum\
    \ = binDigitSumStr.charAt(binDigitSumLen - 1)\n            val binDigitSumSumStr\
    \ = binDigitSumSum.toString\n            val binDigitSumSumLen = binDigitSumSumStr.length\n\
    \            val binDigitSumSumSum = binDigitSumSumStr.charAt(binDigitSumSumLen\
    \ - 1)\n            val binDigitSumSumSumStr = binDigitSumSumSum.toString\n  \
    \          val binDigitSumSumSumLen = binDigitSumSumSumStr.length\n          \
    \  val binDigitSumSumSumSum = binDigitSumSumSumStr.charAt(binDigitSumSumSumLen\
    \ - 1)\n            val binDigitSumSumSumSumStr = binDigitSumSumSumSum.toString\n\
    \            val binDigitSumSumSumSumLen = binDigitSumSumSumSumStr.length\n  \
    \          val binDigitSumSumSumSumSum = binDigitSumSumSumSumStr.charAt(binDigitSumSumSumSumLen\
    \ - 1)\n            val binDigitSumSumSumSumSumStr = binDigitSumSumSumSumSumStr.toString\n\
    \            val binDigitSumSumSumSumSumLen = binDigitSumSumSumSumSumStr.length\n\
    \            val binDigitSumSumSumSumSumSum = binDigitSumSumSumSumSumStr.charAt(binDigitSumSumSumSumSumLen\
    \ - 1)\n            val binDigitSumSumSumSumSumSumStr = binDigitSumSumSumSumSumSumStr.toString\n\
    \            val binDigitSumSumSumSumSumSumLen = binDigitSumSumSumSumSumSumStr.length\n\
    \            val binDigitSumSumSumSumSumSumSum = binDigitSumSumSumSumSumSumStr.charAt(binDigitSumSumSumSumSumSumLen\
    \ - 1)\n            val binDigitSumSumSumSumSumSumSumStr = binDigitSumSumSumSumSumSumSumStr.toString\n",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val sums =\
    \ digits.foldLeft(Map[String, Int]()){\n            case (acc, digit) =>\n   \
    \             val key = digit.mkString\n                val value = acc.getOrElse(key,\
    \ 0)\n                acc + (key -> value + 1)\n        }\n        val result\
    \ = sums.map{\n            case (key, value) =>\n                val binary =\
    \ key.mkString(\"\")\n                val digit = math.pow(2,value).floor.toString.toInt\n\
    \                binary + digit.toString\n        }.mkString(\"\")\n        result",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        val\
    \ result = binary.reverse.grouped(2).map(_.mkString).reverse\n        result.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt).sum\n        val result = sums.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result", "        val binary = N.toBinaryString\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.reverse\n        val binary = binary.dropRight(1)", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)", "      \
    \  var sum = 0\n        var binary = \"\"\n        var remainder = N\n       \
    \ var remainder2 = N\n        var remainder3 = N\n        var remainder4 = N\n\
    \        var remainder5 = N\n        var remainder6 = N\n        var remainder7\
    \ = N\n        var remainder8 = N\n        var remainder9 = N\n        var remainder10\
    \ = N\n        var remainder11 = N\n        var remainder12 = N\n        var remainder13\
    \ = N\n        var remainder14 = N\n        var remainder15 = N\n        var remainder16\
    \ = N\n        var remainder17 = N\n        var remainder18 = N\n        var remainder19\
    \ = N\n        var remainder20 = N\n        var remainder21 = N\n        var remainder22\
    \ = N\n        var remainder23 = N\n        var remainder24 = N\n        var remainder25\
    \ = N\n        var remainder26 = N\n        var remainder27 = N\n        var remainder28\
    \ = N\n        var remainder29 = N\n        var remainder30 = N\n        var remainder31\
    \ = N\n        var remainder32 = N\n        var remainder33 = N\n        var remainder34\
    \ = N\n        var remainder35 = N\n        var remainder36 = N\n        var remainder37\
    \ = N\n        var remainder38 = N\n        var remainder39 = N\n        var remainder40\
    \ = N\n        var remainder41 = N\n        var remainder42 = N\n        var remainder43\
    \ = N\n        var remainder44 = N\n        var remainder45 = N\n        var remainder46\
    \ = N\n        var remainder47 = N\n        var remainder48 = N\n        var remainder49\
    \ = N\n        var remainder50 = N\n        var remainder51 = N\n        var remainder52\
    \ = N\n        var remainder53 = N\n        var remainder54 = N\n        var remainder55\
    \ = N\n        var remainder56 = N\n        var remainder57 = N\n        var remainder58\
    \ = N\n        var remainder59 = N\n        var remainder60 = N\n        var remainder61\
    \ = N\n        var remainder62 = N\n        var remainder63 = N\n        var remainder64\
    \ = N\n        var remainder65 = N\n        var remainder66 = N\n        var remainder67\
    \ = N\n        var remainder68 = N\n        var remainder69 = N\n        var remainder70\
    \ = N\n        var remainder71 = N\n        var remainder72 = N\n        var remainder73\
    \ = N\n        var remainder74 = ", "        val binary = N.toBinaryString\n \
    \       val bins = binary.toList\n        val sums = bins.map(x => x.toInt)\n\
    \        val sum = sums.sum\n        val result = sums.map(x => x.toBinaryString).mkString\n\
    \        result", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until digits.length) {\n            val d = digits(i)\n \
    \           val bin = d.toString.reverse.grouped(2).map(_.toInt)\n           \
    \ val sum = sum + bin(0) * bin(1)\n            binary.append(bin.mkString(\"\"\
    ))\n        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 to binary.length-1){\n            val\
    \ bin = binary.charAt(i)\n            val num = bin.toInt\n            sum +=\
    \ num\n        }\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) 0 else x).mkString(\"\")\n\
    \        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        digits.foreach(x => {\n            val bin = x.toInt\n            val\
    \ binStr = bin.toString\n            val binLen = binStr.length\n            val\
    \ binLenStr = binLen.toString\n            val binLenInt = binLen.toInt\n    \
    \        val binLenIntStr = binLenInt.toString\n            val binLenIntStrInt\
    \ = binLenIntStr.toInt\n            val binLenIntStrIntStr = binLenIntStrInt.toString\n\
    \            val binLenIntStrIntStrInt = binLenIntStrIntStr.toInt\n          \
    \  val binLenIntStrIntStrIntStrInt = binLenIntStrIntStrIntStr.toInt\n        \
    \    val binLenIntStrIntStrIntStrIntStrInt = binLenIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrInt = binLenIntStrIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrIntStrInt = binLenIntStrIntStrIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrInt = binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrInt\
    \ = binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStr.toInt\n     \
    \       val binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrInt\
    \ = binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrInt\
    \ = binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStr.toInt\n\
    \            val binLenIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStr",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = 0\n        for (d <- digits) {\n            sum += d\n        }\n        val\
    \ binary = sum.toString.reverse\n        binary.takeWhile(_ != '0')", "      \
    \  val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n      \
    \  val sums = digits.map(_.toInt).sum\n        val result = sums.toBinaryString\n\
    \        result match {\n            case \"\" => \"\"\n            case _ =>\
    \ result\n        }", "        val binary = N.toBinaryString\n        val result\
    \ = binary.reverse.foldLeft(\"\") { (result, digit) => result + digit }\n    \
    \    result + binary.reverse.dropWhile(_ == '0').takeWhile(_ != '0').mkString",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        binary.reverse",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val binary = digits.foldLeft(\"\") {\n            case (acc, digit) =>\
    \ acc + (if (digit.isEmpty) \"\" else digit)\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.takeWhile(_\
    \ != '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        binary.reverse.foldLeft(\"\") {\n            (a, b) => a +\
    \ b.charAt(0)\n        }", "        val binary = N.toBinaryString\n        val\
    \ bins = binary.toList\n        val binsSum = bins.sum\n        val binsSumString\
    \ = binsSum.toString\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSumStringLength = binsSumString.length\n\
    \        val binsSumStringLength = binsSumString.length\n        val binsSumStringLength\
    \ = binsSumString.length\n        val binsSum", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n   \
    \     val result = sum.toBinaryString\n        val resultString = result.substring(0,\
    \ result.length - 1)\n        resultString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt).sum\n        val result = sums.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result", "        val binary = N.toBinaryString\n        val bin = binary.toList\n\
    \        val binSum = bin.foldLeft(0)((sum, digit) => sum + digit.asInstanceOf[Int])\n\
    \        binSum.toString", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n\
    \        val binary = binary.takeWhile(_ == '1').reverse\n        binary.mkString",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        var sum = 0\n        var binary = \"\"\n\
    \        while(N /= 10) {\n            sum += N % 10\n            N /= 10\n  \
    \      }\n        while(sum > 0) {\n            binary += sum % 2\n          \
    \  sum /= 2\n        }\n        binary", "        val binary = N.toBinaryString\n\
    \        val bin = binary.toList\n        val binSum = bin.foldLeft(0)(_ + _)\n\
    \        val binSumStr = binSum.toBinaryString\n        binSumStr.substring(0,\
    \ binSumStr.length - 1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.foldLeft(mutable.Map[Int, Int]()){\n            case\
    \ (acc, digit) => acc + (digit._1 -> digit._2)\n        }\n        val result\
    \ = sums.map{\n            case (digit, sum) => if (sum > 0) \"1\" + digit else\
    \ digit\n        }.mkString(\"\")\n        result", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) \"\" else x.reverse).mkString(\"\
    \")\n        val result = binary.reverse.grouped(2).map(_.mkString).reverse\n\
    \        binary.reverse.grouped(2).map(_.mkString).reverse", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val sums =\
    \ digits.map(_.toInt)\n        val sum = sums.sum\n        val binary = sums.map(x\
    \ => if (x == 0) \"0\" else (x % 2 + \"1\"))\n        binary.mkString(\"\")",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val binary = digits.map(x => if (x == \"1\") \"1\" else \"0\").mkString\n\
    \        binary.reverse", "        val binary = N.toBinaryString\n        val\
    \ bins = binary.toList\n        val sum = 0\n        bins.foreach(x => sum +=\
    \ x.toInt)\n        bins.toList.map(x => x.toBinaryString).mkString", "      \
    \  val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.length.toInt)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        binary.reverse.foldLeft(\"\
    \")(_ + _)", "        val binary = N.toBinaryString\n        val result = binary.reverse.foldLeft(\"\
    \") {\n            case (acc, digit) => acc + digit\n        }\n        result",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for(i <- 0 to binary.length-1){\n\
    \            val bin = binary.charAt(i)\n            val num = Integer.parseInt(bin)\n\
    \            sum += num\n            result += (bin)\n        }\n        val result\
    \ = sum.toBinaryString\n        return result", "        val s = N.toBinaryString\n\
    \        val l = s.length\n        val result = new mutable.ListBuffer[String]\n\
    \        val digits = scala.collection.mutable.ListBuffer.empty[Long]\n      \
    \  var i = 0\n        while (i < l) {\n            digits += s.charAt(i).toLong\n\
    \            i += 1\n        }\n        val sum = 0\n        while (i < l) {\n\
    \            sum += digits.head\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        result += binary\n        result += solve(N.toInt)\n\
    \        result.mkString(\"\")", "        val binary = N.toBinaryString\n    \
    \    val binary = binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n\
    \        val binary = binary.takeWhile(_ == '1').reverse\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.takeWhile(_\
    \ == '1').reverse\n        binary.mkString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val binary = N.toBinaryString\n        val bin = binary.toList\n      \
    \  val sum = 0\n        var sumOfDigits = 0\n        for(i <- 0 until bin.length){\n\
    \            val digit = bin(i)\n            sum += digit.toInt\n            sumOfDigits\
    \ += digit.toInt\n        }\n        val result = sum.toBinaryString\n       \
    \ val result = result.substring(0, result.length - sumOfDigits)\n        result",
  "        val s = N.toBinaryString\n        val l = s.length\n        val ans = \"\
    \"\n        val arr = new Array[String](l)\n        for(i <- 0 until l){\n   \
    \         arr(i) = s(i)\n        }\n        val sum = 0\n        for(i <- 0 until\
    \ l){\n            sum = sum + arr(i).toInt\n        }\n        val binary = sum.toBinaryString\n\
    \        val ans = binary.substring(binary.length-1)\n        ans", "        val\
    \ nums = N.toBinaryString\n        val sums = nums.map(_.toInt).sum\n        val\
    \ bins = nums.map(_.toInt).map(Integer.parseInt).map(Integer.toString).mkString(\"\
    \")\n        bins + sums.toString", "        val binary = N.toBinaryString\n \
    \       val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- 0 until binary.length){\n            sum += binary.charAt(i).toInt\n\
    \        }\n        binary.reverse\n        binary.reverse.takeWhile(x => x !=\
    \ '0').reverse\n        binary.reverse.takeWhile(x => x != '1').mkString", " \
    \       val binary = N.toBinaryString\n        val sum = 0\n        var i = 0\n\
    \        while(i < binary.length) {\n            val x = binary(i)\n         \
    \   val y = binary(i+1)\n            val z = binary(i+2)\n            val a =\
    \ x.toInt\n            val b = y.toInt\n            val c = z.toInt\n        \
    \    val d = a + b + c\n            sum += d\n            i += 3\n        }\n\
    \        binary.reverse.mkString", "        val s = N.toBinaryString\n       \
    \ val l = s.length\n        val result = new mutable.ListBuffer[String]\n    \
    \    var sum = 0\n        var i = 0\n        while (i < l) {\n            sum\
    \ = sum + s.charAt(i).toInt\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        val l = binary.length\n        val result = new\
    \ mutable.ListBuffer[String]\n        var sum = 0\n        var i = 0\n       \
    \ while (i < l) {\n            sum = sum + binary.charAt(i).toInt\n          \
    \  i += 1\n        }\n        val binary = sum.toBinaryString\n        val l =\
    \ binary.length\n        val result = new mutable.ListBuffer[String]\n       \
    \ var sum = 0\n        var i = 0\n        while (i < l) {\n            sum = sum\
    \ + binary.charAt(i).toInt\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        val l = binary.length\n        val result = new\
    \ mutable.ListBuffer[String]\n        var sum = 0\n        var i = 0\n       \
    \ while (i < l) {\n            sum = sum + binary.charAt(i).toInt\n          \
    \  i += 1\n        }\n        val binary = sum.toBinaryString\n        val l =\
    \ binary.length\n        val result = new mutable.ListBuffer[String]\n       \
    \ var sum = 0\n        var i = 0\n        while (i < l) {\n            sum = sum\
    \ + binary.charAt(i).toInt\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        val l = binary.length\n        val result = new\
    \ mutable.ListBuffer[String]\n        var sum = 0\n        var i = 0\n       \
    \ while (i < l) {\n            sum = sum + binary.charAt(i).toInt\n          \
    \  i += 1\n        }\n        val binary = sum.toBinaryString\n        val l =\
    \ binary.length\n        val result = new mutable.ListBuffer[String]\n       \
    \ var sum = 0\n        var i = 0\n        while (i < l) {\n            sum = sum\
    \ + binary.charAt(i).toInt\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        val l = binary.length\n        val result = new\
    \ mutable.ListBuffer[String]\n        var sum = 0\n        var i = 0\n       \
    \ while (i < l) {\n            sum = sum + binary.charAt(i).toInt\n          \
    \  i += 1\n        }\n        val binary = sum.toBinaryString\n        val l =\
    \ binary.length\n        val result = new mutable.ListBuffer[String]\n       \
    \ var sum = 0\n        var i = 0\n        while (i < l) {\n            sum = sum\
    \ + binary.charAt(i).toInt\n            i += 1\n        }\n        val binary\
    \ = sum.toBinaryString\n        val l = binary.length\n        val result = new\
    \ mut", "        val binary = N.toBinaryString\n        val binary = binary.reverse\n\
    \        val binary = binary.dropWhile(_ == '0')\n        val binary = binary.takeWhile(_\
    \ != '0')\n        binary.reverse", "        val binary = N.toBinaryString\n \
    \       val bins = binary.split(\"\")\n        val sums = bins.map(_.toInt)\n\
    \        val sumsSum = sums.sum\n        val binsSum = bins.map(_.toInt).sum\n\
    \        val binsSumStr = binsSum.toString\n        val binsSumStrLen = binsSumStr.length\n\
    \        val binsSumStrLen2 = binsSumStrLen / 2\n        val binsSumStrLen3 =\
    \ binsSumStrLen / 3\n        val binsSumStrLen4 = binsSumStrLen / 4\n        val\
    \ binsSumStrLen5 = binsSumStrLen / 5\n        val binsSumStrLen6 = binsSumStrLen\
    \ / 6\n        val binsSumStrLen7 = binsSumStrLen / 7\n        val binsSumStrLen8\
    \ = binsSumStrLen / 8\n        val binsSumStrLen9 = binsSumStrLen / 9\n      \
    \  val binsSumStrLen10 = binsSumStrLen / 10\n        val binsSumStrLen11 = binsSumStrLen\
    \ / 11\n        val binsSumStrLen12 = binsSumStrLen / 12\n        val binsSumStrLen13\
    \ = binsSumStrLen / 13\n        val binsSumStrLen14 = binsSumStrLen / 14\n   \
    \     val binsSumStrLen15 = binsSumStrLen / 15\n        val binsSumStrLen16 =\
    \ binsSumStrLen / 16\n        val binsSumStrLen17 = binsSumStrLen / 17\n     \
    \   val binsSumStrLen18 = binsSumStrLen / 18\n        val binsSumStrLen19 = binsSumStrLen\
    \ / 19\n        val binsSumStrLen20 = binsSumStrLen / 20\n        val binsSumStrLen21\
    \ = binsSumStrLen / 21\n        val binsSumStrLen22 = binsSumStrLen / 22\n   \
    \     val binsSumStrLen23 = binsSumStrLen / 23\n        val binsSumStrLen24 =\
    \ binsSumStrLen / 24\n        val binsSumStrLen25 = binsSumStrLen / 25\n     \
    \   val binsSumStrLen26 = binsSumStrLen / 26\n        val binsSumStrLen27 = binsSumStrLen\
    \ / 27\n        ", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n \
    \       val binary = binary.toCharArray\n        val binary = binary.map{x =>\
    \ if (x == '1') 1 else 0}\n        val binary = binary.sum.toString\n        binary.reverse",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = N\n   \
    \     while (remainder > 0) {\n            val digit = remainder % 2\n       \
    \     binary = digit + binary\n            remainder = remainder / 2\n       \
    \ }\n        binary = binary.reverse\n        sum = sum + binary.length\n    \
    \    binary = binary.reverse\n        sum = sum + binary.length\n        binary\
    \ = binary.reverse\n        sum = sum + binary.length\n        binary = binary.reverse\n\
    \        sum = sum + binary.length\n        binary = binary.reverse\n        sum\
    \ = sum + binary.length\n        binary = binary.reverse\n        sum = sum +\
    \ binary.length\n        binary = binary.reverse\n        sum = sum + binary.length\n\
    \        binary = binary.reverse\n        sum = sum + binary.length\n        binary\
    \ = binary.reverse\n        sum = sum + binary.length\n        binary = binary.reverse\n\
    \        sum = sum + binary.length\n        binary = binary.reverse\n        sum\
    \ = sum + binary.length\n        binary = binary.reverse\n        sum = sum +\
    \ binary.length\n        binary = binary.reverse\n        sum = sum + binary.length\n\
    \        binary = binary.reverse\n        sum = sum + binary.length\n        binary\
    \ = binary.reverse\n        sum = sum + binary.length\n        binary = binary.reverse\n\
    \        sum = sum + binary.length\n        binary = binary.reverse\n        sum\
    \ = sum + binary.length\n        binary = binary.reverse\n        sum = sum +\
    \ binary.length\n        binary = binary.reverse\n        sum = sum + binary.length\n\
    \        binary = binary.reverse\n        sum = sum + binary.length\n        binary\
    \ = binary.reverse\n        sum = sum + binary.length\n        binary = binary.reverse\n\
    \        sum = sum + binary.length\n        binary = binary.reverse\n        sum\
    \ = sum + binary.length\n        binary = binary.reverse\n        sum = sum +\
    \ binary.length\n        binary = binary.reverse\n        sum = sum + binary.length\n\
    \        binary = binary.reverse\n        sum = sum + binary.length\n        binary\
    \ = binary.reverse\n        sum = sum + binary.length\n        binary = binary.reverse\n\
    \        sum = sum + binary.length\n        binary = binary.reverse\n        sum\
    \ = sum + binary.length\n        binary = binary.reverse\n        sum = sum +\
    \ binary.length\n        binary = binary.reverse\n        sum = sum + binary.length\n\
    \        ", "        var sum = 0\n        var binary = \"\"\n        var remainder\
    \ = N\n        while (remainder > 0) {\n            val remainderDigit = remainder\
    \ % 10\n            sum += remainderDigit\n            binary = remainderDigit\
    \ + binary\n            remainder = remainder / 10\n        }\n        binary\
    \ = binary.reverse\n        binary.toString.reverse", "        val binary = N.toBinaryString\n\
    \        val bins = binary.split(\"\")\n        val sum = 0\n        bins.foreach(x\
    \ => sum += x.toInt)\n        bins.toList.map(x => x.toBinaryString).mkString(\"\
    \")", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n     \
    \   val sums = digits.map(_.sum)\n        val sumsString = sums.mkString(\"\"\
    )\n        val sumsString = sumsString.reverse.grouped(2).map(_.toInt).mkString(\"\
    \")\n        sumsString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = (N.toString.reverse.grouped(2).map(_.mkString).reverse).sum\n\
    \        val result = digits.takeWhile(_ != 0).foldLeft(sum.toString){\n     \
    \       case (acc, digit) => acc + digit\n        }\n        result + digits.last",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary.charAt(i)\n            val d = c.toInt\n            sum += d\n  \
    \      }\n        binary.reverse", "        val nums = mutable.ArrayBuffer.empty[String]\n\
    \        var sum = 0\n        var remainder = 0\n        while(N !=0){\n     \
    \       sum = sum + N % 2\n            N = N / 2\n        }\n        while(sum\
    \ > 0){\n            remainder = sum % 2\n            sum = sum / 2\n        \
    \    nums += remainder.toString\n        }\n        nums.reverse", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val result = sums.foldLeft(\"\")(_ + _)\n        result", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length){\n\
    \            val c = binary.charAt(i)\n            val d = c.toInt\n         \
    \   sum += d\n        }\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ val digit = digits(i)\n            sum += digit.asInstanceOf[Long]\n       \
    \ }\n        sum.toString", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") {\n            case (acc, digit) =>\
    \ acc + (if (digit.isEmpty) \"\" else digit)\n        }\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val bin = binary.toList\n      \
    \  val bin2 = bin.map(x => x.toInt)\n        val bin3 = bin2.map(x => x.toInt)\n\
    \        val bin4 = bin3.map(x => x.toInt)\n        val bin5 = bin4.map(x => x.toInt)\n\
    \        val bin6 = bin5.map(x => x.toInt)\n        val bin7 = bin6.map(x => x.toInt)\n\
    \        val bin8 = bin7.map(x => x.toInt)\n        val bin9 = bin8.map(x => x.toInt)\n\
    \        val bin10 = bin9.map(x => x.toInt)\n        val bin11 = bin10.map(x =>\
    \ x.toInt)\n        val bin12 = bin11.map(x => x.toInt)\n        val bin13 = bin12.map(x\
    \ => x.toInt)\n        val bin14 = bin13.map(x => x.toInt)\n        val bin15\
    \ = bin14.map(x => x.toInt)\n        val bin16 = bin15.map(x => x.toInt)\n   \
    \     val bin17 = bin16.map(x => x.toInt)\n        val bin18 = bin17.map(x =>\
    \ x.toInt)\n        val bin19 = bin18.map(x => x.toInt)\n        val bin20 = bin19.map(x\
    \ => x.toInt)\n        val bin21 = bin20.map(x => x.toInt)\n        val bin22\
    \ = bin21.map(x => x.toInt)\n        val bin23 = bin22.map(x => x.toInt)\n   \
    \     val bin24 = bin23.map(x => x.toInt)\n        val bin25 = bin24.map(x =>\
    \ x.toInt)\n        val bin26 = bin25.map(x => x.toInt)\n        val bin27 = bin26.map(x\
    \ => x.toInt)\n        val bin28 = bin27.map(x => x.toInt)\n        val bin29\
    \ = bin28.map(x => x.toInt)\n        val bin30 = bin29.map(x => x.toInt)\n   \
    \     val bin31 = bin30.map(x => x.toInt)\n        val bin32 = bin31.map(x =>\
    \ x.toInt)\n        val bin33 = bin32.map(x => x.toInt)\n        val bin34 = bin33.map(x\
    \ => x.toInt)\n        val bin35 = bin34.map(x => ", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n\
    \        bin.foreach(x => {\n            sum += x.toInt\n        })\n        binary.toList.map(x\
    \ => x.toString + sum.toString + x.toString.toInt).mkString(\"\")", "        val\
    \ binary = N.toBinaryString\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(mutable.HashMap[String, Long]())((map, digit)\
    \ => {\n            val key = digit.mkString\n            val value = map.getOrElse(key,\
    \ 0L)\n            map += (key -> value + 1)\n            map\n        })\n  \
    \      val result = sums.foldLeft(\"\")(\n            (acc, (key, value)) => acc\
    \ + (key + value.toString + key)\n        )\n        result", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val result\
    \ = mutable.Stack[String]()\n        val stack = mutable.Stack[String]()\n   \
    \     val digit = mutable.Stack[String]()\n        val digitCount = mutable.Stack[Int]()\n\
    \        val digitSum = mutable.Stack[Int]()\n        val digitSumCount = mutable.Stack[Int]()\n\
    \        val digitSumCount2 = mutable.Stack[Int]()\n        val digitSumCount3\
    \ = mutable.Stack[Int]()\n        val digitSumCount4 = mutable.Stack[Int]()\n\
    \        val digitSumCount5 = mutable.Stack[Int]()\n        val digitSumCount6\
    \ = mutable.Stack[Int]()\n        val digitSumCount7 = mutable.Stack[Int]()\n\
    \        val digitSumCount8 = mutable.Stack[Int]()\n        val digitSumCount9\
    \ = mutable.Stack[Int]()\n        val digitSumCount10 = mutable.Stack[Int]()\n\
    \        val digitSumCount11 = mutable.Stack[Int]()\n        val digitSumCount12\
    \ = mutable.Stack[Int]()\n        val digitSumCount13 = mutable.Stack[Int]()\n\
    \        val digitSumCount14 = mutable.Stack[Int]()\n        val digitSumCount15\
    \ = mutable.Stack[Int]()\n        val digitSumCount16 = mutable.Stack[Int]()\n\
    \        val digitSumCount17 = mutable.Stack[Int]()\n        val digitSumCount18\
    \ = mutable.Stack[Int]()\n        val digitSumCount19 = mutable.Stack[Int]()\n\
    \        val digitSumCount20 = mutable.Stack[Int]()\n        val digitSumCount21\
    \ = mutable.Stack[Int]()\n        val digitSumCount22 = mutable.Stack[Int]()\n\
    \        val digitSumCount23 = mutable.Stack[Int]()\n        val digitSumCount24\
    \ = mutable.Stack[Int]()\n        val digitSumCount25 = mutable.Stack[Int]()\n\
    \        val digitSumCount26 = mutable.Stack[Int]()\n        val digitSumCount27\
    \ = mutable.Stack[Int]()\n        val digitSumCount28 = mutable.Stack[Int]()\n\
    \        val digitSumCount29 = mutable.Stack[Int]()\n        val digitSumCount30\
    \ = mutable.Stack", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n \
    \       val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ bin = binary.toList\n        val binSum = bin.foldLeft(0)((sum, digit) => sum\
    \ + digit.toInt)\n        val binSumStr = binSum.toBinaryString\n        binSumStr.substring(0,\
    \ binSumStr.length - 1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        for (i <- 0 until digits.size) {\n            sum\
    \ += digits(i)\n        }\n        val result = sum.toString.reverse\n       \
    \ val result = result.substring(0, result.length - 1)\n        result", "    \
    \    val binary = N.toBinaryString\n        val sum = 0\n        val binNum =\
    \ binary.reverse.foldLeft(0)((sum, digit) => {\n            val sum = sum + digit.toInt\n\
    \            sum\n        })\n        binNum.toString", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        val binary = binary.toCharArray\n\
    \        binary.foreach(x => {\n            val y = x.toInt\n            sum +=\
    \ y\n        })\n        val result = sum.toBinaryString\n        return result",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sum = 0\n        for (i <- 0 until digits.length) {\n            sum\
    \ += digits(i).toLong * 2\n        }\n        sum.toString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val binary = digits.map(x\
    \ => x.toBinaryString).mkString(\"\")\n        val sum = 0\n        for (i <-\
    \ 0 until binary.length) {\n            sum += binary(i)\n        }\n        binary.toString\
    \ + sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt).foldLeft(0)((sum, digit) => sum + digit)\n\
    \        val result = sums.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        result match {\n            case Nil => \"0\"\n            case _ =>\
    \ result\n        }", "        val binary = N.toBinaryString\n        val sum\
    \ = 0\n        val binary = binary.toCharArray\n        for(i <- 0 until binary.length){\n\
    \            sum += binary(i).toInt\n        }\n        binary.toString.reverse.mkString",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt)\n        val sumsString = sums.mkString(\"\
    \")\n        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sumsString.length\n    \
    \    val sumsStringLength = sumsString.length\n        val sumsStringLength =\
    \ sumsString.length\n        val sumsStringLength = sumsString.length\n      \
    \  val sumsStringLength = sumsString.length\n        val sumsStringLength = sumsString.length\n\
    \        val sumsStringLength = sumsString.length\n        val sumsStringLength\
    \ = sumsString.length\n        val sumsStringLength = sums", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val binary\
    \ = N.toBinaryString\n        val bin = binary.toList\n        val binSum = bin.foldLeft(0)((sum,\
    \ digit) => sum + digit.asInstanceOf[Int])\n        binSum.toString", "      \
    \  val binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until\
    \ binary.length){\n            val value = binary.charAt(i)\n            sum +=\
    \ value.asDigit\n        }\n        binary.reverse.foldLeft(\"\"){ (result, digit)\
    \ =>\n            val value = digit.asDigit\n            val remainder = sum %\
    \ value\n            val newResult = result + digit.asDigit + remainder.asDigit\n\
    \            sum -= remainder\n            newResult\n        }", "        val\
    \ digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n        val\
    \ sum = 0\n        val result = new mutable.ListBuffer[String]()\n        digits.foreach\
    \ { digit =>\n            sum += digit.charAt(0).toInt\n            result +=\
    \ (sum.toString + digit.substring(1))\n        }\n        result.toString", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val binary = digits.map(_.toBinaryString).mkString(\"\")\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)", "        val nums = N.toString.reverse.grouped(2).map(_.mkString).map(_.toInt)\n\
    \        val sums = nums.map(_.sum)\n        val result = sums.foldLeft(\"\")(_\
    \ + _)\n        result + nums.foldLeft(\"\")(_ + _)", "        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mutable.ArrayBuffer.empty[String]\n        val bin = mutable.ArrayBuffer.empty[String]\n\
    \        val bins = mut", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '1')\n        val binary = binary.reverse\n        val binary = binary.dropWhile(x\
    \ => x != '0')\n        val binary = binary.reverse\n        val binary = binary.drop",
  "        val nums = mutable.ArrayBuffer.empty[Int]\n        var sum = 0\n      \
    \  while(N /= 10) {\n            sum += N % 10\n            N = (N / 10).toInt\n\
    \        }\n        val str = sum.toBinaryString\n        val len = str.length\n\
    \        for(i <- 0 until len) {\n            val c = str.charAt(i)\n        \
    \    val b = if (c == '1') 1 else 0\n            nums += b\n        }\n      \
    \  nums.toList.map(_.toString).mkString(\"\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val binary = digits.map(x\
    \ => if (x == 1) \"1\" else \"0\").mkString\n        binary.padToLength(sum, \"\
    0\")", "        val nums = mutable.ArrayBuffer.empty[String]\n        var sum\
    \ = 0\n        var i = N\n        while (i > 0) {\n            val remainder =\
    \ i % 2\n            sum += remainder\n            nums += remainder.toString\n\
    \            i /= 2\n        }\n        nums.reverse.mkString(\"\")", "      \
    \  val s = N.toBinaryString\n        val l = s.length\n        val m = s.toInt\n\
    \        var sum = 0\n        var i = 0\n        while (i < l) {\n           \
    \ val c = s(i)\n            val d = s(i+1)\n            sum += ((m / 10) * c)\
    \ + ((m % 10) * d)\n            i += 2\n        }\n        if (sum < 10) {\n \
    \           sum.toBinaryString\n        } else {\n            sum.toBinaryString\
    \ + solve((sum.toInt/10).toLong)\n        }", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        val\
    \ result = binary.reverse.grouped(2).map(_.mkString).reverse\n        result.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(1)\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val bin", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length){\n\
    \            sum += binary.charAt(i).toInt\n        }\n        binary.reverse\n\
    \        binary.reverse.takeWhile(x => x != '1').mkString", "        val binary\
    \ = N.toBinaryString\n        val digits = binary.toList\n        val sums = digits.foldLeft(List[Int]())((sums,\
    \ digit) => {\n            val sum = sums.sum\n            val index = sums.indexOf(sum)\n\
    \            val newSum = if (index == 0) digit else sum + digit\n           \
    \ sums.updated(index, newSum)\n            sums\n        })\n        val result\
    \ = sums.foldLeft(List[String]())((sums, digit) => {\n            val sum = sums.sum\n\
    \            val index = sums.indexOf(sum)\n            val newSum = if (index\
    \ == 0) digit else sum + digit\n            sums.updated(index, newSum)\n    \
    \        sums\n        }).mkString\n        result", "        val s = N.toBinaryString\n\
    \        val l = s.length\n        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        var i = 0\n        while (i < l) {\n            val c = s(i)\n      \
    \      val d = c.toInt\n            val n = d * 2\n            val m = n % 2\n\
    \            val r = if (m) 1 else 0\n            val x = sum + r\n          \
    \  val y = sum + d\n            val z = sum + n\n            binary.append(if\
    \ (z > y) \"1\" else \"0\")\n            sum += x\n            i += 1\n      \
    \  }\n        if (sum > 0) binary.reverse.mkString\n        else \"\"", "    \
    \    val binary = N.toBinaryString\n        val binary = binary.reverse\n    \
    \    val binary = binary.dropRight(1)\n        val binary = binary.reverse\n \
    \       val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)(_ + _)\n        val binary = digits.map(x\
    \ => if (x == 1) \"1\" else \"0\") + digits.map(x => if (x == 1) \"0\" else \"\
    1\")\n        binary.mkString(\"\") + sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) \"\" else x.reverse).mkString(\"\
    \")\n        binary.reverse", "        val binary = N.toBinaryString\n       \
    \ val digits = binary.toList\n        val sum = digits.foldLeft(0)(_ + _)\n  \
    \      binary.reverse.foldLeft(\"\")(_ + _ + _)", "        val binary = N.toBinaryString\n\
    \        val bin = binary.toList\n        val binSum = bin.foldLeft(0)(_ + _)\n\
    \        val binSumStr = binSum.toBinaryString\n        binSumStr.substring(0,\
    \ binSumStr.length - 1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val maxSum = sums.max\n       \
    \ val minSum = sums.min\n        val maxDigit = digits.max\n        val minDigit\
    \ = digits.min\n        val maxDigits = maxDigit.length\n        val minDigits\
    \ = minDigit.length\n        val maxSums = maxSum.length\n        val minSums\
    \ = minSum.length\n        val maxDigits = maxDigits.toInt\n        val minDigits\
    \ = minDigits.toInt\n        val maxSums = maxSums.toInt\n        val minSums\
    \ = minSums.toInt\n        val maxDigits = maxDigits.toInt\n        val minDigits\
    \ = minDigits.toInt\n        val maxSum = maxSum.toInt\n        val minSum = minSum.toInt\n\
    \        val maxDigit = maxDigit.toInt\n        val minDigit = minDigit.toInt\n\
    \        val maxSums = maxSums.toInt\n        val minSums = minSums.toInt\n  \
    \      val maxDigits = maxDigits.toInt\n        val minDigits = minDigits.toInt\n\
    \        val maxSum = maxSum.toInt\n        val minSum = minSum.toInt\n      \
    \  val maxDigit = maxDigit.toInt\n        val minDigit = minDigit.toInt\n    \
    \    val maxSums = maxSums.toInt\n        val minSums = minSums.toInt\n      \
    \  val maxDigits = maxDigits.toInt\n        val minDigits = minDigits.toInt\n\
    \        val maxSum = maxSum.toInt\n        val minSum = minSum.toInt\n      \
    \  val maxDigit = maxDigit.toInt\n        val minDigit = minDigit.toInt\n    \
    \    val maxSums = maxSums.toInt\n        val minSums = minSums.toInt\n      \
    \  val maxDigits = maxDigits.toInt\n        val minDigits = minDigits.toInt\n\
    \        val maxSum = maxSum.toInt\n        val minSum = minSum.toInt\n      \
    \  val maxDigit = maxDigit.toInt\n        val minDigit = minDigit.toInt\n    \
    \    val maxSums = maxSums.toInt\n        val minSums = minSums.toInt\n      \
    \  val maxDigits = maxDigits.toInt\n        val minDigits = minDigits.toInt\n\
    \        ", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val binary = new mutable.ArrayBuffer[String]()\n\
    \        digits.foreach { digit =>\n            val bin = digit.toBinaryString\n\
    \            val binary = binary.updated(binary.size, bin)\n            sum +=\
    \ binary.last.length\n        }\n        binary.reverse.mkString(\"\")", "   \
    \     val binary = N.toBinaryString\n        val bin = binary.toList\n       \
    \ val binSum = bin.foldLeft(0)(_ + _)\n        val binSumStr = binSum.toBinaryString\n\
    \        binSumStr.substring(0, binSumStr.length - 1)", "        val digits =\
    \ N.toString.reverse.grouped(2).map(_.toInt)\n        val binary = digits.foldLeft(\"\
    \")(_ + _)\n        binary.reverse", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(_.toBinaryString).mkString(\"\")\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary(i)\n        }\n        binary.reverse.foldLeft(\"\
    \") {\n            case(acc, i) => acc + (if (sum > i) \"1\" + \"0\" * (sum -\
    \ i) else \"0\" * (sum - i))\n        }", "        val binary = N.toBinaryString\n\
    \        val digits = binary.toList\n        val sum = 0\n        val result =\
    \ new mutable.ListBuffer[String]()\n        for (i <- 0 until digits.length) {\n\
    \            val digit = digits(i)\n            sum += digit.toLong\n        \
    \    val bin = sum.toBinaryString\n            if (bin.length == 1) {\n      \
    \          result += \"0\"\n            } else {\n                result += \"\
    1\"\n            }\n        }\n        result.toString", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        val result = new mutable.ListBuffer[String]\n\
    \        for(i <- 0 until binary.length){\n            val temp = binary.charAt(i).toInt\n\
    \            sum += temp\n            if(sum > 9){\n                result.append((sum\
    \ / 10).toString)\n                sum -= (sum / 10).toInt\n            }\n  \
    \      }\n        if(sum > 0){\n            result.append((sum / 10).toString)\n\
    \        }\n        result.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n   \
    \     val binary = digits.map(digit => digit.toString + digit.toString).mkString\n\
    \        binary.substring(0, binary.length - sum)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(mutable.HashMap[Int, Int]())((map, digit)\
    \ => {\n            val digitStr = digit.toString\n            val digitCount\
    \ = digitStr.length\n            val digitValue = digitStr.charAt(0) - '0'\n \
    \           val digitSum = map.getOrElse(digitCount, 0)\n            map.update(digitCount,\
    \ digitSum + digitValue)\n            map\n        })\n        val result = sums.foldLeft(\"\
    \")(_ + _)\n        result", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.",
  "        val binary = N.toBinaryString\n        val digits = binary.toList\n   \
    \     val sum = digits.foldLeft(0)(_ + _)\n        val result = binary.reverse.foldLeft(\"\
    \")(_ + _ + _)\n        result + sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val sum = sums.sum\n        val\
    \ binary = digits.map(_.toBinaryString).mkString\n        binary.padTo(sum, \"\
    \")", "        val nums = mutable.ArrayBuffer.empty[String]\n        val sum =\
    \ 0\n        while(N /= 10) {\n            val remainder = N % 10\n          \
    \  sum += remainder\n            nums.append(remainder)\n            N = (N -\
    \ remainder) / 10\n        }\n        nums.reverse.mkString(\"\") + sum.toString",
  "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) =>\n            acc\
    \ + (if (digit.length == 1) \"0\" + digit else digit)\n        }\n        binary.reverse",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = N\n        while (remainder2 > 0) {\n            remainder2\
    \ = remainder2 % 2\n            sum = sum + remainder2\n            remainder\
    \ = remainder + 1\n        }\n        binary = binary(sum)\n        binary = binary.reverse\n\
    \        binary", "        val binary = N.toBinaryString\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropWhile(_ == '0').reverse\n  \
    \      val binary = binary.dropWhile(_ == '1').reverse\n        binary.reverse",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.map(x => if (x.isEmpty) 0 else (x.charAt(0) - '0')\
    \ + (x.charAt(1) - '0'))\n        val sum = binary.sum\n        val result = binary.map(x\
    \ => if (x == sum) 1 else 0).mkString\n        result", "        val binary =\
    \ N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n \
    \       val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.foldLeft(Map[String, Long]()){\n            case (acc,\
    \ digit) =>\n                val key = digit.takeWhile(c => c != '0').mkString\n\
    \                val value = digit.dropWhile(c => c != '0').sum\n            \
    \    acc + (key -> value)\n        }\n        val result = sums.map{case (key,\
    \ value) => key + value}\n        val result = result.sortWith(_.compareTo(_)\
    \ < 0)\n        val result = result.mkString(\"\")\n        result + sums.map{case\
    \ (key, value) => key + value}.sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val result = new mutable.ListBuffer[String]()\n\
    \        digits.foreach { digit =>\n            sum += digit._1\n            sum\
    \ += digit._2\n            result += (sum.toString + digit._1.toString + digit._2.toString)\n\
    \        }\n        result.toString", "        val binary = N.toBinaryString\n\
    \        val result = binary.reverse.foldLeft(\"\") { (result, digit) =>\n   \
    \         val index = result.length - 1\n            if (digit == \"1\") result\
    \ else result + (\"0\" * (index - binary.indexOf(digit))) + digit\n        }\n\
    \        result", "        val binary = N.toBinaryString\n        val bin = binary.toList\n\
    \        val sum = 0\n        var i = 0\n        while(i < bin.length){\n    \
    \        sum += bin(i).toInt\n            i += 1\n        }\n        binary.toString.reverse.foldLeft(\"\
    \"){(acc, elem) => acc + (elem.toString.reverse.foldLeft(0){(acc, elem) => acc\
    \ + elem.toInt}.toString.reverse)}"]
stop_tokens:
- "\n    }\n"
