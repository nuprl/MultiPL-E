name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n\
  \    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n\
  \    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n\
  \    // a string of binary number\n    def solve(N : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\")(_ + _)\n        binary.reverse.grouped(2).map(_.mkString).reverse",
  "        val binary = N.toBinaryString\n        val digits = binary.toList\n   \
    \     val sum = 0\n        val result = new mutable.ListBuffer[String]()\n   \
    \     while(digits.nonEmpty) {\n            val digit = digits.head\n        \
    \    sum += digit.toLong\n            digits.remove(digit)\n            result\
    \ += (sum.toBinaryString).reverse\n        }\n        result.reverse", "     \
    \   val binary = N.toBinaryString\n        val digits = binary.toList\n      \
    \  val sum = digits.foldLeft(0)(_ + _)\n        val result = sum.toBinaryString\n\
    \        result + \" \"", "        val binary = N.toBinaryString\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)", "      \
    \  val binary = N.toBinaryString\n        val binary = binary.reverse\n      \
    \  val binary = binary.dropRight(1)\n        val binary = binary.reverse\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(1)", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val binary = digits.foldLeft(\"\") { (acc, digit) => acc + (digit + digit.dropRight(1))\
    \ }\n        binary.reverse", "        var sum = 0\n        var binary = \"\"\n\
    \        var remainder = 0\n        while(N !=0){\n            remainder = N %\
    \ 2\n            N = N / 2\n            sum = sum + remainder\n            binary\
    \ = binary + remainder\n        }\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse", "        val\
    \ binary = N.toBinaryString\n        val binary = binary.reverse\n        val\
    \ binary = binary.dropWhile(_ == '0').reverse\n        val binary = binary.dropWhile(_\
    \ == '1').reverse\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(1)",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = 0\n        digits.foreach(sum ++= _)\n        sum.toString", "        val\
    \ s = N.toBinaryString\n        val l = s.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < l) {\n           \
    \ val c = s(i).toInt\n            sum += c\n            i += 1\n            if\
    \ (sum > 9) {\n                result.append((sum / 10).toString)\n          \
    \      sum += (sum % 10).toInt\n            }\n        }\n        if (sum > 0)\
    \ {\n            result.append((sum / 10).toString)\n        }\n        result.mkString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n\
    \        val bin2 = bin.map(x => if (x == '1') 1 else 0)\n        val bin3 = bin2.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin4 = bin3.map(x => if (x == '1') 1\
    \ else 0)\n        val bin5 = bin4.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin6 = bin5.map(x => if (x == '1') 1 else 0)\n        val bin7 = bin6.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin8 = bin7.map(x => if (x == '1') 1\
    \ else 0)\n        val bin9 = bin8.map(x => if (x == '1') 1 else 0)\n        val\
    \ bin10 = bin9.map(x => if (x == '1') 1 else 0)\n        val bin11 = bin10.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin12 = bin11.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin13 = bin12.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin14 = bin13.map(x => if (x == '1') 1 else 0)\n        val bin15 = bin14.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin16 = bin15.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin17 = bin16.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin18 = bin17.map(x => if (x == '1') 1 else 0)\n        val bin19 = bin18.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin20 = bin19.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin21 = bin20.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin22 = bin21.map(x => if (x == '1') 1 else 0)\n        val bin23 = bin22.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin24 = bin23.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin25 = bin24.map(x => if (x == '1') 1 else 0)\n    \
    \    val bin26 = bin25.map(x => if (x == '1') 1 else 0)\n        val bin27 = bin26.map(x\
    \ => if (x == '1') 1 else 0)\n        val bin28 = bin27.map(x => if (x == '1')\
    \ 1 else 0)\n        val bin29 = bin28.map(x => if (x == '1", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n   \
    \     val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = bin", "      \
    \  val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n      \
    \  val sum = 0\n        digits.foreach { digit =>\n            val binary = digit.charAt(0).toInt\n\
    \            val decimal = digit.charAt(1).toInt\n            sum += binary +\
    \ decimal\n        }\n        val result = sum.toString.reverse\n        result\
    \ match {\n            case x if x.length < 2 => \"\"\n            case x if x.length\
    \ == 2 => result\n            case x if x.length == 3 => result + result\n   \
    \         case x if x.length == 4 => result + result + result\n            case\
    \ x if x.length == 5 => result + result + result + result\n            case x\
    \ if x.length == 6 => result + result + result + result + result\n           \
    \ case x if x.length == 7 => result + result + result + result + result + result\n\
    \            case x if x.length == 8 => result + result + result + result + result\
    \ + result + result\n            case x if x.length >= 9 => result + result +\
    \ result + result + result + result + result + result\n        }", "        val\
    \ s = N.toBinaryString\n        val l = s.length\n        val sum = 0\n      \
    \  var i = 0\n        while (i < l) {\n            val x = s(i)\n            val\
    \ y = s(i + 1)\n            val z = s(i + 2)\n            sum += x.toInt + y.toInt\
    \ + z.toInt\n            i += 3\n        }\n        val result = sum.toBinaryString\n\
    \        if (result.length < l) {\n            result + s.substring(l - result.length)\n\
    \        } else {\n            result\n        }", "        val binary = N.toBinaryString\n\
    \        val bins = binary.toList\n        val binsSum = bins.foldLeft(0)(_ +\
    \ _)\n        val binsSumStr = binsSum.toBinaryString\n        val binsSumStr\
    \ = binsSumStr.substring(0, binsSumStr.length - 1)\n        binsSumStr", "   \
    \     val binary = N.toBinaryString\n        val bin = binary.toList\n       \
    \ val binSum = bin.foldLeft(0)((sum, digit) => sum + digit.asInstanceOf[Int])\n\
    \        val binSumStr = binSum.toBinaryString\n        binSumStr.substring(0,\
    \ binSumStr.length - 1)", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        val result = new mutable.StringBuilder\n       \
    \ digits.foreach { digit =>\n            sum += digit._1\n            result +=\
    \ digit._2\n        }\n        result + sum.toString", "        val nums = mutable.ArrayBuffer.empty[Int]\n\
    \        val sum = 0\n        while(N /= 10) {\n            val digit = N % 10\n\
    \            val sum = sum + digit\n            N = (N - digit) / 10\n       \
    \     nums.append(digit)\n        }\n        val result = nums.reverse.mkString(\"\
    \")\n        if(sum > 0) result + sum.toString\n        else result", "      \
    \  val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)"]
stop_tokens:
- "\n    }\n"
