name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        val even = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "  \
    \      val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evens = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val evenCount = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n \
    \       (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n   \
    \     val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n   \
    \     (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.count(_ % 2 == 0)\n        val oddCount =\
    \ num.toString.count(_ % 2 == 1)\n        (evenCount, oddCount)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        var even = 0\n        var odd = 0\n        var\
    \ numStr = num.toString\n        var evenStr = numStr.filter(x => x % 2 == 0).length\n\
    \        var oddStr = numStr.filter(x => x % 2 != 0).length\n        even = (evenStr.toLong,\
    \ even)\n        odd = (oddStr.toLong, odd)\n        return (even, odd)", "  \
    \      val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evens = num.toString.filter(_ % 2 == 0).length\n  \
    \      val odds = num.toString.filter(_ % 2 != 0).length\n        (evens, odds)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = 0\n       \
    \ val oddCount = 0\n        val numStr = num.toString\n        val numStrLen =\
    \ numStr.length\n        val evenStr = new Array[Char](numStrLen)\n        val\
    \ oddStr = new Array[Char](numStrLen)\n        var i = 0\n        while (i < numStrLen)\
    \ {\n            val c = numStr(i).toChar\n            if (c == '0') {\n     \
    \           evenCount += 1\n                evenStr(i) = c\n            } else\
    \ {\n                oddCount += 1\n                oddStr(i) = c\n          \
    \  }\n            i += 1\n        }\n        (evenCount, oddCount)", "       \
    \ val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 == 1).length\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(x =>\
    \ x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(x => x %\
    \ 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 == 1).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(x => x % 2 == 0).length\n        val odd =\
    \ num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "       \
    \ val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount = num.toString.filter(_\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val evenCount = num.toString.filter(x => x % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (evenCount, oddCount)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        (even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evens = num.toString.filter(_ % 2 == 0).length\n        val odds =\
    \ num.toString.filter(_ % 2 != 0).length\n        (evens, odds)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        Tuple2(even,\
    \ odd)", "        val evens = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odds = num.toString.filter(_ % 2 == 1).length\n        (evens, odds)", " \
    \       val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_.isDigit).filter(_.isEven).length\n\
    \        val odd = num.toString.filter(_.isDigit).filter(_.isOdd).length\n   \
    \     (even, odd)", "        var even = 0\n        var odd = 0\n        var digits\
    \ = num.toString.reverse.grouped(2).map(_.toInt)\n        digits.foreach(x =>\
    \ if (x % 2 == 0) even += x else odd += x)\n        (even, odd)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var numStr = num.toString\n\
    \        for(i <- 0 until numStr.length){\n            if(numStr(i) match {\n\
    \                case \"0\" => \"0\"\n                case \"1\" => \"1\"\n  \
    \              case \"2\" => \"2\"\n                case \"3\" => \"3\"\n    \
    \            case \"4\" => \"4\"\n                case \"5\" => \"5\"\n      \
    \          case \"6\" => \"6\"\n                case \"7\" => \"7\"\n        \
    \        case \"8\" => \"8\"\n                case \"9\" => \"9\"\n          \
    \      case _ => throw new Exception(\"Invalid input\")\n            }) even +=\
    \ 1\n            else odd += 1\n        }\n        (even, odd)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var numStr = num.toString\n\
    \        var numStrLen = numStr.length\n        var evenStr = \"\"\n        var\
    \ oddStr = \"\"\n        var evenStrLen = 0\n        var oddStrLen = 0\n     \
    \   var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n\
    \        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0\n        var evenStrLen = 0\n        var oddStrLen = 0\n        var evenStrLen\
    \ = 0\n        var oddStrLen = 0\n        var evenStrLen = 0\n        var oddStrLen\
    \ = 0", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even, odd)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(x => x % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x % 2 != 0).length\n        (even, odd)", "     \
    \   var even = 0\n        var odd = 0\n        for(i <- 0 until num.toString.length)\
    \ {\n            if(num.toString.charAt(i).toInt % 2 == 0) {\n               \
    \ even += 1\n            } else {\n                odd += 1\n            }\n \
    \       }\n        (even, odd)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(x => x % 2 == 0).length\n\
    \        val odd = num.toString.filter(x => x % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)", "      \
    \  val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evens = num.toString.filter(_\
    \ % 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.filter(_ % 2 == 0).length\n        val oddCount\
    \ = num.toString.filter(_ % 2 != 0).length\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        Tuple2(even, odd)", "        val even = num.toString.filter(x\
    \ => x % 2 == 0).length\n        val odd = num.toString.filter(x => x % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 == 1).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = 0\n       \
    \ val oddCount = 0\n        val numStr = num.toString\n        val numStrLen =\
    \ numStr.length\n        val evenStr = new Array[Char](numStrLen)\n        val\
    \ oddStr = new Array[Char](numStrLen)\n        val evenStrLen = evenStr.length\n\
    \        val oddStrLen = oddStr.length\n        val evenNum = new Array[Long](numStrLen)\n\
    \        val oddNum = new Array[Long](numStrLen)\n        val evenNumLen = evenNum.length\n\
    \        val oddNumLen = oddNum.length\n        var i = 0\n        var j = 0\n\
    \        var k = 0\n        var evenCount = 0\n        var oddCount = 0\n    \
    \    var evenNumStr = \"\"\n        var oddNumStr = \"\"\n        var evenNumStrLen\
    \ = 0\n        var oddNumStrLen = 0\n        var evenNumStrArray = new Array[String](evenNumStrLen)\n\
    \        var oddNumStrArray = new Array[String](oddNumStrLen)\n        var evenNumStrArrayLen\
    \ = 0\n        var oddNumStrArrayLen = 0\n        var evenNumStrArrayIndex = 0\n\
    \        var oddNumStrArrayIndex = 0\n        var evenNumStrArrayIndex = 0\n \
    \       var oddNumStrArrayIndex = 0\n        while(i < numStrLen) {\n        \
    \    evenNumStr += numStr(i).toChar\n            oddNumStr += numStr(i).toChar\n\
    \            evenNumStrArray(i) = evenNumStr\n            oddNumStrArray(i) =\
    \ oddNumStr\n            evenNumStrArrayLen = evenNumStrArray(i).length\n    \
    \        oddNumStrArrayLen = oddNumStrArray(i).length\n            evenNumStrArrayIndex\
    \ = evenNumStrArray(i).indexOf('-')\n            oddNumStrArrayIndex = oddNumStrArray(i).indexOf('-')\n\
    \            evenNumStrArrayIndex = evenNumStrArray(i).indexOf('-')\n        \
    \    oddNumStrArrayIndex = oddNumStrArray(i).indexOf('-')\n            evenNumStrArray(i)\
    \ = evenNumStrArray(i).substring(0, evenNumStrArrayIndex)\n            oddNumStrArray(i)\
    \ = oddNumStrArray(i).substring(0, oddNumStrArrayIndex)\n            evenNumStrArray(i)\
    \ = evenNumStrArray(i).substring(evenNumStrArrayIndex + 1, evenNumStrArrayLen)\n\
    \            oddNumStrArray(i) = oddNumStrArray(i).substring(oddNumStrArrayIndex\
    \ + 1, oddNumStrArrayLen)\n            evenNum(i) = evenNumStrArray(i).toLong\n\
    \            oddNum(i) = oddNum", "        val even = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n \
    \       (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var numStr = num.toString\n\
    \        var evenStr = \"\"\n        var oddStr = \"\"\n        var evenStrArray\
    \ = numStr.split(\"\").filter(_.isDigit).map(_.toInt)\n        var oddStrArray\
    \ = numStr.split(\"\").filter(!_.isDigit).map(_.toInt)\n        evenStrArray =\
    \ evenStrArray.filter(x => x % 2 == 0)\n        oddStrArray = oddStrArray.filter(x\
    \ => x % 2 == 1)\n        evenCount = evenStrArray.length\n        oddCount =\
    \ oddStrArray.length\n        return (evenCount, oddCount)", "        val even\
    \ = num.toString.filter(x => x % 2 == 0).length\n        val odd = num.toString.filter(x\
    \ => x % 2 != 0).length\n        Tuple2(even, odd)"]
stop_tokens:
- "\n    }\n"
