name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        val even = num.toString.filter(_ % 2 == 0).length\n       \
    \ val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)", "  \
    \      val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val evens = num.toString.filter(_ %\
    \ 2 == 0).length\n        val odds = num.toString.filter(_ % 2 != 0).length\n\
    \        (evens, odds)", "        val evenCount = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n \
    \       (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n   \
    \     (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n   \
    \     val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val evenCount = num.toString.filter(_\
    \ % 2 == 0).length\n        val oddCount = num.toString.filter(_ % 2 != 0).length\n\
    \        (evenCount, oddCount)", "        val even = num.toString.filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_ % 2 == 1).length\n   \
    \     (even, odd)", "        val evenCount = num.toString.filter(_ % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(_ % 2 != 0).length\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(_ % 2 == 0).length\n   \
    \     val odd = num.toString.filter(_ % 2 != 0).length\n        (even, odd)",
  "        val evenCount = num.toString.count(_ % 2 == 0)\n        val oddCount =\
    \ num.toString.count(_ % 2 == 1)\n        (evenCount, oddCount)", "        val\
    \ even = num.toString.filter(_ % 2 == 0).length\n        val odd = num.toString.filter(_\
    \ % 2 != 0).length\n        (even, odd)", "        val even = num.toString.filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n\
    \        Tuple2(even, odd)", "        val even = num.toString.filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_ % 2 != 0).length\n      \
    \  (even, odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even,\
    \ odd)", "        val even = num.toString.filter(_ % 2 == 0).length\n        val\
    \ odd = num.toString.filter(_ % 2 != 0).length\n        Tuple2(even, odd)"]
stop_tokens:
- "\n    }\n"
