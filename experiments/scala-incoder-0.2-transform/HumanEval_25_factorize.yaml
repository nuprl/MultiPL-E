name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n)\n        for (f <- factorization) {\n            factors += f\n\
    \        }\n        factors.toList", "        val factorization = factorize(n).toList\n\
    \        val factorizationWithCount = factorization.map(f => (f, factorization.count(f\
    \ == n)))\n        factorizationWithCount.sortBy(_._2).reverse", "        val\
    \ factorization = factorization(n)\n        factorization.toList.sortBy(_._1).reverse",
  "        val factorization = factorization(n)\n        factorization.toList.sortBy(_._1).reverse",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n)\n\
    \        for (i <- factorization) {\n            factors += i.toLong\n       \
    \ }\n        factors.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimePrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePri", "      \
    \  val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            }\n            else {\n                factor += 1\n            }\n\
    \        }\n        factorization.toList", "        val factorization = factorization(n)\n\
    \        val factors = factorization.toList\n        val factorsCount = factors.map(f\
    \ => factors.count(f => f == f))\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        factorsCount.sortWith(_ < _)", "        val factors =\
    \ mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val factorizationCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val factorizationCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val factorizationCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val factorizationCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val factorizationCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val factorizationCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val factorizationCount27\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount28 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount29 = ", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).reverse\n        factorization foreach\
    \ { factor =>\n            factors += factor\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.List",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            factors += factorization(i)\n\
    \        }\n        factors.toList", "        val factorization = factorizations(n)\n\
    \        val factorizationList = factorization.toList\n        val factorizationListSorted\
    \ = factorizationList.sortBy(_._1)\n        val factorizationListSortedSortedByFirst\
    \ = factorizationListSorted.sortBy(_._2)\n        val factorizationListSortedSortedBySecond\
    \ = factorizationListSortedSortedByFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirst\
    \ = factorizationListSortedSortedBySecond.sortBy(_._2)\n        val factorizationListSortedSortedByFirstSecond\
    \ = factorizationListSortedSortedByFirstFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirstFirst\
    \ = factorizationListSortedSortedByFirstSecond.sortBy(_._2)\n        val factorizationListSortedSortedByFirstFirstSecond\
    \ = factorizationListSortedSortedByFirstFirstFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirstFirstFirst\
    \ = factorizationListSortedSortedByFirstFirstFirstSecond.sortBy(_._2)\n      \
    \  val factorizationListSortedSortedByFirstFirstFirstSecond = factorizationListSortedSortedByFirstFirstFirstFirst.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecond = factorizationListSortedSortedByFirstFirstFirstFirstSecond.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstFirstSecond.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSorted", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            val factor = factorization(i)\n            if (factors.contains(factor))\
    \ {\n                factors += factor\n            } else {\n               \
    \ factors += factor\n                factors += factor\n            }\n      \
    \  }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount4 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount9 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount10 = mutable.ListBuffer[Boolean]()\n       \
    \ val isPrimeFactorizationCount11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount15 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount16 = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimeFactorizationCount17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount20 = mutable.ListBuffer[Boolean]()\n",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationFactors\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount2 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount3 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount5 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount6 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount7 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount7 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount8 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount9 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount10 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount11 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount12 = mutable.ListBuffer[Long",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(_ == n))\n        factorsCount.map(n\
    \ => factors.count(_ == n) * n).toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n  \
    \          if (n % i == 0) {\n                factors += i\n                factorization\
    \ += i\n                primes += i\n            }\n            i += 1\n     \
    \   }\n        factors.toList"]
stop_tokens:
- "\n    }\n"
