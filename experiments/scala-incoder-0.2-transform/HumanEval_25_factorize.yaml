name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorize(n)\n        for (f <- factorization) {\n            factors += f\n\
    \        }\n        factors.toList", "        val factorization = factorize(n).toList\n\
    \        val factorizationWithCount = factorization.map(f => (f, factorization.count(f\
    \ == n)))\n        factorizationWithCount.sortBy(_._2).reverse", "        val\
    \ factorization = factorization(n)\n        factorization.toList.sortBy(_._1).reverse",
  "        val factorization = factorization(n)\n        factorization.toList.sortBy(_._1).reverse",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n)\n\
    \        for (i <- factorization) {\n            factors += i.toLong\n       \
    \ }\n        factors.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n \
    \       val isPrimePrimePrimePrimeFactors = mutable.ListBuffer[Boolean]()\n  \
    \      val isPrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimePrimePri", "      \
    \  val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                factorization += factor\n                n /= factor\n\
    \            }\n            else {\n                factor += 1\n            }\n\
    \        }\n        factorization.toList", "        val factorization = factorization(n)\n\
    \        val factors = factorization.toList\n        val factorsCount = factors.map(f\
    \ => factors.count(f => f == f))\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        factorsCount.sortWith(_ < _)", "        val factors =\
    \ mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val primeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val factorizationCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val factorizationCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val factorizationCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val factorizationCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount16 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val factorizationCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount20 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val factorizationCount23\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount24 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val factorizationCount27\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount28 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount29 = ", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).reverse\n        factorization foreach\
    \ { factor =>\n            factors += factor\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.List",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            factors += factorization(i)\n\
    \        }\n        factors.toList", "        val factorization = factorizations(n)\n\
    \        val factorizationList = factorization.toList\n        val factorizationListSorted\
    \ = factorizationList.sortBy(_._1)\n        val factorizationListSortedSortedByFirst\
    \ = factorizationListSorted.sortBy(_._2)\n        val factorizationListSortedSortedBySecond\
    \ = factorizationListSortedSortedByFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirst\
    \ = factorizationListSortedSortedBySecond.sortBy(_._2)\n        val factorizationListSortedSortedByFirstSecond\
    \ = factorizationListSortedSortedByFirstFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirstFirst\
    \ = factorizationListSortedSortedByFirstSecond.sortBy(_._2)\n        val factorizationListSortedSortedByFirstFirstSecond\
    \ = factorizationListSortedSortedByFirstFirstFirst.sortBy(_._1)\n        val factorizationListSortedSortedByFirstFirstFirstFirst\
    \ = factorizationListSortedSortedByFirstFirstFirstSecond.sortBy(_._2)\n      \
    \  val factorizationListSortedSortedByFirstFirstFirstSecond = factorizationListSortedSortedByFirstFirstFirstFirst.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecond = factorizationListSortedSortedByFirstFirstFirstFirstSecond.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstFirstSecond.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstFirstSecondThird =\
    \ factorizationListSortedSortedByFirstFirstFirstFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstFirstSecondThird.sortBy(_._2)\n\
    \        val factorizationListSortedSortedByFirstFirstFirstSecondThird = factorizationListSortedSortedByFirstSecondThird.sortBy(_._1)\n\
    \        val factorizationListSorted", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            val factor = factorization(i)\n            if (factors.contains(factor))\
    \ {\n                factors += factor\n            } else {\n               \
    \ factors += factor\n                factors += factor\n            }\n      \
    \  }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isFactorization\
    \ = mutable.ListBuffer[Boolean]()\n        val isFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount4 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount9 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount10 = mutable.ListBuffer[Boolean]()\n       \
    \ val isPrimeFactorizationCount11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount15 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount16 = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimeFactorizationCount17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount20 = mutable.ListBuffer[Boolean]()\n",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationFactors\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount2 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount3 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount5 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount6 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount7 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount7 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount8 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationFactorsCount9 = mutable.ListBuffer[Long]()\n  \
    \      val factorizationFactorsCount10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationFactorsCount10 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationFactorsCount11 =\
    \ mutable.ListBuffer[Long]()\n        val factorizationFactorsCount12 = mutable.ListBuffer[Long",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            val f = factorization(i)\n\
    \            factors += f\n        }\n        factors.toList", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(_ == n))\n        factorsCount.map(n\
    \ => factors.count(_ == n) * n).toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n  \
    \          if (n % i == 0) {\n                factors += i\n                factorization\
    \ += i\n                primes += i\n            }\n            i += 1\n     \
    \   }\n        factors.toList", "        val factorization = factorization(n)\n\
    \        factorization.foldLeft(List[Long]())((acc, f) => acc :+ f)", "      \
    \  val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization2 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization3 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization4 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization5 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization6\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization7 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization8 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization9 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization10 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization11\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization12 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization13 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization14 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization15 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization16\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization17 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization18 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization19 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization20 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization21\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization22 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization23 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization24 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization25 = mutable.ListBuffer.empty[Boolean]\n        val is",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization2 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization3\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization4 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization9 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization10 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization11\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization12 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization13 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization14 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization15\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization16 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization21 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorization22 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization23\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization24 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization25 = mutable.ListBuffer[Boolean]()\n        val\
    \ is", "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(f == _))\n        val\
    \ factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n", "        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isFactorization = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization", "  \
    \      val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactor = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactorCount = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationFactorizationFactorizationFactorization = mutable.ListBuffer[Boolean]()",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).reverse\n\
    \        factorization.foreach(x => factors += x)\n        factors.toList", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val factorization =\
    \ factorization(n)\n        factorization.foreach(x => factors += x)\n       \
    \ factors", "        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n)\n        factorization foreach { x =>\n            factors\
    \ += x\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        factorization foreach {\
    \ x =>\n            factors += x\n        }\n        factors", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        factors.sortWith(\
    \ (a,b) => a.toLong <=> b.toLong )", "        val factorization = factorizations(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val isPrime = mutable.ListBuffer.empty[Boolean]\n        val isFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization2 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization3 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization4 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization5\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization6 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization7 = mutable.ListBuffer.empty[Boolean]\n     \
    \   val isPrimeFactorization8 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization9 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization10\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization11 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization12 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization13 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization14 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization15\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization16 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization17 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization18 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization19 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization20\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization21 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorization22 = mutable.ListBuffer.empty[Boolean]\n    \
    \    val isPrimeFactorization23 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization24 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization",
  "        val factorization = factorization(n)\n        factorization.map(x => n.toLong\
    \ * x.toLong).distinct", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor2\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor3 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor4 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor5\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor6 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor7 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor8\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor9 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor10 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor11 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor12\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor13 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor14 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor15 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor16\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor17 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor18 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor19 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor20\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor21 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor22 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor23 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor24\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor25 = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor26 = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor27 = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactor28\
    \ = mutable.", "        val factors = mutable.ListBuffer.empty[Long]\n       \
    \ val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            factors += factorization(i)\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfPrimeFactors = mutable.ListBuffer[Long]()\n \
    \       val factorizationCountOfPrimeFactorsOfPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfPrimeFactorsOfPrimesOfPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfPrimeFactorsOfPrimes",
  "        val factors = mutable.ListBuffer.empty[Long]\n        factorize(n, factors)\n\
    \        factors.toList", "        val factorization = factorization(n)\n    \
    \    val factors = factorization.toList\n        val factorsCount = factors.map(x\
    \ => factors.count(y => y % x == 0))\n        factorsCount.map(x => x * factors.count(y\
    \ => y % x == 0)).sortBy(x => x).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n != 1) factors += n\n        factors.toList",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(f => f == f))\n   \
    \     val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.sortBy(f => f)\n\
    \        val factorsCount = factorsCount.reverse\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.sortBy(f => f)\n        val factorsCount = factorsCount.reverse\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.sortBy(f => f)\n\
    \        val factorsCount = factorsCount.reverse\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.sortBy(f => f)\n        val factorsCount = factorsCount.reverse\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.sortBy(f => f)\n\
    \        val factorsCount = factorsCount.reverse\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.sortBy(f => f)\n        val factorsCount = factorsCount.reverse\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.sortBy(f => f)\n\
    \        val factorsCount = factorsCount.reverse\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.sortBy(f => f)\n        val factorsCount = factorsCount.reverse\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = ", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        val i = 2l\n        while(i <= n){\n   \
    \         while(n % i == 0){\n                factors += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith( (a,b) => a.compareTo(b) == -1 )", "        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount14\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount17\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount18\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsCount20\
    \ = mutable.ListBuffer[Long]()\n        ", "        val factorization = factorization(n)\n\
    \        factorization.map(n => n.toLong).distinct", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrime = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList", " \
    \       val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = ", "        val factorization = mutable.ListBuffer[Long]()\n        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactors\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorization = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimePrimeFactorizationPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer", "        val factors = mutable.ListBuffer[Long]()\n \
    \       val primes = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPri",
  "        val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(f == _)).toList\n \
    \       val factorsCount = factorsCount.sortBy(_._2).reverse\n        val factorsCount\
    \ = factorsCount.map(f => (f._1, f._2))\n        factorsCount.map(f => f._1)",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        factorization.foreach(x => factors += x)\n        factors.toList", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val factorization =\
    \ factorization(n)\n        factorization foreach { f =>\n            factors\
    \ += f\n        }\n        factors.toList", "        val factorization = factorization(n).toList\n\
    \        factorization.map(n => n.toLong).sorted", "        val factorization\
    \ = factorization(n).toList\n        factorization.sortWith(_ < _)", "       \
    \ val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList", "        val factorization = factorizations(n)\n    \
    \    val factorizationList = factorization.toList\n        factorizationList.sortBy(_._1).reverse",
  "        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrime = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrime\
    \ = ", "        val factors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = factorization(n)\n        factorization foreach { f =>\n            factors\
    \ += f\n        }\n        factors.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorsCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount4 = mutable.ListBuffer.empty[Long]\n        val factorizationCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount8 = mutable.ListBuffer.empty[Long]\n        val factorizationCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount12 = mutable.ListBuffer.empty[Long]\n        val factorizationCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount15 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount16 = mutable.ListBuffer.empty[Long]\n        val factorizationCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount18 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount19 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount20 = mutable.ListBuffer.empty[Long]\n        val factorizationCount21\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount22 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount23 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount24 = mutable.ListBuffer.empty[Long]\n        val factorizationCount25\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount26 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount27 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount28 = mutable.ListBuffer.empty[Long]\n        val factorizationCount29\
    \ = mut", "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n\
    \        while (i <= n / i) {\n            if (n % i == 0) {\n               \
    \ factors += i\n                n /= i\n            }\n            i += 1\n  \
    \      }\n        factors.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorsCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorization = mutable.ListBuffer.empty[Long]\n        val factorizationCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationFactorsCount = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount2 = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationFactorsCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount4 = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationFactorsCount7 = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationFactorsCount8 = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount10 = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount12 =\
    \ mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationFactorsCount14 = mutable.ListBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount15 = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount16 = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationFactorsCount17 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationFactorsCount18 = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount20 =\
    \ mutable.ListBuffer.empty[Long]\n        val factorizationFactorsCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationFactorsCount22 = mutable.ListBuffer.empty[Long]\n  \
    \      val factorizationFactorsCount23 = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationFactorsCount24 = mutable.ListBuffer.", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.", " \
    \       val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith(_ < _)", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizationCount = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCounts\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_ = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_prime = mutable.ListBuffer.empty[Long]\n    \
    \    val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n   \
    \     val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n      \
    \  val factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCounts_prime_ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_prime_\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCounts_", "     \
    \   val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while(i\
    \ <= n/i) {\n            if((n % i) == 0) {\n                factors += i\n  \
    \              n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(f == _))\n        val\
    \ factorsCount = factorsCount.toList\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.toList\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.map(f => f.toLong)\n\
    \        val factorsCount = factorsCount.toList\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.toList\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.map(f => f.toLong)\n\
    \        val factorsCount = factorsCount.toList\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.toList\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.map(f => f.toLong)\n\
    \        val factorsCount = factorsCount.toList\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.toList\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.toList\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.toList\n        val factorsCount = factorsCount.map(f => f.toLong)\n\
    \        val factorsCount = factorsCount.toList\n", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n).reverse\n        factorization foreach\
    \ { f =>\n            factors += f\n        }\n        factors.toList", "    \
    \    val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization foreach { factor =>\n            factors += factor\n  \
    \      }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n != 1) {\n            factors += n\n\
    \        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        factorization foreach {\
    \ f =>\n            factors += f\n        }\n        factors.toList", "      \
    \  val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.toList", "        val factorization = factorization(n)\n        val\
    \ factors = factorization.toList\n        val factorsCount = factors.map(f =>\
    \ factors.count(_ == f))\n        val factorsCount = factorsCount.map(f => f.toLong)\n\
    \        val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n", "        val factors = mutable.ListBuffer.empty[Long]\n   \
    \     val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors =\
    \ mutable.ListBuffer.empty[Long]\n        val factorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizations = mutable.ListBuffer.empty[Long]\n        val factorizationIndex\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes2 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationIndexes3 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes4\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes5 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes6 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationIndexes7 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes8\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes9 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes10 = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationIndexes11 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes12\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes13 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes14 = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationIndexes15 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes16\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes17 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes18 = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationIndexes19 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes20\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes21 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes22 = mutable.ListBuffer.empty[Long]\n       \
    \ val factorizationIndexes23 = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes24\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationIndexes25 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationIndexes26 = mutable.ListBuffer.empty[Long]\n        ",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith(_ < _)", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount = mutable.ListBuffer", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors ++ List(n.toLong)", "        val\
    \ factorization = factorization(n).toList\n        factorization.sortBy(_._1).reverse",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(f == _))\n        factorsCount.sortBy(-_).reverse.map(f\
    \ => f.toLong).take(factors.length).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        var i = 2\n        while (i <= n) {\n  \
    \          if (n % i == 0) {\n                factors += i\n                factorization\
    \ += i\n                primes += i\n            }\n            i += 1\n     \
    \   }\n        factors.toList ++ primes.toList ++ factorization.toList", "   \
    \     val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val factorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorsPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n).reverse\n\
    \        factorization.foreach(f => {\n            factors += f\n        })\n\
    \        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCounts = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOf = mutable.ListBuffer[Long]()\n        val factorizationCountOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOf = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfs\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n  \
    \      val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer", "    \
    \    val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(n => factors.count(_ == n))\n        val\
    \ factorsCount = factorsCount.map(n => n.toLong)\n        factorsCount.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val factorizationCounts\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSum = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSums = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumOfSquares = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfSquaress\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumOfCubess = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountSumOfCubes3 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumOfCubes4 = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumOfCubes7 = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountSumOfCubes8 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumOfCubes9 = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes10\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes11 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumOfCubes12 = mutable.ListBuffer[Long]()\n   \
    \     val factorizationCountSumOfCubes13 = mutable.ListBuffer[Long]()\n      \
    \  val factorizationCountSumOfCubes14 = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountSumOfCubes15 = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes16\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountSumOfCubes17 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountSumOfCubes18 = mutable.ListBuffer[Long]()", " \
    \       val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n != 1) {\n            factors += n\n        }\n        factors.toList",
  "        val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        factors.sortBy(-_)", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount = mutable.ListBuffer.empty[Long]\n        val factorizationCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount3 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount3 = mutable.ListBuffer.empty[Long]\n        val factorizationCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount5 = mutable.ListBuffer.empty[Long]\n        val factorizationCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount6 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount7 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount7 = mutable.ListBuffer.empty[Long]\n        val factorizationCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount9 = mutable.ListBuffer.empty[Long]\n        val factorizationCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount11 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount11 = mutable.ListBuffer.empty[Long]\n        val factorizationCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount12 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorizationCount13 = mutable.ListBuffer.empty[Long]\n        val factorizationCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorizationCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount15 = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization", "        val factors = mutable.ListBuffer[Long]()\n   \
    \     val factorization = factorization(n)\n        factorization foreach { factor\
    \ =>\n            factors += factor\n        }\n        factors.toList", "   \
    \     val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization3 = mutable.ListBuffer[Long]()\n        val primeFactorization4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization6 = mutable.ListBuffer[Long]()\n        val primeFactorization7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization9 = mutable.ListBuffer[Long]()\n        val primeFactorization10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization12 = mutable.ListBuffer[Long]()\n        val primeFactorization13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization15 = mutable.ListBuffer[Long]()\n        val primeFactorization16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization18 = mutable.ListBuffer[Long]()\n        val primeFactorization19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization21 = mutable.ListBuffer[Long]()\n        val primeFactorization22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization24 = mutable.ListBuffer[Long]()\n        val primeFactorization25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization27 = mutable.ListBuffer[Long]()\n        val primeFactorization28\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization29 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization30 = mutable.ListBuffer[Long]()\n        val primeFactor",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount2 = mutable.ListBuffer[Long]()\n        val factorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount5 = mutable.ListBuffer[Long]()\n        val factorizationCount6\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount7 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount8 = mutable.ListBuffer[Long]()\n        val factorizationCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount11 = mutable.ListBuffer[Long]()\n        val factorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount14 = mutable.ListBuffer[Long]()\n        val factorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount17 = mutable.ListBuffer[Long]()\n        val factorizationCount18\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount19 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount20 = mutable.ListBuffer[Long]()\n        val factorizationCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount23 = mutable.ListBuffer[Long]()\n        val factorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount26 = mutable.ListBuffer[Long]()\n        val factorizationCount27\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount28 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount29 = mutable.ListBuffer[Long]()\n        val factorizationCount30\
    \ = ", "        val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        factors.sortBy(x => factors.count(y => y == x))", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2l\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n != 1) factors += n\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactors = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount3 = mutable.ListBuffer[Long]()\n       \
    \ val factorizationFactorsCount4 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount7 = mutable.ListBuffer[Long]()\n       \
    \ val factorizationFactorsCount8 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount9\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount10 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount11 = mutable.ListBuffer[Long]()\n      \
    \  val factorizationFactorsCount12 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount15 = mutable.ListBuffer[Long]()\n      \
    \  val factorizationFactorsCount16 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount17\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount18 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount19 = mutable.ListBuffer[Long]()\n      \
    \  val factorizationFactorsCount20 = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount21\
    \ = mutable.ListBuffer[Long]()\n        val factorizationFactorsCount22 = mutable.ListBuffer[Long]()\n\
    \        val factorizationFactorsCount23 = mutable.ListBuffer[Long]()\n      \
    \  val factorizationFactorsCount24 = mutable.ListBuffer", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationSize = n\n        val\
    \ primeFactorizationSize = factorizationSize / 2\n        val primeFactorizationSize2\
    \ = primeFactorizationSize / 2\n        val primeFactorizationSize3 = primeFactorizationSize2\
    \ / 2\n        val primeFactorizationSize4 = primeFactorizationSize3 / 2\n   \
    \     val primeFactorizationSize5 = primeFactorizationSize4 / 2\n        val primeFactorizationSize6\
    \ = primeFactorizationSize5 / 2\n        val primeFactorizationSize7 = primeFactorizationSize6\
    \ / 2\n        val primeFactorizationSize8 = primeFactorizationSize7 / 2\n   \
    \     val primeFactorizationSize9 = primeFactorizationSize8 / 2\n        val primeFactorizationSize10\
    \ = primeFactorizationSize9 / 2\n        val primeFactorizationSize11 = primeFactorizationSize10\
    \ / 2\n        val primeFactorizationSize12 = primeFactorizationSize11 / 2\n \
    \       val primeFactorizationSize13 = primeFactorizationSize12 / 2\n        val\
    \ primeFactorizationSize14 = primeFactorizationSize13 / 2\n        val primeFactorizationSize15\
    \ = primeFactorizationSize14 / 2\n        val primeFactorizationSize16 = primeFactorizationSize15\
    \ / 2\n        val primeFactorizationSize17 = primeFactorizationSize16 / 2\n \
    \       val primeFactorizationSize18 = primeFactorizationSize17 / 2\n        val\
    \ primeFactorizationSize19 = primeFactorizationSize18 / 2\n        val primeFactorizationSize20\
    \ = primeFactorizationSize19 / 2\n        val primeFactorizationSize21 = primeFactorizationSize20\
    \ / 2\n        val primeFactorizationSize22 = primeFactorizationSize21 / 2\n \
    \       val primeFactorizationSize23 = primeFactorizationSize22 / 2\n        val\
    \ primeFactorizationSize24 = primeFactorizationSize23 / 2\n        val primeFactorizationSize25\
    \ = primeFactorizationSize24 / 2\n        val primeFactorizationSize26 = primeFactorizationSize25\
    \ / 2\n        val primeFactorizationSize27 = primeFactorizationSize26 / 2\n \
    \       val primeFactorizationSize28 = primeFactorizationSize27 / 2\n        val\
    \ primeFactorizationSize29 = primeFactorizationSize28 / 2\n        val prime",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount2 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount5 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount6 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount9 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount10 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount11\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount12 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount13 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount14 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount17 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount18 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount21 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount22 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount23\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount24 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount25 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount26 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount27\
    \ = mutable.ListBuffer[Long", "        val factorization = factorization(n)\n\
    \        val factors = factorization.toList\n        val factorsCount = factors.map(n\
    \ => factors.count(f => f == n))\n        factorsCount.map(n => factors.count(f\
    \ => f == n) * n).toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(f => f == n))\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizations = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrime = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimes = mutable.ListBuffer[Long]()\n   \
    \     val factorizationPrimeFactorPrime = mutable.ListBuffer[Long]()\n       \
    \ val factorizationPrimeFactorPrimeFactors = mutable.ListBuffer[Long]()\n    \
    \    val factorizationPrimeFactorPrimeFactor = mutable.ListBuffer[Long]()\n  \
    \      val factorizationPrimeFactorPrimeFactorPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactorPrime = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactor = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes =\
    \ mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrime\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorPrimeFactorPrimeFactorPrimeFactorPrimes\
    \ = mutable.List", "        val factors = mutable.ListBuffer[Long]()\n       \
    \ val primes = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n   \
    \     val factorizationPrimeFactorsPrimes = mutable.ListBuffer[Long]()\n     \
    \   val primeFactorizationPrimeFactorsPrimes = mutable.ListBuffer[Long]()\n  \
    \      val factorizationPrimeFactorsPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorsPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsPrimesPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorsPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes",
  "        val factorization = factorization(n);\n        val factors = factorization.map(_.toLong);\n\
    \        val factorsCount = factors.map(x => factors.count(_ == x));\n       \
    \ factorsCount.map(x => factors.count(_ == x)).sum;", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(f => f == n))\n        factorsCount.reverse.foldLeft(List[Long]())((acc,\
    \ n) => acc + n)", "        val factorization = factorization(n)\n        val\
    \ factors = factorization.toList\n        factors.sortBy(_ * -1)", "        val\
    \ factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(x => factors.count(y => y == x))\n   \
    \     factorsCount.sortBy(x => x).reverse.map(x => factors.count(y => y == x)).map(x\
    \ => factors.count(y => y == x) * x)", "        val factorization = factorize(n).toList\n\
    \        val factorizationList = factorization.toList\n        val factorizationList2\
    \ = factorizationList.map(x => x.toLong)\n        val factorizationList3 = factorizationList2.map(x\
    \ => x.toLong)\n        val factorizationList4 = factorizationList3.map(x => x.toLong)\n\
    \        val factorizationList5 = factorizationList4.map(x => x.toLong)\n    \
    \    val factorizationList6 = factorizationList5.map(x => x.toLong)\n        val\
    \ factorizationList7 = factorizationList6.map(x => x.toLong)\n        val factorizationList8\
    \ = factorizationList7.map(x => x.toLong)\n        val factorizationList9 = factorizationList8.map(x\
    \ => x.toLong)\n        val factorizationList10 = factorizationList9.map(x =>\
    \ x.toLong)\n        val factorizationList11 = factorizationList10.map(x => x.toLong)\n\
    \        val factorizationList12 = factorizationList11.map(x => x.toLong)\n  \
    \      val factorizationList13 = factorizationList12.map(x => x.toLong)\n    \
    \    val factorizationList14 = factorizationList13.map(x => x.toLong)\n      \
    \  val factorizationList15 = factorizationList14.map(x => x.toLong)\n        val\
    \ factorizationList16 = factorizationList15.map(x => x.toLong)\n        val factorizationList17\
    \ = factorizationList16.map(x => x.toLong)\n        val factorizationList18 =\
    \ factorizationList17.map(x => x.toLong)\n        val factorizationList19 = factorizationList18.map(x\
    \ => x.toLong)\n        val factorizationList20 = factorizationList19.map(x =>\
    \ x.toLong)\n        val factorizationList21 = factorizationList20.map(x => x.toLong)\n\
    \        val factorizationList22 = factorizationList21.map(x => x.toLong)\n  \
    \      val factorizationList23 = factorizationList22.map(x => x.toLong)\n    \
    \    val factorizationList24 = factorizationList23.map(x => x.toLong)\n      \
    \  val factorizationList25 = factorizationList24.map(x => x.toLong)\n        val\
    \ factorizationList26 = factorizationList25.map(x => x.toLong)\n        val factorizationList27\
    \ = factorizationList26.map(x => x.toLong)\n        val factorizationList28 =\
    \ factorization", "        val factors = mutable.ListBuffer[Long]()\n        val\
    \ factorization = factorization(n)\n        for (i <- factorization.indices) {\n\
    \            val f = factorization(i)\n            factors += f\n        }\n \
    \       factors.toList", "        val factorization = factorization(n).toList\n\
    \        val factorizationList = factorization.toList\n        val factorizationListWithCount\
    \ = factorizationList.map(f => (f, factorization.count(f == n)))\n        factorizationListWithCount.sortBy(_._2).reverse",
  "        val factors = mutable.ListBuffer.empty[Long]\n        factorize(n, factors)\n\
    \        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors.append(i)\n                factors.append(n / i)\n  \
    \              factors.append(factorization.length)\n                factors.append(primeFactorization.length)\n\
    \                factors.append(primes.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factors.length)\n\
    \                factors.append(factors.length)\n                factors.append(factor",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.List", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            val factorCount = factorization(i)\n            factors += factorCount\n\
    \        }\n        factors.toList", "        val factorization = factorization(n)\n\
    \        val factors = factorization.toList\n        factors.sortBy(-_)", "  \
    \      val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount2 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount3 = mutable.ListBuffer.empty[Long]\n        val factorizationCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount6 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount7 = mutable.ListBuffer.empty[Long]\n        val factorizationCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount9 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount10 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount11 = mutable.ListBuffer.empty[Long]\n        val factorizationCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount14 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount15 = mutable.ListBuffer.empty[Long]\n        val factorizationCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount17 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount18 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount19 = mutable.ListBuffer.empty[Long]\n        val factorizationCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount21 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount22 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount23 = mutable.ListBuffer.empty[Long]\n        val factorizationCount24\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount25 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount26 = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationCount27 = mutable.ListBuffer.empty[Long]\n        val factorizationCount28\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationCount29 = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationCount30 = ", "        val factorization = factorize(n).toList\n\
    \        val factorizationWithCount = factorization.map(f => (f, factorization.count(_\
    \ == f)))\n        factorizationWithCount.sortBy(_._2).reverse.map(f => f._1)",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while(i\
    \ <= n/i) {\n            if(n%i==0) {\n                factors += i\n        \
    \        n /= i\n            }\n            i += 1\n        }\n        if(n >\
    \ 1) {\n            factors += n\n        }\n        factors.toList", "      \
    \  val factorization = factorizations(n)\n        factorization.toList.sortBy(_._1).reverse",
  "        val factorization = mutable.ArrayBuffer.empty[Long]\n        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorization = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactors = mutable.ArrayBuffer.empty[Long]\n        val factorizations =\
    \ mutable.ArrayBuffer.empty[Long]\n        val factorizationCount = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCounts = mutable.ArrayBuffer.empty[Long]\n        val\
    \ factorizationCountSum = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizationCountSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSums = mutable.ArrayBuffer.empty[Long]\n  \
    \      val factorizationCountSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n \
    \       val factorizationCountSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val factorizationCountSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val ", "        val factorization = factorizations(n)\n        val factors\
    \ = factorization.toList\n        val factorsCount = factors.map(f => factors.count(f\
    \ == _)).toList\n        val factorsCount = factorsCount.map(f => f.toLong).toList\n\
    \        factorsCount.sortWith(_ < _)", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactor\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactors = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorsPrime = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorsPrimePrime = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isFactorization = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization", "  \
    \      val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorization\
    \ = mutable.ListBuffer[Long]()\n        val factorizations = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while(i <= n) {\n            val p = primeFactors.filter(_\
    \ % i == 0).length\n            if(p == 0) {\n                factors += i\n \
    \               factorizations += i\n                primes += i\n           \
    \ }\n            while(primeFactors.filter(_ % i == 0).length == 0) {\n      \
    \          primeFactors += i\n                factorizations += i\n          \
    \      factors += i\n                i += 1\n            }\n            i += 1\n\
    \        }\n        factorizations.toList", "        val factorization = factorizations(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization2 = mutable.ListBuffer[Long]()\n        val primeFactorization3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization5 = mutable.ListBuffer[Long]()\n        val primeFactorization6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization7 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization8 = mutable.ListBuffer[Long]()\n        val primeFactorization9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization10 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization11 = mutable.ListBuffer[Long]()\n        val primeFactorization12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization14 = mutable.ListBuffer[Long]()\n        val primeFactorization15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization17 = mutable.ListBuffer[Long]()\n        val primeFactorization18\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization19 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization20 = mutable.ListBuffer[Long]()\n        val primeFactorization21\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization22 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization23 = mutable.ListBuffer[Long]()\n        val primeFactorization24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization26 = mutable.ListBuffer[Long]()\n        val primeFactorization27\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization28 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization29 = mutable.ListBuffer[Long]()\n        val primeFactorization30\
    \ = mutable.ListBuffer[Long]()\n        val primeFactor", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        for(i <- 2 to Math.sqrt(n)) {\n      \
    \      val factor = (n / i).toInt\n            factors += factor\n        }\n\
    \        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOf = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n      \
    \  val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()",
  "        val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith(_ < _)", "        val factorization = factorization(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n).reverse\n        factorization foreach\
    \ { f =>\n            factors += f\n        }\n        factors.toList", "    \
    \    val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        factors.sortBy(_ * -1)", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount = mutable.ListBuffer[Long]()\n        val primeFactorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorization = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount2\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount3 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount4 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount5 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount6 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount9 = mutable.ListBuffer[Boolean]()\n    \
    \    val isPrimeFactorizationCount10 = mutable.ListBuffer[Boolean]()\n       \
    \ val isPrimeFactorizationCount11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount12 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount15 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount16 = mutable.ListBuffer[Boolean]()\n      \
    \  val isPrimeFactorizationCount17 = mutable.ListBuffer[Boolean]()\n        val\
    \ isPrimeFactorizationCount18 = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeFactorizationCount20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeFactorizationCount21 = mutable.ListBuffer[Boolean]()\n   \
    \     val isPrimeFactorizationCount22 = ", "        val factorization = factorizations(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factorization\
    \ = mutable.ArrayBuffer.empty[Long]\n        val factorizations = mutable.ArrayBuffer.empty[List[Long]]\n\
    \        val factorizationIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ factorizationIndexes = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexesCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val factorizationIndexesCounts = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMax = mutable.ArrayBuffer.empty[Int]\n \
    \       val factorizationIndexesCountMaxs = mutable.ArrayBuffer.empty[Int]\n \
    \       val factorizationIndexesCountMin = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationIndexesCountMins = mutable.ArrayBuffer.empty[Int]\n  \
    \      val factorizationIndexesCountMaxMin = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMins = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMaxMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxMaxMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxMaxMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMaxMaxMax = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMinMaxMaxMaxMaxs = mutable.ArrayBuffer.empty[Int]\n\
    \        val factorizationIndexesCountMaxMinMaxMaxMaxMax = mutable.ArrayBuffer.empty[Int",
  "        val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith(_ < _)", "        val factorization = factorizations(n)\n\
    \        factorization.map(f => f.toLong).distinct", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(f => factors.count(f == _))\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        factorsCount.sortWith(_ < _)", " \
    \       val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizations = mutable.ListBuffer.empty[Long]\n        val factorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer.empty[Long]\n        val factor", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors.toList", " \
    \       val factorization = mutable.ListBuffer[Long]()\n        val factors =\
    \ mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val primeFactorsCount\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount3 = mutable.ListBuffer[Long]()\n        val primeFactorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount6 = mutable.ListBuffer[Long]()\n        val primeFactorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount9 = mutable.ListBuffer[Long]()\n        val primeFactorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount12 = mutable.ListBuffer[Long]()\n        val primeFactorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount15 = mutable.ListBuffer[Long]()\n        val primeFactorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount18 = mutable.ListBuffer[Long]()\n        val primeFactorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount21 = mutable.ListBuffer[Long]()\n        val primeFactorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount24 = mutable.ListBuffer[Long]()\n        val primeFactorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorsCount27 = mutable.ListBuffer[Long]()\n        val primeFactorsCount28\
    \ = mutable.ListBuffer", "        val factorization = factorize(n).toList\n  \
    \      factorization.sortBy(-_)", "        val factorization = factorization(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n) \n        factorization foreach\
    \ { factor =>\n            factors += factor\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList", "        val factorization = factorization(n)\n\
    \        factorization.toList.sortBy(_._1).reverse", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            val f = factorization(i)\n            factors += f\n        }\n\
    \        factors.toList", "        val factorization = factorization(n)\n    \
    \    factorization.foldLeft(List[Long]())((acc, x) => acc :+ x)", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                factors += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        if\
    \ (n != 1) {\n            factors += n\n        }\n        factors.toList", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val primeFactorization\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount2 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount3 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount4\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount5 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount6 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount7 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount8\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount9 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount10 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount11 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount14 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount15 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount16\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount17 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount18 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount19 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount20\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount21 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount22 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount23 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationCount25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationCount26 = mutable.ListBuffer[Long]()\n        val\
    \ primeFactorizationCount27 = mutable.ListBuffer[Long]()\n        val primeFactorizationCount28\
    \ = mutable.List", "        val factors = mutable.ListBuffer[Long]()\n       \
    \ val factorization = factorize(n)\n        factorization.foreach { f =>\n   \
    \         factors += f\n        }\n        factors.toList", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n > 1)\
    \ {\n            factors += n\n        }\n        factors.toList", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                factors += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        if\
    \ (n > 1) {\n            factors += n\n        }\n        factors.toList", " \
    \       val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val factorizationPrimes = mutable.ListBuffer.empty[Long]\n        val\
    \ factorizationPrimeFactors = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount4\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount7\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount10\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount13\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount15\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount16\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount17\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount18\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount19\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount20\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizationPrimeFactorsCount21\
    \ = mutable.ListBuffer.empty[Long]\n        val factor", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factors = mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizationCount\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount2 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount3 = mutable.ListBuffer[Long]()\n        val factorizationCount4\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount5 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount6 = mutable.ListBuffer[Long]()\n        val factorizationCount7\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount8 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount9 = mutable.ListBuffer[Long]()\n        val factorizationCount10\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount11 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount12 = mutable.ListBuffer[Long]()\n        val factorizationCount13\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount14 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount15 = mutable.ListBuffer[Long]()\n        val factorizationCount16\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount17 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount18 = mutable.ListBuffer[Long]()\n        val factorizationCount19\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount20 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount21 = mutable.ListBuffer[Long]()\n        val factorizationCount22\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount23 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount24 = mutable.ListBuffer[Long]()\n        val factorizationCount25\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount26 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount27 = mutable.ListBuffer[Long]()\n        val factorizationCount28\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount29 = mutable.ListBuffer[Long]()\n\
    \        val factorizationCount30 = mutable.ListBuffer[Long]()\n        val factorizationCount",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isFactorization = mutable.ListBuffer.empty[Boolean]\n        val\
    \ isPrimeFactorization = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationPrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorizationFactorizationFactorizationFactorizationFactorizationFactorizationFactorization\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorization", "  \
    \      val factors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = factorization(n)\n        factorization.foreach { f =>\n            factors\
    \ += f\n        }\n        factors", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= Math.sqrt(n)) {\n            if (n % i\
    \ == 0) {\n                factors += i\n                n /= i\n            }\n\
    \            i += 1\n        }\n        if (n != 1) {\n            factors +=\
    \ n\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (factor <- factorization)\
    \ {\n            factors += factor\n        }\n        factors.toList", "    \
    \    val factors = mutable.ListBuffer[Long]()\n        val factorization = factorize(n)\n\
    \        for (factor <- factorization) {\n            factors += factor\n    \
    \    }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        factorization foreach {\
    \ f =>\n            factors += f\n        }\n        factors.toList", "      \
    \  val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).reverse\n\
    \        factorization foreach { f =>\n            factors += f\n        }\n \
    \       factors.toList", "        val factors = mutable.ListBuffer[Long]()\n \
    \       val factorization = factorization(n)\n        factorization foreach {\
    \ f =>\n            factors += f\n        }\n        factors.toList", "      \
    \  val factors = mutable.ListBuffer.empty[Long]\n        val primes = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = mutable.ListBuffer.empty[Long]\n        val factorizations = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.ListBuffer.empty[Long]\n        val primeFactorizations\
    \ = mutable.ListBuffer.empty[Long]\n        val primeFactorization = mutable.ListBuffer.empty[Long]\n\
    \        val primeFactorizations = mutable.ListBuffer.empty[Long]\n        val\
    \ primeFactorization = mutable.List", "        val factorization = factorization(n)\n\
    \        val factors = factorization.toList\n        val factorsCount = factors.map(n\
    \ => factors.count(f => f == n)).sum\n        factors.map(n => factors.count(f\
    \ => f == n) * n).toList ++ factorsCount.toList.map(n => n.toLong)", "       \
    \ val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(x => factors.count(y => y % x == 0))\n\
    \        factorsCount.sortBy(x => x).reverse", "        val factorization = factorize(n).map(_.toLong)\n\
    \        factorization.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n)\n        factorization.foreach(f =>\
    \ factors += f)\n        factors", "        val factorization = factorizations(n)\n\
    \        factorization.map(_.toLong).distinct", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factorization =\
    \ mutable.ListBuffer[Long]()\n        val primeFactorization = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization2 = mutable.ListBuffer[Long]()\n        val primeFactorization3\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization4 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization5 = mutable.ListBuffer[Long]()\n        val primeFactorization6\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization7 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization8 = mutable.ListBuffer[Long]()\n        val primeFactorization9\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization10 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization11 = mutable.ListBuffer[Long]()\n        val primeFactorization12\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization13 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization14 = mutable.ListBuffer[Long]()\n        val primeFactorization15\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization16 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization17 = mutable.ListBuffer[Long]()\n        val primeFactorization18\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization19 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization20 = mutable.ListBuffer[Long]()\n        val primeFactorization21\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization22 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization23 = mutable.ListBuffer[Long]()\n        val primeFactorization24\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization25 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization26 = mutable.ListBuffer[Long]()\n        val primeFactorization27\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorization28 = mutable.ListBuffer[Long]()\n\
    \        val primeFactorization29 = mutable.ListBuffer[Long]()\n        val primeFactorization30\
    \ = mutable.ListBuffer[Long]()\n        val primeFactor", "        val factors\
    \ = mutable.ListBuffer.empty[Long]\n        val factorization = factorization(n)\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factors = mutable.ListBuffer[Long]()\n        val factorization = factorization(n)\n\
    \        for (i <- factorization.indices) {\n            factors += factorization(i)\n\
    \        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorize(n)\n        factorization foreach { f =>\n\
    \            factors += f\n        }\n        factors.toList", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val factorization = factorization(n).toList\n\
    \        factorization.foreach(f => factors += f)\n        factors", "       \
    \ val factorization = factorization(n).toList\n        val factorizationList =\
    \ factorization.toList\n        factorizationList.sortBy(_._1).reverse", "   \
    \     val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                factors += i\n  \
    \              n /= i\n            }\n            i += 1\n        }\n        factors.toList",
  "        val factorization = factorization(n).toList\n        factorization.sortBy(_._1).reverse",
  "        val factorization = factorization(n);\n        val factors = factorization.toList;\n\
    \        val factorsCount = factors.map(f => factors.count(f == _)).toList;\n\
    \        val factorsCount = factorsCount.foldLeft(0)(_ + _);\n        factors.map(f\
    \ => factorsCount.count(f == _)).toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        factorization foreach {\
    \ f =>\n            factors += f\n        }\n        factors.toList", "      \
    \  val factorization = factorization(n)\n        val factors = factorization.toList\n\
    \        val factorsCount = factors.map(f => factors.count(_ == f))\n        val\
    \ factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n        val factorsCount\
    \ = factorsCount.map(f => f.toLong)\n        val factorsCount = factorsCount.map(f\
    \ => f.toLong)\n        val factorsCount = factorsCount.map(f => f.toLong)\n \
    \       val factorsCount = factorsCount.map(f => f.toLong)\n", "        val factorization\
    \ = factorization(n)\n        val factors = factorization.toList\n        val\
    \ factorsCount = factors.map(n => factors.count(_ == n))\n        factorsCount.map(n\
    \ => n * factors.count(_ == n).toLong).toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while(i <= n/i) {\n            val f = n/i\n     \
    \       if(f*f > n) break\n            factors += f\n            i += 1\n    \
    \    }\n        factors.toList", "        val factorization = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val factors = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimes = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n   \
    \     val factorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n    \
    \    val primeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizations = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimes = mutable.ListBuffer[Long]()\n\
    \        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactors = mutable.ListBuffer[Long]()\n\
    \        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactors\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPrimeFactorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationPrimeFactorizationPrimeFactorizationPrimeFactorizationPrimes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactorizationPrimeFactorizationPrimeFactorizationPri",
  "        val factors = mutable.ListBuffer.empty[Long]\n        val factorization\
    \ = factorization(n).reverse\n        for (i <- factorization) {\n           \
    \ factors += i\n        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val factorization = mutable.ListBuffer[Long]()\n        val factorizations\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCount = mutable.ListBuffer[Long]()\n\
    \        val factorizationCounts = mutable.ListBuffer[Long]()\n        val factorizationCountOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfs = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOf\
    \ = mutable.ListBuffer[Long]()\n        val factorizationCountOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOf = mutable.ListBuffer[Long]()\n    \
    \    val factorizationCountOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n       \
    \ val factorizationCountOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n        val\
    \ factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n      \
    \  val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOf = mutable.ListBuffer[Long]()\n\
    \        val factorizationCountOfsOfsOfsOfsOfsOfsOfs = mutable.ListBuffer[Long]()",
  "        val factorization = factorizations(n)\n        val factors = factorization.toList\n\
    \        factors.sortWith(_ < _)", "        val factorization = factorizations(n)\n\
    \        val factors = factorization.toList\n        val factorsCount = factors.map(f\
    \ => factors.count(f => f == f))\n        factorsCount.foldLeft(List[Long]())((acc,\
    \ f) => acc :+ f)", "        val factors = mutable.ListBuffer[Long]()\n      \
    \  val primes = mutable.ListBuffer[Long]()\n        val factorization = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                factors.append(i)\n                factors.append(n / i)\n  \
    \              factorization.append(i)\n                factorization.append(n\
    \ / i)\n                primes.append(i)\n            }\n            i += 1\n\
    \        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val factorization = factorization(n)\n        for (i <- factorization.indices)\
    \ {\n            val factor = factorization(i)\n            factors += factor\n\
    \        }\n        factors.toList", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.toList", "        val factors = mutable.ListBuffer.empty[Long]\n\
    \        val primes = mutable.ListBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ListBuffer.empty[Long]\n        val isPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactor = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactors\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrime = mutable.ListBuffer.empty[Boolean]\n  \
    \      val isPrimeFactorsPrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer.empty[Boolean]\n        val isPrimeFactorsPrimePrimePrimePrimePrimePrimePrimePrimePrimePri",
  "        val factorization = factorize(n).toList\n        val factors = factorization.map(n\
    \ => n.toLong)\n        val factorsCount = factorization.map(n => n.toLong).distinct\n\
    \        val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => n.toLong)\n \
    \       val factorsCount = factorsCount.map(n => n.toLong)\n        val factorsCount\
    \ = factorsCount.map(n => n.toLong)\n        val factorsCount = factorsCount.map(n\
    \ => n.toLong)\n        val factorsCount = factorsCount.map(n => "]
stop_tokens:
- "\n    }\n"
