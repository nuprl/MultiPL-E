name: HumanEval_121_solution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solution((List[Long](5l.toLong,\
  \ 8l.toLong, 7l.toLong, 1l.toLong))) == (12l));\n    assert(solution((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong))) == (9l));\n    assert(solution((List[Long](30l.toLong,\
  \ 13l.toLong, 24l.toLong, 321l.toLong))) == (0l));\n    assert(solution((List[Long](5l.toLong,\
  \ 9l.toLong))) == (5l));\n    assert(solution((List[Long](2l.toLong, 4l.toLong,\
  \ 8l.toLong))) == (0l));\n    assert(solution((List[Long](30l.toLong, 13l.toLong,\
  \ 23l.toLong, 32l.toLong))) == (23l));\n    assert(solution((List[Long](3l.toLong,\
  \ 13l.toLong, 2l.toLong, 9l.toLong))) == (3l));\n    }\n\n}\n"
completions: ["        val evens = lst.filter(x => x % 2 == 0)\n        val odds =\
    \ lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum\
    \ = odds.sum\n        evenSum + oddSum", "        val even = lst.filter(x => x\
    \ % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val result\
    \ = even.foldLeft(0l) { (sum, elem) => sum + elem }\n        odd.foldLeft(result)\
    \ { case (sum, elem) => sum + elem }", "        val evens = lst.filter(_ % 2 ==\
    \ 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        oddSum - evenSum", "        val even =\
    \ lst.filter(_ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = even.sum\n        val oddSum = odd.sum\n        evenSum + oddSum",
  "        val evens = lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x\
    \ => x % 2 != 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n\
    \        val result = evenSum + oddSum\n        result", "        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(x => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n\
    \        val evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum\
    \ = evenSum + oddSum\n        evenOddSum", "        val even = lst.filter(_ %\
    \ 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val evenOddSum =\
    \ evens.zip(odds).filter(_._1 % 2 == 0).map(_._2).sum\n        evenOddSum + evenSum\
    \ + oddSum", "        val evens = lst.filter(_ % 2 == 0).toList\n        val odds\
    \ = lst.filter(_ % 2 != 0).toList\n        val evenSum = evens.sum\n        val\
    \ oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(x\
    \ => x % 2 == 0)\n        val odds = lst.filter(x => x % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val evens = lst.filter(x => x % 2 == 0)\n\
    \        val odds = lst.filter(x => x % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum", "        val evens\
    \ = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n      \
    \  val evenSum = evens.sum\n        val oddSum = odds.sum\n        val result\
    \ = evenSum + oddSum\n        result", "        val even = lst.filter(_ % 2 ==\
    \ 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum", "        val evens =\
    \ lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val\
    \ evenSum = evens.sum\n        val oddSum = odds.sum\n        val result = evenSum\
    \ + oddSum\n        result", "        val evens = lst.filter(_ % 2 == 0)\n   \
    \     val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n   \
    \     val oddSum = odds.sum\n        evenSum + oddSum", "        val evens = lst.filter(_\
    \ % 2 == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum =\
    \ evens.sum\n        val oddSum = odds.sum\n        evenSum + oddSum", "     \
    \   val evens = lst.filter(_ % 2 == 0)\n        val odds = lst.filter(_ % 2 !=\
    \ 0)\n        val evenSum = evens.sum\n        val oddSum = odds.sum\n       \
    \ oddSum - evenSum", "        val even = lst.filter(_ % 2 == 0)\n        val odd\
    \ = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n        val oddSum\
    \ = odd.sum\n        evenSum + oddSum", "        val evens = lst.filter(_ % 2\
    \ == 0)\n        val odds = lst.filter(_ % 2 != 0)\n        val evenSum = evens.sum\n\
    \        val oddSum = odds.sum\n        evenSum + oddSum"]
stop_tokens:
- "\n    }\n"
