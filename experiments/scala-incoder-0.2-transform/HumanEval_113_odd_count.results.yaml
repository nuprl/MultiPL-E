language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9fi8_jx.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val num = x.toInt\n            if (num\
    \ % 2 == 0) {\n                even += x\n            } else {\n             \
    \   odd += x\n            }\n        })\n        (even.toList ++ odd.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltyiykuh.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpltyiykuh.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { x =>\n    \
    \        val digits = x.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    val odd = digits %\
    \ 2\n                    odds.add(odd)\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph64bcx23.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            for(i <- 0 until digits) odds += digits(i)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0rpra8k6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' | '1' | '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt -\
    \ '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp149qt4ir.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp149qt4ir.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val oddDigits = s.filter(_.isDigit).length\n            odds.+=( oddDigits\
    \ )\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb0s3xkk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.filter(x => x\
    \ match {\n                case x if x.isDigit => true\n                case _\
    \ => false\n            }).length\n            odds.+=(numOdds)\n        }\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm845s55.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val strLen = str.length\n\
    \            for(j <- 0 until strLen) {\n                if(str.charAt(j) == '1')\
    \ {\n                    oddCount += 1\n                }\n            }\n   \
    \         oddCountString = s\"the number of odd elements $oddCount of the $strLenth\
    \ element of the $i\"\n            oddCount += 1\n        }\n        oddCountString\
    \ :: oddCount(lst.size)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc1melyo.scala:23:76 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            oddCountString = \e[31ms\"the number of odd\
    \ elements \e[0m$oddCount\e[31m of the \e[0m$strLenth\e[31m element of the \e\
    [0m$i\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                               Not found: strLenth\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpxc1melyo.scala:26:26 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        oddCountString :: oddCount(lst.size)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  \e[33mvariable\e[0m \e[35moddCount\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' =>\
    \ odds += 1\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    case _ => break\n                })\n\
    \            }\n        }\n        odds match {\n            case Nil => Nil\n\
    \            case _ => lst.map(_.replaceAll(\"\\\\d\", \"\" + odds))\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wzfb5aw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6wzfb5aw.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6wzfb5aw.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m _ => break\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n            }\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyhq0xrcw.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyhq0xrcw.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_ % 2 !=\
    \ 0).size\n            odds.add(oddDigits)\n        }\n        odds.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkzxemtp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptq8sadnn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(s => {\n            val\
    \ oddDigits = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n  \
    \      })\n        odds.toList.map(s => s\"the number of odd elements ${s}n the\
    \ str${s}ng ${s}n the ${lst(0)}nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldtm9_e5.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j)\n \
    \                   case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' |\
    \ 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n                    case 'A'\
    \ | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += str.charAt(j)\n                    case '-' | '+' => odds += str.charAt(j)\n\
    \                    case '_' => odds += str.charAt(j)\n                    case\
    \ '/' => odds += str.charAt(j)\n                    case '\\\\' => odds += str.charAt(j)\n\
    \                    case '$' => odds += str.charAt(j)\n                    case\
    \ '@' => odds += str.charAt(j)\n                    case '!' => odds += str.charAt(j)\n\
    \                    case '#' => odds += str.charAt(j)\n                    case\
    \ '$' => odds += str.charAt(j)\n                    case '%' => odds += str.charAt(j)\n\
    \                    case '&' => odds += str.charAt(j)\n                    case\
    \ '*' => odds += str.charAt(j)\n                    case '(' | ')' | '+' | ','\
    \ | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>=' | '<=' | '!='\n           \
    \         => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' |\
    \ 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p'\
    \ | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C'\
    \ | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P'\
    \ | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '-' | '+' | '_'\
    \ | '\\\\' | '$' | '@' | '!' | '#' | '$' | '%' | '&' | '*' | '(' | ')' | '+' |\
    \ ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo57b0h7k.scala:33:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                 ^\e[0m\n\e[31m   |\e[0msymbol literal '>= is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \">=\" or an application Symbol(\">=\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{>=} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo57b0h7k.scala:33:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m\
    \ | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e\
    [31m'!=\e[0m'\n\e[31m\e[31m   |\e[0m                                         \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                              '=>' expected, but ' found\n\e\
    [31m\e[31m-- Error: /tmp/tmpo57b0h7k.scala:33:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           unclosed character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpo57b0h7k.scala:35:476 ----"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(c =>\
    \ c.isDigit)\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0tt_bmh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_zlmhd.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x !=\
    \ '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxz2kena0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) odds +=\
    \ (str.charAt(j).asDigit).asDigit\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoo3pym73.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val s = lst(i)\n            val odd = s.filter(x => x % 2 != 0).length\n\
    \            odds.add(odd)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4v7z5a1w.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOddDigits = str.count(_ == '1')\n\
    \            odds += numOddDigits\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpniz8ki37.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_t5vn_s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds -= 1\n                    case '8' => odds += 1\n                  \
    \  case '7' => odds += 1\n                    case '6' => odds += 1\n        \
    \            case '5' => odds += 1\n                    case '4' => odds += 1\n\
    \                    case '3' => odds += 1\n                    case '2' => odds\
    \ += 1\n                    case '1' => odds += 1\n                    case '0'\
    \ => odds += 1\n                    case '9' => odds += 1\n                  \
    \  case '8' => odds += 1\n                    case '7' => odds += 1\n        \
    \            case '6' => odds += 1\n                    case '5' => odds += 1\n\
    \                    case '4' => odds += 1\n                    case '3' => odds\
    \ += 1\n                    case '2' => odds += 1\n                    case '1'\
    \ => odds += 1\n                    case '0' => odds += 1\n                  \
    \  case '9' => odds += 1\n                    case '8' => odds += 1\n        \
    \            case '7' => odds += 1\n                    case '6' => odds += 1\n\
    \                    case '5' => odds += 1\n                    case '4' => odds\
    \ += 1\n                    case '3' => odds += 1\n                    case '2'\
    \ => odds += 1\n                    case '1' => odds += 1\n                  \
    \  case '0' => odds += 1\n                    case '9' => odds += 1\n        \
    \            case '8' => odds += 1\n                    case '7' => odds += 1\n\
    \                    case '6' => odds += 1\n                    case '5' => odds\
    \ += 1\n                    case '4' => odds += 1\n                    case '3'\
    \ => odds += 1\n                    case '2' => odds += 1\n                  \
    \  case '1' => odds += 1\n                    case '0' => odds += 1\n        \
    \            case '9' => odds += 1\n                    case '8' => odds += 1\n\
    \                    case '7' => odds += 1\n                    case '6' => odds\
    \ += 1\n                    case '5' => odds += 1\n                    case '4'\
    \ => odds += 1\n                    case '3' => odds += 1\n                  \
    \  case '2' => odds += 1\n                    case '1' => odds += 1\n        \
    \            case '0' => odds += 1\n                    case '9' => odds += 1\n\
    \                    case '8' => odds += 1\n                    case '7' => odds\
    \ += 1\n                    case '6' => odds += 1\n                    case '5'\
    \ => odds += 1\n                    case '4' => odds += 1\n                  \
    \  case '3' => odds += 1\n                    case '2' => odds += 1\n        \
    \            case '1' => odds += 1\n                    case '0' => odds += 1\n\
    \                    case '9' => odds += 1\n                    case '8' => odds\
    \ += 1\n                    case '7' => odds += 1\n                    case '6'\
    \ => odds += 1\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpztme3xb7.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpztme3xb7.scala:92:0 ----------------------------\e[0m\e[0m\n\e[31m92\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpztme3xb7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpztme3xb7.scala:91:0 -----------------\e\
    [0m\e[0m\n\e[33m89 |\e[0m    }\n\e[33m90 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = lst.map(x => x.filter(_.isDigit).map(_.toInt).sum % 2 == 1)\n   \
    \     odd.map(x => s\"the number of odd elements ${x}n the str${x}ng ${lst.count(x\
    \ => x.contains(x))}n the ${lst.count(x => x.contains(x))}nput.\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6z_2de2.scala:17)\n\tat Problem.main(tmpo6z_2de2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.+=(\
    \ odd )\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp73hk22ru.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            if\
    \ (odd != 0) odds.+= odd\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdxhu106r.scala:17:37 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (odd != \e[31m0\e[0m) odds.+=\
    \ odd\n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdxhu106r.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odd += str.substring(j,\
    \ j+1)\n                }\n            }\n        }\n        odd.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi31jqrsd.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val s = x.toInt\n            val odd = s % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptbefe934.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds.add(1)\n \
    \               }\n            }\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5w9zkw9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdlcwbjg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.isDigit() => x match {\n                case x if x.isDigit()\
    \ => x match {\n                    case x if x.isDigit() => x match {\n     \
    \                   case x if x.isDigit() => x match {\n                     \
    \       case x if x.isDigit() => x match {\n                                case\
    \ x if x.isDigit() => x match {\n                                    case x if\
    \ x.isDigit() => x match {\n                                        case x if\
    \ x.isDigit() => x match {\n                                            case x\
    \ if x.isDigit() => x match {\n                                              \
    \  case x if x.isDigit() => x match {\n                                      \
    \              case x if x.isDigit() => x match {\n                          \
    \                              case x if x.isDigit() => x match {\n          \
    \                                                  case x if x.isDigit() => x\
    \ match {\n                                                                case\
    \ x if x.isDigit() => x match {\n                                            \
    \                        case x if x.isDigit() => x match {\n                \
    \                                                        case x if x.isDigit()\
    \ => x match {\n                                                             \
    \               x match {\n                                                  \
    \                              case x if x.isDigit() => x match {\n          \
    \                                                                          x match\
    \ {\n                                                                        \
    \                case x if x.isDigit() => x match {\n                        \
    \                                                                    x match {\n\
    \                                                                            \
    \                    case x if x.isDigit() => x match {\n                    \
    \                                                                            \
    \    x match {\n                                                             \
    \                                           case x if x.isDigit() => x match {\n\
    \                                                                            \
    \                                x match {\n                                 \
    \                                                                            \
    \   case x if x.isDigit() => x match {\n                                     \
    \                                                                            \
    \   x match {\n                                                              \
    \                                                          case x if x.isDigit()\
    \ => x match {\n                                                             \
    \                                                               x match {\n  \
    \                                                                            \
    \                                                  case x if x.isDigit() => x\
    \ match {\n                                                                  \
    \                                                                  x match {\n\
    \                                                                            \
    \                                                            case x if x.isDigit()\
    \ => x match {\n                                                             \
    \                                                                            \
    \   x match {\n                                                              \
    \                                                                            \
    \      x match {\n                                                           \
    \                                                                            \
    \             x match {\n                                                    \
    \                                                                            \
    \                        x match {\n                                         \
    \                                                                            \
    \                                       x match {\n                          \
    \                                                                            \
    \                                                          x match {\n       \
    \                                                                            \
    \                                                                            \
    \     x match {\n                                                            \
    \                                                                            \
    \                                x match {\n                                 \
    \                                                                            \
    \                                                               x match {\n  \
    \                                                                            \
    \                                                                            \
    \                      x match {\n                                           \
    \                                                                            \
    \                                                             x match {\n    \
    \                                                                            \
    \                                                                            \
    \                            x match {\n                                     \
    \                                                                            \
    \                                                                           x\
    \ match {\n                                                                  \
    \                                                                            \
    \                                                  x match {\n               \
    \                                                                            \
    \                                                                            \
    \                             x match {\n                                    \
    \                                                                            \
    \                                                                            \
    \            x match {\n                                                     \
    \                                                                            \
    \                                                                           x\
    \ match {\n                                                                  \
    \                                                                            \
    \                                                                  x match {\n\
    \                                                                            \
    \                                                                            \
    \                                                            x match {\n     \
    \                                                                            \
    \                                                                            \
    \                                                           x match {\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpltt7v4zi.scala:31:76 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                                                    \
    \                        x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                   'case' expected, but identifier\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltt7v4zi.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpltt7v4zi.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit()\
    \ => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value isDigit is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltt7v4zi.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit()\
    \ => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value isDigit is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpltt7v4zi.scala:17:32\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                    \e[33mcase\e\
    [0m x \e[33mif\e[0m x.isDigit() => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \               value isDigit is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpltt7v4zi.scala:18:36 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                        \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit()\
    \ => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                             \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         "
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            digits.foreach(d => {\n           \
    \     if (d % 2 == 1)\n                    odds += d\n            })\n       \
    \ })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3txnq3x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd3txnq3x.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            digits.foreach(\e[36md\e[0m => {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ foreach is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '-' | '+' =>\
    \ odds.add(0)\n                    case _ => odds.add(0)\n                }\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopltw1md.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpopltw1md.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountList = new mutable.ListBuffer[String]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.filter(_.isDigit).length\n            val numOddElements\
    \ = numOddDigits / 2\n            oddCount += numOddElements\n            oddCountList\
    \ += s\"the number of odd elements $numOddElements of the $str\"\n        }\n\
    \        oddCountList.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt5flvtip.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36moddCountList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 1) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeswb4pf.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegugu23c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpegugu23c.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegugu23c.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpegugu23c.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ match\
    \ { case x if x.isDigit => true case _ => false })\n            odds.add(oddDigits.size)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllcpj32m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(str\
    \ + str.charAt(j))\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkctycvup.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => s.toIntList.foreach(n\
    \ => if (n % 2 != 0) odds += n))\n        (lst.map(s => s\"the number of odd elements\
    \ ${odds.size} the str$s ${s.toIntList.size} of the $sinput.\")) ::: odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf2u6t7o5.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpf2u6t7o5.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(\e[36ms\e[0m => s.toIntList.foreach(\e\
    [36mn\e[0m => \e[33mif\e[0m (n % \e[31m2\e[0m != \e[31m0\e[0m) odds += n))\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value toIntList is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.toCharArray.filter(x => x != '0').count(x => x % 2 != 0)\
    \ == 1) {\n                    odds.add(str.toCharArray.filter(x => x != '0').count(x\
    \ => x % 2 != 0))\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptsubg7qo.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str(j).isDigit) {\n                    odds += (str(j).toInt)\n\
    \                }\n            }\n        }\n        odds match {\n         \
    \   case Nil => Nil\n            case _ => (lst.size -> odds)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptmwga5ba.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptmwga5ba.scala:24:23 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m _ => (lst.size -> odds)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Found:    (Int, Nothing)\n\e[31m   |\e[0m          \
    \             Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odds.add(oddDigits)\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppsfbr6kg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        val even = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            if\
    \ (digits % 2 == 0) {\n                even += digits\n            } else {\n\
    \                odd += digits\n            }\n        })\n        val evenCount\
    \ = even.sum\n        val oddCount = odd.sum\n        odd.toList ::: even.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpug7hpi2r.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpug7hpi2r.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds += 1 // add\
    \ 1 to the odd counter\n                }\n            }\n        }\n        odds.toList.map(_.toString).mkString(\"\
    the number of odd elements \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8887kg1a.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqg6g5np.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.filter(_.isDigit).length\n\
    \            odd.clear()\n            for(j <- 0 until numOddDigits) {\n     \
    \           val digit = str.charAt(j)\n                val index = digit.toInt\n\
    \                odd.add(index)\n            }\n            lst(i) = odd.length.toString\n\
    \        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpirylvgrt.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpirylvgrt.scala:23:12 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            lst(i) = odd.length.toString\n\e[31m\e[31m   |\e\
    [0m            ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String]\
    \ - did you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            val odd = n % 2 == 1\n            if (odd)\
    \ odds += n\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0rcxaid.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j)\n   \
    \                 case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'\
    \ | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w'\
    \ | 'x' | 'y' | 'z' => odds += str.charAt(j)\n                    case 'A' | 'B'\
    \ | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O'\
    \ | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds +=\
    \ str.charAt(j)\n                    case _ => odds += 0\n                })\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9wffxjx_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9wffxjx_.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' => odds\
    \ += str.charAt(j).toInt\n                    case 'a' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u' | 'E'\
    \ | 't' | 'e' | 'i\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj1540eds.scala:43:223 ----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'B'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'C'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'D'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'E'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                                            \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0msymbol literal 'i is no longer supported,\n\e[31m   |\e[0muse a\
    \ string literal \"i\" or an application Symbol(\"i\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{i} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1540eds.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1540eds.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1540eds.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj1540eds.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j)\n \
    \                   case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' |\
    \ 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n                    case 'A'\
    \ | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += str.charAt(j)\n                    case '@' => odds += str.charAt(j)\n  \
    \                  case '!' => odds += str.charAt(j)\n                    case\
    \ '?' => odds += str.charAt(j)\n                    case '#' => odds += str.charAt(j)\n\
    \                    case '$' => odds += str.charAt(j)\n                    case\
    \ '%' => odds += str.charAt(j)\n                    case '^' => odds += str.charAt(j)\n\
    \                    case '&' => odds += str.charAt(j)\n                    case\
    \ '*' => odds += str.charAt(j)\n                    case '(' | ')' | '+' | '-'\
    \ | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/'\
    \ | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*'\
    \ | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+'\
    \ | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-'\
    \ | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/'\
    \ | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*'\
    \ | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+'\
    \ | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-' | '/' | '*' | '+' | '-'\
    \ | '/' | '*' | '+' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0jidfq90.scala:30:691 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m'*'\e[0m | \e[31m'+'\e\
    [0m | '\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                  "
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnn8ycr3m.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnn8ycr3m.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnn8ycr3m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpnn8ycr3m.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) isDigit)\n                    odds += (str.charAt(j).toInt.toLong\
    \ % 2).toInt\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfs9k2y3r.scala:17:40 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfs9k2y3r.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case 'a' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ => odds += str.charAt(j).toInt\n                    case 'b' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'E' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e' | 'i' | 'o' | 'u' => odds\
    \ += str.charAt(j).toInt\n                    case 'c' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'C' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e' | 'i' | 'o' | 'u' | 'E'\
    \ | 't' | 'e' | 'i' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfj9t5ytx.scala:43:229 ----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'c'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'B'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'C'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'D'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'E'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | '\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfj9t5ytx.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpfj9t5ytx.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfj9t5ytx.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfj9t5ytx.scala:44:4\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \    ^\e[0m\n\e[31m   |\e[0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8mg48k66.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5rrqjev2.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5rrqjev2.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                '0' => odds += 0\n                '1' => odds += 1\n\
    \                '2' => odds += 2\n                '3' => odds += 3\n        \
    \        '4' => odds += 4\n                '5' => odds += 5\n                '6'\
    \ => odds += 6\n                '7' => odds += 7\n                '8' => odds\
    \ += 8\n                '9' => odds += 9\n                case _ => odds += 0\n\
    \            })\n        }\n        odds match {\n            case Nil => Nil\n\
    \            case x :: y => List(\"the number of odd elements \" + x + \" the\
    \ str\" + y + \" of the \" + y + \" input.\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5pifwx5e.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[31m'0'\e[0m => odds += \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                'case'\
    \ expected, but character literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5pifwx5e.scala:29:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        'then' expected, but '}' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pifwx5e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp5pifwx5e.scala:27:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e[0m _ => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m  \
    \ |\e[0m          Values of types Null and Char cannot be compared with == or\
    \ !=\n\e[31m28 |\e[0m            })\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pifwx5e.scala:32:64\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mcase\e\
    [0m x :: y => List(\e[31m\"the number of odd elements \"\e[0m + x + \e[31m\" the\
    \ str\"\e[0m + y + \e[31m\" of the \"\e[0m + y + \e[31m\" input.\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                ^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \   Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pifwx5e.scala:32:81\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mcase\e\
    [0m x :: y => List(\e[31m\"the number of odd elements \"\e[0m + x + \e[31m\" the\
    \ str\"\e[0m + y + \e[31m\" of the \"\e[0m + y + \e[31m\" input.\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                              "
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str(j).isDigit) {\n                    odds += (str(j).asDigit)\n\
    \                }\n            }\n        }\n        odds.toList.map(x => s\"\
    the number of odd elements $x of the $x string.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3qsspev_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.+=((numOdds * 2) + (if (numOdds == 0) 0 else 1))\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxtmgcbu3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(x => {\n            val\
    \ y = x.toInt\n            for(i <- 0 until y) odds += i\n        })\n       \
    \ val result = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = x.toInt\n            val\
    \ z = odds(y)\n            if(z > 0) result += s\"the number of odd elements $zn\
    \ the str$zn of the $ynput.\"\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8jmt19v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8jmt19v.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case '-' => odds\
    \ += (str.charAt(j).toInt)\n                    case '_' => odds += (str.charAt(j).toInt)\n\
    \                    case '/' => odds += (str.charAt(j).toInt)\n             \
    \       case '\\\\' => odds += (str.charAt(j).toInt)\n                    case\
    \ '$' => odds += (str.charAt(j).toInt)\n                    case '@' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '!' => odds += (str.charAt(j).toInt)\n\
    \                    case '%' => odds += (str.charAt(j).toInt)\n             \
    \       case '&' => odds += (str.charAt(j).toInt)\n                    case '*'\
    \ => odds += (str.charAt(j).toInt)\n                    case '(' | ')' | '+' |\
    \ ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>=' | '<='\n              \
    \      case '[' | ']' | '+' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' |\
    \ '>=' | '<='\n                    case '{' | '}' | '+' | ',' | '.' | '/' | ':'\
    \ | ';' | '<' | '>' | '=' | '>=' | '<='\n                    case '|' | '^' |\
    \ '~' | '?' | ':' | ';' | '<' | '>' | '=' | '>=' | '<='\n                    case\
    \ '~' => odds += (str.charAt(j).toInt)\n                    case '?' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '-' => odds += (str.charAt(j).toInt)\n\
    \                    case '_' => odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp882f50i.scala:31:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m'\n\e[31m\e[31m   |\e[0m               \
    \                                                                            ^\e\
    [0m\n\e[31m   |\e[0msymbol literal '>= is no longer supported,\n\e[31m   |\e[0muse\
    \ a string literal \">=\" or an application Symbol(\">=\") instead,\n\e[31m  \
    \ |\e[0mor enclose in braces '{>=} if you want a quoted expression.\n\e[31m  \
    \ |\e[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\
    \e[31m   |\e[0mthe idiom, but this possibility might no longer be available in\
    \ the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp882f50i.scala:31:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m\
    \ | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m'\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                             '=>' expected, but ' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpp882f50i.scala:31:101 ----------------------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m | \e[31m')'\e\
    [0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m'>=\e\
    [0m' | \e[31m'<=\e[0m'\n\e[31m\e[31m   |\e[0m                                \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpp882f50i.scala:32:101 ----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val numOdds = x.filter(_ >= '0' && _ <='9').count(_ % 2 == 1)\n     \
    \       odds.+=numOdds\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1d7r7y_o.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            odds.+=numOdds\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1d7r7y_o.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp1d7r7y_o.scala:15:35 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = x.filter(_\
    \ >= \e[31m'0'\e[0m && _ <=\e[31m'9'\e[0m).count(_ % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n3 errors found\n"
  stdout: ''
  timestamp: 1659979862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds -= 1\n                case _ => ()\n            })\n        }\n       \
    \ lst.map((x) => x + \" the number of odd elements \" + odds(x) + \" of the \"\
    \ + x + \".\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwdf1rqv7.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpwdf1rqv7.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwdf1rqv7.scala:19:26 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m _ => ()\n\e[31m\e[31m   |\e\
    [0m                          ^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Unit\n\e[31m   |\e[0m                          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5rrqjev2.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5rrqjev2.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x !=\
    \ '0').count(x => x % 2 == 1)\n            odds.add(oddDigits)\n        }\n  \
    \      odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rwl3n_w.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdlcwbjg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' => odds +=\
    \ 0\n                    case '1' => odds += 1\n                    case '2' =>\
    \ odds += 2\n                    case '3' => odds += 3\n                    case\
    \ '4' => odds += 4\n                    case '5' => odds += 5\n              \
    \      case '6' => odds += 6\n                    case '7' => odds += 7\n    \
    \                case '8' => odds += 8\n                    case '9' => odds +=\
    \ 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'o' | 'n' | 's'\
    \ | 'd' | '.' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds\
    \ += 0\n                    case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | '.'\
    \ | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n \
    \                   case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | '.' | '0' |\
    \ '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n         \
    \           case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | '.' | '0' | '1' | '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                   \
    \ case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | '.' | '0' | '1' | '2' | '3' |\
    \ '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'o' | 'n' | 's' | 'd' | '.' | '0' | '1' | '2' | '3' | '4\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk0xw_alx.scala:46:97 -----------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m's'\e\
    [0m | \e[31m'd'\e[0m | \e[31m'.'\e[0m | \e[31m'0'\e[0m | \e[31m'1'\e[0m | \e[31m'2'\e\
    [0m | \e[31m'3'\e[0m | '4\n\e[31m\e[31m   |\e[0m                             \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk0xw_alx.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but identifier found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmpk0xw_alx.scala:55:0 ----------------------------\e[0m\e[0m\n\e\
    [31m55 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0xw_alx.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpk0xw_alx.scala:47:4 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpk0xw_alx.scala:54:0 -----------------\e\
    [0m\e[0m\n\e[33m52 |\e[0m    }\n\e[33m53 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n5 errors"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_zlmhd.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odds.add(oddDigits)\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphihatz_0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37o333j7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdd = str.count(_ == '1')\n            val numEven = str.count(_ ==\
    \ '0')\n            if(numOdd > numEven) {\n                odd += str\n     \
    \       } else {\n                even += str\n            }\n        }\n    \
    \    (odd, even)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3owfbtfh.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3owfbtfh.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3owfbtfh.scala:25:8 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        (odd, even)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nothing, Nothing)\n\e[31m   |\e[0m    \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.isDigit) {\n                    val n = str.charAt(j).toInt\n\
    \                    if(n % 2 == 1) {\n                        odd += n\n    \
    \                }\n                }\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkeduodbf.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkeduodbf.scala:17:23 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.isDigit) {\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \    value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds += 0\n                case _ => odds += 0\n            })\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi_k7zg5j.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpi_k7zg5j.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkl4uuoto.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length\n            odds.add(odd)\n        }\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6czs816s.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.+=(\
    \ odd )\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp73hk22ru.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzyj7r_m.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfzyj7r_m.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzyj7r_m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpfzyj7r_m.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if((digits % 2) == 1) {\n                    odds.push(i)\n           \
    \     }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuruk_ei8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmu0xw0e6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x % 2 != 0)\n            odds.addAll(oddDigits.size)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hvz0rfj.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ %\
    \ 2 == 1).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpll_3ivvg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegugu23c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpegugu23c.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegugu23c.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpegugu23c.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt\
    \ == 0) odds += 0 else {\n            val y = x.toString.toInt\n            odds\
    \ += y % 2\n        })\n        odds.toList.map(x => s\"the number of odd elements\
    \ $x of the $x input.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphn9xb_7j.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt\
    \ == x) odds += 1)\n        odds.toList.map(x => s\"the number of odd elements\
    \ ${x}n the str${x}ng ${x}.\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvzzs1by.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpuvzzs1by.scala:14:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x.toString.toInt\
    \ == x) odds += \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int and\
    \ String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxkmn61e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds += numOdds\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5z0febpt.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '-' => odds.add(0)\n\
    \                    case '_' => odds.add(0)\n                    case '-' =>\
    \ odds.add(0)\n                    case '_' => odds.add(0)\n                 \
    \   case '-' => odds.add(0)\n                    case '_' => odds.add(0)\n   \
    \                 case '-' => odds.add(0)\n                    case '_' => odds.add(0)\n\
    \                    case '-' => odds.add(0)\n                    case '_' =>\
    \ odds.add(0)\n                    case '-' => odds.add(0)\n                 \
    \   case '_' => odds.add(0)\n                    case '-' => odds.add(0)\n   \
    \                 case '_' => odds.add(0)\n                    case '-' => odds.add(0)\n\
    \                    case '_' => odds.add(0)\n                    case '-' =>\
    \ odds.add(0)\n                    case '_' => odds.add(0)\n                 \
    \   case '-' => odds.add(0)\n                    case '_' => odds.add(0)\n   \
    \                 case '-' => odds.add(0)\n                    case '_' => odds.add(0)\n\
    \                    case '-' => odds.add(0)\n                    case '_' =>\
    \ odds.add(0)\n                    case '-' => odds.add(0)\n                 \
    \   case '_' => odds.add(0)\n                    case '-' => odds.add(0)\n   \
    \                 case '_' => odds.add(0)\n                    case '-' => odds.add(0)\n\
    \                    case '_' => odds.add(0)\n                    case '-' =>\
    \ odds.add(0)\n                    case '_' => odds.add(0)\n                 \
    \   case '-' => odds.add(0)\n                    case '_' => odds.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_ra1ihi.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpv_ra1ihi.scala:56:4 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv_ra1ihi.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpv_ra1ihi.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpv_ra1ihi.scala:62:0 -----------------\e\
    [0m\e[0m\n\e[33m60 |\e[0m    }\n\e[33m61 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '*' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '!' =>\
    \ odds.add(0)\n                    case '-' => odds.add(0)\n                 \
    \   case '+' => odds.add(0)\n                    case '/' => odds.add(0)\n   \
    \                 case '|' => odds.add(0)\n                    case '&' => odds.add(0)\n\
    \                    case '^' => odds.add(0)\n                    case '~' =>\
    \ odds.add(0)\n                    case '$' => odds.add(0)\n                 \
    \   case '%' => odds.add(0)\n                    case '@' => odds.add(0)\n   \
    \                 case '{' => odds.add(0)\n                    case '}' => odds.add(0)\n\
    \                    case '[' | ']' => odds.add(0)\n                    case '('\
    \ | ')' => odds.add(0)\n                    case '<' | '>' | '>=' | '<='| '<='\
    \ | '==' | '!=' | '<>' | '<=' | '=' | '==' | '!=' | '<>' | '<' | '>=' | '<=' |\
    \ '=' | '==' | '!=' | '<>' | '<' | '>=' | '<=' | '=' | '==' | '!=' | '<>' | '<'\
    \ | '>=' | '<=' | '=' | '==' | '!=' | '<>' | '<' | '>=' | '<=' | '=' | '==' |\
    \ '!=' | '<>' | '<' | '>=' | '<=' | '=' | '==' | '!=' | '<>' | '<' | '>=' | '<='\
    \ | '=' | '==' | '!=' | '<>' | '<' | '>=' | '<=' | '=' | '==' | '!=' | '<>' |\
    \ '<' | '>=' | '<=' | '=' | '==\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp16ozoa3m.scala:38:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<='|\e[0m \e[31m'<=\e[0m' | \e[31m'==\e\
    [0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m |\
    \ \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e[31m'>=\e\
    [0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e[0m' | \e[31m'!=\e[0m' |\
    \ \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e\
    [0m | \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e\
    [31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e[0m' | \e[31m'!=\e\
    [0m' | \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' |\
    \ \e[31m'='\e[0m | \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<'\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e[0m' | \e\
    [31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e\
    [0m' | \e[31m'='\e[0m | \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' |\
    \ \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e\
    [0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e[31m'<'\e[0m | \e[31m'>=\e[0m' |\
    \ \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                                  ^\e[0m\n\e[31m   |\e[0msymbol literal '>= is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \">=\" or an application\
    \ Symbol(\">=\") instead,\n\e[31m   |\e[0mor enclose in braces '{>=} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16ozoa3m.scala:38:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<='|\e\
    [0m \e[31m'<=\e[0m' | \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e[0m' | \e\
    [31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'==\e[0m' | \e[31m'!=\e[0m' | \e[31m'<>\e\
    [0m' | \e[31m'<'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdd = str.count(_ == '1')\n\
    \            odd.append((numOdd * \"the number of odd elements \" + str + \" of\
    \ the \" + str + \".\"))\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgppgd6ff.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8swgj9bk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case '8' => odd.add(8)\n                    case '7' => odd.add(7)\n\
    \                    case '6' => odd.add(6)\n                    case '5' => odd.add(5)\n\
    \                    case '4' => odd.add(4)\n                    case '3' => odd.add(3)\n\
    \                    case '2' => odd.add(2)\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case '8' => odd.add(8)\n                    case '7' => odd.add(7)\n\
    \                    case '6' => odd.add(6)\n                    case '5' => odd.add(5)\n\
    \                    case '4' => odd.add(4)\n                    case '3' => odd.add(3)\n\
    \                    case '2' => odd.add(2)\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case '8' => odd.add(8)\n                    case '7' => odd.add(7)\n\
    \                    case '6' => odd.add(6)\n                    case '5' => odd.add(5)\n\
    \                    case '4' => odd.add(4)\n                    case '3' => odd.add(3)\n\
    \                    case '2' => odd.add(2)\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case '8' => odd.add(8)\n                    case '7' => odd.add(7)\n\
    \                    case '6' => odd.add(6)\n                    case '5' => odd.add(5)\n\
    \                    case '4' => odd.add(4)\n                    case '3' => odd.add(3)\n\
    \                    case '2' => odd.add(2)\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.add(0)\n                    case '9' => odd.add(9)\n\
    \                    case '8' => odd.add(8)\n                    case '7' => odd.add(7)\n\
    \                    case '6' => odd.add(6)\n                    case '5' => odd.add(5)\n\
    \                    case '4' => odd.add(4)\n                    case '3' => odd.add(3)\n\
    \                    case '2' => odd.add(2)\n                    case '1' => odd.add(1)\n\
    \                    case '0' => odd.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdvdjduyb.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdvdjduyb.scala:71:4 ----------------------------\e[0m\e[0m\n\e[31m71\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdvdjduyb.scala:78:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpdvdjduyb.scala:13:18 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmpdvdjduyb.scala:77:0 -----------------\e[0m\e\
    [0m\n\e[33m75 |\e[0m    }\n\e[33m76 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e[0m\n\
    \e[33m   |\e[0mA pure expression does nothing in statement position; you may be\
    \ omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val n = x.toInt\n            for(i <- 0 until n) odds += n%2\n        })\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbnkyj3n1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n      \
    \              case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n       \
    \             case '.' => odds += (str.charAt(j).toInt - 'a').toInt\n        \
    \            case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n         \
    \           case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n          \
    \          case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n           \
    \         case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n            \
    \        case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n             \
    \       case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n              \
    \      case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n               \
    \     case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n                \
    \    case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n                 \
    \   case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n                  \
    \  case '-' => odds += (str.charAt(j).toInt - 'a').toInt\n                   \
    \ case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n                    case\
    \ '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzynf7czz.scala:36:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mcase\e[0m '\n\e[31m\e[31m \
    \  |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                    \
    \     unclosed character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzynf7czz.scala:38:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpzynf7czz.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzynf7czz.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzynf7czz.scala:37:4\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \    ^\e[0m\n\e[31m   |\e[0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpzynf7czz.scala:44:0\
    \ -----------------\e[0m\e[0m\n\e[33m42 |\e[0m    }\n\e[33m43 |\e[0m}\n\e[33m\e\
    [33m   |\e[0m     ^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j)\n                    case 'a' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += str.charAt(j)\n \
    \                   case 'b' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e' |\
    \ 'i' | 'o' | 'u' => odds += str.charAt(j)\n                    case 'c' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'C' | 't' | 'e' | 'i' | 'o' | 'u' => odds += str.charAt(j)\n\
    \                    case 'd' | 't' | 'e' | 'i' | 'o' | 'u' | 'D' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' => odds += str.charAt(j)\n                    case 'e' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'E' | 't' | 'e' | 'i' | 'o' | 'u' => odds += str.charAt(j)\n\
    \                    case 'f' | 't' | 'e' | 'i' | 'o' | 'u' | 'F' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' => odds += str.charAt(j)\n                    case 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += str.charAt(j)\n\
    \                    case 'B' | 't' | 'e' | 'i' | 'o' | 'u' | 'B' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' => odds += str.charAt(j)\n                    case 'C\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt3izq3p8.scala:49:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                    \e[33mcase\e[0m \e[31m'C\e[0m\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ 'C is no longer supported,\n\e[31m   |\e[0muse a string literal \"C\" or an\
    \ application Symbol(\"C\") instead,\n\e[31m   |\e[0mor enclose in braces '{C}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpt3izq3p8.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt3izq3p8.scala:51:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpt3izq3p8.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3izq3p8.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt3izq3p8.scala:49:27\
    \ --------------------\e[0m\e[0m\n\e[31m49 |\e[0m                    \e[33mcase\e\
    [0m \e[31m'C\e[0m\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e\
    [31m   |\e[0m                           Found:    Unit\n\e[31m   |\e[0m      \
    \                     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- [E129]\
    \ Potential Issue"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '!' | '@' |\
    \ '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '+' | '-' | '.' | '/' | '='\
    \ | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>'\
    \ | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/'\
    \ | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<'\
    \ | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.'\
    \ | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';'\
    \ | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ','\
    \ | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':'\
    \ | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?'\
    \ | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '='\
    \ | ':' | ';' | '<' | '>' | '?' | ',' | '.' | '/' | '=' | ':' | ';' | '<' | '>'\
    \ | '?' | ',' | '.' | '/' | '=' | ':\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi4re22im.scala:21:925 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e\
    [0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e\
    [0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e\
    [0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e\
    [0m | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e\
    [0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m','\e[0m | \e[31m'.'\e\
    [0m | \e[31m'/'\e[0m | \e[31m'='\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(c => c % 2\
    \ == 1)\n            odds.add(numOdds)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8eqgdlj0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.+=(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jszrqoz.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j).asDigit) match {\n                case 0 => 1\n          \
    \      case 1 => 0\n                case _ => 1\n            }\n        }\n  \
    \      odds match {\n            case Nil => Nil\n            case x :: xs =>\
    \ s\"the number of odd elements ${x} of the $xs string.\"\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9scn8zjd.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9scn8zjd.scala:24:59 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => \e[31ms\"the number\
    \ of odd elements \e[0m${x}\e[31m of the \e[0m$xs\e[31m string.\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                           ^\e[0m\n\
    \e[31m   |\e[0m                                                           Not\
    \ found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9scn8zjd.scala:24:70\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e\
    [0m x :: xs => \e[31ms\"the number of odd elements \e[0m${x}\e[31m of the \e[0m$xs\e\
    [31m string.\"\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \                                   ^^\e[0m\n\e[31m   |\e[0m                 \
    \                                          Not found: xs\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j).toInt % 2 == 1)\n        }\n        odds.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa235oulr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.matches(\"\\\\d\") => x match {\n                case\
    \ x if x.matches(\"\\\\d\") => x match {\n                    case x if x.matches(\"\
    \\\\d\") => x match {\n                        case x if x.matches(\"\\\\d\")\
    \ => x match {\n                            case x if x.matches(\"\\\\d\") =>\
    \ x match {\n                                case x if x.matches(\"\\\\d\") =>\
    \ x match {\n                                    case x if x.matches(\"\\\\d\"\
    ) => x match {\n                                        case x if x.matches(\"\
    \\\\d\") => x match {\n                                            case x if x.matches(\"\
    \\\\d\") => x match {\n                                                case x\
    \ if x.matches(\"\\\\d\") => x match {\n                                     \
    \               case x if x.matches(\"\\\\d\") => x match {\n                \
    \                                        case x if x.matches(\"\\\\d\") => x match\
    \ {\n                                                            case x if x.matches(\"\
    \\\\d\") => x match {\n                                                      \
    \          case x if x.matches(\"\\\\d\") => x match {\n                     \
    \                                               case x if x.matches(\"\\\\d\"\
    ) => x match {\n                                                             \
    \           case x if x.matches(\"\\\\d\") => x match {\n                    \
    \                                                        case x if x.matches(\"\
    \\\\d\") => x match {\n                                                      \
    \                          case x if x.matches(\"\\\\d\") => x match {\n     \
    \                                                                            \
    \   case x if x.matches(\"\\\\d\") => x match {\n                            \
    \                                                            case x if x.matches(\"\
    \\\\d\") => x match {\n                                                      \
    \                                      case x if x.matches(\"\\\\d\") => x match\
    \ {\n                                                                        \
    \                        case x if x.matches(\"\\\\d\") => x match {\n       \
    \                                                                            \
    \                 case x if x.matches(\"\\\\d\") => x match {\n              \
    \                                                                            \
    \              case x if x.matches(\"\\\\d\") => x match {\n                 \
    \                                                                            \
    \               case x if x.matches(\"\\\\d\") => x match {\n                \
    \                                                                            \
    \                    case x if x.matches(\"\\\\d\") => x match {\n           \
    \                                                                            \
    \                             case x if x.matches(\"\\\\d\") => x match {\n  \
    \                                                                            \
    \                                          case x if x.matches(\"\\\\d\") => x\
    \ match {\n                                                                  \
    \                                                          case x if x.matches(\"\
    \\\\d\") => x match {\n                                                      \
    \                                                                          case\
    \ x if x.matches(\"\\\\d\") => x match {\n                                   \
    \                                                                            \
    \                     case x if x.matches(\"\\\\d\") => x match {\n          \
    \                                                                            \
    \                                                  case x if x.matches(\"\\\\\
    d\") => x match {\n                                                          \
    \                                                                            \
    \      case x if x.matches(\"\\\\d\") => x match {\n                         \
    \                                                                            \
    \                                           case x if x.matches(\"\\\\d\") =>\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0ahyq_5.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0ahyq_5.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc0ahyq_5.scala:14:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(\e[36mx\e\
    [0m => x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        Found:    Unit\n\e[31m   |\e[0m        Required: List[String]\n\e[31m15\
    \ |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e\
    [0m) => x \e[33mmatch\e[0m {\n\e[31m16 |\e[0m                \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e[33mmatch\e[0m {\n\e[31m17\
    \ |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\
    \\\\d\"\e[0m) => x \e[33mmatch\e[0m {\n\e[31m18 |\e[0m                       \
    \ \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e[33mmatch\e\
    [0m {\n\e[31m19 |\e[0m                            \e[33mcase\e[0m x \e[33mif\e\
    [0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e[33mmatch\e[0m {\n\e[31m20 |\e[0m \
    \                               \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\
    \\\\d\"\e[0m) => x \e[33mmatch\e[0m {\n\e[31m21 |\e[0m                       \
    \             \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m)\
    \ => x \e[33mmatch\e[0m {\n\e[31m22 |\e[0m                                   \
    \     \e[33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e\
    [33mmatch\e[0m {\n\e[31m23 |\e[0m                                            \e\
    [33mcase\e[0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e[33mmatch\e\
    [0m {\n\e[31m24 |\e[0m                                                \e[33mcase\e\
    [0m x \e[33mif\e[0m x.matches(\e[31m\"\\\\d\"\e[0m) => x \e[33mmatch\e[0m {\n\e\
    [31m25 |\e[0m                  "
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.length){\n\
    \            val s = lst(i)\n            for(j <- 0 until s.length){\n       \
    \         if(s(j).isDigit){\n                    odds += s(j).asDigit.toInt\n\
    \                }\n            }\n        }\n        val odd_count = odds.toList\n\
    \        odd_count.map(x=>s\"the number of odd elements ${x} of the $x string.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcm52e37d.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds += (oddDigits % 2)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa95ggsqb.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfovlbt4a.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdlcwbjg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n            }\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9fsw7pm1.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case '-' | '+' |\
    \ '.' => odds += (str.charAt(j).toInt)\n                    case '_' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '~' => odds += (str.charAt(j).toInt)\n\
    \                    case '?' => odds += (str.charAt(j).toInt)\n             \
    \       case '!' => odds += (str.charAt(j).toInt)\n                    case '@'\
    \ => odds += (str.charAt(j).toInt)\n                    case '#' => odds += (str.charAt(j).toInt)\n\
    \                    case '$' => odds += (str.charAt(j).toInt)\n             \
    \       case '%' => odds += (str.charAt(j).toInt)\n                    case '^'\
    \ => odds += (str.charAt(j).toInt)\n                    case '&' => odds += (str.charAt(j).toInt)\n\
    \                    case '*' => odds += (str.charAt(j).toInt)\n             \
    \       case '(' | ')' => odds += (str.charAt(j).toInt)\n                    case\
    \ '_' => odds += (str.charAt(j).toInt)\n                    case '+' => odds +=\
    \ (str.charAt(j).toInt)\n                    case '-' => odds += (str.charAt(j).toInt)\n\
    \                    case '=' => odds += (str.charAt(j).toInt)\n             \
    \       case '|' => odds += (str.charAt(j).toInt)\n                    case '{'\
    \ | '}' => odds += (str.charAt(j).toInt)\n                    case '[' | ']' =>\
    \ odds += (str.charAt(j).toInt)\n                    case '<' | '>' | '>=' | '<='\n\
    \                    \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwegyvm6c.scala:41:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m'\n\e[31m\e[31m   |\e[0m  \
    \                                   ^\e[0m\n\e[31m   |\e[0msymbol literal '>=\
    \ is no longer supported,\n\e[31m   |\e[0muse a string literal \">=\" or an application\
    \ Symbol(\">=\") instead,\n\e[31m   |\e[0mor enclose in braces '{>=} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwegyvm6c.scala:41:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e\
    [0m'\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                        '=>' expected, but ' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpwegyvm6c.scala:41:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m'\n\e[31m\e[31m   |\e[0m  \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                      unclosed character literal\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpwegyvm6c.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwegyvm6c.scala:51:0 ----------------------------\e[0m\e[0m\n\e[31m51\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwegyvm6c.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(c =>\
    \ c % 2 != 0)\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppp645hry.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '1'\
    \ | '0' => odds += 2\n                    case '1' | '0' | '1' => odds += 3\n\
    \                    case '1' | '0' | '1' | '0' => odds += 4\n               \
    \     case '1' | '0' | '1' | '0' | '1' => odds += 5\n                    case\
    \ '1' | '0' | '1' | '0' | '1' | '0' => odds += 6\n                    case '1'\
    \ | '0' | '1' | '0' | '1' | '0' | '1' => odds += 7\n                    case '1'\
    \ | '0' | '1' | '0' | '1' | '0' | '1' | '0' => odds += 8\n                   \
    \ case '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1' => odds += 9\n    \
    \                case '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0'\
    \ => odds += 10\n                    case '1' | '0' | '1' | '0' | '1' | '0' |\
    \ '1' | '0' | '1' | '0' | '1' => odds += 11\n                    case '1' | '0'\
    \ | '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' => odds += 12\n\
    \                    case '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1'\
    \ | '0' | '1' | '0' | '1' => odds += 13\n                    case '1' | '0' |\
    \ '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0' => odds\
    \ += 14\n                    case '1' | '0' | '1' | '0' | '1' | '0' | '1' | '0'\
    \ | '1' | '0' | '1' | '0' | '1' | '0' | '1' => odds += 15\n                  \
    \  case '1' | '0' | '1' | '0' | '1' | '0' | '1' | \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpojzao6w6.scala:34:66 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    \e[33mcase\e[0m \e[31m'1'\e[0m |\
    \ \e[31m'0'\e[0m | \e[31m'1'\e[0m | \e[31m'0'\e[0m | \e[31m'1'\e[0m | \e[31m'0'\e\
    [0m | \e[31m'1'\e[0m | \n\e[31m\e[31m   |\e[0m                               \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                      pattern expected\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpojzao6w6.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpojzao6w6.scala:43:0 ----------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojzao6w6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpojzao6w6.scala:35:4 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpojzao6w6.scala:42:0 -----------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    }\n\e[33m41 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(_ ==\
    \ '1')\n            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37o333j7.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_zlmhd.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case _\
    \ => throw new Exception(\"Invalid input\")\n                })\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjfpymxci.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjfpymxci.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds += numOdds\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fopjmci.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            for(i <- 0 until digits) {\n      \
    \          if(digits % 2 == 1) {\n                    odds += digits\n       \
    \         }\n            }\n        })\n        odds match {\n            case\
    \ Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu62e1s08.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpu62e1s08.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu62e1s08.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val c = str.charAt(j)\n                if(c >= '0' && c <= '9')\
    \ {\n                    odds += (str.charAt(j) - '0').toInt\n               \
    \ }\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpie4tapm2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' => odds\
    \ += 0\n                    case '1' => odds += 1\n                    case '2'\
    \ => odds += 2\n                    case '3' => odds += 3\n                  \
    \  case '4' => odds += 4\n                    case '5' => odds += 5\n        \
    \            case '6' => odds += 6\n                    case '7' => odds += 7\n\
    \                    case '8' => odds += 8\n                    case '9' => odds\
    \ += 9\n                    case 'a' => odds += 10\n                    case 'b'\
    \ => odds += 11\n                    case 'c' => odds += 12\n                \
    \    case 'd' => odds += 13\n                    case 'e' => odds += 14\n    \
    \                case 'f' => odds += 15\n                    case 'A' => odds\
    \ += 10\n                    case 'B' => odds += 11\n                    case\
    \ 'C' => odds += 12\n                    case 'D' => odds += 13\n            \
    \        case 'E' => odds += 14\n                    case 'F' => odds += 15\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 0\n                    case 'a' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o'\
    \ | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u'\
    \ | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't'\
    \ | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | '\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptgxgw9me.scala:41:805 ----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e\
    [0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e[0m | \e[31m't'\e\
    [0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'A'\e\
    [0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) odds +=\
    \ (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0f43oy0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds -= 1\n                case _ => ()\n            })\n        }\n       \
    \ lst.map(x => s\"the number of odd elements ${odds.length} the str$x of the $x\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjtwythpc.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpjtwythpc.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpjtwythpc.scala:19:26 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m _ => ()\n\e[31m\e[31m   |\e\
    [0m                          ^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Unit\n\e[31m   |\e[0m                          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds.add(1)\n \
    \               }\n            }\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5w9zkw9.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').filter(x => x != '1').length\n            odds.add(oddDigits)\n  \
    \      }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpewqeztz0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(x => {\n            val\
    \ digits = x.toInt\n            for(i <- 0 until digits) odds += digits(i)\n \
    \       })\n        lst.map(x => s\"the number of odd elements ${odds.size} the\
    \ str${x.toInt} ${x.toInt}.\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_kuyvv_k.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    val odd = digits %\
    \ 2\n                    odds.+= odd\n                }\n            }\n     \
    \   })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp42kqkx4r.scala:20:31 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    odds.+= odd\n\e[31m\e[31m   |\e[0m\
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp42kqkx4r.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odd(j)\
    \ += 1\n                    case '0' => odd(j) += 1\n                    case\
    \ '9' => odd(j) += 1\n                    case '8' => odd(j) += 1\n          \
    \          case '7' => odd(j) += 1\n                    case '6' => odd(j) +=\
    \ 1\n                    case '5' => odd(j) += 1\n                    case '4'\
    \ => odd(j) += 1\n                    case '3' => odd(j) += 1\n              \
    \      case '2' => odd(j) += 1\n                    case '1' => odd(j) += 1\n\
    \                    case '0' => odd(j) += 1\n                    case '9' =>\
    \ odd(j) += 1\n                    case '8' => odd(j) += 1\n                 \
    \   case '7' => odd(j) += 1\n                    case '6' => odd(j) += 1\n   \
    \                 case '5' => odd(j) += 1\n                    case '4' => odd(j)\
    \ += 1\n                    case '3' => odd(j) += 1\n                    case\
    \ '2' => odd(j) += 1\n                    case '1' => odd(j) += 1\n          \
    \          case '0' => odd(j) += 1\n                    case '9' => odd(j) +=\
    \ 1\n                    case '8' => odd(j) += 1\n                    case '7'\
    \ => odd(j) += 1\n                    case '6' => odd(j) += 1\n              \
    \      case '5' => odd(j) += 1\n                    case '4' => odd(j) += 1\n\
    \                    case '3' => odd(j) += 1\n                    case '2' =>\
    \ odd(j) += 1\n                    case '1' => odd(j) += 1\n                 \
    \   case '0' => odd(j) += 1\n                    case '9' => odd(j) += 1\n   \
    \                 case '8' => odd(j) += 1\n                    case '7' => odd(j)\
    \ += 1\n                    case '6' => odd(j) += 1\n                    case\
    \ '5' => odd(j) += 1\n                    case '4' => odd(j) += 1\n          \
    \          case '3' => odd(j) += 1\n                    case '2' => odd(j) +=\
    \ 1\n                    case '1' => odd(j) += 1\n                    case '0'\
    \ => odd(j) += 1\n                    case '9' => odd(j) += 1\n              \
    \      case '8' => odd(j) += 1\n                    case '7' => odd(j) += 1\n\
    \                    case '6' => odd(j) += 1\n                    case '5' =>\
    \ od\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvc7b6211.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpvc7b6211.scala:73:0 ----------------------------\e[0m\e[0m\n\e[31m73\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvc7b6211.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvc7b6211.scala:64:32 ------------------------\e[0m\e\
    [0m\n\e[31m64 |\e[0m                    \e[33mcase\e[0m \e[31m'5'\e[0m => od\n\
    \e[31m\e[31m   |\e[0m                                ^^\e[0m\n\e[31m   |\e[0m\
    \                                Not found: od\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpvc7b6211.scala:72:0 -----------------\e\
    [0m\e[0m\n\e[33m70 |\e[0m    }\n\e[33m71 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    odds += digits\n \
    \               }\n            }\n        })\n        odds match {\n         \
    \   case Nil => Nil\n            case _ => lst.map(s => s\"the number of odd elements\
    \ ${odds.length} the str${ s.toInt } of the ${ s.toInt }nput.\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkg_uea3.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val y = x.toInt\n            val z = y % 2\n            odds.add(z)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxw818zon.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            n match {\n                case 0 => ()\n\
    \                case 1 => ()\n                case _ => {\n                 \
    \   for (i <- 0 until n) {\n                        if (s.charAt(i) == '1') {\n\
    \                            odds.add(1)\n                        }\n        \
    \            }\n                }\n            }\n        })\n        odds.toList.map(s\
    \ => s\"the number of odd elements $s in the input.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvd6nb_g0.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val c = str.charAt(j)\n                if(c >= '0' && c <= '9')\
    \ {\n                    odds += (str.charAt(j) - '0').toInt\n               \
    \ }\n            }\n        }\n        val res = lst.map((x) => s\"the number\
    \ of odd elements ${odds(x)} the str$x of the $x\")\n        res.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq49ha0hc.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            val odd = n % 2 == 1\n            if (odd)\
    \ odds += n\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0rcxaid.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 0) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList.map(x => s\"the number\
    \ of odd elements $x of the $x input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd8s8lgbe.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            for(i <- 0 until digits) {\n          \
    \      if(digits % 2 == 1) {\n                    odds.add(digits)\n         \
    \       }\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeswb4pf.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnn8ycr3m.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnn8ycr3m.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnn8ycr3m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpnn8ycr3m.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => {\n        \
    \    val digits = x.toInt\n            digits match {\n                case 0\
    \ => ()\n                case _ => {\n                    for (i <- 0 until digits)\
    \ odds += digits%2\n                }\n            }\n        })\n        lst.map(x\
    \ => s\"the number of odd elements ${odds.size} the str$x of the $x\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_fnm4ko.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val oddDigits = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2imnedvr.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            \
    \    else {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0qbvmwn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x match\
    \ {\n                case x if x.isDigit() => true\n                case _ =>\
    \ false\n            }).length\n            odds.add(oddDigits)\n        }\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18a24tww.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp18a24tww.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit()\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35misDigit\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds += numOdds\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fopjmci.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odd += 1 // increment\
    \ odd counter\n                }\n            }\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypq4phz.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ match\
    \ {\n                case c if c.isDigit() => true\n                case _ =>\
    \ false\n            }).length\n            odds.add(oddDigits)\n        }\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph469av0i.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmph469av0i.scala:17:28 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m c \e[33mif\e[0m c.isDigit()\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               \e[33mmethod\e[0m \e[35misDigit\e[0m in \e\
    [33mclass\e[0m \e[35mRichChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '-' | '+' =>\
    \ odds.add(0)\n                    case '_' => odds.add(0)\n                 \
    \   case '*' => odds.add(0)\n                    case '/' => odds.add(0)\n   \
    \                 case '%' => odds.add(0)\n                    case '^' => odds.add(0)\n\
    \                    case '$' => odds.add(0)\n                    case '&' =>\
    \ odds.add(0)\n                    case '|' => odds.add(0)\n                 \
    \   case '~' => odds.add(0)\n                    case '?' => odds.add(0)\n   \
    \                 case '<' => odds.add(0)\n                    case '>' => odds.add(0)\n\
    \                    case '=' => odds.add(0)\n                    case '!' =>\
    \ odds.add(0)\n                    case '?' => odds.add(0)\n                 \
    \   case '!' => odds.add(0)\n                    case '?' => odds.add(0)\n   \
    \                 case '?' => odds.add(0)\n                    case '?' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '?' =>\
    \ odds.add(0)\n                    case '?' => odds.add(0)\n                 \
    \   case '?' => odds.add(0)\n                    case '?' => odds.add(0)\n   \
    \                 case '?' => odds.add(0)\n                    case '?' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '?' =>\
    \ odds.add(0)\n                    case '?' => odds.add(0)\n                 \
    \   case '?' => odds.add(0)\n                    case '?' => odds.add(0)\n   \
    \                 case '?' => odds.add(0)\n                    case '?' => \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpigo8nx9n.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpigo8nx9n.scala:63:0 ----------------------------\e[0m\e[0m\n\e[31m63\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigo8nx9n.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpigo8nx9n.scala:54:29 --------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                    \e[33mcase\e[0m \e[31m'?'\e[0m =>\
    \ \n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpigo8nx9n.scala:62:0 -----------------\e[0m\e[0m\n\e[33m60 |\e\
    [0m    }\n\e[33m61 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            val odd = digits % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqdlcwbjg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ match {\n                case '1' => odds += 1\n                case '0' =>\
    \ odds -= 1\n                case _ => ()\n            })\n        }\n       \
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2e65exft.scala:21:8 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp2e65exft.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2e65exft.scala:19:26 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m _ => ()\n\e[31m\e[31m   |\e\
    [0m                          ^^\e[0m\n\e[31m   |\e[0m                        \
    \  Found:    Unit\n\e[31m   |\e[0m                          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length filter (_ % 2 != 0)\n            odds.add(odd.length)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbgrv47in.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbgrv47in.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        val even = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            digits\
    \ match {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match {\n                case 0 => even.clear()\n\
    \                case _ => even.clear()\n                case 1 => odd.clear()\n\
    \                case _ => odd.clear()\n            }\n            digits match\
    \ {\n                case 0 => even.clear()\n                case _ => even.clear()\n\
    \                case 1 => odd.clear()\n                case _ => odd.clear()\n\
    \            }\n            digits match \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa2iaw4h8.scala:96:4 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '{' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpa2iaw4h8.scala:97:4\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m97 |\e[0m    \e\
    [33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    end of statement\
    \ expected but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa2iaw4h8.scala:104:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m104 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m')' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa2iaw4h8.scala:13:18 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa2iaw4h8.scala:14:19 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) isDigit)\n                    odds += (str.charAt(j).toInt.asInstanceOf[Int])\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0k02n2op.scala:17:40 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.charAt(j) isDigit)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0k02n2op.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x !=\
    \ '0').count(x => x % 2 == 1)\n            odds.add(oddDigits)\n        }\n  \
    \      odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rwl3n_w.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => x match {\n\
    \            case x if x.matches(\"\\\\d+\") => odds.add(x.toInt)\n          \
    \  case _ => ()\n        })\n        odds.toList.map(x => s\"the number of odd\
    \ elements $x of the $x input.\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqjthkcp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += (str.length\
    \ - j)\n                }\n            }\n        }\n        odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4e2e9qa8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.HashSet[Int]()\n        for(i <- 0 until lst.length)\
    \ odd += lst(i).count(x => x % 2 != 0)\n        odd.toList.map(x => s\"the number\
    \ of odd elements $x of the $x string.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprehyynu2.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '*' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '!' =>\
    \ odds.add(0)\n                    case '-' => odds.add(0)\n                 \
    \   case '+' => odds.add(0)\n                    case '/' => odds.add(0)\n   \
    \                 case '|' => odds.add(0)\n                    case '&' => odds.add(0)\n\
    \                    case '^' => odds.add(0)\n                    case '~' =>\
    \ odds.add(0)\n                    case '$' => odds.add(0)\n                 \
    \   case '@' => odds.add(0)\n                    case '%' => odds.add(0)\n   \
    \                 case '^' => odds.add(0)\n                    case '&' => odds.add(0)\n\
    \                    case '*' => odds.add(0)\n                    case '?' =>\
    \ odds.add(0)\n                    case '!' => odds.add(0)\n                 \
    \   case '-' => odds.add(0)\n                    case '+' => odds.add(0)\n   \
    \                 case '/' => odds.add(0)\n                    case '|' => odds.add(0)\n\
    \                    case '&' => odds.add(0)\n                    case '^' =>\
    \ odds.add(0)\n                    case '~' => odds.add(0)\n                 \
    \   case '$' => odds.add(0)\n                    case '@' => odds.add(0)\n   \
    \                 case '%' => odds.add(0)\n                    case '^' => odds.add(0)\n\
    \                    case '&' => odds.add(0)\n                    case '*' =>\
    \ odds.add(0)\n                    case '?' => odds.add(0)\n                 \
    \   case '!' => odds.add(0)\n                    case '-' => odds.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wz3rl7h.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1wz3rl7h.scala:56:4 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wz3rl7h.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1wz3rl7h.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp1wz3rl7h.scala:62:0 -----------------\e\
    [0m\e[0m\n\e[33m60 |\e[0m    }\n\e[33m61 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(x => x match\
    \ {\n                case x if x.isDigit => true\n                case _ => false\n\
    \            }).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzmzi_1xn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val c = str.charAt(j)\n                if(c == '1') {\n     \
    \               odds.add(1)\n                } else {\n                    odds.add(0)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppt4j22_6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val odd = digits.length filter (x => x % 2 != 0)\n            odds.addAll(odd)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph647dz3d.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmph647dz3d.scala:17:36 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(c => c.isDigit).filter(_\
    \ % 2 == 1).length\n            odds.+=numOdds\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8cyt8idg.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            odds.+=numOdds\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8cyt8idg.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8cyt8idg.scala:16:52 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = str.count(\e\
    [36mc\e[0m => c.isDigit).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value filter is not a member of Int\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x != '0').count(x => x != '1')\n            odds.add(oddDigits)\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxkmn61e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val c = str.charAt(j)\n                if(c.isDigit) {\n    \
    \                val n = c.toInt\n                    if(n % 2 == 1) {\n     \
    \                   odds.push(n)\n                    }\n                }\n \
    \           }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpowhg0rjn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val len = str.length\n            for(j <- 0 until len) {\n             \
    \   if(str.charAt(j) == '1') {\n                    odd += str\n             \
    \   }\n                if(str.charAt(j) == '0') {\n                    even +=\
    \ str\n                }\n            }\n        }\n        (odd, even)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpthluq18b.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpthluq18b.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpthluq18b.scala:27:8 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        (odd, even)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nothing, Nothing)\n\e[31m   |\e[0m    \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds.add(str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds.add(str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds.add(str.charAt(j).toInt)\n                    case '*' => odds.add(0)\n\
    \                    case '?' => odds.add(0)\n                    case '!' =>\
    \ odds.add(0)\n                    case '-' => odds.add(0)\n                 \
    \   case '+' => odds.add(0)\n                    case '#' => odds.add(0)\n   \
    \                 case '$' => odds.add(0)\n                    case '%' => odds.add(0)\n\
    \                    case '&' => odds.add(0)\n                    case '@' =>\
    \ odds.add(0)\n                    case '^' => odds.add(0)\n                 \
    \   case '/' => odds.add(0)\n                    case '|' => odds.add(0)\n   \
    \                 case '~' => odds.add(0)\n                    case '`' => odds.add(0)\n\
    \                    case '{' => odds.add(0)\n                    case '}' =>\
    \ odds.add(0)\n                    case '[' | ']' => odds.add(0)\n           \
    \         case '(' | ')' => odds.add(0)\n                    case '<' | '>' |\
    \ '>=' | '<=' | '=' | '<>' | '!=' | '==' | '<=>' | '!='\n                    case\
    \ '*=' | '+=' | '-=' | '/=' | '%=' | '&=' | '@=' | '^=' | '|=' | '~=' | '`=' |\
    \ '{=' | '}=' | '[=' | ']=' | '<=>' | '!=' | '==' | '<='\n                   \
    \ case '*' | '=' | '-' | '/' | '%' | '&' | '@' | '^' | '|' | '~' | '`' | '{' |\
    \ '}' | '[' | ']' | '<=>' | '!='\n                    case '*' | '=' | '-' | '/'\
    \ | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6gp4v9tp.scala:40:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'<>\e\
    [0m' | \e[31m'!=\e[0m' | \e[31m'==\e[0m' | \e[31m'<=>\e[0m' | \e[31m'!=\e[0m'\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0msymbol literal '>= is no longer supported,\n\e[31m   |\e[0muse a string literal\
    \ \">=\" or an application Symbol(\">=\") instead,\n\e[31m   |\e[0mor enclose\
    \ in braces '{>=} if you want a quoted expression.\n\e[31m   |\e[0mFor now, you\
    \ can also `import language.deprecated.symbolLiterals` to accept\n\e[31m   |\e\
    [0mthe idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6gp4v9tp.scala:40:40 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'<>\e\
    [0m' | \e[31m'!=\e[0m' | \e[31m'==\e[0m' | \e[31m'<=>\e[0m' | \e[31m'!=\e[0m'\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        '=>' expected, but ' found\n\e\
    [31m\e[31m-- Error: /tmp/tmp6gp4v9tp.scala:40:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                    \e[33mcase\e[0m \e[31m'<'\e[0m |\
    \ \e[31m'>'\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'='\e[0m | \e[31m'<>\e\
    [0m' | \e[31m'!=\e[0m' | \e[31m'==\e[0m' | \e[31m'<=>\e[0m' | \e[31m'!=\e[0m'\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                          unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmp6gp4v9tp.scala:41:95\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m41 |\e[0m       \
    \             \e[33mcase\e[0m \e[31m'*=\e[0m' | \e[31m'+=\e[0m' | \e[31m'-=\e\
    [0m' | \e[31m'/=\e[0m' | \e[31m'%=\e[0m' | \e[31m'&=\e[0m' | \e[31m'@=\e[0m' |\
    \ \e[31m'^=\e[0m' | \e[31m'|=\e[0m' | \e[31m'~=\e[0m' | '`=' | '{=' | '}=' | '[='\
    \ | ']=' | \e[31m'<=>\e["
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case '-' | '+' => odds += (str.charAt(j).toInt - '0').toInt\n\
    \                    case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n \
    \                   case '-' | '+' => odds += (str.charAt(j).toInt - 'A').toInt\n\
    \                    case '_' => odds += (str.charAt(j).toInt - '0').toInt\n \
    \                   case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n  \
    \                  case '_' => odds += (str.charAt(j).toInt - 'A').toInt\n   \
    \                 case '_' => odds += (str.charAt(j).toInt - '0').toInt\n    \
    \                case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n     \
    \               case '_' => odds += (str.charAt(j).toInt - 'A').toInt\n      \
    \              case '_' => odds += (str.charAt(j).toInt - '0').toInt\n       \
    \             case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n        \
    \            case '_' => odds += (str.charAt(j).toInt - 'A').toInt\n         \
    \           case '_' => odds += (str.charAt(j).toInt - '0').toInt\n          \
    \          case '_' => odds += (str.charAt(j).toInt - 'a').toInt\n           \
    \         case '_' => odds += (str.charAt(j).toInt - 'A').toInt\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9z5tmvz.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpp9z5tmvz.scala:44:0 ----------------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9z5tmvz.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpp9z5tmvz.scala:43:0 -----------------\e\
    [0m\e[0m\n\e[33m41 |\e[0m    }\n\e[33m42 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddDigits = 0\n        var oddString = \"\"\n\
    \        var oddStrings: List[String] = Nil\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val strLen = str.length\n     \
    \       for (j <- 0 until strLen) {\n                if (str.charAt(j) == '1')\
    \ {\n                    oddDigits += 1\n                }\n            }\n  \
    \          oddCount += oddDigits\n            oddDigits = 0\n            oddString\
    \ = \"\"\n            oddStrings = Nil\n        }\n        oddCount += oddDigits\n\
    \        oddStrings = oddStrings ::: List(s\"the number of odd elements $oddCount\
    \ of the $oddCount string.\")\n        oddStrings\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj7y1u26s.scala:35)\n\tat Problem.main(tmpj7y1u26s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdd = str.count(_ == '1')\n            val numEven = str.count(_ ==\
    \ '0')\n            odd += s\"the number of odd elements $numOdd of the str$numOdd\
    \ of the $i\"\n            even += s\"the number of even elements $numEven of\
    \ the str$numEven of the $i\"\n        }\n        (odd, even)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsajhdzxb.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsajhdzxb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsajhdzxb.scala:22:8 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        (odd, even)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nothing, Nothing)\n\e[31m   |\e[0m    \
    \    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        var oddCountString2\
    \ = \"\"\n        var oddCountString3 = \"\"\n        var oddCountString4 = \"\
    \"\n        var oddCountString5 = \"\"\n        var oddCountString6 = \"\"\n \
    \       var oddCountString7 = \"\"\n        var oddCountString8 = \"\"\n     \
    \   var oddCountString9 = \"\"\n        var oddCountString10 = \"\"\n        var\
    \ oddCountString11 = \"\"\n        var oddCountString12 = \"\"\n        var oddCountString13\
    \ = \"\"\n        var oddCountString14 = \"\"\n        var oddCountString15 =\
    \ \"\"\n        var oddCountString16 = \"\"\n        var oddCountString17 = \"\
    \"\n        var oddCountString18 = \"\"\n        var oddCountString19 = \"\"\n\
    \        var oddCountString20 = \"\"\n        var oddCountString21 = \"\"\n  \
    \      var oddCountString22 = \"\"\n        var oddCountString23 = \"\"\n    \
    \    var oddCountString24 = \"\"\n        var oddCountString25 = \"\"\n      \
    \  var oddCountString26 = \"\"\n        var oddCountString27 = \"\"\n        var\
    \ oddCountString28 = \"\"\n        var oddCountString29 = \"\"\n        var oddCountString30\
    \ = \"\"\n        var oddCountString31 = \"\"\n        var oddCountString32 =\
    \ \"\"\n        var oddCountString33 = \"\"\n        var oddCountString34 = \"\
    \"\n        var oddCountString35 = \"\"\n        var oddCountString36 = \"\"\n\
    \        var oddCountString37 = \"\"\n        var oddCountString38 = \"\"\n  \
    \      var oddCountString39 = \"\"\n        var oddCountString40 = \"\"\n    \
    \    var oddCountString41 = \"\"\n        var oddCountString42 = \"\"\n      \
    \  var oddCountString43 = \"\"\n        var oddCountString44 = \"\"\n        var\
    \ oddCountString45 = \"\"\n        var oddCountString46 = \"\"\n        var oddCountString47\
    \ = \"\"\n        var oddCountString48 = \"\"\n        var oddCountString49 =\
    \ \"\"\n        var oddCountString50 = \"\"\n        var oddCountString51 = \"\
    \"\n        var oddCountString52 = \"\"\n        var oddCountString53 = \"\"\n\
    \        var oddCountString54 = \"\"\n        var oddCountString55 = \"\"\n  \
    \      var oddCountString56 = \"\"\n        var oddCountString57 = \"\"\n    \
    \    var oddCountString58 = \"\"\n        var oddCountString59 = \"\"\n      \
    \  var oddCountString60 = \"\"\n        var oddCountString61 = \"\"\n        var\
    \ oddCountString62 = \"\"\n        var oddCountString63 = \"\"\n        var oddCountString64\
    \ = \"\"\n        var oddCountString65 = \"\"\n        var oddCountString66 =\
    \ \"\"\n        var oddCountString67 = \"\"\n        var oddCountString68 = \"\
    \"\n        var oddCountString69 = \"\"\n        var oddCountString70 = \"\"\n\
    \        var oddCountString7\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5rrqjev2.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5rrqjev2.scala:85:5 ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val digits = str.filter(_.isDigit)\n\
    \            val oddDigits = digits.filter(_.isOdd)\n            odds.add(oddDigits.size)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpps7z7fjv.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpps7z7fjv.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddDigits\e[0m = digits.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value isOdd is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpffqvdl8a.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpffqvdl8a.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffqvdl8a.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpffqvdl8a.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979892
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case _ =>\
    \ odds += 100000000\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp30lx4xcj.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp30lx4xcj.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979891
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val n = s.toInt\n            for(i <- 0 until n) odds += (n % 2 == 1)\n\
    \        })\n        odds match {\n            case Nil => Nil\n            case\
    \ _ => lst.map(s => s\"the number of odd elements ${odds.length} the str$s ${odds.length}\
    \ of the $s\").mkString(\", \")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaks6hdm2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaks6hdm2.scala:20:124 -------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m _ => lst.map(s => \e[31ms\"\
    the number of odd elements \e[0m${odds.length}\e[31m the str\e[0m$s\e[31m \e[0m${odds.length}\e\
    [31m of the \e[0m$s\e[31m\"\e[0m).mkString(\e[31m\", \"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOddDigits = str.count(c\
    \ => c.isDigit)\n            val numOddElements = str.count(c => c.isDigit).filterNot(c\
    \ => c.isDigit).length\n            odd.append((numOddElements.toString + \" \"\
    \ + numOddDigits.toString + \" \" + str))\n        }\n        odd.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj2mgkhuv.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj2mgkhuv.scala:17:59\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnumOddElements\e[0m = str.count(\e[36mc\e[0m => c.isDigit).filterNot(\e\
    [36mc\e[0m => c.isDigit).length\n\e[31m\e[31m   |\e[0m                       \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                        value filterNot is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.toChar(j).isDigit) {\n                    odds += (str.toChar(j).asDigit).asInstanceOf[Int]\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdwcnwgd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpdwcnwgd2.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.toChar(j).isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              val c = str.charAt(j)\n                if(c.isDigit) {\n      \
    \              val n = c.toInt\n                    if(n % 2 == 1) {\n       \
    \                 odds.push(n)\n                    }\n                }\n   \
    \         }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprd2o6ht_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) == '1') {\n                    odds.add(1)\n \
    \               } else {\n                    odds.add(0)\n                }\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwp85cj4i.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n            odds.add(oddDigits)\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppsfbr6kg.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt)\n\
    \                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'\
    \ | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt)\n                 \
    \   case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'\
    \ | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'\
    \ | 'Z' => odds += (str.charAt(j).toInt)\n                    case _ => odds +=\
    \ (str.charAt(j).toInt)\n                }\n            }\n        }\n       \
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiy55x1b2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpiy55x1b2.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val count = str.count(c => c %\
    \ 2 == 1)\n            odd += s\"the number of odd elements $count of the $str\
    \ string.\"\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhfgjgcw.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3zihwvtm.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        for(i <- 0 until lst.size) {\n            val str\
    \ = lst(i)\n            val numOddDigits = str.filter(_.isDigit).length\n    \
    \        oddCount += numOddDigits\n        }\n        val result = new ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOddDigits = str.filter(_.isDigit).length\n            val oddDigitCount\
    \ = numOddDigits - oddCount\n            result.append((s\"the number of odd elements\
    \ $oddDigitCount $str\"))\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8l602d1_.scala:29)\n\tat Problem.main(tmp8l602d1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 10\n                    case '8' => odds -= 10\n                \
    \    case '7' => odds += 100\n                    case '6' => odds -= 100\n  \
    \                  case '5' => odds += 1000\n                    case '4' => odds\
    \ -= 1000\n                    case '3' => odds += 10000\n                   \
    \ case '2' => odds -= 10000\n                    case '1' => odds += 100000\n\
    \                    case '0' => odds -= 100000\n                    case '9'\
    \ => odds += 1000000\n                    case '8' => odds -= 1000000\n      \
    \              case '7' => odds += 10000000\n                    case '6' => odds\
    \ -= 10000000\n                    case '5' => odds += 100000000\n           \
    \         case '4' => odds -= 100000000\n                    case '3' => odds\
    \ += 1000000000\n                    case '2' => odds -= 1000000000\n        \
    \            case '1' => odds += 10000000000\n                    case '0' =>\
    \ odds -= 10000000000\n                    case '9' => odds += 100000000000\n\
    \                    case '8' => odds -= 100000000000\n                    case\
    \ '7' => odds += 1000000000000\n                    case '6' => odds -= 1000000000000\n\
    \                    case '5' => odds += 10000000000000\n                    case\
    \ '4' => odds -= 10000000000000\n                    case '3' => odds += 100000000000000\n\
    \                    case '2' => odds -= 100000000000000\n                   \
    \ case '1' => odds += 1000000000000000\n                    case '0' => odds -=\
    \ 1000000000000000\n                    case '9' => odds += 10000000000000000\n\
    \                    case '8' => odds -= 10000000000000000\n                 \
    \   case '7' => odds += 100000000000000000\n                    case '6' => odds\
    \ -= 100000000000000000\n                    case '5' => odds += 1000000000000000000\n\
    \                    case '4' => odds -= 1000000000000000000\n               \
    \     case '3' => odds += 10000000000000000000\n                    case '2' =>\
    \ odds -= 10000000000000000000\n                    case '1' => odds += 100000000000000000000\n\
    \                    case '0' => odds -= 100000000000000000000\n             \
    \       case '9' => odds += 1000000000000000000000\n                    case '8'\
    \ => odds -= 1000000000000000000000\n                    case '7' => odds += 10000000000000000000000\n\
    \                    case '6' => odds -= 10000000000000000000000\n           \
    \         case '5' => odds += 100000000000000000000000\n                    case\
    \ '4' => odds -= 100000000000000000000000\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegugu23c.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpegugu23c.scala:75:0 ----------------------------\e[0m\e[0m\n\e[31m75\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegugu23c.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpegugu23c.scala:74:0 -----------------\e\
    [0m\e[0m\n\e[33m72 |\e[0m    }\n\e[33m73 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) if(str.charAt(j)\
    \ isDigit) odds += (str.charAt(j).toInt)\n        }\n        odds match {\n  \
    \          case Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdsqq522y.scala:16:65 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until str.length)\
    \ \e[33mif\e[0m(str.charAt(j) isDigit) odds += (str.charAt(j).toInt)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdsqq522y.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdsqq522y.scala:20:42 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\e[31m\e[31m   |\e\
    [0m                                          ^^\e[0m\n\e[31m   |\e[0m        \
    \                                  Not found: xs\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdsqq522y.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach(x => if (x.toString.toInt%2==1)\
    \ odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe0ax9rm_.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter( x =>\
    \ x % 2 == 1 )\n            odds += oddDigits.size\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplqfulf5x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val s = x.toInt\n            val odd = s % 2\n            odds.add(odd)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptbefe934.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { s =>\n    \
    \        val digits = s.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ =>\n                    val odd = digits % 2\n\
    \                    odds.add(odd)\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3_p17w_e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.length){\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_ % 2 ==\
    \ 1).length\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiwtr1sh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds += (str.length\
    \ - j)\n                }\n            }\n        }\n        odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4e2e9qa8.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n            }\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthsu_tym.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpthsu_tym.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.filter(x => x match\
    \ {\n                case x if x.isDigit => x.toInt\n                case _ =>\
    \ 0\n            }).filter(x => x % 2 != 0).size\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpqpf1me.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdpqpf1me.scala:17:41 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m x \e[33mif\e[0m x.isDigit\
    \ => x.toInt\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    Int\n\e[31m\
    \   |\e[0m                                       Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdpqpf1me.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mcase\e[0m _ => \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m            \
    \              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.count(_ == '1')\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehhmonyw.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              val digit = str.charAt(j)\n                if(digit == '1') {\n\
    \                    odds.add(1)\n                }\n                else if(digit\
    \ == '0') {\n                    odds.add(0)\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt3fvt3js.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmm6yv9cc.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.toChar(j).isDigit) {\n                    odds += (str.toChar(j).asDigit)\n\
    \                }\n            }\n        }\n        odds match {\n         \
    \   case Nil => Nil\n            case x :: xs => x :: oddCount(xs)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbrwra5x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpqbrwra5x.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(str.toChar(j).isDigit)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toChar is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqbrwra5x.scala:24:42 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                                          ^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: xs\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqbrwra5x.scala:24:28 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x :: xs => x :: oddCount(xs)\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '1' => odds\
    \ += 1\n                    case '0' => odds -= 1\n                    case '9'\
    \ => odds += 2\n                    case '8' => odds -= 2\n                  \
    \  case '7' => odds += 3\n                    case '6' => odds -= 3\n        \
    \            case '5' => odds += 4\n                    case '4' => odds -= 4\n\
    \                    case '3' => odds += 5\n                    case '2' => odds\
    \ -= 5\n                    case '1' => odds += 6\n                    case '0'\
    \ => odds -= 6\n                    case '9' => odds += 7\n                  \
    \  case '8' => odds -= 7\n                    case '7' => odds += 8\n        \
    \            case '6' => odds -= 8\n                    case '5' => odds += 9\n\
    \                    case '4' => odds -= 9\n                    case '3' => odds\
    \ += 10\n                    case '2' => odds -= 10\n                    case\
    \ '1' => odds += 11\n                    case '0' => odds -= 11\n            \
    \        case '9' => odds += 12\n                    case '8' => odds -= 12\n\
    \                    case '7' => odds += 13\n                    case '6' => odds\
    \ -= 13\n                    case '5' => odds += 14\n                    case\
    \ '4' => odds -= 14\n                    case '3' => odds += 15\n            \
    \        case '2' => odds -= 15\n                    case '1' => odds += 16\n\
    \                    case '0' => odds -= 16\n                    case '9' => odds\
    \ += 17\n                    case '8' => odds -= 17\n                    case\
    \ '7' => odds += 18\n                    case '6' => odds -= 18\n            \
    \        case '5' => odds += 19\n                    case '4' => odds -= 19\n\
    \                    case '3' => odds += 20\n                    case '2' => odds\
    \ -= 20\n                    case '1' => odds += 21\n                    case\
    \ '0' => odds -= 21\n                    case '9' => odds += 22\n            \
    \        case '8' => odds -= 22\n                    case '7' => odds += 23\n\
    \                    case '6' => odds -= 23\n                    case '5' => odds\
    \ += 24\n                    case '4' => odds -= 24\n                    case\
    \ '3' => odds += 25\n                    case '2' => odds -= 25\n            \
    \        case '1' => odds += 26\n                    case '0' => odds -= 26\n\
    \                    case '9' => odds += 27\n                    case '8' => odds\
    \ -= 27\n                    case '7' => odds += 28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnn8ycr3m.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpnn8ycr3m.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnn8ycr3m.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpnn8ycr3m.scala:80:0 -----------------\e\
    [0m\e[0m\n\e[33m78 |\e[0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val str = x.toInt\n            val odd\
    \ = if (str % 2 == 0) \"the number of odd elements \" + str + \" of the \" + x\
    \ + \".\" else \"\"\n            val even = if (str % 2 == 1) \"the number of\
    \ even elements \" + str + \" of the \" + x + \".\" else \"\"\n            odd\
    \ += odd\n            even += even\n        })\n        (odd.toList, even.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo_iekb_w.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo_iekb_w.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo_iekb_w.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            odd += odd\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of String\
    \ - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo_iekb_w.scala:20:17\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            even += even\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean even.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpo_iekb_w.scala:22:8 ---------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        (odd.toList, even.toList)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (Nothing,\
    \ Nothing)\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ %\
    \ 2 != 0).length\n            odds.add(s\"the number of odd elements $oddDigits\
    \ of the $str\")\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wclgw5p.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
