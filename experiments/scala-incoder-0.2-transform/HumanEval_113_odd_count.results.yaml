language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpve628hd2.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9fi8_jx.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val num = x.toInt\n            if (num\
    \ % 2 == 0) {\n                even += x\n            } else {\n             \
    \   odd += x\n            }\n        })\n        (even.toList ++ odd.toList)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltyiykuh.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpltyiykuh.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { x =>\n    \
    \        val digits = x.toInt\n            digits match {\n                case\
    \ 0 => ()\n                case _ => {\n                    val odd = digits %\
    \ 2\n                    odds.add(odd)\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph64bcx23.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) == '1') {\n                    odds.add(1)\n\
    \                }\n            }\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptz3iadll.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => {\n    \
    \        val digits = x.toInt\n            for(i <- 0 until digits) odds += digits(i)\n\
    \        })\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0rpra8k6.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length)\n    \
    \            if(str.charAt(j) match {\n                    case '0' | '1' | '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt -\
    \ '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp149qt4ir.scala:23:8 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp149qt4ir.scala:13:19 ------------------------\e[0m\e[0m\n\
    \e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n    \
    \        val oddDigits = s.filter(_.isDigit).length\n            odds.+=( oddDigits\
    \ )\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb0s3xkk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.filter(x => x\
    \ match {\n                case x if x.isDigit => true\n                case _\
    \ => false\n            }).length\n            odds.+=(numOdds)\n        }\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqm845s55.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var oddCountString = \"\"\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val strLen = str.length\n\
    \            for(j <- 0 until strLen) {\n                if(str.charAt(j) == '1')\
    \ {\n                    oddCount += 1\n                }\n            }\n   \
    \         oddCountString = s\"the number of odd elements $oddCount of the $strLenth\
    \ element of the $i\"\n            oddCount += 1\n        }\n        oddCountString\
    \ :: oddCount(lst.size)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxc1melyo.scala:23:76 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            oddCountString = \e[31ms\"the number of odd\
    \ elements \e[0m$oddCount\e[31m of the \e[0m$strLenth\e[31m element of the \e\
    [0m$i\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                               Not found: strLenth\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpxc1melyo.scala:26:26 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        oddCountString :: oddCount(lst.size)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                  \e[33mvariable\e[0m \e[35moddCount\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' =>\
    \ odds += 1\n                    case '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += 1\n                    case _ => break\n                })\n\
    \            }\n        }\n        odds match {\n            case Nil => Nil\n\
    \            case _ => lst.map(_.replaceAll(\"\\\\d\", \"\" + odds))\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wzfb5aw.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6wzfb5aw.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp6wzfb5aw.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33mcase\e[0m _ => break\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) {\n  \
    \              if(str.charAt(j) match {\n                    case '0' | '1' |\
    \ '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n            }\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyhq0xrcw.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyhq0xrcw.scala:13:19 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val oddDigits = str.filter(_ % 2 !=\
    \ 0).size\n            odds.add(oddDigits)\n        }\n        odds.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkzxemtp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptq8sadnn.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        lst.foreach(s => {\n            val\
    \ oddDigits = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n  \
    \      })\n        odds.toList.map(s => s\"the number of odd elements ${s}n the\
    \ str${s}ng ${s}n the ${lst(0)}nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldtm9_e5.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(x => if (x.toString.toInt%2\
    \ == 1) odds += x.toString.toInt)\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnah1vwou.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) {\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += str.charAt(j)\n \
    \                   case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' |\
    \ 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v'\
    \ | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n                    case 'A'\
    \ | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += str.charAt(j)\n                    case '-' | '+' => odds += str.charAt(j)\n\
    \                    case '_' => odds += str.charAt(j)\n                    case\
    \ '/' => odds += str.charAt(j)\n                    case '\\\\' => odds += str.charAt(j)\n\
    \                    case '$' => odds += str.charAt(j)\n                    case\
    \ '@' => odds += str.charAt(j)\n                    case '!' => odds += str.charAt(j)\n\
    \                    case '#' => odds += str.charAt(j)\n                    case\
    \ '$' => odds += str.charAt(j)\n                    case '%' => odds += str.charAt(j)\n\
    \                    case '&' => odds += str.charAt(j)\n                    case\
    \ '*' => odds += str.charAt(j)\n                    case '(' | ')' | '+' | ','\
    \ | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>=' | '<=' | '!='\n           \
    \         => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' |\
    \ 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p'\
    \ | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C'\
    \ | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P'\
    \ | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '-' | '+' | '_'\
    \ | '\\\\' | '$' | '@' | '!' | '#' | '$' | '%' | '&' | '*' | '(' | ')' | '+' |\
    \ ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo57b0h7k.scala:33:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                 ^\e[0m\n\e[31m   |\e[0msymbol literal '>= is no longer supported,\n\
    \e[31m   |\e[0muse a string literal \">=\" or an application Symbol(\">=\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{>=} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo57b0h7k.scala:33:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m\
    \ | \e[31m'.'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e\
    [0m | \e[31m'>'\e[0m | \e[31m'='\e[0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e\
    [31m'!=\e[0m'\n\e[31m\e[31m   |\e[0m                                         \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                              '=>' expected, but ' found\n\e\
    [31m\e[31m-- Error: /tmp/tmpo57b0h7k.scala:33:108 ----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                    \e[33mcase\e[0m \e[31m'('\e[0m |\
    \ \e[31m')'\e[0m | \e[31m'+'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'/'\e\
    [0m | \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'='\e\
    [0m | \e[31m'>=\e[0m' | \e[31m'<=\e[0m' | \e[31m'!=\e[0m'\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                           unclosed character literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpo57b0h7k.scala:35:476 ----"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(c =>\
    \ c.isDigit)\n            odds.add(oddDigits)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk0tt_bmh.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcwucjjp.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length) odds\
    \ += (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl5_zlmhd.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795183
