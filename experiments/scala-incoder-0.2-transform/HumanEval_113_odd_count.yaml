name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    // >>>\
  \ oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd\
  \ elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
  3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng\
  \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
  ))\n    def oddCount(lst : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ["        val odds = mutable.ListBuffer.empty[Int]\n        for (i <-\
    \ 0 until lst.size) {\n            val str = lst(i)\n            val numOdds =\
    \ str.count(_ == '1')\n            odds.add(numOdds)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odd = mutable.ListBuffer.empty[String]\n        val even = mutable.ListBuffer.empty[String]\n\
    \        lst.foreach(x => {\n            val num = x.toInt\n            if (num\
    \ % 2 == 0) {\n                even += x\n            } else {\n             \
    \   odd += x\n            }\n        })\n        (even.toList ++ odd.toList)",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach { x =>\n\
    \            val digits = x.toInt\n            digits match {\n              \
    \  case 0 => ()\n                case _ => {\n                    val odd = digits\
    \ % 2\n                    odds.add(odd)\n                }\n            }\n \
    \       }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds.add(1)\n                }\n            }\n     \
    \   }\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) odds += digits(i)\n        })\n        odds.toList", "  \
    \      val odds = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            for(j <- 0 until str.length)\n\
    \                if(str.charAt(j) match {\n                    case '0' | '1'\
    \ | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += (str.charAt(j).toInt\
    \ - '0').toInt\n                    case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'\
    \ | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'\
    \ | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += (str.charAt(j).toInt - 'a').toInt\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += (str.charAt(j).toInt - 'A').toInt\n     \
    \               case _ => odds += 0\n                })\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        lst.foreach(s => {\n\
    \            val oddDigits = s.filter(_.isDigit).length\n            odds.+=(\
    \ oddDigits )\n        })\n        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.+=(numOdds)\n        }\n        odds.toList", "        var oddCount =\
    \ 0\n        var oddCountString = \"\"\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            val strLen = str.length\n         \
    \   for(j <- 0 until strLen) {\n                if(str.charAt(j) == '1') {\n \
    \                   oddCount += 1\n                }\n            }\n        \
    \    oddCountString = s\"the number of odd elements $oddCount of the $strLenth\
    \ element of the $i\"\n            oddCount += 1\n        }\n        oddCountString\
    \ :: oddCount(lst.size)", "        val odds = mutable.ListBuffer[Int]()\n    \
    \    for(i <- 0 until lst.size) {\n            val str = lst(i)\n            for(j\
    \ <- 0 until str.length) {\n                if(str.charAt(j) match {\n       \
    \             case '0' | '1' => odds += 1\n                    case '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    case _\
    \ => break\n                })\n            }\n        }\n        odds match {\n\
    \            case Nil => Nil\n            case _ => lst.map(_.replaceAll(\"\\\\\
    d\", \"\" + odds))\n        }", "        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += (str.charAt(j).toInt - '0').toInt\n                    case\
    \ 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'\
    \ | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\
    \ => odds += (str.charAt(j).toInt - 'a').toInt\n                    case 'A' |\
    \ 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'\
    \ | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds\
    \ += (str.charAt(j).toInt - 'A').toInt\n                    case _ => odds +=\
    \ 0\n                })\n            }\n        }\n        odds.toList", "   \
    \     val odds = mutable.ListBuffer[Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_ %\
    \ 2 != 0).size\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdds = str.count(_ == '1')\n\
    \            odds.add(numOdds)\n        }\n        odds.toList", "        val\
    \ odds = mutable.Set[Int]()\n        lst.foreach(s => {\n            val oddDigits\
    \ = s.filter(_.isDigit).length\n            odds.add(oddDigits)\n        })\n\
    \        odds.toList.map(s => s\"the number of odd elements ${s}n the str${s}ng\
    \ ${s}n the ${lst(0)}nput.\")", "        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList", "        val odds = mutable.ListBuffer.empty[Int]\n   \
    \     for(i <- 0 until lst.size) {\n            val str = lst(i)\n           \
    \ for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n \
    \                   case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' |\
    \ '9' => odds += str.charAt(j)\n                    case 'a' | 'b' | 'c' | 'd'\
    \ | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'\
    \ | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds += str.charAt(j)\n\
    \                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'\
    \ | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V'\
    \ | 'W' | 'X' | 'Y' | 'Z' => odds += str.charAt(j)\n                    case '-'\
    \ | '+' => odds += str.charAt(j)\n                    case '_' => odds += str.charAt(j)\n\
    \                    case '/' => odds += str.charAt(j)\n                    case\
    \ '\\\\' => odds += str.charAt(j)\n                    case '$' => odds += str.charAt(j)\n\
    \                    case '@' => odds += str.charAt(j)\n                    case\
    \ '!' => odds += str.charAt(j)\n                    case '#' => odds += str.charAt(j)\n\
    \                    case '$' => odds += str.charAt(j)\n                    case\
    \ '%' => odds += str.charAt(j)\n                    case '&' => odds += str.charAt(j)\n\
    \                    case '*' => odds += str.charAt(j)\n                    case\
    \ '(' | ')' | '+' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>=' | '<='\
    \ | '!='\n                    => odds += str.charAt(j)\n                    case\
    \ 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'\
    \ | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'\
    \ | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M'\
    \ | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\
    \ | '-' | '+' | '_' | '\\\\' | '$' | '@' | '!' | '#' | '$' | '%' | '&' | '*' |\
    \ '(' | ')' | '+' | ',' | '.' | '/' | ':' | ';' | '<' | '>' | '=' | '>", "   \
    \     val odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.count(c =>\
    \ c.isDigit)\n            odds.add(oddDigits)\n        }\n        odds.toList",
  "        val odds = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val oddDigits = str.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        }\n        odds.toList", "        val\
    \ odds = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size) {\n\
    \            val str = lst(i)\n            for(j <- 0 until str.length) odds +=\
    \ (str.charAt(j) match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => -1\n            })\n        }\n        odds.toList"]
stop_tokens:
- "\n    }\n"
