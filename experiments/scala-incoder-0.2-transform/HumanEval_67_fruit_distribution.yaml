name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"\
  0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"\
  2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"\
  100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s\
  \ : String, n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        val apples = n.toInt\n        val oranges = s.split(\" \").last.toInt\n\
    \        val fruits = s.split(\" \").dropRight(1).mkString(\"\")\n        val\
    \ fruitMap : Map[String, Long] = fruits.split(\"\").map(x => (x.toLong, 1)).toMap\n\
    \        val fruitCount = fruitMap.values.sum\n        val mangoCount = fruitCount\
    \ - apples\n        fruitMap(\"mango\")", "        val apples = n.toLong - s.toLong\n\
    \        val oranges = s.toLong\n        val mangos = apples - oranges\n     \
    \   mangos", "        val apples = s.split(\" \")(0)\n        val oranges = s.split(\"\
    \ \")(1)\n        val fruits = s.split(\" \")(2)\n        val applesAndOranges\
    \ = apples + \" \" + oranges\n        val fruitsInBasket = fruits.split(\"and\"\
    ).length\n        val mangos = fruitsInBasket - oranges\n        val mangoFruits\
    \ = mangos * oranges\n        fruitsInBasket * mangoFruits", "        val apples\
    \ = n.toInt\n        val oranges = apples - 1\n        val mangos = oranges -\
    \ 1\n        val fruits = s.split(\" \")\n        val fruitCount = fruits.length\n\
    \        val appleCount = fruits(0).toInt\n        val orangeCount = fruits(1).toInt\n\
    \        val mangoCount = fruits(2).toInt\n        val totalCount = appleCount\
    \ + orangeCount + mangoCount\n        val appleFruits = appleCount * appleCount\n\
    \        val orangeFruits = orangeCount * orangeCount\n        val mangoFruits\
    \ = mangoCount * mangoCount\n        val totalFruits = appleFruits + orangeFruits\
    \ + mangoFruits\n        val totalMangoFruits = totalFruits - totalCount\n   \
    \     val mangoFruitPercentage = (totalMangoFruits/totalFruits).toInt\n      \
    \  val appleFruitPercentage = (appleFruits/totalFruits).toInt\n        val orangeFruitPercentage\
    \ = (orangeFruits/totalFruits).toInt\n        val totalPercentage = appleFruitPercentage\
    \ + orangeFruitPercentage + mangoFruitPercentage\n        val applePercentage\
    \ = appleFruitPercentage * appleCount\n        val orangePercentage = orangeFruitPercentage\
    \ * orangeCount\n        val mangoPercentage = mangoFruitPercentage * mangoCount\n\
    \        val totalPercentagePercentage = applePercentage + orangePercentage +\
    \ mangoPercentage\n        val totalPercentagePercentagePercentage = totalPercentage/totalCount\n\
    \        val totalPercentagePercentagePercentagePercentage = totalPercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentage = totalPercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentage/totalPercentage\n        val\
    \ totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentage/totalFruits\n    \
    \    val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalMangoFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentage/totalPercentage\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentagePercentagePercentagePercentagePercentagePercentage/totalFruits\n\
    \        val totalPercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentagePercentage\
    \ = totalPercentagePercentage", "        val apples = s.split(\" \").map(_.toInt)\n\
    \        val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges\n        val appleCount = apples.sum\n        val orangeCount = oranges.sum\n\
    \        val mangoCount = fruits.filter(_ % 2 == 0).sum\n        val mangoCount\
    \ = fruits.filter(_ % 2 == 1).sum\n        val mangoCount = fruits.filter(_ %\
    \ 3 == 0).sum\n        val mangoCount = fruits.filter(_ % 3 == 1).sum\n      \
    \  val mangoCount = fruits.filter(_ % 5 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 5 == 1).sum\n        val mangoCount = fruits.filter(_ % 7 == 0).sum\n    \
    \    val mangoCount = fruits.filter(_ % 7 == 1).sum\n        val mangoCount =\
    \ fruits.filter(_ % 11 == 0).sum\n        val mangoCount = fruits.filter(_ % 11\
    \ == 1).sum\n        val mangoCount = fruits.filter(_ % 13 == 0).sum\n       \
    \ val mangoCount = fruits.filter(_ % 13 == 1).sum\n        val mangoCount = fruits.filter(_\
    \ % 17 == 0).sum\n        val mangoCount = fruits.filter(_ % 17 == 1).sum\n  \
    \      val mangoCount = fruits.filter(_ % 19 == 0).sum\n        val mangoCount\
    \ = fruits.filter(_ % 19 == 1).sum\n        val mangoCount = fruits.filter(_ %\
    \ 23 == 0).sum\n        val mangoCount = fruits.filter(_ % 23 == 1).sum\n    \
    \    val mangoCount = fruits.filter(_ % 29 == 0).sum\n        val mangoCount =\
    \ fruits.filter(_ % 29 == 1).sum\n        val mangoCount = fruits.filter(_ % 31\
    \ == 0).sum\n        val mangoCount = fruits.filter(_ % 31 == 1).sum\n       \
    \ val mangoCount = fruits.filter(_ % 37 == 0).sum\n        val mangoCount = fruits.filter(_\
    \ % 37 == 1).sum\n        val mangoCount = fruits.filter(_ % 41 == 0).sum\n  \
    \      val mangoCount = fruits.filter(_ % 41 == 1).sum\n        val mangoCount\
    \ = fruits.filter(_ % 47 == 0).sum\n        val mangoCount = fruits.filter(_ %\
    \ 47 == 1).sum\n        val mangoCount = fruits.filter(_ % 53 == 0).sum\n    \
    \    val mangoCount = fruits.filter(_ % 53 == 1).sum\n        val mangoCount =\
    \ fruits.filter(_ % 59 == 0).", "        val apples = n.toLong - s.toLong\n  \
    \      val oranges = s.toLong\n        val mangos = apples - oranges\n       \
    \ mangos", "        val apples = n.toLong - s.toLong\n        val oranges = s.toLong\
    \ - apples.toLong\n        val mangos = apples.toLong - oranges.toLong\n     \
    \   mangos", "        val apples = n.toInt\n        val oranges = s.split(\"and\"\
    ).map(_.toInt).sum\n        val mangos = apples - oranges\n        mangos", " \
    \       val apples = n.toInt\n        val oranges = s.toInt\n        val fruits\
    \ = apples + oranges\n        val mangos = fruits - apples - oranges\n       \
    \ mangos", "        val apples = s.split(\" \")(0)\n        val oranges = s.split(\"\
    \ \")(1)\n        val fruits = s.split(\" \")(2)\n        val applesAndOranges\
    \ = apples + \" \" + oranges\n        val fruitsInBasket = fruits.split(\" \"\
    )\n        val applesAndOrangesInBasket = applesAndOranges.split(\" \")\n    \
    \    val applesAndOrangesInBasketCount = applesAndOrangesInBasket.length\n   \
    \     val fruitsInBasketCount = fruitsInBasket.length\n        val mangoFruitsInBasketCount\
    \ = fruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsInBasket\
    \ = fruitsInBasket.filter(_ == \"mango\")\n        val mangoFruitsInBasketCount\
    \ = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCountInBasket =\
    \ mangoFruitsInBasketCount - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasket\
    \ = fruitsInBasket.filter(_ == \"mango\").filter(_ == \"mango\")\n        val\
    \ mangoFruitsInBasketCountInBasketInBasket = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCount = mangoFruitsInBasketInBasket.length\n\
    \        val mangoFruitsInBasketInBasketCountInBasket = mangoFruitsInBasketInBasketCount\
    \ - applesAndOrangesInBasketCount\n        val mangoFruitsInBasketInBasketCountInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasket.length\n        val mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasket\
    \ = mangoFruitsInBasketInBasketCountInBasketInBasketInBasket.length\n        val\
    \ mangoFruitsInBasketInBasketCountInBasketInBasketInBasketInBasketInBasket = mangoFruitsInBasketInBasketCountIn",
  "        val apples = s.split(\" \")(0)\n        val oranges = s.split(\" \")(1)\n\
    \        val fruits = s.split(\" \")(2)\n        val applesAndOranges = apples\
    \ + \" \" + oranges\n        val fruitsInBasket = fruits.split(\" \")\n      \
    \  val applesAndOrangesInBasket = applesAndOranges.split(\" \")\n        val applesAndOrangesInBasketCount\
    \ = applesAndOrangesInBasket.length\n        val fruitsInBasketCount = fruitsInBasket.length\n\
    \        val mangoFruitsInBasketCount = fruitsInBasketCount - applesAndOrangesInBasketCount\n\
    \        val mangoFruitsInBasket = fruitsInBasket.filter(_ == \"mango\")\n   \
    \     val mangoFruitsInBasketCount = mangoFruitsInBasket.length\n        val mangoFruitsInBasketCount\
    \ = mangoFruitsInBasketCount + applesAndOrangesInBasketCount\n        mangoFruitsInBasketCount",
  "        val apples = s.split(\" \").map(_.toInt)\n        val oranges = s.split(\"\
    \ \").map(_.toInt)\n        val fruits = apples ++ oranges\n        val appleAndOranges\
    \ = fruits.filter(x => x >= 0 && x <= n)\n        val mangos = appleAndOranges.filter(x\
    \ => x % 2 == 0)\n        mangos.size", "        val apples = n.toInt\n      \
    \  val oranges = s.toInt\n        val mangos = apples - oranges\n        val basket\
    \ = new mutable.HashMap[String, Long]()\n        basket.put(\"apples\", apples)\n\
    \        basket.put(\"oranges\", oranges)\n        basket.put(\"mangos\", mangos)\n\
    \        basket.size", "        val apples = n.toLong - s.split(\" \").filter(_\
    \ != \"\").length\n        val oranges = s.split(\" \").filter(_ != \"\").length\n\
    \        val mangos = apples - oranges\n        mangos", "        val apples =\
    \ n.toLong - s.toLong\n        val oranges = s.toLong\n        val mangos = apples\
    \ - oranges\n        mangos", "        val apples = s.split(\"apples and \")\n\
    \        val oranges = s.split(\"oranges and \")\n        val mangos = s.split(\"\
    mango and \")\n        val appleAndOranges = apples.zip(oranges).map(x => x._1\
    \ + x._2)\n        val mangoAndOranges = mangos.zip(oranges).map(x => x._1 + x._2)\n\
    \        val appleAndMangos = apples.zip(mangos).map(x => x._1 + x._2)\n     \
    \   val orangeAndMangos = oranges.zip(mangos).map(x => x._1 + x._2)\n        val\
    \ appleAndOrangesAndMangos = appleAndOranges.zip(orangeAndMangos).map(x => x._1\
    \ + x._2)\n        val appleAndMangosAndOranges = appleAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOranges = appleAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangos = appleAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangos = appleAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOranges = appleAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x\
    \ => x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = appleAndOrangesAndMangosAndOrangesAndMangos.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndMangosAndOrangesAndMangosAndOranges.zip(orangeAndMangos).map(x =>\
    \ x._1 + x._2)\n        val appleAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = appleAndOrangesAndMangosAndOrangesAndMangosAnd", "        val apples = s.split(\"\
    apples and \")(0).trim\n        val oranges = s.split(\"oranges and \")(0).trim\n\
    \        val mangos = s.split(\"mango and \")(0).trim\n        val applesAndOranges\
    \ = apples + oranges\n        val applesAndMangos = apples + mangos\n        val\
    \ orangesAndMangos = oranges + mangos\n        val applesAndOrangesAndMangos =\
    \ applesAndOranges + mangos\n        val applesAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos\n        val\
    \ applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges =\
    \ applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\n\
    \        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangos\
    \ = applesAndOranges + mangos + oranges + mangos + oranges + mangos + oranges\
    \ + mangos + oranges + mangos + oranges\n        val applesAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOrangesAndMangosAndOranges\
    \ = applesAndOranges + mang", "        val apples = n.toInt\n        val oranges\
    \ = s.split(\" \").last.toInt\n        val fruits = s.split(\" \").dropRight(1).mkString(\"\
    \")\n        val mangos = apples - oranges\n        val count = fruits.split(\"\
    \ \").length\n        val totalFruits = apples + oranges + mangos\n        val\
    \ totalFruitsPerApple = totalFruits / apples\n        val totalFruitsPerOrange\
    \ = totalFruits / oranges\n        val totalFruitsPerMango = totalFruits / mangos\n\
    \        val totalFruitsPerAppleAndOrange = totalFruitsPerApple * oranges\n  \
    \      val totalFruitsPerAppleAndMango = totalFruitsPerApple * mangos\n      \
    \  val totalFruitsPerOrangeAndMango = totalFruitsPerOrange * mangos\n        val\
    \ totalFruitsPerMangoAndApple = totalFruitsPerMango * apples\n        val totalFruitsPerMangoAndOrange\
    \ = totalFruitsPerMango * oranges\n        val totalFruitsPerMangoAndMango = totalFruitsPerMango\
    \ * mangos\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * mangos\n        val totalFruitsPerAppleAndMangoAndOrange = totalFruitsPerAppleAndMango\
    \ * oranges\n        val totalFruitsPerAppleAndOrangeAndMango = totalFruitsPerAppleAndOrange\
    \ * mangos\n        val totalFruitsPerOrangeAndMangoAndApple = totalFruitsPerOrangeAndMango\
    \ * apples\n        val totalFruitsPerOrangeAndMangoAndOrange = totalFruitsPerOrangeAndMango\
    \ * oranges\n        val totalFruitsPerOrangeAndMangoAndMango = totalFruitsPerOrangeAndMango\
    \ * mangos\n        val totalFruitsPerMangoAndAppleAndOrange = totalFruitsPerMangoAndApple\
    \ * oranges\n        val totalFruitsPerMangoAndAppleAndMango = totalFruitsPerMangoAndApple\
    \ * mangos\n        val totalFruitsPerMangoAnd", "        val apples = n.toLong\
    \ - s.toLong\n        val oranges = s.toLong\n        val mangos = apples + oranges\n\
    \        mangos", "        val apples = n.toInt\n        val oranges = s.toInt\n\
    \        val mangos = apples - oranges\n        val fruits = apples + oranges\
    \ + mangos\n        fruits"]
stop_tokens:
- "\n    }\n"
