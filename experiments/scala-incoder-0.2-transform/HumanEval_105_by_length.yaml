name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n\
  \    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"))\n    // If the array is empty, return an empty array:\n   \
  \ // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the array\
  \ has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr\
  \ : List[Long]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_\
    \ < _).reverse\n        val digits = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(_.toString).mkString(\"\
    ,\")\n        val one = \"One\"\n        val two = \"Two\"\n        val three\
    \ = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n    \
    \    val six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"\
    Eight\"\n        val nine = \"Nine\"\n        val ten = \"Ten\"\n        val hundred\
    \ = \"Hundred\"\n        val thousand = \"Thousand\"\n        val million = \"\
    Million\"\n        val billion = \"Billion\"\n        val trillion = \"Trillion\"\
    \n        val quadrillion = \"Quadrillion\"\n        val quintillion = \"Quintillion\"\
    \n        val sextillion = \"Sextillion\"\n        val septillion = \"Septillion\"\
    \n        val octillion = \"Octillion\"\n        val nonillion = \"Nonillion\"\
    \n        val decillion = \"Decillion\"\n        val undecillion = \"Undecillion\"\
    \n        val duodecillion = \"Duodecillion\"\n        val tredecillion = \"Tredecillion\"\
    \n        val quattuordecillion = \"Quattuordecillion\"\n        val quindecillion\
    \ = \"Quindecillion\"\n        val sexdecillion = \"Sexdecillion\"\n        val\
    \ septendecillion = \"Septendecillion\"\n        val octodecillion = \"Octodecillion\"\
    \n        val novemdecillion = \"Novemdecillion\"\n        val vigintillion =\
    \ \"Vigintillion\"\n        val unvigintillion = \"Unvigintillion\"\n        val\
    \ duovigintillion = \"Duovigintillion\"\n        val trevigintillion = \"Trevigintillion\"\
    \n        val quattuorvigintillion = \"Quattuorvigintillion\"\n        val quinvigintillion\
    \ = \"Qu", "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.", "        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_\
    \ < _).reverse\n        val map = Map(\"One\" -> 1l.toLong, \"Two\" -> 2l.toLong,\
    \ \"Three\" -> 3l.toLong, \"Four\" -> 4l.toLong, \"Five\" -> 5l.toLong, \"Six\"\
    \ -> 6l.toLong, \"Seven\" -> 7l.toLong, \"Eight\" -> 8l.toLong, \"Nine\" -> 9l.toLong)\n\
    \        result.map(x => map.getOrElse(x.toString, x.toString))", "        val\
    \ ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => s\"One\")\n\
    \        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <=\
    \ 999l.toLong).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => s\"Thousand\")\n        val\
    \ millions = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => s\"Million\")\n        val billions = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => s\"Billion\")\n        val trillions = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 99999999999l.toLong).map(x => s\"Trillion\"\
    )\n        val quadrillions = arr.filter(x => x >= 1000000000000l.toLong && x\
    \ <= 999999999999999l.toLong).map(x => s\"Quadrillion\")\n        val quintillions\
    \ = arr.filter(x => x >= 1000000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x\
    \ => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000000000000l.toLong\
    \ && x <= 99999999999999999999999l.toLong).map(x => s\"Sextillion\")\n       \
    \ val septillions = arr.filter(x => x >= 1000000000000000000000l.toLong && x <=\
    \ 999999999999999999999999999l.toLong).map(x => s\"Septillion\")\n        val\
    \ octillions = arr.filter(x => x >= 1000000000000000000000000l.toLong && x <=\
    \ 9999999999999999999999999999999l.toLong).map(x => s\"Octillion\")\n        val\
    \ nonillions = arr.filter(x => x >= 100000000000000000000000000l.toLong && x <=\
    \ 99999999999999999999999999999999999l.toLong).map(x => s\"Nonillion\")\n    \
    \    val onesAndTens = arr.filter(x => x >= 1000000000000000000000000000l.toLong\
    \ && x <= 999999999999999999999999999999999999999l.toLong).map(x => s\"OnesAndTen\"\
    )\n        val onesAndHundreds = arr.filter(x => x >= 100000000000000000000000000000",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n\
    \        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n  \
    \      hundredsReversedString.toList ++ tensReversedString.toList ++ onesReversedString.toList",
  "        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x < 99).toList\n        val hundreds = arr.filter(x => x < 999).toList\n\
    \        val thousands = arr.filter(x => x < 9999).toList\n        val tenThousands\
    \ = arr.filter(x => x < 999999).toList\n        val oneThousands = arr.filter(x\
    \ => x < 9999999).toList\n        val oneHundreds = arr.filter(x => x < 999999999).toList\n\
    \        val oneThousandThousands = arr.filter(x => x < 99999999999).toList\n\
    \        val oneHundredThousands = arr.filter(x => x < 999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(x => x < 9999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(x => x < 99999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <\
    \ 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.", "        val nums = arr.toList\n        val numsLength = nums.length\n\
    \        val numsSorted = nums.sortBy(_ < 9)\n        val numsReversed = numsSorted.reverse\n\
    \        val numsReversedLength = numsReversed.length\n        val numsReversedSorted\
    \ = numsReversed.sortBy(_ < 9)\n        val numsReversedReversed = numsReversedSorted.reverse\n\
    \        val numsReversedReversedLength = numsReversedReversed.length\n      \
    \  val numsReversedReversedSorted = numsReversedReversed.sortBy(_ < 9)\n     \
    \   val numsReversedReversedReversedLength = numsReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedSorted = numsReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedSorted = numsReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedSorted.sortBy(_ < 9)\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n", "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter", "        val ones = arr.filter(_ <= 9).toList\n        val tens\
    \ = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n\
    \        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands\
    \ = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <=\
    \ 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n\
    \        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n    \
    \    val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n     \
    \   val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999999999999999).to",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999999999999999).toList\n\
    \        ", "        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_\
    \ - 1).reverse\n        val result2 = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(x\
    \ => if (x < 10l.toLong) s\"$x\" else s\"$x${'One'}\")\n        result2.toList",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val result = arr.filter(_ > 0l).sortWith(_ < _).reverse\n        val digits\
    \ = arr.filter(_ > 0l).map(_.toString.toInt)\n        val ones = digits.filter(_\
    \ == 1)\n        val tens = digits.filter(_ == 10)\n        val hundreds = digits.filter(_\
    \ == 100)\n        val thousands = digits.filter(_ == 1000)\n        val tenThousands\
    \ = digits.filter(_ == 10000)\n        val hundredThousands = digits.filter(_\
    \ == 100000)\n        val oneThousands = digits.filter(_ == 1000000)\n       \
    \ val tenThousandThousands = digits.filter(_ == 10000000)\n        val hundredThousandThousands\
    \ = digits.filter(_ == 100000000)\n        val oneThousandThousands = digits.filter(_\
    \ == 1000000000)\n        val tenThousandThousandThousands = digits.filter(_ ==\
    \ 10000000000)\n        val hundredThousandThousandThousands = digits.filter(_\
    \ == 100000000000)\n        val oneThousandThousandThousands = digits.filter(_\
    \ == 1000000000000)\n        val tenThousandThousandThousandThousands = digits.filter(_\
    \ == 10000000000000)\n        val hundredThousandThousandThousandThousands = digits.filter(_\
    \ == 100000000000000)\n        val oneThousandThousandThousandThousands = digits.filter(_\
    \ == 1000000000000000)\n        val tenThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 10000000000000000)\n        val hundredThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000)\n        val oneThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000L)\n        val tenThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 1000000000000000000L)\n        val hundredThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 10000000000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000000L)\n        val tenThousandThousandThousandThousandTh",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val hundredThousands = arr.filter(_\
    \ <= 999999).toList\n        val tenThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 999999999).toList\n        val oneHundredThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 999999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999899).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999989999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999899999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999998999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999899999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousand", "        val ones = arr.filter(_ <= 1).toList\n      \
    \  val tens = arr.filter(_ <= 10).toList\n        val hundreds = arr.filter(_\
    \ <= 100).toList\n        val thousands = arr.filter(_ <= 1000).toList\n     \
    \   val tenThousands = arr.filter(_ <= 10000).toList\n        val oneThousands\
    \ = arr.filter(_ <= 100000).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 100000).toList\n        val oneThousandHundreds = arr.filter(_ <= 1000000).toList\n\
    \        val oneThousandThousands = arr.filter(_ <= 1000000).toList\n        val\
    \ oneThousandThousandHundreds = arr.filter(_ <= 10000000).toList\n        val\
    \ oneThousandThousandThousands = arr.filter(_ <= 10000000).toList\n        val\
    \ oneThousandThousandThousandHundreds = arr.filter(_ <= 100000000).toList\n  \
    \      val oneThousandThousandThousandThousands = arr.filter(_ <= 100000000).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThous",
  "        val len = arr.size\n        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds\
    \ = arr.filter(x => x >= 100 && x < 1000).toList\n        val thousands = arr.filter(x\
    \ => x >= 1000 && x < 10000).toList\n        val tenThousands = arr.filter(x =>\
    \ x >= 10000 && x < 100000).toList\n        val oneThousands = arr.filter(x =>\
    \ x >= 100000 && x < 1000000).toList\n        val oneMillions = arr.filter(x =>\
    \ x >= 1000000 && x < 10000000).toList\n        val oneBillions = arr.filter(x\
    \ => x >= 10000000 && x < 100000000).toList\n        val oneTrillions = arr.filter(x\
    \ => x >= 100000000 && x < 1000000000).toList\n        val oneQuadrillions = arr.filter(x\
    \ => x >= 1000000000 && x < 10000000000).toList\n        val oneQuintillions =\
    \ arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val oneBillionThousands\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ oneTrillionThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val oneQuadrillionThousands = arr.filter(x => x >= 10000000000000 &&\
    \ x < 100000000000000).toList\n        val oneQuintillionThousands = arr.filter(x\
    \ => x >= 100000000000000 && x < 1000000000000000).toList\n        val oneBillionThousandThousands\
    \ = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n \
    \       val oneTrillionThousandThousands = arr.filter(x => x >= 10000000000000000\
    \ && x < 100000000000000000).toList\n        val oneQuadrillionThousandThousands\
    \ = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).toList\n\
    \        val oneQuintillionThousandThousands = arr.filter(x => x >= 1000000000000000000\
    \ && x < 10000000000000000000).toList\n        val oneBillionThousandThousandThousands\
    \ = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000).toList\n\
    \        val oneTrillionThousandThousandThousands = arr.filter(x => x >= 100000000000000000000\
    \ && x < 1000000000000000000000).toList\n        val oneQuadrilli", "        val\
    \ nums = arr.toList\n        val numsLength = nums.size\n        val numsDigits\
    \ = nums.map(_.toString).size\n        val numsDigitSum = numsDigits.toLong\n\
    \        val numsDigitSum2 = numsDigitSum * numsDigitSum\n        val numsDigitSum3\
    \ = numsDigitSum2 * numsDigitSum\n        val numsDigitSum4 = numsDigitSum3 *\
    \ numsDigitSum\n        val numsDigitSum5 = numsDigitSum4 * numsDigitSum\n   \
    \     val numsDigitSum6 = numsDigitSum5 * numsDigitSum\n        val numsDigitSum7\
    \ = numsDigitSum6 * numsDigitSum\n        val numsDigitSum8 = numsDigitSum7 *\
    \ numsDigitSum\n        val numsDigitSum9 = numsDigitSum8 * numsDigitSum\n   \
    \     val numsDigitSum10 = numsDigitSum9 * numsDigitSum\n        val numsDigitSum11\
    \ = numsDigitSum10 * numsDigitSum\n        val numsDigitSum12 = numsDigitSum11\
    \ * numsDigitSum\n        val numsDigitSum13 = numsDigitSum12 * numsDigitSum\n\
    \        val numsDigitSum14 = numsDigitSum13 * numsDigitSum\n        val numsDigitSum15\
    \ = numsDigitSum14 * numsDigitSum\n        val numsDigitSum16 = numsDigitSum15\
    \ * numsDigitSum\n        val numsDigitSum17 = numsDigitSum16 * numsDigitSum\n\
    \        val numsDigitSum18 = numsDigitSum17 * numsDigitSum\n        val numsDigitSum19\
    \ = numsDigitSum18 * numsDigitSum\n        val numsDigitSum20 = numsDigitSum19\
    \ * numsDigitSum\n        val numsDigitSum21 = numsDigitSum20 * numsDigitSum\n\
    \        val numsDigitSum22 = numsDigitSum21 * numsDigitSum\n        val numsDigitSum23\
    \ = numsDigitSum22 * numsDigitSum\n        val numsDigitSum24 = numsDigitSum23\
    \ * numsDigitSum\n        val numsDigitSum25 = numsDigitSum24 * numsDigitSum\n\
    \        val numsDigitSum26 = numsDigitSum25 * numsDigitSum\n        val numsDigitSum27\
    \ = numsDigit", "        val result = arr.filter(_ >= 1l && _ <= 9l).sortWith(_\
    \ < _).reverse\n        arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse.map(i\
    \ => byDigit(i.toString.toInt))", "        val result = arr.filter(_ > 0l).sortWith(_\
    \ < _).reverse\n        val map = new mutable.HashMap[Long, String]()\n      \
    \  map.put(0l, \"One\")\n        map.put(1l, \"Two\")\n        map.put(2l, \"\
    Three\")\n        map.put(3l, \"Four\")\n        map.put(4l, \"Five\")\n     \
    \   map.put(5l, \"Six\")\n        map.put(6l, \"Seven\")\n        map.put(7l,\
    \ \"Eight\")\n        map.put(8l, \"Nine\")\n        map.put(9l, \"Ten\")\n  \
    \      map.put(10l, \"Eleven\")\n        map.put(11l, \"Twelve\")\n        map.put(12l,\
    \ \"Thirteen\")\n        map.put(13l, \"Fourteen\")\n        map.put(14l, \"Fifteen\"\
    )\n        map.put(15l, \"Sixteen\")\n        map.put(16l, \"Seventeen\")\n  \
    \      map.put(17l, \"Eighteen\")\n        map.put(18l, \"Nineteen\")\n      \
    \  map.put(19l, \"Twenty\")\n        map.put(20l, \"Twenty One\")\n        map.put(21l,\
    \ \"Twenty Two\")\n        map.put(22l, \"Twenty Three\")\n        map.put(23l,\
    \ \"Twenty Four\")\n        map.put(24l, \"Twenty Five\")\n        map.put(25l,\
    \ \"Twenty Six\")\n        map.put(26l, \"Twenty Seven\")\n        map.put(27l,\
    \ \"Twenty Eight\")\n        map.put(28l, \"Twenty Nine\")\n        map.put(29l,\
    \ \"Thirty\")\n        map.put(30l, \"Thirty One\")\n        map.put(31l, \"Thirty\
    \ Two\")\n        map.put(32l, \"Thirty Three\")\n        map.put(33l, \"Thirty\
    \ Four\")\n        map.put(34l, \"Thirty Five\")\n        map.put(35l, \"Thirty\
    \ Six\")\n        map.put(36l, \"Thirty Seven\")\n        map.put(37l, \"Thirty\
    \ Eight\")\n        map.put(38l, \"Thirty Nine\")\n        map.put(39l, \"Forty\"\
    )\n        map.put(40l, \"Forty One\")\n        map.put(41l, \"Forty Two\")\n\
    \        map.put(42l, \"Forty Three\")\n        map.put(43l, \"Forty Four", " \
    \       val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ >= 10 && _ <=99).toList\n        val hundreds = arr.filter(_ >= 100 && _ <=\
    \ 999).toList\n        val thousands = arr.filter(_ >= 1000)\n        val hundredsNames\
    \ = hundreds.map(x => s\"Hundred$x\")\n        val thousandsNames = thousands.map(x\
    \ => s\"Thousand$x\")\n        val tensNames = tens.map(x => s\"Ten$x\")\n   \
    \     val onesNames = ones.map(x => s\"One$x\")\n        val result = onesNames.reverse.concat(tensNames).concat(hundredsNames).concat(thousandsNames)\n\
    \        if (result.isEmpty) Nil\n        else result", "        val result =\
    \ arr.filter(_ > 0l).sortWith(_ < _).reverse\n        result.map(_.toString).map(name\
    \ => if (arr.contains(0l)) name else name.replaceAll(\"[0-9]\", arr(0).toString))",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >=\
    \ 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString\
    \ = tensReversed.map(_ + 10).mkString(\"\")\n        val tensReversedStringList\
    \ = tensReversedString.split(\"\\\\D+\")\n        val tensReversedStringListReversed\
    \ = tensReversedStringList.reverse\n        val tensReversedStringListReversedString\
    \ = tensReversedStringListReversed.map(_ + 10).mkString(\"\")\n        val tensReversedStringListReversedStringList\
    \ = tensReversedStringListReversedString.split(\"\\\\D+\")\n        val tensReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringList.reverse\n        val tensReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversed.map(_ + 10).mkString(\"\"\
    )\n        val tensReversedStringListReversedStringListReversedStringList = tensReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversed.map(_ +\
    \ 10).mkString(\"\")\n        val tensReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedString.split(\"\
    \\\\D+\")\n        val tensReverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        val len = arr.length\n        val one = arr(0) to 9\n        val two\
    \ = arr(1) to 9\n        val three = arr(2) to 9\n        val four = arr(3) to\
    \ 9\n        val five = arr(4) to 9\n        val six = arr(5) to 9\n        val\
    \ seven = arr(6) to 9\n        val eight = arr(7) to 9\n        val nine = arr(8)\
    \ to 9\n        val ten = arr(9) to 9\n        val tenToNine = ten.zip(ten).map(x\
    \ => x._1 + \"-\" + x._2)\n        val oneToNine = one.zip(one).map(x => x._1\
    \ + \"-\" + x._2)\n        val twoToNine = two.zip(two).map(x => x._1 + \"-\"\
    \ + x._2)\n        val threeToNine = three.zip(three).map(x => x._1 + \"-\" +\
    \ x._2)\n        val fourToNine = four.zip(four).map(x => x._1 + \"-\" + x._2)\n\
    \        val fiveToNine = five.zip(five).map(x => x._1 + \"-\" + x._2)\n     \
    \   val sixToNine = six.zip(six).map(x => x._1 + \"-\" + x._2)\n        val sevenToNine\
    \ = seven.zip(seven).map(x => x._1 + \"-\" + x._2)\n        val eightToNine =\
    \ eight.zip(eight).map(x => x._1 + \"-\" + x._2)\n        val nineToNine = nine.zip(nine).map(x\
    \ => x._1 + \"-\" + x._2)\n        val tenToOne = ten.zip(one).map(x => x._1 +\
    \ \"-\" + x._2)\n        val oneToTen = one.zip(ten).map(x => x._1 + \"-\" + x._2)\n\
    \        val twoToTen = two.zip(two).map(x => x._1 + \"-\" + x._2)\n        val\
    \ threeToTen = three.zip(three).map(x => x._1 + \"-\" + x._2)\n        val fourToTen\
    \ = four.zip(four).map(x => x._1 + \"-\" + x._2)\n        val fiveToTen = five.zip(five).map(x\
    \ => x._1 + \"-\" + x._2)\n        ", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999998).toList\n\
    \        val oneHundredThousandThousandHundreds = arr.filter(_ <= 999999999997).toList\n\
    \        val oneThousandThousandThousandHundredThousands = arr.filter(_ <= 999999999996).toList\n\
    \        val oneHundredThousandThousandThousandHundredThousands = arr.filter(_\
    \ <= 999999999995).toList\n        val oneThousandThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 999999999994).toList\n        val oneHundredThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 999999999993).toList\n        val oneThousandThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 999999999992).toList\n        val oneHundredThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 999999999991).toList\n        val oneThousandThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 999999999990).toList\n        val oneHundredThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousandThousandThousandHundredThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandThousandThousandHundredThousand",
  "        val nums = arr.toList\n        val numsLength = nums.size\n        val\
    \ numsDigits = nums.map(_.toString.length).sum\n        val numsDigitSum = nums.map(_.toString).sum\n\
    \        val numsDigitSumReversed = nums.map(_.toString).reverse.sum\n       \
    \ val numsDigitSumReversedReversed = nums.map(_.toString).reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversed = nums.map(_.toString).reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversed = nums.map(_.toString).reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversed = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversed = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = nums.map(_.toString).reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.sum\n\
    \        val numsDigitSumReversedReversedReversedReversedReversed", "        val\
    \ ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val tens =\
    \ arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds =\
    \ arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandThousands = arr.filter(x => x >= 100000000l.toLong &&\
    \ x <= 99999999999l.toLong)\n        val oneThousandHundreds = arr.filter(x =>\
    \ x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousands = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong)\n        val oneThousandThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousands = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 99999999999999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandHundredThousandHundredThousandH", "        val\
    \ ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >=\
    \ 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesAndTens = ones + tens\n\
    \        val onesAndTensReversed = onesReversed + tensReversed\n        val onesAndTensAndHundreds\
    \ = onesAndTens + hundreds\n        val onesAndTensAndHundredsReversed = onesAndTensReversed\
    \ + hundredsReversed\n        val onesAndTensAndHundredsAndOnes = onesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesReversed = onesAndTensAndHundredsReversed\
    \ + onesReversed\n        val onesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensReversed = onesAndTensAndHundredsAndOnesReversed\
    \ + tensReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = onesAndTensAndHundredsAndOnesAndTens + hundreds\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensReversed + hundredsReversed\n        val\
    \ onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed + onesReversed\n \
    \       val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed ", "        val result\
    \ = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val tenThousandThousands = arr.filter(_\
    \ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n\
    \        val tenThousandThousandThousands = arr.filter(_ <= 9999999998).toList\n\
    \        val oneThousandThousandThousands = arr.filter(_ <= 999999999998).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 99999999987).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 9999999999987).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 999999999876).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 99999999999876).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 9999999998765).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 999999999998765).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 99999999987654).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 9999999999987654).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 999999999876543).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 99999999999876543).toList\n\
    \        val tenThousandThousandThousandThousands = arr.filter(_ <= 9999999998765432).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 999999999998765432).toList\n",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThous",
  "        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens\
    \ = arr.filter(x => x < 99).map(x => s\"Two\")\n        val hundreds = arr.filter(x\
    \ => x < 999).map(x => s\"Three\")\n        val thousands = arr.filter(x => x\
    \ < 9999).map(x => s\"Four\")\n        val millions = arr.filter(x => x < 99999).map(x\
    \ => s\"Five\")\n        val billions = arr.filter(x => x < 999999).map(x => s\"\
    Six\")\n        val trillions = arr.filter(x => x < 9999999).map(x => s\"Seven\"\
    )\n        val quadrillions = arr.filter(x => x < 999999999).map(x => s\"Eight\"\
    )\n        val quintillions = arr.filter(x => x < 99999999999).map(x => s\"Nine\"\
    )\n        val onesAndTens = ones + tens\n        val onesAndHundreds = ones +\
    \ hundreds\n        val onesAndThousands = ones + thousands\n        val onesAndMillions\
    \ = ones + millions\n        val onesAndBillions = ones + billions\n        val\
    \ onesAndTrillions = ones + trillions\n        val onesAndQuadrillions = ones\
    \ + quadrillions\n        val onesAndQuintillions = ones + quintillions\n    \
    \    val onesAndOnesAndTens = onesAndTens + onesAndOnesAndTens\n        val onesAndOnesAndHundreds\
    \ = onesAndHundreds + onesAndOnesAndHundreds\n        val onesAndOnesAndThousands\
    \ = onesAndThousands + onesAndOnesAndThousands\n        val onesAndOnesAndMillions\
    \ = onesAndMillions + onesAndOnesAndMillions\n        val onesAndOnesAndBillions\
    \ = onesAndBillions + onesAndOnesAndBillions\n        val onesAndOnesAndTrillions\
    \ = onesAndTrillions + onesAndOnesAndTrillions\n        val onesAndOnesAndQuadrillions\
    \ = onesAndQuadrillions + onesAndOnesAndQuadrillions\n        val onesAndOnesAndQuintillions\
    \ = onesAndQuintillions + onesAndOnesAndQuintillions\n        val onesAndOnesAndOnesAnd",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999", "        val ones = arr.filter(x\
    \ => x < 10).map(x => s\"One\")\n        val tens = arr.filter(x => x >= 10 &&\
    \ x < 100).map(x => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100\
    \ && x < 1000).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x >= 1000 && x < 10000).map(x => s\"Thousand\")\n        val tenThousands =\
    \ arr.filter(x => x >= 10000 && x < 100000).map(x => s\"TenThousand\")\n     \
    \   val oneThousands = arr.filter(x => x >= 100000 && x < 1000000).map(x => s\"\
    OneThousand\")\n        val hundredThousands = arr.filter(x => x >= 1000000 &&\
    \ x < 10000000).map(x => s\"HundredThousand\")\n        val thousandThousands\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).map(x => s\"ThousandThousand\"\
    )\n        val tenThousandThousands = arr.filter(x => x >= 100000000 && x < 1000000000).map(x\
    \ => s\"TenThousandThousand\")\n        val oneThousandThousands = arr.filter(x\
    \ => x >= 1000000000 && x < 10000000000).map(x => s\"OneThousandThousand\")\n\
    \        val hundredThousandThousands = arr.filter(x => x >= 10000000000 && x\
    \ < 100000000000).map(x => s\"HundredThousandThousand\")\n        val thousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).map(x => s\"ThousandThousandThousand\"\
    )\n        val tenThousandThousandThousands = arr.filter(x => x >= 1000000000000\
    \ && x < 10000000000000).map(x => s\"TenThousandThousandThousand\")\n        val\
    \ oneThousandThousandThousands = arr.filter(x => x >= 10000000000000 && x < 100000000000000).map(x\
    \ => s\"OneThousandThousandThousand\")\n        val hundredThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).map(x => s\"\
    HundredThousandThousandThousand\")\n        val thousandThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).map(x ", " \
    \       val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x =>\
    \ x.toString)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => x.toString)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x\
    \ <= 999l.toLong).map(x => x.toString)\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString)\n        val hundredsAndOnes\
    \ = arr.filter(x => x >= 10000l.toLong && x <= 99999l.toLong).map(x => x.toString)\n\
    \        val tensAndOnes = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => x.toString)\n        val onesAndTens = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => x.toString)\n        val onesAndHundreds =\
    \ arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x => x.toString)\n\
    \        val onesAndThousands = arr.filter(x => x >= 100000000l.toLong && x <=\
    \ 99999999999l.toLong).map(x => x.toString)\n        val onesAndHundredsAndOnes\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).map(x\
    \ => x.toString)\n        val onesAndThousandsAndOnes = arr.filter(x => x >= 10000000000l.toLong\
    \ && x <= 999999999999999l.toLong).map(x => x.toString)\n        val onesAndHundredsAndTens\
    \ = arr.filter(x => x >= 100000000000l.toLong && x <= 9999999999999999l.toLong).map(x\
    \ => x.toString)\n        val onesAndThousandsAndTens = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => x.toString)\n        val onesAndHundredsAndHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val onesAndThousandsAndHundreds = arr.filter(x => x\
    \ >= 100000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x =>\
    \ x.toString)\n        val onesAndHundredsAndThousands = ", "        val list\
    \ = arr.toList\n        val len = list.size\n        val maxLen = len / 10\n \
    \       val minLen = len - maxLen * 10\n        val reversed = list.reverse\n\
    \        val result = reversed.map(x => if (x < 10) \"One\" else if (x < 100)\
    \ \"Two\" else if (x < 1000) \"Three\" else if (x < 10000) \"Four\" else \"Five\"\
    \ else if (x < 100000) \"Six\" else if (x < 1000000) \"Seven\" else \"Eight\"\
    \ else if (x < 10000000) \"Nine\" else \"Zero\")\n        val finalResult = result.take(minLen).reverse.zip(result.drop(minLen)).map(x\
    \ => x._1 + x._2)\n        if (finalResult.size == 0) finalResult else finalResult.toList",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x\
    \ <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandHundreds =\
    \ arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandTh", "        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens\
    \ = arr.filter(x => x >= 20 && x < 30).toList\n        val hundreds = arr.filter(x\
    \ => x >= 30 && x < 40).toList\n        val thousands = arr.filter(x => x >= 40\
    \ && x < 50).toList\n        val millions = arr.filter(x => x >= 50 && x < 60).toList\n\
    \        val billions = arr.filter(x => x >= 60 && x < 70).toList\n        val\
    \ trillions = arr.filter(x => x >= 70 && x < 80).toList\n        val quadrillions\
    \ = arr.filter(x => x >= 80 && x < 90).toList\n        val quintillions = arr.filter(x\
    \ => x >= 90 && x < 100).toList\n        val thousands = arr.filter(x => x >=\
    \ 100 && x < 1000).toList\n        val millions = arr.filter(x => x >= 1000 &&\
    \ x < 10000).toList\n        val billions = arr.filter(x => x >= 10000 && x <\
    \ 100000).toList\n        val trillions = arr.filter(x => x >= 100000 && x < 1000000).toList\n\
    \        val quadrillions = arr.filter(x => x >= 1000000 && x < 10000000).toList\n\
    \        val quintillions = arr.filter(x => x >= 10000000 && x < 100000000).toList\n\
    \        val thousands = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n\
    \        val millions = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n\
    \        val billions = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n\
    \        val trillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n\
    \        val quadrillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val quintillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val thousands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val millions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val billions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val trillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).toList\n\
    \        val quadrillions = arr.filter(x => x >= 1000000000000000000 && x < ",
  "        val arr = arr.toList\n        val len = arr.length\n        val ones =\
    \ arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x >= 9 &&\
    \ x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n   \
    \     val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.mkString(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")\n        val tensReversedString = tensReversed.mkString(\"Ten\", \"\
    Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"\
    Seventeen\", \"Eighteen\", \"Nineteen\")\n        val hundredsReversedString =\
    \ hundredsReversed.mkString(\"Hundred\", \"Thousand\", \"Million\", \"Billion\"\
    )\n        val arrString = arr.mkString(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        if (arr.isEmpty)\
    \ List()\n        else if (arr.length == 1) onesReversedString\n        else if\
    \ (arr.length == 2) tensReversedString\n        else if (arr.length == 3) hundredsReversedString\n\
    \        else if (arr.length == 4) arrString\n        else arr.map(x => if (x\
    \ == 0) \"Zero\" else byLength(x)).mkString(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")", "        val ones = arr.filter(x\
    \ => x % 10 == 0)\n        val tens = arr.filter(x => x % 10 != 0)\n        val\
    \ tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n     \
    \   val onesReversedString = onesReversed.map(x => onesReversedMap.get(x))\n \
    \       val tensReversedString = tensReversed.map(x => tensReversedMap.get(x))\n\
    \        val result = onesReversedString.zip(tensReversedString).map(x => x._1\
    \ + \" \" + x._2)\n        if (result.isEmpty) List()\n        else result", " \
    \       val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos\
    \ = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val result = ones + twos + threes +\
    \ fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n\
    \        reversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))", "       \
    \ val result = new mutable.ListBuffer[String]()\n        var i = 0\n        while(i\
    \ < arr.length) {\n            val num = arr(i)\n            if(num < 1 || num\
    \ > 9) {\n                result.clear()\n                return result\n    \
    \        }\n            val digit = num.toString.charAt(0)\n            val name\
    \ = if (digit == '1') \"One\" else if (digit == '2') \"Two\" else if (digit ==\
    \ '3') \"Three\" else if (digit == '4') \"Four\" else if (digit == '5') \"Five\"\
    \ else if (digit == '6') \"Six\" else if (digit == '7') \"Seven\" else if (digit\
    \ == '8') \"Eight\" else if (digit == '9') \"Nine\" else \"\"\n            result\
    \ += name\n            i += 1\n        }\n        result.reverse", "        val\
    \ ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x\
    \ => x >= 99).map(x => s\"Hundred\")\n        val names = ones + tens + hundreds\n\
    \        val reversed = names.reverse\n        val result = reversed.map(x =>\
    \ x.toString.replaceFirst(\"\\\\d\", \"$\"))\n        result", "        val list\
    \ = arr.toList\n        val len = list.size\n        val ones = list.filter(x\
    \ => x < 9).toList\n        val tens = list.filter(x => x >= 9 && x < 99).toList\n\
    \        val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.mkString(\"\
    ,\")\n        val tensReversedStringList = tensReversedString.split(\",\")\n \
    \       val tensReversedStringListLength = tensReversedStringList.size\n     \
    \   val tensReversedStringListLength = tensReversedStringListLength.toInt\n  \
    \      val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversed", "        val ones =\
    \ arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n \
    \       val tensReversed = tens.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedStringLength = tensReversedString.length\n      \
    \  val tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = ten", "        val nums = arr.toList.sortBy(_.toInt)\n        val reversed\
    \ = nums.reverse\n        val result = reversed.map(i => if (i < 10) \"One\" else\
    \ if (i < 20) \"Two\" else if (i < 30) \"Three\" else if (i < 40) \"Four\" else\
    \ if (i < 50) \"Five\" else if (i < 60) \"Six\" else if (i < 70) \"Seven\" else\
    \ if (i < 80) \"Eight\" else \"Nine\")\n        result", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val one = arr.filter(x => x >= 1 && x <=\
    \ 9).toList\n        val two = arr.filter(x => x >= 10 && x <= 99).toList\n  \
    \      val three = arr.filter(x => x >= 100 && x <= 999).toList\n        val four\
    \ = arr.filter(x => x >= 1000 && x <= 9999).toList\n        val five = arr.filter(x\
    \ => x >= 10000 && x <= 99999).toList\n        val six = arr.filter(x => x >=\
    \ 100000 && x <= 999999).toList\n        val seven = arr.filter(x => x >= 1000000\
    \ && x <= 9999999).toList\n        val eight = arr.filter(x => x >= 10000000 &&\
    \ x <= 99999999).toList\n        val nine = arr.filter(x => x >= 100000000 &&\
    \ x <= 999999999).toList\n        val ten = arr.filter(x => x >= 1000000000 &&\
    \ x <= 99999999999).toList\n        val hundred = arr.filter(x => x >= 10000000000\
    \ && x <= 999999999999).toList\n        val thousand = arr.filter(x => x >= 100000000000\
    \ && x <= 999999999999999).toList\n        val million = arr.filter(x => x >=\
    \ 1000000000000 && x <= 9999999999999999).toList\n        val billion = arr.filter(x\
    \ => x >= 10000000000000 && x <= 9999999999999999999).toList\n        val trillion\
    \ = arr.filter(x => x >= 100000000000000 && x <= 99999999999999999999).toList\n\
    \        val quadrillion = arr.filter(x => x >= 1000000000000000 && x <= 99999999999999999999999).toList\n\
    \        val quintillion = arr.filter(x => x >= 10000000000000000 && x <= 999999999999999999999999).toList\n\
    \        val sextillion = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999).toList\n\
    \        val septillion = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999).toList\n\
    \        val octillion = arr.filter(x => x >= 100000000000000000 && x <= 9999999999999999999999999999999).toList\n\
    \        val nonillion = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999).toList\n\
    \        val decillion = arr.filter(x => x >= 100000000000000000 && x <= 99999999999999999999999999999999999).toList\n\
    \        val undecillion = arr.filter(x => x >= 100000000000000000 && x <= 999999999999999999999999999999999999).toList\n\
    \        val duodecillion = arr.filter(", "        val ones = arr.filter(_ <=\
    \ 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThous",
  "        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x\
    \ => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n\
    \        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedString2\
    \ = tensReversed.map(x => Three(x))\n        val tensReversedString3 = tensReversed.map(x\
    \ => Four(x))\n        val tensReversedString4 = tensReversed.map(x => Five(x))\n\
    \        val tensReversedString5 = tensReversed.map(x => Six(x))\n        val\
    \ tensReversedString6 = tensReversed.map(x => Seven(x))\n        val tensReversedString7\
    \ = tensReversed.map(x => Eight(x))\n        val tensReversedString8 = tensReversed.map(x\
    \ => Nine(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString10 = tensReversed.map(x => Eleven(x))\n       \
    \ val tensReversedString11 = tensReversed.map(x => Twelve(x))\n        val tensReversedString12\
    \ = tensReversed.map(x => Thirteen(x))\n        val tensReversedString13 = tensReversed.map(x\
    \ => Fourteen(x))\n        val tensReversedString14 = tensReversed.map(x => Fifteen(x))\n\
    \        val tensReversedString15 = tensReversed.map(x => Sixteen(x))\n      \
    \  val tensReversedString16 = tensReversed.map(x => Seventeen(x))\n        val\
    \ tensReversedString17 = tensReversed.map(x => Eighteen(x))\n        val tensReversedString18\
    \ = tensReversed.map(x => Nineteen(x))\n        val tensReversedString19 = tensReversed.map(x\
    \ => Twenty(x))\n        val tensReversedString20 = tensReversed.map(x => TwentyOne(x))\n\
    \        val tensReversedString21 = tensReversed.map(x => TwentyTwo(x))\n    \
    \    val tensReversedString22 = tensReversed.map(x => TwentyThree(x))\n      \
    \  val tensReversedString23 = tensReverse", "        val result = arr.filter(_\
    \ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n        val map = new\
    \ mutable.HashMap[Long, String]()\n        for(i <- 0 until result.size) {\n \
    \           map.put(result(i), \"One\")\n        }\n        val result2 = map.filter(_._2\
    \ != \"One\").map(_._1)\n        result2.toList", "        val nums = arr.toList\n\
    \        val len = nums.map(_.toString.length).max\n        val numsSorted = nums.sortBy(_.toString.length)\n\
    \        val reversed = numsSorted.reverse\n        val numsReversed = reversed.map(_.toString.reverse)\n\
    \        val numsReversedWithOne = numsReversed.map(_.toString.replaceAll(\"\\\
    \\D\", \"\"))\n        val numsReversedWithOneWithOne = numsReversedWithOne.map(_.toString.replaceAll(\"\
    \\\\D\", \"One\"))\n        val numsReversedWithOneWithTwo = numsReversedWithOneWithOne.map(_.toString.replaceAll(\"\
    \\\\D\", \"Two\"))\n        val numsReversedWithOneWithThree = numsReversedWithOneWithTwo.map(_.toString.replaceAll(\"\
    \\\\D\", \"Three\"))\n        val numsReversedWithOneWithFour = numsReversedWithOneWithThree.map(_.toString.replaceAll(\"\
    \\\\D\", \"Four\"))\n        val numsReversedWithOneWithFive = numsReversedWithOneWithFour.map(_.toString.replaceAll(\"\
    \\\\D\", \"Five\"))\n        val numsReversedWithOneWithSix = numsReversedWithOneWithFive.map(_.toString.replaceAll(\"\
    \\\\D\", \"Six\"))\n        val numsReversedWithOneWithSeven = numsReversedWithOneWithSix.map(_.toString.replaceAll(\"\
    \\\\D\", \"Seven\"))\n        val numsReversedWithOneWithEight = numsReversedWithOneWithSeven.map(_.toString.replaceAll(\"\
    \\\\D\", \"Eight\"))\n        val numsReversedWithOneWithNine = numsReversedWithOneWithEight.map(_.toString.replaceAll(\"\
    \\\\D\", \"Nine\"))\n        numsReversedWithOneWithNine", "        val len =\
    \ arr.length\n        if (len == 0) List()\n        else if (len == 1) List(arr(0)).toString\n\
    \        else {\n            val arr2 = arr.filter(_ < 10).sortWith(_ < _)\n \
    \           val arr3 = arr2.reverse\n            val arr4 = arr3.map(_ - 10).map(_.toString)\n\
    \            arr4\n        }", "        val ones = arr.filter(x => x < 9).toList\n\
    \        val tens = arr.filter(x => x < 99).toList\n        val hundreds = arr.filter(x\
    \ => x < 999).toList\n        val thousands = arr.filter(x => x < 9999).toList\n\
    \        val tenThousands = arr.filter(x => x < 999999).toList\n        val oneThousands\
    \ = arr.filter(x => x < 9999999).toList\n        val oneHundreds = arr.filter(x\
    \ => x < 999999999).toList\n        val oneThousandHundreds = arr.filter(x =>\
    \ x < 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x < 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 99999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousand",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >=\
    \ 10).toList\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringList = onesReversedString.split(\"\\\\D+\"\
    )\n        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n\
    \        val onesReversedStringListLength = onesReversedStringList.length\n  \
    \      val tensReversedStringListLength = tensReversedStringList.length\n    \
    \    val onesReversedStringListLength = onesReversedStringListLength - 1\n   \
    \     val tensReversedStringListLength = tensReversedStringListLength - 1\n  \
    \      val onesReversedStringListLength = onesReversedStringListLength - 1\n \
    \       val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        val onesReversedStringListLength = onesReversedStringListLength - 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength - 1\n\
    \        ", "        val ones = arr.filter(x => x < 9).toList\n        val tens\
    \ = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x\
    \ => x >= 99).toList\n        val hundredsReversed = hundreds.reverse\n      \
    \  val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedString = onesReversed.map(x => One(x))\n        val tensReversedString\
    \ = tensReversed.map(x => Two(x))\n        val hundredsReversedString = hundredsReversed.map(x\
    \ => Three(x))\n        val hundredsReversedStringReversed = hundredsReversedString.reverse\n\
    \        val tensReversedStringReversed = tensReversedStringReversed.reverse\n\
    \        val onesReversedStringReversed = onesReversedStringReversed.reverse\n\
    \        val onesReversedStringReversedString = onesReversedStringReversed.map(x\
    \ => Four(x))\n        val tensReversedStringReversedString = tensReversedStringReversed.map(x\
    \ => Five(x))\n        val hundredsReversedStringReversedString = hundredsReversedStringReversed.map(x\
    \ => Six(x))\n        val hundredsReversedStringReversedStringReversed = hundredsReversedStringReversedString.reverse\n\
    \        val tensReversedStringReversedStringReversed = tensReversedStringReversedStringReversed.reverse\n\
    \        val onesReversedStringReversedStringReversed = onesReversedStringReversedStringReversed.reverse\n\
    \        val onesReversedStringReversedStringReversedString = onesReversedStringReversedStringReversed.map(x\
    \ => Seven(x))\n        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(x\
    \ => Eight(x))\n        val hundredsReversedStringReversedStringReversedString\
    \ = hundredsReversedStringReversedStringReversed.map(x => Nine(x))\n        val\
    \ hundredsReversedStringReversedStringReversedStringReversed = hundredsReversedStringReversedStringReversedString.reverse\n\
    \        val tensReversedStringReversedStringReversedStringReversed = tensReversedStringReversedStringReversedStringReversed.reverse\n\
    \        val onesReversedStringReversedStringReversedStringReversedString = onesReversedStringReversedStringReversedStringReversed.map(x\
    \ => Nine", "        val ones = arr.filter(x => x < 10).toList\n        val tens\
    \ = arr.filter(x => x >= 10 && x < 20).toList\n        val teens = arr.filter(x\
    \ => x >= 20 && x < 30).toList\n        val twenties = arr.filter(x => x >= 30\
    \ && x < 40).toList\n        val thirties = arr.filter(x => x >= 40 && x < 50).toList\n\
    \        val forties = arr.filter(x => x >= 50 && x < 60).toList\n        val\
    \ fifties = arr.filter(x => x >= 60 && x < 70).toList\n        val sixties = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val seventies = arr.filter(x => x >= 80\
    \ && x < 90).toList\n        val eighties = arr.filter(x => x >= 90 && x < 100).toList\n\
    \        val nineties = arr.filter(x => x >= 100).toList\n        val onesAndTens\
    \ = ones + tens\n        val onesAndElevens = ones + elevens\n        val onesAndTwelves\
    \ = ones + twelves\n        val onesAndThirteens = ones + thirteens\n        val\
    \ onesAndFourteens = ones + fourteens\n        val onesAndFifteens = ones + fifties\n\
    \        val onesAndSixteens = ones + sixties\n        val onesAndSeventeens =\
    \ ones + seventies\n        val onesAndEighteens = ones + eighties\n        val\
    \ onesAndNineteens = ones + nineties\n        val tensAndElevens = tens + elevens\n\
    \        val tensAndTwelves = tens + twelves\n        val tensAndThirteens = tens\
    \ + thirteens\n        val tensAndFourteens = tens + fourteens\n        val tensAndFifteens\
    \ = tens + fifties\n        val tensAndSixteens = tens + sixties\n        val\
    \ tensAndSeventeens = tens + seventies\n        val tensAndEighteens = tens +\
    \ eighties\n        val tensAndNineteens = tens + nineties\n        val elevensAndTwelves\
    \ = elevens + twelves\n        val elevensAndThirteens = elevens + thirteens\n\
    \        val elevensAndFourteens = elevens + fourteens\n        val elevensAndFifteens\
    \ = elevens + fifties\n        val elevensAndSixteens = elevens + ", "       \
    \ val list = arr.toList\n        val len = list.size\n        val ones = list.filter(_\
    \ <= 1).toList\n        val tens = list.filter(_ <= 10).toList\n        val tensReversed\
    \ = tens.reverse\n        val tensReversedString = tensReversed.mkString(\"\"\
    )\n        val tensReversedStringList = tensReversedString.split(\"(?<=\\\\d)\"\
    )\n        val tensReversedStringListLength = tensReversedStringList.size\n  \
    \      val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversedStringListLength = tensReversedStringListLength.toInt\n\
    \        val tensReversedStringListLength = tensReversedStringListLength + 1\n\
    \        val tensReversed", "        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val teens\
    \ = arr.filter(x => x >= 20 && x < 30).toList\n        val hundreds = arr.filter(x\
    \ => x >= 30 && x < 40).toList\n        val thousands = arr.filter(x => x >= 40\
    \ && x < 50).toList\n        val millions = arr.filter(x => x >= 50 && x < 60).toList\n\
    \        val billions = arr.filter(x => x >= 60 && x < 70).toList\n        val\
    \ trillions = arr.filter(x => x >= 70 && x < 80).toList\n        val quadrillions\
    \ = arr.filter(x => x >= 80 && x < 90).toList\n        val quintillions = arr.filter(x\
    \ => x >= 90 && x < 100).toList\n        val thousandands = arr.filter(x => x\
    \ >= 100 && x < 1000).toList\n        val millionands = arr.filter(x => x >= 1000\
    \ && x < 10000).toList\n        val billionands = arr.filter(x => x >= 10000 &&\
    \ x < 100000).toList\n        val trillionands = arr.filter(x => x >= 100000 &&\
    \ x < 1000000).toList\n        val quadrillionands = arr.filter(x => x >= 1000000\
    \ && x < 10000000).toList\n        val quintillionands = arr.filter(x => x >=\
    \ 10000000 && x < 100000000).toList\n        val thousandandands = arr.filter(x\
    \ => x >= 100000000 && x < 1000000000).toList\n        val millionandands = arr.filter(x\
    \ => x >= 1000000000 && x < 10000000000).toList\n        val billionandands =\
    \ arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val trillionandands\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ quadrillionands = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val quintillionands = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val thousandandands = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val millionandands = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val billionandands = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val trillionandands = arr.filter(x => x >= 100000000000000000 && ", " \
    \       val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n       \
    \ val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val\
    \ hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val\
    \ thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n      \
    \  val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n\
    \        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n\
    \        val oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x\
    \ <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val n = arr.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val tensLength = tens.length\n        val hundredsLength = hundreds.length\n\
    \        val onesLength = ones.length\n        val tensReversed = tens.reverse\n\
    \        val hundredsReversed = hundreds.reverse\n        val onesReversed = ones.reverse\n\
    \        val tensReversedLength = tensReversed.length\n        val hundredsReversedLength\
    \ = hundredsReversed.length\n        val onesReversedLength = onesReversed.length\n\
    \        val tensReversedReversed = tensReversed.reverse\n        val hundredsReversedReversed\
    \ = hundredsReversed.reverse\n        val onesReversedReversed = onesReversed.reverse\n\
    \        val tensReversedReversedLength = tensReversedReversed.length\n      \
    \  val hundredsReversedReversedLength = hundredsReversedReversed.length\n    \
    \    val onesReversedReversedLength = onesReversedReversed.length\n        val\
    \ tensReversedReversedReversed = tensReversedReversed.reverse\n        val hundredsReversedReversedReversed\
    \ = hundredsReversedReversed.reverse\n        val onesReversedReversedReversed\
    \ = onesReversedReversed.reverse\n        val tensReversedReversedReversedLength\
    \ = tensReversedReversedReversed.length\n        val hundredsReversedReversedReversedLength\
    \ = hundredsReversedReversedReversed.length\n        val onesReversedReversedReversedLength\
    \ = onesReversedReversedReversed.length\n        val tensReversedReversedReversedReversed\
    \ = tensReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversed\
    \ = onesReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedLength\
    \ = tensReversedReversedReversedReversed.length\n        val hundredsReversedReversedReversedReversedLength\
    \ = hundredsReversedReversedReversedReversed.length\n        val onesReversedReversedReversedReversedLength\
    \ = one", "        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n   \
    \     val tens = arr.filter(x => x < 20).map(x => s\"Ten\")\n        val hundreds\
    \ = arr.filter(x => x < 100).map(x => s\"Hundred\")\n        val thousands = arr.filter(x\
    \ => x < 1000).map(x => s\"Thousand\")\n        val millions = arr.filter(x =>\
    \ x < 1000000).map(x => s\"Million\")\n        val billions = arr.filter(x =>\
    \ x < 1000000000).map(x => s\"Billion\")\n        val trillions = arr.filter(x\
    \ => x < 1000000000000).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x\
    \ => x < 1000000000000000).map(x => s\"Quadrillion\")\n        val quintillions\
    \ = arr.filter(x => x < 1000000000000000000).map(x => s\"Quintillion\")\n    \
    \    val onesAndTens = arr.filter(x => x < 10000000000000000).map(x => s\"OneAndTen\"\
    )\n        val onesAndHundreds = arr.filter(x => x < 10000000000000000000).map(x\
    \ => s\"OneAndHundred\")\n        val onesAndThousands = arr.filter(x => x < 100000000000000000000).map(x\
    \ => s\"OneAndThousand\")\n        val onesAndMillions = arr.filter(x => x < 1000000000000000000000).map(x\
    \ => s\"OneAndMillion\")\n        val onesAndBillions = arr.filter(x => x < 10000000000000000000000).map(x\
    \ => s\"OneAndBillion\")\n        val onesAndTrillions = arr.filter(x => x < 100000000000000000000000).map(x\
    \ => s\"OneAndTrillion\")\n        val onesAndQuadrillions = arr.filter(x => x\
    \ < 1000000000000000000000000).map(x => s\"OneAndQuadrillion\")\n        val onesAndQuintillions\
    \ = arr.filter(x => x < 100000000000000000000000000).map(x => s\"OneAndQuintillion\"\
    )\n        val onesAndOnesAndTens = arr.filter(x => x < 1000000000000000000000000000).map(x\
    \ => s\"OneAndOneAndTen\")\n        val onesAndOnesAndHundreds = arr.filter(x\
    \ => x < 10000000000000000000000000000).map(x => s\"OneAndOneAndHundred\")\n \
    \       val onesAndOnesAndThousands = arr.filter(x => x < 100000000000000000000000000000).map(x\
    \ => s\"OneAndOneAndThous", "        val ones = arr.filter(x => x <= 9 && x >=\
    \ 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n        val hundreds\
    \ = arr.filter(x => x <= 999 && x >= 100)\n        val thousands = arr.filter(x\
    \ => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x => x <=\
    \ 999999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <= 9999999\
    \ && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999999 &&\
    \ x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 99999999999\
    \ && x >= 10000000)\n        val oneThousandThousandHundreds = arr.filter(x =>\
    \ x <= 999999999999 && x >= 100000000)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999 && x >= 1000000000)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 999999999999 && x >= 10000000000)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999 && x >= 100000000000)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 999999999999 && x >= 1000000000000)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999 && x >= 10000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 999999999999 && x >= 100000000000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999 && x >= 1000000000000000)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 999999999999 && x >= 10000000000000000)\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999 && x >= 100000000000000000)\n        val\
    \ oneThousandThousandThous", "        val ones = arr.filter(_ <= 1).toList\n \
    \       val tens = arr.filter(_ <= 10).toList\n        val hundreds = arr.filter(_\
    \ <= 100).toList\n        val thousands = arr.filter(_ <= 1000).toList\n     \
    \   val tenThousands = arr.filter(_ <= 10000).toList\n        val hundredThousands\
    \ = arr.filter(_ <= 100000).toList\n        val thousandThousands = arr.filter(_\
    \ <= 1000000).toList\n        val oneThousand = arr.filter(_ <= 10000000).toList\n\
    \        val oneHundred = arr.filter(_ <= 100000000).toList\n        val oneThousandThousand\
    \ = arr.filter(_ <= 1000000000).toList\n        val oneHundredThousand = arr.filter(_\
    \ <= 10000000000).toList\n        val oneThousandHundred = arr.filter(_ <= 100000000000).toList\n\
    \        val oneHundredThousandThousand = arr.filter(_ <= 1000000000000).toList\n\
    \        val oneHundredThousandHundred = arr.filter(_ <= 10000000000000).toList\n\
    \        val oneThousandHundredThousand = arr.filter(_ <= 100000000000000).toList\n\
    \        val oneHundredThousandHundredThousand = arr.filter(_ <= 1000000000000000).toList\n\
    \        val oneThousandHundredThousandHundred = arr.filter(_ <= 10000000000000000).toList\n\
    \        val oneHundredThousandHundredThousandHundred = arr.filter(_ <= 100000000000000000).toList\n\
    \        val oneThousandHundredThousandHundredThousand = arr.filter(_ <= 1000000000000000000).toList\n\
    \        val oneHundredThousandHundredThousandHundredThousand = arr.filter(_ <=\
    \ 10000000000000000000).toList\n        val oneThousandHundredThousandHundredThousandHundredThousand\
    \ = arr.filter(_ <= 100000000000000000000).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousand\
    \ = arr.filter(_ <= 1000000000000000000000).toList\n        val oneThousandHundredThousandHundredThousandHundredThousandHundredThousand\
    \ = arr.filter(_ <= 10000000000000000000000).toList\n        ", "        val ones\
    \ = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10\
    \ && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x < 30).toList\n\
    \        val twenties = arr.filter(x => x >= 30 && x < 40).toList\n        val\
    \ thirties = arr.filter(x => x >= 40 && x < 50).toList\n        val fourties =\
    \ arr.filter(x => x >= 50 && x < 60).toList\n        val fifties = arr.filter(x\
    \ => x >= 60 && x < 70).toList\n        val sixties = arr.filter(x => x >= 70\
    \ && x < 80).toList\n        val seventies = arr.filter(x => x >= 80 && x < 90).toList\n\
    \        val eighties = arr.filter(x => x >= 90 && x < 100).toList\n        val\
    \ nineties = arr.filter(x => x >= 100).toList\n        val onesAndTens = ones.zip(tens)\n\
    \        val onesAndTwenties = ones.zip(twenties)\n        val onesAndThirties\
    \ = ones.zip(thirties)\n        val onesAndFourties = ones.zip(fourties)\n   \
    \     val onesAndFifties = ones.zip(fifties)\n        val onesAndSixties = ones.zip(sixties)\n\
    \        val onesAndSeventies = ones.zip(seventies)\n        val onesAndEighties\
    \ = ones.zip(eighties)\n        val onesAndNineties = ones.zip(nineties)\n   \
    \     val tensAndTwenties = tens.zip(twenties)\n        val tensAndThirties =\
    \ tens.zip(thirties)\n        val tensAndFourties = tens.zip(fourties)\n     \
    \   val tensAndFifties = tens.zip(fifties)\n        val tensAndSixties = tens.zip(sixties)\n\
    \        val tensAndSeventies = tens.zip(seventies)\n        val tensAndEighties\
    \ = tens.zip(eighties)\n        val tensAndNineties = tens.zip(nineties)\n   \
    \     val twentiesAndThirties = twenties.zip(thirties)\n        val twentiesAndFourties\
    \ = twenties.zip(fourties)\n        val twentiesAndFifties = twenties.zip(fifties)\n\
    \        val twentiesAndSixties = twenties.zip(sixties)\n        val twentiesAndSeventies\
    \ = twenties.zip(seventies)", "        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 20).toList\n        val hundreds\
    \ = arr.filter(x => x >= 20 && x < 100).toList\n        val thousands = arr.filter(x\
    \ => x >= 100 && x < 1000).toList\n        val tenThousands = arr.filter(x =>\
    \ x >= 1000 && x < 10000).toList\n        val hundredThousands = arr.filter(x\
    \ => x >= 10000 && x < 100000).toList\n        val millions = arr.filter(x =>\
    \ x >= 100000 && x < 1000000).toList\n        val thousandThousands = arr.filter(x\
    \ => x >= 1000000 && x < 10000000).toList\n        val billions = arr.filter(x\
    \ => x >= 10000000 && x < 100000000).toList\n        val millionThousands = arr.filter(x\
    \ => x >= 10000000 && x < 1000000000).toList\n        val billionThousands = arr.filter(x\
    \ => x >= 100000000 && x < 10000000000).toList\n        val trillions = arr.filter(x\
    \ => x >= 1000000000 && x < 100000000000).toList\n        val millionThousandThousands\
    \ = arr.filter(x => x >= 10000000000 && x < 1000000000000).toList\n        val\
    \ billionThousandThousands = arr.filter(x => x >= 100000000000 && x < 10000000000000).toList\n\
    \        val trillionThousands = arr.filter(x => x >= 1000000000000 && x < 100000000000000).toList\n\
    \        val millionThousandThousandThousands = arr.filter(x => x >= 100000000000000\
    \ && x < 1000000000000000).toList\n        val billionThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n \
    \       val trillionThousandThousands = arr.filter(x => x >= 10000000000000000\
    \ && x < 100000000000000000).toList\n        val millionThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).toList\n\
    \        val billionThousandThousandThousandThousands = arr.filter(x => x >= 1000000000000000000\
    \ && x < 10000000000000000000).toList\n        val trillionThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000).toList\n\
    \        val millionThousandThousandThousandThousandThousands = arr.filter(x ",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).sorted\n \
    \       val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).sorted\n\
    \        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).sorted\n\
    \        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).sorted\n\
    \        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).sorted\n\
    \        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).sorted\n\
    \        val tenThousandThousands = arr.filter(x => x >= 10000000l.toLong && x\
    \ <= 99999999l.toLong).sorted\n        val oneThousandThousands = arr.filter(x\
    \ => x >= 100000000l.toLong && x <= 99999999999l.toLong).sorted\n        val tenThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).sorted\n\
    \        val oneThousandThousandThousands = arr.filter(x => x >= 10000000000l.toLong\
    \ && x <= 999999999999999l.toLong).sorted\n        val tenThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandThousandThousands = arr.filter(x => x >= 10000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).sorted\n        val tenThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandThousandThousandThousands = arr.filter(x => x\
    \ >= 1000000000000000l.toLong && x <= 999999999999999999999999999l.toLong).sorted\n\
    \        val tenThousandThousandThousandThousandThousandThousands = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousand", " \
    \       val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHund", "        val result = arr.filter(_ >= 1l.toLong && _ <=\
    \ 9l.toLong).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Long,\
    \ String]()\n        for(i <- 0 until result.length) map.put(result(i), i.toString)\n\
    \        arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse.map(i\
    \ => map.get(i))", "        val result = new mutable.ListBuffer[String]()\n  \
    \      val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val hundredThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ thousandThousands = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousands = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n\
    \        val oneHundredThousands = arr.filter(x => x >= 1000000000l.toLong &&\
    \ x <= 999999999999l.toLong)\n        val oneThousandThousands = arr.filter(x\
    \ => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n        val oneHundredThousandThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandHundredThousands = arr.filter(x => x >= 100000000000000l.toLong\
    \ && x <= 99999999999999999999l.toLong)\n        val oneHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandHundredThousandHundredThousands = arr.filter(x => x >=\
    \ 100000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n     \
    \   val oneHundredThousandHundredThousandHundredThousands = arr.filter(x => x\
    \ >= 1000000000000000000l.toLong && x <= 999999999999999999999999999l.toLong)\n\
    \        val oneThousandHundredThousandHundredThousandHundredThousands = arr.filter(x\
    \ => x >= 10000000000000000000l.toLong && x <= 9999999999999999999999999999",
  "        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(x\
    \ => x < 9l.toLong)\n        val tens = arr.filter(x => x < 99l.toLong)\n    \
    \    val hundreds = arr.filter(x => x < 999l.toLong)\n        val thousands =\
    \ arr.filter(x => x < 9999l.toLong)\n        val tenThousands = arr.filter(x =>\
    \ x < 99999l.toLong)\n        val oneThousands = arr.filter(x => x < 999999l.toLong)\n\
    \        val oneHundreds = arr.filter(x => x < 9999999l.toLong)\n        val oneThousandHundreds\
    \ = arr.filter(x => x < 999999999l.toLong)\n        val oneThousandThousands =\
    \ arr.filter(x => x < 99999999999l.toLong)\n        val oneHundredThousands =\
    \ arr.filter(x => x < 999999999l.toLong)\n        val oneHundredThousandHundreds\
    \ = arr.filter(x => x < 99999999999l.toLong)\n        val oneHundredThousandThousands\
    \ = arr.filter(x => x < 999999999999l.toLong)\n        val oneHundredThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999l.toLong)\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999l.toLong)\n        val oneHundredThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 99999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 99999999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999999999999999l.toLong)\n        val oneHundredThousandThousandThousandTh",
  "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val numsSorted = nums.sortBy(_.toString.length)\n        val reversed\
    \ = numsSorted.reverse\n        val reversedStrings = reversed.map(_.toString)\n\
    \        val reversedStringsLength = reversedStrings.map(_.length).max\n     \
    \   val reversedStringsSorted = reversedStrings.sortBy(_.length)\n        val\
    \ reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n    \
    \    val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max\n\
    \        val reversedStringsSortedLength = reversedStringsSorted.map(_.length).max",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val oneThousands\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ oneHundreds = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong)\n\
    \        val oneThousandHundreds = arr.filter(x => x >= 100000000l.toLong && x\
    \ <= 99999999999l.toLong)\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(x => x >=\
    \ 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n    \
    \    val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 10000000000000000l.toLong && x <= 999999999999999999999999l.toLong)\n\
    \        val oneThousandThousandThousandThousandThousandThousandTh", "       \
    \ val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x =>\
    \ x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val reversed = ones + tens + hundreds\n        val named = reversed.map(x\
    \ => if (x == 0) \"One\" else if (x == 1) \"Two\" else if (x == 2) \"Three\" else\
    \ if (x == 3) \"Four\" else if (x == 4) \"Five\" else if (x == 5) \"Six\" else\
    \ if (x == 6) \"Seven\" else if (x == 7) \"Eight\" else if (x == 8) \"Nine\" else\
    \ \"Ten\")\n        named.toList", "        val ones = arr.filter(x => x < 9).toList\n\
    \        val tens = arr.filter(x => x < 99).toList\n        val hundreds = arr.filter(x\
    \ => x < 999).toList\n        val thousands = arr.filter(x => x < 9999).toList\n\
    \        val tenThousands = arr.filter(x => x < 999999).toList\n        val oneThousands\
    \ = arr.filter(x => x < 9999999).toList\n        val oneHundreds = arr.filter(x\
    \ => x < 999999999).toList\n        val oneThousandHundreds = arr.filter(x =>\
    \ x < 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(x\
    \ => x < 9999999999999).toList\n        val oneHundredThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999).toList\n        val oneThousandThousandThousandHundredThousands\
    \ = arr.filter(x => x < 999999999999977).toList\n        val oneHundredThousandThousandThousandHundredThousands\
    \ = arr.filter(x => x < 99999999999999977).toList\n        val oneThousandThousandThousandThousandHundredThousandsOne\
    \ = arr.filter(x => x < 99999999999997766).toList\n        val oneHundredThousandThousandThousandHundredThousandsOne\
    \ = arr.filter(x => x < 9999999999999997766).toList\n        val oneThousandThousandThousandThousandHundredThousandsOneOne\
    \ = arr.filter(x => x < 9999999999999776655).toList\n        val oneHundredThousandThousandThousandHundredThousandsOneOne\
    \ = arr.filter(x => x < 999999999999999776655).toList\n        val oneThousandThousandThousandThousandHundredThousandsOneOneOne\
    \ = arr.filter(x => x < 999999999999977665555).toList\n        val oneHundredThousandThousandThousandHundredThousandsOneOneOne\
    \ = arr.filter(x => x < 99999999999999977665555).toList\n        val oneThousandThousandThousandThousandHundredThousandsOneOneOneOne\
    \ = arr.filter(x => x < 99999999999997766555555).to", "        val ones = arr.filter(x\
    \ => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = arr.filter(x => x >= 99).toList\n        val reversed\
    \ = ones + tens + hundreds.reverse\n        reversed.map(x => if (x < 10) \"One\"\
    \ else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else \"Four\")", "  \
    \      val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_ - 1).reverse.map(i\
    \ => i.toString).map(i => s\"$i\")\n        if (arr.isEmpty) result\n        else\
    \ result", "        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_\
    \ < _).reverse\n        val one = \"One\"\n        val two = \"Two\"\n       \
    \ val three = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\
    \n        val six = \"Six\"\n        val seven = \"Seven\"\n        val eight\
    \ = \"Eight\"\n        val nine = \"Nine\"\n        val map = new mutable.HashMap[Long,\
    \ String]()\n        map.put(1l.toLong, one)\n        map.put(2l.toLong, two)\n\
    \        map.put(3l.toLong, three)\n        map.put(4l.toLong, four)\n       \
    \ map.put(5l.toLong, five)\n        map.put(6l.toLong, six)\n        map.put(7l.toLong,\
    \ seven)\n        map.put(8l.toLong, eight)\n        map.put(9l.toLong, nine)\n\
    \        val result2 = result.map(x => map.get(x))\n        result2.toList", " \
    \       val result = new mutable.ListBuffer[String]()\n        val one = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"One\")\n        val two = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Two\")\n        val three = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Three\")\n        val four = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Four\")\n        val five = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Five\")\n        val six = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Six\")\n        val seven = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Seven\")\n        val eight = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Eight\")\n        val nine = arr.filter(x\
    \ => x < 10).map(x => x.toString).mkString(\"Nine\")\n        result ++= List(one,\
    \ two, three, four, five, six, seven, eight, nine)\n        result.reverse", " \
    \       val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val reversed = nums.reverse\n        val ones = reversed.filter(x =>\
    \ x < 10)\n        val tens = reversed.filter(x => x >= 10 && x < 100)\n     \
    \   val hundreds = reversed.filter(x => x >= 100)\n        val names = (ones,\
    \ tens, hundreds).map(x => x.map(y => nameFor(y))).flatten\n        if (names.isEmpty)\
    \ Nil\n        else names.map(_.mkString(\"\"))", "        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n\
    \        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n \
    \       val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHund", "        val ones = arr.filter(x => x < 9).map(x => s\"\
    One\")\n        val twos = arr.filter(x => x < 18).map(x => s\"Two\")\n      \
    \  val threes = arr.filter(x => x < 27).map(x => s\"Three\")\n        val fours\
    \ = arr.filter(x => x < 36).map(x => s\"Four\")\n        val fives = arr.filter(x\
    \ => x < 45).map(x => s\"Five\")\n        val sixes = arr.filter(x => x < 54).map(x\
    \ => s\"Six\")\n        val sevens = arr.filter(x => x < 63).map(x => s\"Seven\"\
    )\n        val eights = arr.filter(x => x < 72).map(x => s\"Eight\")\n       \
    \ val nines = arr.filter(x => x < 81).map(x => s\"Nine\")\n        val reversed\
    \ = arr.reverse\n        val result = reversed.map(x => x % 10).map(x => x match\
    \ {\n            case 0 => ones\n            case 1 => twos\n            case\
    \ 2 => threes\n            case 3 => fours\n            case 4 => fives\n    \
    \        case 5 => sixes\n            case 6 => sevens\n            case 7 =>\
    \ eights\n            case 8 => nines\n            case _ => throw new RuntimeException(\"\
    Unexpected number: \" + x)\n        }).flatten\n        if (result.isEmpty) Nil\n\
    \        else result", "        val ones = arr.filter(x => x >= 1l.toLong && x\
    \ <= 9l.toLong).sorted\n        val tens = arr.filter(x => x >= 10l.toLong &&\
    \ x <= 99l.toLong).sorted\n        val hundreds = arr.filter(x => x >= 100l.toLong\
    \ && x <= 999l.toLong).sorted\n        val thousands = arr.filter(x => x >= 1000l.toLong\
    \ && x <= 9999l.toLong).sorted\n        val tenThousands = arr.filter(x => x >=\
    \ 100000l.toLong && x <= 999999l.toLong).sorted\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong).sorted\n        val oneHundreds\
    \ = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).sorted\n\
    \        val oneThousandThousands = arr.filter(x => x >= 100000000l.toLong &&\
    \ x <= 99999999999l.toLong).sorted\n        val oneThousandHundreds = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong).sorted\n        val\
    \ oneThousandThousandHundreds = arr.filter(x => x >= 10000000000l.toLong && x\
    \ <= 999999999999999l.toLong).sorted\n        val oneThousandThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandHundredThousandHundreds = arr.filter(x => x >=\
    \ 100000000000000l.toLong && x <= 99999999999999999999l.toLong).sorted\n     \
    \   val oneThousandThousandHundredThousandHundredThousands = arr.filter(x => x\
    \ >= 10000000000000000l.toLong && x <= 99999999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundreds = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 999999999999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong).sorted\n\
    \        val oneThousandThousandHund", "        val result = arr.filter(_ >= 1l.toLong\
    \ && _ <= 9l.toLong).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Long,\
    \ String]()\n        map.put(0l.toLong, \"One\")\n        map.put(1l.toLong, \"\
    Two\")\n        map.put(2l.toLong, \"Three\")\n        map.put(3l.toLong, \"Four\"\
    )\n        map.put(4l.toLong, \"Five\")\n        map.put(5l.toLong, \"Six\")\n\
    \        map.put(6l.toLong, \"Seven\")\n        map.put(7l.toLong, \"Eight\")\n\
    \        map.put(8l.toLong, \"Nine\")\n        map.put(9l.toLong, \"Ten\")\n \
    \       map.put(10l.toLong, \"Eleven\")\n        map.put(11l.toLong, \"Twelve\"\
    )\n        map.put(12l.toLong, \"Thirteen\")\n        map.put(13l.toLong, \"Fourteen\"\
    )\n        map.put(14l.toLong, \"Fifteen\")\n        map.put(15l.toLong, \"Sixteen\"\
    )\n        map.put(16l.toLong, \"Seventeen\")\n        map.put(17l.toLong, \"\
    Eighteen\")\n        map.put(18l.toLong, \"Nineteen\")\n        map.put(19l.toLong,\
    \ \"Twenty\")\n        map.put(20l.toLong, \"Twenty One\")\n        map.put(21l.toLong,\
    \ \"Twenty Two\")\n        map.put(22l.toLong, \"Twenty Three\")\n        map.put(23l.toLong,\
    \ \"Twenty Four\")\n        map.put(24l.toLong, \"Twenty Five\")\n        map.put(25l.toLong,\
    \ \"Twenty Six\")\n        map.put(26l.toLong, \"Twenty Seven\")\n        map.put(27l.toLong,\
    \ \"Twenty Eight\")\n        map.put(28l.toLong, \"Twenty Nine\")\n        map.put(29l.toLong,\
    \ \"Thirty\")\n        map.put(30l.toLong, \"Thirty One\")\n        map.put(31l.toLong,\
    \ \"Thirty Two\")\n        map.put(32l.toLong, \"Thirty Three\")\n        map.put(33l.toLong,\
    \ \"Thirty Four\")\n        map.put(34l.toLong, \"Thirty Five\")\n        map.put(35l.toLong,\
    \ \"Thirty Six\")\n        map.put(36l.toLong", "        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter", "        val result = arr.foldLeft(List[String]())((acc, x) =>\
    \ {\n            if (x < 1l || x > 9l) {\n                acc\n            } else\
    \ {\n                val digit = x.toString.toInt\n                val name =\
    \ if (digit < 10) \"One\" else if (digit < 20) \"Two\" else if (digit < 30) \"\
    Three\" else if (digit < 40) \"Four\" else if (digit < 50) \"Five\" else if (digit\
    \ < 60) \"Six\" else if (digit < 70) \"Seven\" else if (digit < 80) \"Eight\"\
    \ else \"Nine\"\n                acc :+ name\n            }\n        })\n    \
    \    result.reverse", "        val ones = arr.filter(x => x < 9).toList\n    \
    \    val tens = arr.filter(x => x >= 9 && x < 99).toList\n        val hundreds\
    \ = arr.filter(x => x >= 99).toList\n        val reversed = ones + tens + hundreds\n\
    \        val oneNames = List(One, Two, Three, Four, Five, Six, Seven, Eight, Nine)\n\
    \        val tenNames = List(Ten , Twenty, Thirty, Forty, Fifty, Sixty, Seventy,\
    \ Eighty, Ninety)\n        val hundredNames = List(Hundred , Thousand , Million\
    \ , Billion , Trillion , Quadrillion , Quintillion , Sextillion , Septillion ,\
    \ Octillion , Nonillion , Decillion , Undecillion , Duodecillion , Tredecillion\
    \ , Quattuordecillion , Quindecillion , Sexdecillion , Septendecillion , Octodecillion\
    \ , Novemdecillion , Vigintillion , Unvigintillion , Duovigintillion , Trevigintillion\
    \ , Quattuorvigintillion , Quinvigintillion , Sexvigintillion , Septigintillion\
    \ , Octovigintillion , Novemvigintillion , Vigintigintillion , Unvigintigintillion\
    \ , Duovigintigintillion , Trevigintigintillion , Quattuorvigintigintillion ,\
    \ Quinvigintigintillion , Sexvigintigintillion , Septigintigintillion , Octovigintigintillion\
    \ , Novemvigintigintillion , Vigintigintigintillion , Unvigintigintigintillion\
    \ , Duovigintigintigintillion , Trevigintigintigintillion , Quattuorvigintigintigintillion\
    \ , Quinvigintigintigintillion , Sexvigintigintigintillion , Septigintigintigintillion\
    \ , Octovigintigintigintillion , ", "        val ones = arr.filter(x => x <= 9\
    \ && x >= 1)\n        val tens = arr.filter(x => x <= 99 && x >= 10)\n       \
    \ val hundreds = arr.filter(x => x <= 999 && x >= 100)\n        val thousands\
    \ = arr.filter(x => x <= 9999 && x >= 1000)\n        val tenThousands = arr.filter(x\
    \ => x <= 99999 && x >= 10000)\n        val oneThousands = arr.filter(x => x <=\
    \ 999999 && x >= 100000)\n        val oneHundreds = arr.filter(x => x <= 999999\
    \ && x >= 1000000)\n        val oneThousandHundreds = arr.filter(x => x <= 999999999\
    \ && x >= 10000000)\n        val oneThousandThousands = arr.filter(x => x <= 99999999999\
    \ && x >= 1000000)\n        val oneThousandThousandHundreds = arr.filter(x =>\
    \ x <= 999999999999999 && x >= 10000000)\n        val oneThousandThousandThousands\
    \ = arr.filter(x => x <= 9999999999999 && x >= 1000000)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999999999 && x >= 10000000)\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(x => x <= 99999999999999999 && x >= 1000000)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 999999999999999999999 && x >= 10000000)\n        val\
    \ oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999\
    \ && x >= 1000000)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000)\n        val\
    \ oneThousandThousandThousandThousandThousands = arr.filter(x => x <= 99999999999999999999999\
    \ && x >= 1000000)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000)\n        val\
    \ oneThousandThousandThousandThousandThousandThousands = arr.filter(x => x <=\
    \ 99999999999999999999999 && x >= 1000000)\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x <= 99999999999999999999999 && x >= 10000000)\n        val\
    \ oneTh", "        val result = arr.filter(_ < 10).sortWith(_ < _).reverse\n \
    \       val digits = arr.filter(_ < 10).map(_.toString)\n        val names = \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n        val result = result.map(x => digits(x) + names.apply(x))\n\
    \        result.filter(_ != \"\").map(_.toUpperCase)", "        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter", "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).sorted\n\
    \        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).sorted\n\
    \        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).sorted\n\
    \        val thousands = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong).sorted\n\
    \        val tenThousands = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).sorted\n\
    \        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).sorted\n\
    \        val tenMillions = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).sorted\n\
    \        val oneMillions = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).sorted\n\
    \        val tenBillions = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999999l.toLong).sorted\n\
    \        val oneBillions = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).sorted\n\
    \        val tenTrillions = arr.filter(x => x >= 1000000000000l.toLong && x <=\
    \ 999999999999999999l.toLong).sorted\n        val oneTrillions = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 999999999999999999999l.toLong).sorted\n\
    \        val tenQuadrillions = arr.filter(x => x >= 1000000000000000000l.toLong\
    \ && x <= 9999999999999999999998l.toLong).sorted\n        val oneQuadrillions\
    \ = arr.filter(x => x >= 10000000000000000000l.toLong && x <= 99999999999999999999987l.toLong).sorted\n\
    \        val tenQuintillions = arr.filter(x => x >= 100000000000000000000l.toLong\
    \ && x <= 9999999999999999999998765l.toLong).sorted\n        val oneQuintillions\
    \ = arr.filter(x => x >= 1000000000000000000000l.toLong && x <= 999999999999999999999876543l.toLong).sorted\n\
    \        val tenSextillions = arr.filter(x => x >= 10000000000000000000000l.toLong\
    \ && x <= 99999999999999999999987654321l.toLong).sorted\n        val oneSextillions\
    \ = arr.filter(x => x >= 100000000000000000000000l.toLong && x <= 9999999999999999999998765432109l.toLong).",
  "        val nums = arr.toList\n        val numsSorted = nums.sortWith(_ < _)\n\
    \        val reversed = numsSorted.reverse\n        val reversedString = reversed.map(x\
    \ => if(x < 10) \"One\" else \"Two\" if(x < 20) \"Three\" else \"Four\" if(x <\
    \ 30) \"Five\" else \"Six\" if(x < 40) \"Seven\" else \"Eight\" if(x < 50) \"\
    Nine\" else \"Zero\")\n        reversedString.toList", "        val result = new\
    \ mutable.ListBuffer[String]()\n        val len = arr.length\n        if (len\
    \ == 0) result\n        else if (len == 1) result += arr(0).toString + byLength(arr.drop(1))\n\
    \        else {\n            val ones = arr.filter(_ <= 1).toList\n          \
    \  val tens = arr.filter(_ <= 10).toList\n            val hundreds = arr.filter(_\
    \ <= 100).toList\n            val thousands = arr.filter(_ <= 1000).toList\n \
    \           val tenThousands = arr.filter(_ <= 10000).toList\n            val\
    \ hundredThousands = arr.filter(_ <= 100000).toList\n            val thousandThousands\
    \ = arr.filter(_ <= 1000000).toList\n            val oneThousand = arr.filter(_\
    \ <= 10000000).toList\n            val oneHundred = arr.filter(_ <= 100000000).toList\n\
    \            val oneThousandThousand = arr.filter(_ <= 1000000000).toList\n  \
    \          val oneHundredThousand = arr.filter(_ <= 10000000000).toList\n    \
    \        val oneThousandHundred = arr.filter(_ <= 100000000000).toList\n     \
    \       val oneHundredThousandThousand = arr.filter(_ <= 1000000000000).toList\n\
    \            val oneHundredThousandHundred = arr.filter(_ <= 10000000000000).toList\n\
    \            val oneThousandThousandHundred = arr.filter(_ <= 100000000000000).toList\n\
    \            val oneHundredThousandThousandHundred = arr.filter(_ <= 1000000000000000).toList\n\
    \            val oneThousandThousandHundredThousand = arr.filter(_ <= 10000000000000000).toList\n\
    \            val oneHundredThousandThousandHundredThousand = arr.filter(_ <= 100000000000000000).toList\n\
    \            val oneThousandThousandHundredThousandThousand = arr.filter(_ <=\
    \ 1000000000000000000).toList\n            val oneHundredThousandThousandHundredThousandThousand\
    \ = arr.filter(_ <= 10000000000000000000).toList\n            val oneThousandThousandHundredThousandThousandHundred\
    \ = arr.filter(_ <= 100000000000000000000).toList\n            val oneHundredThousandThousandHundredThousandThousandHundred\
    \ = arr.filter(_ <= 1000000000000000000000).toList\n            val one", "  \
    \      val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val nums = arr.toList\n        val ones = nums.filter(x => x % 10 == 1)\n\
    \        val tens = nums.filter(x => x % 10 == 0)\n        val tensReversed =\
    \ tens.reverse\n        val onesReversed = ones.reverse\n        val onesReversedString\
    \ = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x\
    \ => Two(x))\n        val tensReversedStringReversed = tensReversedString.reverse\n\
    \        val tensReversedStringReversedString = tensReversedStringReversed.map(x\
    \ => Three(x))\n        val tensReversedStringReversedStringReversed = tensReversedStringReversedString.reverse\n\
    \        val tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.map(x\
    \ => Four(x))\n        val tensReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedString.reverse\n        val tensReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversed.map(x => Five(x))\n\
    \        val tensReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedString.reverse\n   \
    \     val tensReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Six(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedString.reverse\n\
    \        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Seven(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Eight(x))\n        val tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedString",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999999999999999).to",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val hundreds = arr.filter(x => x >= 20\
    \ && x < 100).toList\n        val thousands = arr.filter(x => x >= 100 && x <\
    \ 1000).toList\n        val tenThousands = arr.filter(x => x >= 1000 && x < 10000).toList\n\
    \        val oneThousands = arr.filter(x => x >= 10000).toList\n        val tenThousandsOnes\
    \ = arr.filter(x => x >= 10000 && x < 100000).toList\n        val oneThousandsOnes\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val tenThousandsOnesOnes\
    \ = arr.filter(x => x >= 1000000).toList\n        val oneThousandsOnesOnes = arr.filter(x\
    \ => x >= 1000000 && x < 10000000).toList\n        val tenThousandsOnesOnesOnes\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val oneThousandsOnesOnesOnes\
    \ = arr.filter(x => x >= 100000000).toList\n        val tenThousandsOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val oneThousandsOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 1000000000).toList\n        val tenThousandsOnesOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val oneThousandsOnesOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 10000000000).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ oneThousandsOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x >= 100000000000).toList\n\
    \        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnes = arr.filter(x => x\
    \ >= 100000000000 && x < 1000000000000).toList\n        val oneThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = arr.filter(x => x >= 1000000000000).toList\n        val tenThousandsOnesOnesOnesOnesOnesOnesOnesOnesOnesOnes",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong)\n        val thousands\
    \ = arr.filter(x => x >= 1000l.toLong && x <= 9999l.toLong)\n        val hundredsAndThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong)\n        val hundredsAndThousandsOrOnes\
    \ = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong)\n        val\
    \ hundredsAndThousandsOrOnesAndTens = arr.filter(x => x >= 10000000l.toLong &&\
    \ x <= 999999999l.toLong)\n        val hundredsAndThousandsOrOnesAndTensAndOnes\
    \ = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong)\n    \
    \    val hundredsAndThousandsOrOnesAndTensAndOnesAndTens = arr.filter(x => x >=\
    \ 1000000000l.toLong && x <= 999999999999l.toLong)\n        val hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnes\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong)\n\
    \        val hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnesAndTens = arr.filter(x\
    \ => x >= 1000000000000l.toLong && x <= 9999999999999999l.toLong)\n        val\
    \ hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnesAndOnes = arr.filter(x\
    \ => x >= 10000000000000l.toLong && x <= 9999999999999999999l.toLong)\n      \
    \  val hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnesAndOnesAndTens =\
    \ arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong)\n\
    \        val hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong)\n\
    \        val hundredsAndThousandsOrOnesAndTensAndOnesAndTensAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 10000000000000000l.toLong && x <= 9999", "        val\
    \ result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong)\n        val reversed\
    \ = result.reverse\n        val replaced = reversed.map(_ match {\n          \
    \  case x if x < 10 => s\"One\"\n            case x if x < 20 => s\"Two\"\n  \
    \          case x if x < 30 => s\"Three\"\n            case x if x < 40 => s\"\
    Four\"\n            case x if x < 50 => s\"Five\"\n            case x if x < 60\
    \ => s\"Six\"\n            case x if x < 70 => s\"Seven\"\n            case x\
    \ if x < 80 => s\"Eight\"\n            case x if x < 90 => s\"Nine\"\n       \
    \     case x => \"\"\n        })\n        reversed.toList ++ replaced", "    \
    \    val n = arr.size\n        if (n == 0) List()\n        else if (n == 1) List(arr(0))\n\
    \        else {\n            val ones = arr.filter(_ <= 9).toList\n          \
    \  val tens = arr.filter(_ >= 10).toList\n            val tensReversed = tens.reverse\n\
    \            val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n            val tensReversedStringList = tensReversedString.split(\"\\\\\
    D+\")\n            val tensReversedStringListReversed = tensReversedStringList.reverse\n\
    \            val tensReversedStringListReversedString = tensReversedStringListReversed.map(_.toString).mkString(\"\
    \")\n            val tensReversedStringListReversedStringList = tensReversedStringListReversedString.split(\"\
    \\\\D+\")\n            val tensReversedStringListReversedStringListReversed =\
    \ tensReversedStringListReversedStringList.reverse\n            val tensReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversed.map(_.toString).mkString(\"\
    \")\n            val tensReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringList.reverse\n     \
    \       val tensReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversed.map(_.toString).mkString(\"\
    \")\n            val tensReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \            val tensReversedStringListReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \            val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \            val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \            val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedString",
  "        val nums = arr.toList\n        val numsLen = nums.size\n        val numsLenMinusOne\
    \ = numsLen - 1\n        val numsLenMinusOneMinusOne = numsLenMinusOne - 1\n \
    \       val numsLenMinusOneMinusOneMinusOne = numsLenMinusOneMinusOne - 1\n  \
    \      val numsLenMinusOneMinusOneMinusOneMinusOne = numsLenMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOne = numsLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val numsLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsLenMinusOneMinusOneMin", "        val ones = arr.filter(_ <= 9).toList\n\
    \        val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.", "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val reversed = nums.reverse\n        val ones = reversed.takeWhile(_\
    \ < 10)\n        val tens = reversed.dropWhile(_ < 10)\n        val tensMap =\
    \ tens.map(_.toString.length).zip(ones.map(_.toString.length)).toMap\n       \
    \ val onesMap = ones.map(_.toString.length).zip(tens.map(_.toString.length)).toMap\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedMap = onesReversed.map(_.toString.length).zip(tensReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversed = onesReversed.reverse\n        val onesReversedReversedMap\
    \ = onesReversedReversed.map(_.toString.length).zip(onesReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversedReversed = onesReversedReversed.reverse\n   \
    \     val onesReversedReversedReversedMap = onesReversedReversedReversed.map(_.toString.length).zip(onesReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversedReversedReversed = onesReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedMap = onesReversedReversedReversedReversed.map(_.toString.length).zip(onesReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversedReversedReversedReversed = onesReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedMap = onesReversedReversedReversedReversedReversed.map(_.toString.length).zip(onesReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversed.reverse\n\
    \        val onesReversedReversedReversedReversedReversedReversedMap = onesReversedReversedReversedReversedReversedReversed.map(_.toString.length).zip(onesReversed.map(_.toString.length)).toMap\n\
    \        val onesReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val ", "        val result = new mutable.ListBuffer[String]()\n     \
    \   val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x =>\
    \ x % 10 == 0)\n        val tensReversed = tens.reverse\n        val tensReversedString\
    \ = tensReversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val\
    \ tensReversedStringList = tensReversedString.toList\n        val tensReversedStringListReversed\
    \ = tensReversedStringList.reverse\n        val tensReversedStringListReversedString\
    \ = tensReversedStringListReversed.map(x => x.toString.replaceAll(\"\\\\D\", \"\
    \"))\n        val tensReversedStringListReversedStringList = tensReversedStringListReversedString.toList\n\
    \        val tensReversedStringListReversedStringListReversed = tensReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedString = tensReversedStringListReversedStringListReversed.map(x\
    \ => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val tensReversedStringListReversedStringListReversedStringList\
    \ = tensReversedStringListReversedStringListReversedStringList.reverse\n     \
    \   val tensReversedStringListReversedStringListReversedStringListReversed = tensReversedStringListReversedStringListReversedStringListReversed.map(x\
    \ => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val tensReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedString.toList\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversed.map(x\
    \ => x.toString.replaceAll(\"\\\\D\", \"\"))\n        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = tensReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val ", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ >= 10 && _ <= 99).toList\n        val tensReversed = tens.reverse\n        val\
    \ onesReversed = ones.reverse\n        val tensReversedString = tensReversed.mkString(\"\
    \")\n        val onesReversedString = onesReversed.mkString(\"\")\n        val\
    \ onesReversedStringWithOne = onesReversedString + onesReversedString\n      \
    \  val tensReversedStringWithTen = tensReversedString + tensReversedString\n \
    \       val onesReversedStringWithTen = onesReversedStringWithOne + tensReversedStringWithTen\n\
    \        val onesReversedStringWithTenAndOne = onesReversedStringWithTen + onesReversedStringWithOne\n\
    \        val onesReversedStringWithTenAndOneAndTen = onesReversedStringWithTenAndOne\
    \ + tensReversedString\n        val onesReversedStringWithTenAndOneAndTenAndFour\
    \ = onesReversedStringWithTenAndOneAndTen + foursReversedString\n        val onesReversedStringWithTenAndOneAndTenAndFourAndFive\
    \ = onesReversedStringWithTenAndOneAndTenAndFour + fivesReversedString\n     \
    \   val onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSix = onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSix\n\
    \        val onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSeven\
    \ = onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSeven + sevensReversedString\n\
    \        val onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSevenAndEight\
    \ = onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSevenAndEight\
    \ + eightsReversedString\n        val onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = onesReversedStringWithTenAndOneAndTenAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ + n", "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThous",
  "        val result = arr.filter(_ > 0l).sortWith(_ < _).reverse\n        val one\
    \ = arr.filter(_ == 1l).map(_.toString).toList\n        val two = arr.filter(_\
    \ == 2l).map(_.toString).toList\n        val three = arr.filter(_ == 3l).map(_.toString).toList\n\
    \        val four = arr.filter(_ == 4l).map(_.toString).toList\n        val five\
    \ = arr.filter(_ == 5l).map(_.toString).toList\n        val six = arr.filter(_\
    \ == 6l).map(_.toString).toList\n        val seven = arr.filter(_ == 7l).map(_.toString).toList\n\
    \        val eight = arr.filter(_ == 8l).map(_.toString).toList\n        val nine\
    \ = arr.filter(_ == 9l).map(_.toString).toList\n        val result = result.map(x\
    \ => if (x == 1l) one else if (x == 2l) two else if (x == 3l) three else if (x\
    \ == 4l) four else if (x == 5l) five else if (x == 6l) six else if (x == 7l) seven\
    \ else if (x == 8l) eight else if (x == 9l) nine else x.toString)\n        result",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val tensAndHundreds = tens ++ hundreds\n        val tensAndHundredsAndOnes\
    \ = tensAndHundreds ++ ones\n        val tensAndHundredsAndOnesAndTensAndHundreds\
    \ = tensAndHundredsAndOnes ++ tensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnes\n     \
    \   val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds = tensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ ++ tensAndHundredsAndOnesAndTensAndHundreds\n        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds ++ tensAndHundredsAndOnesAndTensAndHundredsAndOnes\n\
    \        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes ++\
    \ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\n        val\
    \ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ ++ tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\n\
    \        val tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = tensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHund",
  "        val ones = arr.filter(x => x < 9).map(x => x.toString).sorted\n       \
    \ val tens = arr.filter(x => x < 99).map(x => x.toString).sorted\n        val\
    \ hundreds = arr.filter(x => x < 999).map(x => x.toString).sorted\n        val\
    \ thousands = arr.filter(x => x < 9999).map(x => x.toString).sorted\n        val\
    \ hundredsAndOnes = arr.filter(x => x < 10000).map(x => x.toString).sorted\n \
    \       val hundredsAndTens = arr.filter(x => x < 100000).map(x => x.toString).sorted\n\
    \        val hundredsAndHundreds = arr.filter(x => x < 1000000).map(x => x.toString).sorted\n\
    \        val hundredsAndThousands = arr.filter(x => x < 10000000).map(x => x.toString).sorted\n\
    \        val hundredsAndOnesAndTens = arr.filter(x => x < 100000000).map(x =>\
    \ x.toString).sorted\n        val hundredsAndOnesAndHundreds = arr.filter(x =>\
    \ x < 1000000000).map(x => x.toString).sorted\n        val hundredsAndOnesAndThousands\
    \ = arr.filter(x => x < 10000000000).map(x => x.toString).sorted\n        val\
    \ hundredsAndOnesAndOnesAndTens = arr.filter(x => x < 100000000000).map(x => x.toString).sorted\n\
    \        val hundredsAndOnesAndOnesAndHundreds = arr.filter(x => x < 1000000000000).map(x\
    \ => x.toString).sorted\n        val hundredsAndOnesAndOnesAndThousands = arr.filter(x\
    \ => x < 10000000000000).map(x => x.toString).sorted\n        val hundredsAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x < 100000000000000).map(x => x.toString).sorted\n       \
    \ val hundredsAndOnesAndOnesAndOnesAndHundreds = arr.filter(x => x < 1000000000000000).map(x\
    \ => x.toString).sorted\n        val hundredsAndOnesAndOnesAndOnesAndThousands\
    \ = arr.filter(x => x < 10000000000000000).map(x => x.toString).sorted\n     \
    \   val hundredsAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x => x < 100000000000000000).map(x\
    \ => x.toString).sorted\n        val hundredsAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ = arr.filter(x => x < 100000000000000000)\n            .map(x => x.toString).sorted\n\
    \        val hundredsAndOnesAndOnesAndOnesAndOnesAnd", "        val arr = arr.toList\n\
    \        val len = arr.length\n        val ones = arr.filter(_ < 1).toList\n \
    \       val tens = arr.filter(_ < 10).toList\n        val hundreds = arr.filter(_\
    \ < 100).toList\n        val thousands = arr.filter(_ < 1000).toList\n       \
    \ val tenThousands = arr.filter(_ < 10000).toList\n        val oneThousands =\
    \ arr.filter(_ < 100000).toList\n        val oneHundreds = arr.filter(_ < 100000).toList\n\
    \        val oneThousandHundreds = arr.filter(_ < 1000000).toList\n        val\
    \ oneThousandThousandHundreds = arr.filter(_ < 10000000).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ < 100000000).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 1000000000).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 10000000000).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 10000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 100000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 1000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ < 10000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = ", "        val ones = arr.filter(x => x % 10 == 1)\n        val tens = arr.filter(x\
    \ => x % 10 == 0)\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n\
    \        val tensReversedString = tensReversed.map(x => Two(x))\n        val tensReversedString2\
    \ = tensReversed.map(x => Three(x))\n        val tensReversedString3 = tensReversed.map(x\
    \ => Four(x))\n        val tensReversedString4 = tensReversed.map(x => Five(x))\n\
    \        val tensReversedString5 = tensReversed.map(x => Six(x))\n        val\
    \ tensReversedString6 = tensReversed.map(x => Seven(x))\n        val tensReversedString7\
    \ = tensReversed.map(x => Eight(x))\n        val tensReversedString8 = tensReversed.map(x\
    \ => Nine(x))\n        val tensReversedString9 = tensReversed.map(x => Ten(x))\n\
    \        val tensReversedString10 = tensReversed.map(x => Eleven(x))\n       \
    \ val tensReversedString11 = tensReversed.map(x => Twelve(x))\n        val tensReversedString12\
    \ = tensReversed.map(x => Thirteen(x))\n        val tensReversedString13 = tensReversed.map(x\
    \ => Fourteen(x))\n        val tensReversedString14 = tensReversed.map(x => Fifteen(x))\n\
    \        val tensReversedString15 = tensReversed.map(x => Sixteen(x))\n      \
    \  val tensReversedString16 = tensReversed.map(x => Seventeen(x))\n        val\
    \ tensReversedString17 = tensReversed.map(x => Eighteen(x))\n        val tensReversedString18\
    \ = tensReversed.map(x => Nineteen(x))\n        val tensReversedString19 = tensReversed.map(x\
    \ => Twenty(x))\n        val tensReversedString20 = tensReversed.map(x => TwentyOne(x))\n\
    \        val tensReversedString21 = tensReversed.map(x => TwentyTwo(x))\n    \
    \    val tensReversedString22 = tensReversed.map(x => TwentyThree(x))\n      \
    \  val tensReversedString23 = tensReverse", "        val nums = arr.toList\n \
    \       val numsLength = nums.length\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        val numsLength = numsLength.toInt\n        val numsLength = numsLength.toInt\n\
    \        ", "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x\
    \ => s\"One\")\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <=\
    \ 999l.toLong).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => s\"Thousand\")\n        val\
    \ millions = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => s\"Million\")\n        val billions = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => s\"Billion\")\n        val trillions = arr.filter(x\
    \ => x >= 10000000l.toLong && x <= 99999999l.toLong).map(x => s\"Trillion\")\n\
    \        val quadrillions = arr.filter(x => x >= 100000000l.toLong && x <= 999999999l.toLong).map(x\
    \ => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => s\"Quintillion\")\n        val sextillions\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999l.toLong).map(x\
    \ => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 1000000000000l.toLong\
    \ && x <= 999999999999999l.toLong).map(x => s\"Septillion\")\n        val octillions\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 999999999999999999l.toLong).map(x\
    \ => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 1000000000000000000l.toLong\
    \ && x <= 999999999999999999999l.toLong).map(x => s\"Nonillion\")\n        val\
    \ onesAndTens = ones + tens\n        val onesAndHundreds = ones + hundreds\n \
    \       val onesAndThousands = ones + thousands\n        val onesAndMillions =\
    \ ones + millions\n        val onesAndBillions = ones + billions\n        val\
    \ onesAndTrillions = ones + trillions\n        val ", "        val result = arr.filter(_\
    \ < 10).sortWith(_ < _).reverse\n        val ones = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"One\")\n        val twos = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Two\")\n        val threes = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Three\")\n        val fours = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Four\")\n        val fives = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Five\")\n        val sixes = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Six\")\n        val sevens = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Seven\")\n        val eights = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Eight\")\n        val nines = arr.filter(_ < 10).map(_.toString).filter(_\
    \ == \"Nine\")\n        val onesAndTwos = ones + twos\n        val onesAndThrees\
    \ = ones + threes\n        val onesAndFours = ones + fours\n        val onesAndFives\
    \ = ones + fives\n        val onesAndSixes = ones + sixes\n        val onesAndSevens\
    \ = ones + sevens\n        val onesAndEights = ones + eights\n        val onesAndNines\
    \ = ones + nines\n        val onesAndOnesAndTwos = onesAndTwos + onesAndThrees\n\
    \        val onesAndOnesAndThrees = onesAndThrees + onesAndFours\n        val\
    \ onesAndOnesAndFours = onesAndFours + onesAndFives\n        val onesAndOnesAndFives\
    \ = onesAndFives + onesAndSixes\n        val onesAndOnesAndSixes = onesAndSixes\
    \ + onesAndSevens\n        val onesAndOnesAndSevens = onesAndSevens + onesAndEights\n\
    \        val onesAndOnesAndEights = onesAndEights + onesAndNines\n        val\
    \ onesAndOnesAndNines = onesAndNines + onesAndOnesAndTwos\n        val onesAndOnesAndOnesAndTwos\
    \ = onesAndOnesAndTwos + onesAndOnesAndThrees\n        val onesAndOnesAndOnesAndThrees\
    \ = onesAndOnesAndThrees + onesAndOnesAndFours\n        val onesAndOnesAndOnesAndFour",
  "        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val hundredsAndOnes = arr.filter(x => x >= 100 && x < 1000).toList\n\
    \        val hundredsAndOnesAndTens = arr.filter(x => x >= 1000 && x < 10000).toList\n\
    \        val hundredsAndOnesAndTensAndOnes = arr.filter(x => x >= 10000).toList\n\
    \        val hundredsAndOnesAndTensAndOnesAndTens = arr.filter(x => x >= 10000\
    \ && x < 100000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnes = arr.filter(x\
    \ => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 100000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens = arr.filter(x\
    \ => x >= 100000000000).toList\n        val hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ hundredsAndOnesAndTensAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000000000).toList\n        val hundredsAndOnesAndTensAnd",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 &&\
    \ x < 30).toList\n        val twenties = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val thirties = arr.filter(x => x >= 40 && x < 50).toList\n        val\
    \ fourties = arr.filter(x => x >= 50 && x < 60).toList\n        val fifties =\
    \ arr.filter(x => x >= 60 && x < 70).toList\n        val sixties = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val seventies = arr.filter(x => x >= 80\
    \ && x < 90).toList\n        val eighties = arr.filter(x => x >= 90 && x < 100).toList\n\
    \        val nineties = arr.filter(x => x >= 100).toList\n        val tensReversed\
    \ = tens.reverse\n        val onesReversed = ones.reverse\n        val teensReversed\
    \ = teens.reverse\n        val twentiesReversed = twenties.reverse\n        val\
    \ thirtiesReversed = thirties.reverse\n        val fourtiesReversed = fourties.reverse\n\
    \        val fiftiesReversed = fifties.reverse\n        val sixtiesReversed =\
    \ sixties.reverse\n        val seventiesReversed = seventies.reverse\n       \
    \ val eightiesReversed = eighties.reverse\n        val ninetiesReversed = nineties.reverse\n\
    \        val tensReversedString = tensReversed.mkString(\"\")\n        val onesReversedString\
    \ = onesReversed.mkString(\"\")\n        val teensReversedString = teensReversed.mkString(\"\
    \")\n        val twentiesReversedString = twentiesReversed.mkString(\"\")\n  \
    \      val thirtiesReversedString = thirtiesReversed.mkString(\"\")\n        val\
    \ fourtiesReversedString = fourtiesReversed.mkString(\"\")\n        val fiftiesReversedString\
    \ = fiftiesReversed.mkString(\"\")\n        val sixtiesReversedString = sixtiesReversed.mkString(\"\
    \")\n        val seventiesReversedString = seventiesReversed.mkString(\"\")\n\
    \        val eightiesReversedString = eightiesReversed.mkString(\"\")\n      \
    \  val ninetiesReversedString = ninetiesReversed.mkString(\"\")\n        val onesReversedStringList\
    \ = onesReversedString.split(\",\").toList\n        val teensReversedStringList\
    \ = teensReversedString.split(\",\").toList\n        val tw", "        val arr\
    \ = arr.toList\n        val len = arr.length\n        val one = arr.filter(_ <=\
    \ 9).toList\n        val two = arr.filter(_ <= 18).toList\n        val three =\
    \ arr.filter(_ <= 27).toList\n        val four = arr.filter(_ <= 36).toList\n\
    \        val five = arr.filter(_ <= 45).toList\n        val six = arr.filter(_\
    \ <= 54).toList\n        val seven = arr.filter(_ <= 63).toList\n        val eight\
    \ = arr.filter(_ <= 72).toList\n        val nine = arr.filter(_ <= 81).toList\n\
    \        val ten = arr.filter(_ <= 90).toList\n        val hundred = arr.filter(_\
    \ <= 100).toList\n        val hundredOne = arr.filter(_ <= 101).toList\n     \
    \   val hundredTwo = arr.filter(_ <= 102).toList\n        val hundredThree = arr.filter(_\
    \ <= 103).toList\n        val hundredFour = arr.filter(_ <= 104).toList\n    \
    \    val hundredFive = arr.filter(_ <= 105).toList\n        val hundredSix = arr.filter(_\
    \ <= 106).toList\n        val hundredSeven = arr.filter(_ <= 107).toList\n   \
    \     val hundredEight = arr.filter(_ <= 108).toList\n        val hundredNine\
    \ = arr.filter(_ <= 109).toList\n        val hundredTen = arr.filter(_ <= 110).toList\n\
    \        val hundredHundred = arr.filter(_ <= 111).toList\n        val hundredHundredOne\
    \ = arr.filter(_ <= 112).toList\n        val hundredHundredTwo = arr.filter(_\
    \ <= 113).toList\n        val hundredHundredThree = arr.filter(_ <= 114).toList\n\
    \        val hundredHundredFour = arr.filter(_ <= 115).toList\n        val hundredHundredFive\
    \ = arr.filter(_ <= 116).toList\n        val hundredHundredSix = arr.filter(_\
    \ <= 117).toList\n        val hundredHundredSeven = arr.filter(_ <= 118).toList\n\
    \        val hundredHundredEight = arr.filter(_ <= 119).toList\n        val hundredHundredNine\
    \ = arr.filter(_ <= 120).toList\n        val hundredHundredTen = arr.filter(_\
    \ <= 121).toList\n        val hundredHundredHundred = arr.filter(_ <= 122).toList\n\
    \        val hundredHund", "        val result = arr.filter(_ >= 1l.toLong &&\
    \ _ <= 9l.toLong).sortWith(_ < _).reverse.map(_ match {\n            case 0 =>\
    \ \"Zero\"\n            case 1 => \"One\"\n            case 2 => \"Two\"\n   \
    \         case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        }).toList\n        if (arr.isEmpty) result else byLength(result.reverse)",
  "        val nums = arr.toList\n        val len = nums.map(_.toString.length).max\n\
    \        val maxLen = len / 2\n        val numsSorted = nums.sortBy(_.toString.length)\n\
    \        val reversed = numsSorted.reverse\n        val numsReversed = reversed.map(_.toString.reverse)\n\
    \        val numsReversedFiltered = numsReversed.filter(_.toString.length == maxLen)\n\
    \        val numsReversedFilteredMap = numsReversedFiltered.map(_.toString.replaceAll(\"\
    [0-9]\", \"One\"))\n        numsReversedFilteredMap.toList", "        val nums\
    \ = arr.toList\n        val numsSorted = nums.sortBy(_.toInt)\n        val numsReversed\
    \ = numsSorted.reverse\n        val numsReversedString = numsReversed.map(_.toString).mkString(\"\
    \")\n        val numsReversedStringArray = numsReversedString.split(\"\\\\D+\"\
    ).map(_.toInt)\n        val numsReversedStringArraySorted = numsReversedStringArray.sortBy(_)\n\
    \        numsReversedStringArraySorted.map(_.toString).mkString(\"\")", "    \
    \    val ones = arr.filter(x => x < 10l.toLong).map(x => s\"One\")\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x < 100l.toLong).map(x => s\"Ten\"\
    )\n        val hundreds = arr.filter(x => x >= 100l.toLong && x < 1000l.toLong).map(x\
    \ => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000l.toLong).map(x\
    \ => s\"Thousand\")\n        val onesAndTens = ones + tens\n        val onesAndHundreds\
    \ = ones + hundreds\n        val onesAndThousands = ones + thousands\n       \
    \ val onesAndOnesAndTens = onesAndTens + onesAndHundreds\n        val onesAndOnesAndHundreds\
    \ = onesAndOnesAndTens + onesAndThousands\n        val onesAndOnesAndThousands\
    \ = onesAndOnesAndHundreds + onesAndOnesAndOnesAndTens\n        val onesAndOnesAndOnesAndThousands\
    \ = onesAndOnesAndOnesAndHundreds + onesAndOnesAndOnesAndOnesAndTens\n       \
    \ val onesAndOnesAndOnesAndOnesAndThousands = onesAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ + onesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndThousands\
    \ = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands\n\
    \        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands\n        val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands\
    \ = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ + onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands\n      \
    \  val onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndThousands\
    \ = onesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ + onesAndOne", "        val list = arr.toList\n        val length = list.size\n\
    \        val result = new mutable.ListBuffer[String]()\n        val one = \"One\"\
    \n        val two = \"Two\"\n        val three = \"Three\"\n        val four =\
    \ \"Four\"\n        val five = \"Five\"\n        val six = \"Six\"\n        val\
    \ seven = \"Seven\"\n        val eight = \"Eight\"\n        val nine = \"Nine\"\
    \n        val ten = \"Ten\"\n        val hundred = \"Hundred\"\n        val thousand\
    \ = \"Thousand\"\n        val million = \"Million\"\n        val billion = \"\
    Billion\"\n        val trillion = \"Trillion\"\n        val quadrillion = \"Quadrillion\"\
    \n        val quintillion = \"Quintillion\"\n        val sextillion = \"Sextillion\"\
    \n        val septillion = \"Septillion\"\n        val octillion = \"Octillion\"\
    \n        val nonillion = \"Nonillion\"\n        val decillion = \"Decillion\"\
    \n        val undecillion = \"Undecillion\"\n        val duodecillion = \"Duodecillion\"\
    \n        val tredecillion = \"Tredecillion\"\n        val quattuordecillion =\
    \ \"Quattuordecillion\"\n        val quindecillion = \"Quindecillion\"\n     \
    \   val sexdecillion = \"Sexdecillion\"\n        val septendecillion = \"Septendecillion\"\
    \n        val octodecillion = \"Octodecillion\"\n        val novemdecillion =\
    \ \"Novemdecillion\"\n        val vigintillion = \"Vigintillion\"\n        val\
    \ unvigintillion = \"Unvigintillion\"\n        val duovigintillion = \"Duovigintillion\"\
    \n        val trevigintillion = \"Trevigintillion\"\n        val quattuorvigintillion\
    \ = \"Quattuorvigintillion\"\n        val quinvigintillion = \"Quinvigintillion\"\
    \n        val sexvigintillion = \"Sexvigintillion\"\n        val septen", "  \
    \      val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >=\
    \ 10).toList\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\
    ,\")\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    ,\")\n        val reversedString = onesReversedString + tensReversedString\n \
    \       val reversedStringList = reversedString.split(\",\")\n        val reversedStringListReversed\
    \ = reversedStringList.reverse\n        val reversedStringListReversedString =\
    \ reversedStringListReversed.map(_.toString).mkString(\",\")\n        val reversedStringListReversedStringList\
    \ = reversedStringListReversedString.split(\",\")\n        val reversedStringListReversedStringListReversed\
    \ = reversedStringListReversedStringList.reverse\n        val reversedStringListReversedStringListReversedString\
    \ = reversedStringListReversedStringListReversed.map(_.toString).mkString(\",\"\
    )\n        val reversedStringListReversedStringListReversedStringList = reversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedStringListReversedStringListReversedStringListReversedString\
    \ = reversedStringListReversedStringListReversedStringListReversedString.split(\"\
    ,\")\n        val reversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = reversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversed\
    \ = reversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedString\
    \ = reversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList.reverse\n\
    \        val reversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringListReversedStringList",
  "        val list = arr.toList\n        val len = list.size\n        val reversed\
    \ = list.sortWith(_ < _)\n        val reversedList = reversed.reverse\n      \
    \  val reversedListString = reversedList.toList.toString\n        val reversedListStringArray\
    \ = reversedListString.split(\",\")\n        val reversedListStringArrayLength\
    \ = reversedListStringArray.length\n        val result = reversedListStringArray.map\
    \ { x =>\n            val index = reversedListStringArrayLength - x.toString.length\
    \ - 1\n            val name = reversedListStringArray[index]\n            val\
    \ value = x.toString.toInt\n            val digit = value.abs\n            val\
    \ digitString = digit.toString\n            val digitStringArray = digitString.split(\"\
    \\\\.\")\n            val digitStringArrayLength = digitStringArray.length\n \
    \           val digitStringArrayLength = digitStringArray.length\n           \
    \ val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length\n\
    \            val digitStringArrayLength = digitStringArray.length\n          \
    \  val digitStringArrayLength = digitStringArray.length\n            val digitStringArrayLength\
    \ = digitStringArray.length\n            val digitStringArrayLength = digitStringArray.length",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 &&\
    \ x < 30).toList\n        val hundreds = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val thousands = arr.filter(x => x >= 40 && x < 50).toList\n        val\
    \ millions = arr.filter(x => x >= 50 && x < 60).toList\n        val billions =\
    \ arr.filter(x => x >= 60 && x < 70).toList\n        val trillions = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val quadrillions = arr.filter(x => x >=\
    \ 80 && x < 90).toList\n        val quintillions = arr.filter(x => x >= 90 &&\
    \ x < 100).toList\n        val sextillions = arr.filter(x => x >= 100 && x < 1000).toList\n\
    \        val septillions = arr.filter(x => x >= 1000 && x < 10000).toList\n  \
    \      val octillions = arr.filter(x => x >= 10000 && x < 100000).toList\n   \
    \     val nonillions = arr.filter(x => x >= 100000 && x < 1000000).toList\n  \
    \      val decillions = arr.filter(x => x >= 1000000 && x < 10000000).toList\n\
    \        val undecillions = arr.filter(x => x >= 10000000 && x < 100000000).toList\n\
    \        val duodecillions = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n\
    \        val tredecillions = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n\
    \        val quattuordecillions = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n\
    \        val quindecillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n\
    \        val sexdecillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val septendecillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val octodecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val novemdecillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val vigintillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val unvigintillions = arr.filter(x => x >= 10000000000000000", "    \
    \    val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos =\
    \ arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n       \
    \ val result = reversed.map(x => ones.getOrElse(x.toInt) + twos.getOrElse(x.toInt)\
    \ + threes.getOrElse(x.toInt) + fours.getOrElse(x.toInt) + fives.getOrElse(x.toInt)\
    \ + sixes.getOrElse(x.toInt) + sevens.getOrElse(x.toInt) + eights.getOrElse(x.toInt)\
    \ + nines.getOrElse(x.toInt))\n        result", "        val ones = arr.filter(_\
    \ <= 1).toList\n        val tens = arr.filter(_ <= 10).toList\n        val hundreds\
    \ = arr.filter(_ <= 100).toList\n        val thousands = arr.filter(_ <= 1000).toList\n\
    \        val tenThousands = arr.filter(_ <= 10000).toList\n        val oneThousands\
    \ = arr.filter(_ <= 100000).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 100000).toList\n        val oneThousandHundreds = arr.filter(_ <= 1000000).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 10000000).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 100000000).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 10000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 10000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000000000).toList\n        val one", "        val\
    \ ones = arr.filter(x => x < 9).map(x => x.toString)\n        val tens = arr.filter(x\
    \ => x < 99).map(x => x.toString)\n        val hundreds = arr.filter(x => x <\
    \ 999).map(x => x.toString)\n        val thousands = arr.filter(x => x < 9999).map(x\
    \ => x.toString)\n        val tenThousands = arr.filter(x => x < 999999).map(x\
    \ => x.toString)\n        val oneThousands = arr.filter(x => x < 9999999).map(x\
    \ => x.toString)\n        val oneHundreds = arr.filter(x => x < 999999999).map(x\
    \ => x.toString)\n        val oneThousandHundreds = arr.filter(x => x < 99999999999).map(x\
    \ => x.toString)\n        val oneThousandThousandHundreds = arr.filter(x => x\
    \ < 999999999899).map(x => x.toString)\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999).map(x => x.toString)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999998999).map(x => x.toString)\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999).map(x => x.toString)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999999999999).map(x => x.toString)\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 9999999999999999999).map(x => x.toString)\n        val\
    \ oneThousandThousandThousandThousandThousandThousandHundreds = arr.filter(x =>\
    \ x < 99999999999999999999).map(x => x.toString)\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 99999999999999999999999).map(x => x.toString)\n      \
    \  val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(x => x < 999999999999999999999999).map(", "        val result =\
    \ new mutable.ListBuffer[String]()\n        val ones = arr.filter(x => x < 10).toList\n\
    \        val tens = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds\
    \ = arr.filter(x => x >= 100).toList\n        val tensAndHundreds = arr.filter(x\
    \ => x >= 100 && x < 1000).toList\n        val onesAndTensAndHundreds = arr.filter(x\
    \ => x >= 1000 && x < 10000).toList\n        val onesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 10000).toList\n        val onesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 10000 && x < 100000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 1000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 100000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ = arr.filter(x => x >= 10000000000).toList\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens\
    \ = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ onesAndTen", "        val arr = arr.toList\n        val len = arr.length\n \
    \       val ones = arr.filter(_ < 1).toList\n        val tens = arr.filter(_ <\
    \ 10).toList\n        val hundreds = arr.filter(_ < 100).toList\n        val thousands\
    \ = arr.filter(_ < 1000).toList\n        val tenThousands = arr.filter(_ < 10000).toList\n\
    \        val hundredThousands = arr.filter(_ < 100000).toList\n        val thousandThousands\
    \ = arr.filter(_ < 1000000).toList\n        val tenThousandThousands = arr.filter(_\
    \ < 10000000)\n        val hundredThousandThousands = arr.filter(_ < 100000000).toList\n\
    \        val thousandThousandThousands = arr.filter(_ < 1000000000).toList\n \
    \       val oneThousand = arr.filter(_ < 10000000000).toList\n        val oneThousandThousand\
    \ = arr.filter(_ < 100000000000).toList\n        val oneThousandThousandThousand\
    \ = arr.filter(_ < 1000000000000).toList\n        val oneThousandThousandThousandThousand\
    \ = arr.filter(_ < 10000000000000).toList\n        val oneThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 100000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 1000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 10000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 100000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 1000000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ < 10000000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter", "        val len = arr.length\n        if (len == 0) List()\n\
    \        else if (len == 1) List(arr(0))\n        else arr.sortWith(_ < _).reverse.map(x\
    \ => x % 10 + x.toString).filter(x => x >= 1 && x <= 9).map(x => s\"${x}\".toUpperCase)",
  "        val ones = arr.filter(x => x < 10).map(x => s\"One\")\n        val tens\
    \ = arr.filter(x => x >= 10 && x < 20).map(x => s\"Two\")\n        val hundreds\
    \ = arr.filter(x => x >= 20 && x < 100).map(x => s\"Three\")\n        val thousands\
    \ = arr.filter(x => x >= 100 && x < 1000).map(x => s\"Four\")\n        val millions\
    \ = arr.filter(x => x >= 1000 && x < 1000000).map(x => s\"Five\")\n        val\
    \ billions = arr.filter(x => x >= 1000000 && x < 1000000000).map(x => s\"Six\"\
    )\n        val trillions = arr.filter(x => x >= 1000000000 && x < 1000000000000).map(x\
    \ => s\"Seven\")\n        val quadrillions = arr.filter(x => x >= 1000000000000\
    \ && x < 1000000000000000).map(x => s\"Eight\")\n        val quintillions = arr.filter(x\
    \ => x >= 1000000000000000 && x < 10000000000000000).map(x => s\"Nine\")\n   \
    \     val hundredsAndOnes = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).map(x\
    \ => s\"One\")\n        val hundredsAndTens = arr.filter(x => x >= 100000000000000000\
    \ && x < 1000000000000000010).map(x => s\"Two\")\n        val hundredsAndHundreds\
    \ = arr.filter(x => x >= 1000000000000000010 && x < 10000000000000000100).map(x\
    \ => s\"Three\")\n        val hundredsAndThousands = arr.filter(x => x >= 10000000000000000100\
    \ && x < 100000000000000001000).map(x => s\"Four\")\n        val hundredsAndMillions\
    \ = arr.filter(x => x >= 100000000000000001000 && x < 100000000000000001000000).map(x\
    \ => s\"Five\")\n        val hundredsAndBillions = arr.filter(x => x >= 100000000000000001000000\
    \ && x < 100000000000000001000000000).map(x => s\"Six\")\n        val hundredsAndTrillions\
    \ = arr.filter(x => x >= 1000000000000000010000000 && x < 10000000000000000100000010).map(x\
    \ => s\"Seven\")\n        val hundredsAndQuadrillions = arr.filter(x => x >= 10000000000000000100000010\
    \ && x < 100000000000000001000000100).map(x => s\"Eight\")\n        val hundredsAndQuintillions\
    \ = arr.filter(x => x >= 100000000000000001000000100 && x < 1000000000000000010000001000).map(x\
    \ => s\"Nine\")\n        ", "        val result = arr.filter(_ >= 1l.toLong &&\
    \ _ <= 9l.toLong).sortWith(_ < _).reverse\n        val digits = arr.filter(_ >=\
    \ 1l.toLong && _ <= 9l.toLong)\n        val names = new mutable.HashMap[Long,\
    \ String]()\n        for(i <- 0 until digits.size) {\n            val digit =\
    \ digits(i)\n            names.put(digit, names(digit))\n        }\n        val\
    \ result = result.map(_.toString).map(names.get(_))\n        if(result.isEmpty)\
    \ Nil\n        else result", "        val ones = arr.filter(x => x >= 1l.toLong\
    \ && x <= 9l.toLong).sorted\n        val tens = arr.filter(x => x >= 10l.toLong\
    \ && x <= 99l.toLong).sorted\n        val hundreds = arr.filter(x => x >= 100l.toLong\
    \ && x <= 999l.toLong).sorted\n        val thousands = arr.filter(x => x >= 1000l.toLong\
    \ && x <= 9999l.toLong).sorted\n        val tenThousands = arr.filter(x => x >=\
    \ 100000l.toLong && x <= 999999l.toLong).sorted\n        val oneThousands = arr.filter(x\
    \ => x >= 1000000l.toLong && x <= 9999999l.toLong).sorted\n        val oneHundreds\
    \ = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).sorted\n\
    \        val oneThousandThousands = arr.filter(x => x >= 100000000l.toLong &&\
    \ x <= 99999999999l.toLong).sorted\n        val oneHundredThousands = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 999999999999l.toLong).sorted\n        val\
    \ oneHundredThousandThousands = arr.filter(x => x >= 10000000000l.toLong && x\
    \ <= 999999999999999l.toLong).sorted\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 9999999999999999999l.toLong).sorted\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(x => x >=\
    \ 100000000000000l.toLong && x <= 99999999999999999999l.toLong).sorted\n     \
    \   val oneHundredThousandThousandThousandThousandThousands = arr.filter(x =>\
    \ x >= 10000000000000000l.toLong && x <= 99999999999999999999999l.toLong).sorted\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(x\
    \ => x >= 100000000000000000l.toLong && x <= 999999999999999999999999999l.toLong).sorted\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong).sorted\n\
    \        val oneHundredThousandThous", "        val ones = arr.filter(x => x <\
    \ 9).map(x => s\"One\")\n        val twos = arr.filter(x => x < 18).map(x => s\"\
    Two\")\n        val threes = arr.filter(x => x < 27).map(x => s\"Three\")\n  \
    \      val fours = arr.filter(x => x < 36).map(x => s\"Four\")\n        val fives\
    \ = arr.filter(x => x < 45).map(x => s\"Five\")\n        val sixes = arr.filter(x\
    \ => x < 54).map(x => s\"Six\")\n        val sevens = arr.filter(x => x < 63).map(x\
    \ => s\"Seven\")\n        val eights = arr.filter(x => x < 72).map(x => s\"Eight\"\
    )\n        val nines = arr.filter(x => x < 81).map(x => s\"Nine\")\n        val\
    \ reversed = arr.reverse\n        val result = reversed.map(x => ones(x) + twos(x)\
    \ + threes(x) + fours(x) + fives(x) + sixes(x) + sevens(x) + eights(x) + nines(x))\n\
    \        if (arr.isEmpty) result\n        else result.reverse", "        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10).toList\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedString = onesReversed.map(_.toString).mkString(\"\")\n\
    \        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n\
    \        val tensReversedStringList = tensReversedString.split(\"\\\\D+\")\n \
    \       val onesReversedStringList = onesReversedString.split(\"\\\\D+\")\n  \
    \      val onesReversedStringListWithOne = onesReversedStringList.filter(_ !=\
    \ \"One\")\n        val tensReversedStringListWithOne = tensReversedStringList.filter(_\
    \ != \"One\")\n        val onesReversedStringListWithTen = onesReversedStringList.filter(_\
    \ != \"Ten\")\n        val tensReversedStringListWithTen = tensReversedStringList.filter(_\
    \ != \"Ten\")\n        val onesReversedStringListWithOneAndTen = onesReversedStringListWithOne\
    \ ++ tensReversedStringListWithTen\n        val onesReversedStringListWithOneAndTenWithOne\
    \ = onesReversedStringListWithOneAndTen.filter(_ != \"One\")\n        val onesReversedStringListWithOneAndTenWithTen\
    \ = onesReversedStringListWithOneAndTen.filter(_ != \"Ten\")\n        val onesReversedStringListWithOneAndTenWithOneAndTen\
    \ = onesReversedStringListWithOneAndTen ++ onesReversedStringListWithOneAndTenWithOne\
    \ ++ onesReversedStringListWithOneAndTenWithTen\n        val onesReversedStringListWithOneAndTenWithOneAndTen\
    \ = onesReversedStringListWithOneAndTen ++ onesReversedStringListWithOneAndTenWithOne\n\
    \        val onesReversedStringListWithOneAndTenWithOneAndTen = onesReversedStringListWithOneAndTen\
    \ ++ onesReversedStringListWithOneAndTenWithOne\n        val onesReversedStringListWithOneAndTenWithOneAndTen\
    \ = onesReversedStringListWithOneAndTen ++ onesReversedStringListWithOneAndTenWithOneAndTen\n\
    \        val onesReversedStringListWithOneAndTenWithOneAndTen = onesReversedStringListWithOne",
  "        val len = arr.length\n        val ones = arr.filter(_ <= 1).toList\n  \
    \      val tens = arr.filter(_ <= 10).toList\n        val hundreds = arr.filter(_\
    \ <= 100).toList\n        val thousands = arr.filter(_ <= 1000).toList\n     \
    \   val tenThousands = arr.filter(_ <= 10000).toList\n        val oneThousands\
    \ = arr.filter(_ <= 100000).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 100000).toList\n        val oneThousandHundreds = arr.filter(_ <= 1000000).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 10000000).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 100000000).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 10000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 10000000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000000000).toList\n        val oneThousandThousand",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n\
    \        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n  \
    \      val arrString = arr.map(x => Four(x))\n        val arrStringReversed =\
    \ arrString.reverse\n        val arrStringReversedString = arrStringReversed.map(x\
    \ => Five(x))\n        val arrStringReversedStringReversed = arrStringReversedString.reverse\n\
    \        val arrStringReversedStringReversedString = arrStringReversedStringReversed.map(x\
    \ => Six(x))\n        val arrStringReversedStringReversedStringReversed = arrStringReversedStringReversedString.reverse\n\
    \        val arrStringReversedStringReversedStringReversedString = arrStringReversedStringReversedStringReversed.map(x\
    \ => Seven(x))\n        val arrStringReversedStringReversedStringReversedStringReversed\
    \ = arrStringReversedStringReversedStringReversedString.reverse\n        val arrStringReversedStringReversedStringReversedStringReversedString\
    \ = arrStringReversedStringReversedStringReversedStringReversed.map(x => Eight(x))\n\
    \        val arrStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = arrStringReversedStringReversedStringReversedStringReversedString.reverse\n\
    \        val arrStringReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = arrStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Nine(x))\n        val arrStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = arrStringReversedStringReversedStringReversedStringReversedStringReversedString.reverse\n\
    \        val arrStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = arrStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.map(x\
    \ => Ten(x))\n        val arrStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = arrStringReverse", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n\
    \        val onesReversed = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n\
    \        val hundredsReversedReversed = hundredsReversed.reverse\n        val\
    \ onesReversedReversed = onesReversed.reverse\n        val tensReversedReversedReversed\
    \ = tensReversedReversed.reverse\n        val hundredsReversedReversedReversed\
    \ = hundredsReversedReversed.reverse\n        val onesReversedReversedReversed\
    \ = onesReversedReversed.reverse\n        val tensReversedReversedReversedReversed\
    \ = tensReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversed\
    \ = onesReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversed.reverse\n        val onesReversedReversedReversedReversedReversed\
    \ = onesReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversedReversedReversed.reverse\n       \
    \ val onesReversedReversedReversedReversedReversedReversedReversed = onesReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val hundredsReversedReversedReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val one", "        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_\
    \ < _).reverse\n        val map = new mutable.HashMap[Long, String]()\n      \
    \  result foreach { i =>\n            map.put(i, byLength(i.toString.toLong))\n\
    \        }\n        map.toList.map(_.toString)", "        val result = arr.filter(_\
    \ > 0l).sortWith(_ < _)\n        val reversed = result.reverse\n        val digits\
    \ = reversed.map(_.toString)\n        val ones = digits.filter(_.equals(\"1\"\
    ))\n        val tens = digits.filter(_.equals(\"10\"))\n        val hundreds =\
    \ digits.filter(_.equals(\"100\"))\n        val thousands = digits.filter(_.equals(\"\
    1000\"))\n        val names = ones + tens + hundreds + thousands\n        val\
    \ result = names.map(name => name.toString.replaceAll(\"\\\\D\", \"\"))\n    \
    \    result", "        val list = arr.toList\n        val len = list.size\n  \
    \      val ones = list.filter(x => x % 10 == 1).map(x => x.toString)\n       \
    \ val tens = list.filter(x => x % 10 == 0).map(x => x.toString)\n        val tensReversed\
    \ = tens.reverse\n        val onesReversed = ones.reverse\n        val result\
    \ = onesReversed.zip(tensReversed).map(x => x._1 + \" \" + x._2).reverse\n   \
    \     if (len > 0) {\n            val lastDigit = list.last\n            val lastDigitName\
    \ = lastDigit % 10.toString\n            val lastDigitNameReversed = lastDigitName.reverse\n\
    \            val lastDigitNameReversedName = lastDigitNameReversed.map(x => x.toString)\n\
    \            val lastDigitNameReversedNameReversed = lastDigitNameReversedName.reverse\n\
    \            val lastDigitNameReversedNameReversedName = lastDigitNameReversedNameReversed.map(x\
    \ => x.toString)\n            val lastDigitNameReversedNameReversedNameReversed\
    \ = lastDigitNameReversedNameReversedName.reverse\n            val lastDigitNameReversedNameReversedNameReversedName\
    \ = lastDigitNameReversedNameReversedNameReversed.map(x => x.toString)\n     \
    \       val lastDigitNameReversedNameReversedNameReversedNameReversed = lastDigitNameReversedNameReversedNameReversedName.reverse\n\
    \            val lastDigitNameReversedNameReversedNameReversedNameReversedName\
    \ = lastDigitNameReversedNameReversedNameReversedNameReversed.map(x => x.toString)\n\
    \            val lastDigitNameReversedNameReversedNameReversedNameReversedNameReversed\
    \ = lastDigitNameReversedNameReversedNameReversedNameReversedName.reverse\n  \
    \          val lastDigitNameReversedNameReversedNameReversedNameReversedNameReversedName\
    \ = lastDigitNameReversedNameReversedNameReversedNameReversedNameReversed.map(x\
    \ => x.toString)\n            val lastDigitNameReversedNameReversedNameReversedNameReversedNameReversedNameReversed\
    \ = lastDigitNameReversedNameReversedNameReversedNameReversedNameReversedName.reverse\n\
    \            val lastDigitNameReversedNameReversedNameReversedNameReversedNameReversedNameReversedName\
    \ = lastDigitNameReversedNameReversedNameReversedNameReversedNameReversedNameReversed.map(x\
    \ => x.toString)\n            val lastDigitNameReversedNameReversedNameReversedNameReversedNameReverse",
  "        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos\
    \ = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val result = ones + twos + threes +\
    \ fours + fives + sixes + sevens + eights + nines\n        val reversed = result.reverse\n\
    \        reversed.map(x => if (x < 10) s\"$x\" else s\"$x%10\")", "        val\
    \ ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x\
    \ >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x <\
    \ 30).toList\n        val twenties = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val thirties = arr.filter(x => x >= 40 && x < 50).toList\n        val\
    \ fourties = arr.filter(x => x >= 50 && x < 60).toList\n        val fifties =\
    \ arr.filter(x => x >= 60 && x < 70).toList\n        val sixties = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val seventies = arr.filter(x => x >= 80\
    \ && x < 90).toList\n        val eighties = arr.filter(x => x >= 90 && x < 100).toList\n\
    \        val nineties = arr.filter(x => x >= 100).toList\n        val onesAndTens\
    \ = ones + tens\n        val onesAndTwenties = ones + twenties\n        val onesAndThirties\
    \ = ones + thirties\n        val onesAndFourties = ones + fourties\n        val\
    \ onesAndFifties = ones + fifties\n        val onesAndSixties = ones + sixties\n\
    \        val onesAndSeventies = ones + seventies\n        val onesAndEighties\
    \ = ones + eighties\n        val onesAndNineties = ones + nineties\n        val\
    \ tensAndTwenties = tens + twenties\n        val tensAndThirties = tens + thirties\n\
    \        val tensAndFourties = tens + fourties\n        val tensAndFifties = tens\
    \ + fifties\n        val tensAndSixties = tens + sixties\n        val tensAndSeventies\
    \ = tens + seventies\n        val tensAndEighties = tens + eighties\n        val\
    \ tensAndNineties = tens + nineties\n        val twentiesAndThirties = twenties\
    \ + thirties\n        val twentiesAndFourties = twenties + fourties\n        val\
    \ twentiesAndFifties = twenties + fifties\n        val twentiesAndSixties = twenties\
    \ + sixties\n        val twentiesAndSeventies = twenties + seventies\n       \
    \ val twentiesAndEighties = twenties + eighties\n        val twenties", "    \
    \    val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999).toList\n        val oneHundredThousandThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999989).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999899).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999898).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999998979).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999989798).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999998979879).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999989798798).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999998979879899).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999989798798999).toList\n        val oneHundredThousandThousandThousandThousand",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => s\"\
    One\")\n        val twos = arr.filter(x => x >= 2l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Two\")\n        val threes = arr.filter(x => x >= 3l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Three\")\n        val fours = arr.filter(x => x >= 4l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x >= 5l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Five\")\n        val sixes = arr.filter(x => x >= 6l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Six\")\n        val sevens = arr.filter(x => x >= 7l.toLong && x <= 9l.toLong).map(x\
    \ => s\"Seven\")\n        val eights = arr.filter(x => x >= 8l.toLong && x <=\
    \ 9l.toLong).map(x => s\"Eight\")\n        val nines = arr.filter(x => x >= 9l.toLong).map(x\
    \ => s\"Nine\")\n        ones + twos + threes + fours + fives + sixes + sevens\
    \ + eights + nines", "        val ones = arr.filter(_ <= 9).toList\n        val\
    \ tens = arr.filter(_ >= 10).toList\n        val tensReversed = tens.reverse\n\
    \        val tensReversedString = tensReversed.map(_.toString).mkString(\"\")\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringWithOne = onesReversedString + onesReversedString\n\
    \        val tensReversedStringWithOne = tensReversedString + onesReversedStringWithOne\n\
    \        val tensReversedStringWithTen = tensReversedString + tensReversedString\n\
    \        val tensReversedStringWithTenAndOne = tensReversedString + tensReversedStringWithTen\
    \ + onesReversedStringWithOne\n        val tensReversedStringWithTenAndOneAndOne\
    \ = tensReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + onesReversedString\n        val tensReversedStringWithTenAndOneAndOneAndOne\
    \ = tensReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + onesReversedStringWithOne + onesReversedString\n        val tensReversedStringWithTenAndOneAndOneAndOneAndOne\
    \ = tensReversedString + tensReversedStringWithTen + onesReversedStringWithOne\
    \ + onesReversedStringWithOne + onesReversedStringWithOne + onesReversedString\n\
    \        val tensReversedStringWithTenAndOneAndOneAndOneAndOneAndOne = tensReversedString\
    \ + tensReversedStringWithTen + onesReversedStringWithOne + onesReversedStringWithOne\
    \ + onesReversedStringWithOne + onesReversedStringWithOne + onesReversedStringWithOne\n\
    \        val tensReversedStringWithTenAndOneAndOneAndOneAndOneAndOneAndOne = tensReversedString\
    \ + tensReversedStringWithTen + onesReversedStringWithOne + onesReversedStringWithOne\
    \ + onesReversedStringWithOne + onesReversedStringWithOne + onesReversedStringWithOne\
    \ + onesReversedStringWithOne\n        val tensReversedStringWithTen", "     \
    \   val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n\
    \        result.map(_.toString).filterNot(_.isEmpty).map(name => s\"$name\")",
  "        val result = new mutable.ListBuffer[String]()\n        val one = arr.filter(_\
    \ <= 9).toList\n        val two = arr.filter(_ <= 18).toList\n        val three\
    \ = arr.filter(_ <= 27).toList\n        val four = arr.filter(_ <= 36).toList\n\
    \        val five = arr.filter(_ <= 45).toList\n        val six = arr.filter(_\
    \ <= 54).toList\n        val seven = arr.filter(_ <= 63).toList\n        val eight\
    \ = arr.filter(_ <= 72).toList\n        val nine = arr.filter(_ <= 81).toList\n\
    \        val ten = arr.filter(_ <= 90).toList\n        val eleven = arr.filter(_\
    \ <= 99).toList\n        val twelve = arr.filter(_ <= 120).toList\n        val\
    \ thirteen = arr.filter(_ <= 129).toList\n        val fourteen = arr.filter(_\
    \ <= 138).toList\n        val fifteen = arr.filter(_ <= 145).toList\n        val\
    \ sixteen = arr.filter(_ <= 154).toList\n        val seventeen = arr.filter(_\
    \ <= 163).toList\n        val eighteen = arr.filter(_ <= 172).toList\n       \
    \ val nineteen = arr.filter(_ <= 181).toList\n        val twenty = arr.filter(_\
    \ <= 190).toList\n        val twentyOne = arr.filter(_ <= 199).toList\n      \
    \  val twentyTwo = arr.filter(_ <= 208).toList\n        val twentyThree = arr.filter(_\
    \ <= 217).toList\n        val twentyFour = arr.filter(_ <= 226).toList\n     \
    \   val twentyFive = arr.filter(_ <= 235).toList\n        val twentySix = arr.filter(_\
    \ <= 244).toList\n        val twentySeven = arr.filter(_ <= 253).toList\n    \
    \    val twentyeight = arr.filter(_ <= 262).toList\n        val twentynine = arr.filter(_\
    \ <= 271).toList\n        val thirty = arr.filter(_ <= 280).toList\n        val\
    \ thirtyOne = arr.filter(_ <= 289).toList\n        val thirtyTwo = arr.filter(_\
    \ <= 298).toList\n        val thirtyThree = arr.filter(_ <= 307).toList\n    \
    \    val thirtyFour = arr.filter(_ <= 316).toList\n        val thirtyFive = arr.filter(_\
    \ <= 325).toList\n        val thirtySix = arr.filter(_ <= 334).toList\n", "  \
    \      val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_.toInt).reverse\n\
    \        arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(_.toString).map(name\
    \ => name -> result(_)).toList", "        val len = arr.length\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandTh",
  "        val result = arr.sortWith(_.toInt < _.toInt).reverse\n        val map =\
    \ Map(1l -> \"One\", 2l -> \"Two\", 3l -> \"Three\", 4l -> \"Four\", 5l -> \"\
    Five\", 6l -> \"Six\", 7l -> \"Seven\", 8l -> \"Eight\", 9l -> \"Nine\")\n   \
    \     val result2 = result.map(x => map.getOrElse(x, x.toString))\n        result2",
  "        val result = new mutable.ListBuffer[String]()\n        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val hundredThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val thousandThousands = arr.filter(_\
    \ <= 999999999).toList\n        val oneThousands = arr.filter(_ <= 99999999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousands =\
    \ arr.filter(_ <= 999999999999999999).toList\n        val oneThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999).toList\n        val oneHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ oneThousandHundredThousandHundredThousandHundredThousandHundredThousands = arr.filter(_\
    \ <= 999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandHundredThousandHundredThousandHundredTh", "        val ones = arr.filter(x\
    \ => x < 9).toList\n        val tens = arr.filter(x => x >= 9 && x < 99).toList\n\
    \        val hundreds = arr.filter(x => x >= 99).toList\n        val hundredsReversed\
    \ = hundreds.reverse\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(x => One(x))\n\
    \        val tensReversedString = tensReversed.map(x => Two(x))\n        val hundredsReversedString\
    \ = hundredsReversed.map(x => Three(x))\n        val hundredsReversedString2 =\
    \ hundredsReversed.map(x => Four(x))\n        val hundredsReversedString3 = hundredsReversed.map(x\
    \ => Five(x))\n        val hundredsReversedString4 = hundredsReversed.map(x =>\
    \ Six(x))\n        val hundredsReversedString5 = hundredsReversed.map(x => Seven(x))\n\
    \        val hundredsReversedString6 = hundredsReversed.map(x => Eight(x))\n \
    \       val hundredsReversedString7 = hundredsReversed.map(x => Nine(x))\n   \
    \     val hundredsReversedString8 = hundredsReversed.map(x => Ten(x))\n      \
    \  val hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9hundredsReversedString9",
  "        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens\
    \ = arr.filter(x => x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x\
    \ => x < 999).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x < 9999).map(x => s\"Thousand\")\n        val millions = arr.filter(x => x\
    \ < 99999).map(x => s\"Million\")\n        val billions = arr.filter(x => x <\
    \ 999999).map(x => s\"Billion\")\n        val trillions = arr.filter(x => x <\
    \ 9999999).map(x => s\"Trillion\")\n        val quadrillions = arr.filter(x =>\
    \ x < 999999999).map(x => s\"Quadrillion\")\n        val quintillions = arr.filter(x\
    \ => x < 99999999999).map(x => s\"Quintillion\")\n        val sextillions = arr.filter(x\
    \ => x < 999999999999).map(x => s\"Sextillion\")\n        val septillions = arr.filter(x\
    \ => x < 999999999999999).map(x => s\"Septillion\")\n        val octillions =\
    \ arr.filter(x => x < 999999999999999999).map(x => s\"Octillion\")\n        val\
    \ nonillions = arr.filter(x => x < 999999999999999999999).map(x => s\"Nonillion\"\
    )\n        val decillions = arr.filter(x => x < 9999999999999999999998).map(x\
    \ => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 99999999999999999999987).map(x\
    \ => s\"Undecillion\")\n        val undecillions = arr.filter(x => x < 999999999999999999999876).map(x\
    \ => s\"Undecillion\")\n        val decillions = arr.filter(x => x < 9999999999999999999998765).map(x\
    \ => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 99999999999999999999987654).map(x\
    \ => s\"Undecillion\")\n        val decillions = arr.filter(x => x < 999999999999999999999876543).map(x\
    \ => s\"Decillion\")\n        val undecillions = arr.filter(x => x < 9999999999999999999998765432).map(x\
    \ => s\"Undecillion\")\n        val decillions = arr.filter(x => x < 999999999999999999",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val hundredThousands = arr.filter(_ <= 9999999).toList\n\
    \        val thousandThousands = arr.filter(_ <= 999999999).toList\n        val\
    \ oneThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousands =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 999999999999999999).toList\n        val oneThousandHundredThousands = arr.filter(_\
    \ <= 99999999999999999999).toList\n        val oneHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandHundredThousandHundredThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999).toList\n   \
    \     val oneHundredThousandHundredThousandHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandHundredThousandHundredThousandThousandThous", " \
    \       val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneHundredThousandThousands\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999).toList\n       \
    \ val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999).toList\n   \
    \     val oneHundredThousandThousandThousandThousandThousandTh", "        val\
    \ ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => x.toString)\n\
    \        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => x.toString)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x\
    \ <= 999l.toLong).map(x => x.toString)\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString)\n        val tenThousands\
    \ = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x => x.toString)\n\
    \        val oneThousands = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x\
    \ => x.toString)\n        val oneHundreds = arr.filter(x => x >= 10000000l.toLong\
    \ && x <= 999999999l.toLong).map(x => x.toString)\n        val oneThousandHundreds\
    \ = arr.filter(x => x >= 100000000l.toLong && x <= 99999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousands = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandHundreds\
    \ = arr.filter(x => x >= 10000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousands = arr.filter(x => x\
    \ >= 1000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString)\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(x => x >= 10000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => x.toString)\n        val oneThousandThousandThousandThousands\
    \ = arr.filter(x => x >= 100000000000000l.toLong && x <= 99999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandHundreds = arr.filter(x\
    \ => x >= 1000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => x.toString)\n        val oneThousandThousandThousandThousandThous", "   \
    \     val result = arr.filter(_ > 0l).sortWith(_ < _).reverse\n        val digits\
    \ = arr.filter(_ > 0l).map(_.toString)\n        val ones = digits.filter(_.contains(\"\
    One\"))\n        val twos = digits.filter(_.contains(\"Two\"))\n        val threes\
    \ = digits.filter(_.contains(\"Three\"))\n        val fours = digits.filter(_.contains(\"\
    Four\"))\n        val fives = digits.filter(_.contains(\"Five\"))\n        val\
    \ sixes = digits.filter(_.contains(\"Six\"))\n        val sevens = digits.filter(_.contains(\"\
    Seven\"))\n        val eights = digits.filter(_.contains(\"Eight\"))\n       \
    \ val nines = digits.filter(_.contains(\"Nine\"))\n        val onesAndTwos = ones.zip(twos)\n\
    \        val onesAndThrees = ones.zip(threes)\n        val onesAndFours = ones.zip(fours)\n\
    \        val onesAndFives = ones.zip(fives)\n        val onesAndSixes = ones.zip(sixes)\n\
    \        val onesAndSevens = ones.zip(sevens)\n        val onesAndEights = ones.zip(eights)\n\
    \        val onesAndNines = ones.zip(nines)\n        val twosAndThrees = twos.zip(threes)\n\
    \        val twosAndFours = twos.zip(fours)\n        val twosAndFives = twos.zip(fives)\n\
    \        val twosAndSixes = twos.zip(sixes)\n        val twosAndSevens = twos.zip(sevens)\n\
    \        val twosAndEights = twos.zip(eights)\n        val twosAndNines = twos.zip(nines)\n\
    \        val threesAndFours = threes.zip(fours)\n        val threesAndFives =\
    \ threes.zip(fives)\n        val threesAndSixes = threes.zip(sixes)\n        val\
    \ threesAndSevens = threes.zip(sevens)\n        val threesAndEights = threes.zip(eights)\n\
    \        val threesAndNines = threes.zip(nines)\n        val foursAndFives = fours.zip(fives)\n\
    \        val foursAndSixes = fours.zip(sixes)\n        val foursAndSevens = fours.zip(sevens)\n\
    \        val foursAndEights = fours.zip(eights)\n        val foursAndNines = fours.zip(nines)\n\
    \        val fivesAndSixes = fives.zip(sixes)\n        val fivesAnd", "      \
    \  val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val hundreds = arr.filter(x => x >= 20\
    \ && x < 30).toList\n        val thousands = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val hundredsAndOnes = arr.filter(x => x >= 40 && x < 50).toList\n   \
    \     val hundredsAndTens = arr.filter(x => x >= 50 && x < 60).toList\n      \
    \  val hundredsAndHundreds = arr.filter(x => x >= 60 && x < 70).toList\n     \
    \   val hundredsAndThousands = arr.filter(x => x >= 70 && x < 80).toList\n   \
    \     val hundredsAndOnesAndTens = arr.filter(x => x >= 80 && x < 90).toList\n\
    \        val hundredsAndOnesAndHundreds = arr.filter(x => x >= 90 && x < 100).toList\n\
    \        val hundredsAndOnesAndThousands = arr.filter(x => x >= 100 && x < 1000).toList\n\
    \        val hundredsAndOnesAndOnesAndTens = arr.filter(x => x >= 1000 && x <\
    \ 10000).toList\n        val hundredsAndOnesAndOnesAndHundreds = arr.filter(x\
    \ => x >= 10000 && x < 100000).toList\n        val hundredsAndOnesAndOnesAndThousands\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndHundreds\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndThousands\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndOnesAndHundreds\
    \ = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n        val\
    \ hundredsAndOnesAndOnesAndOnesAndOnesAndThousands = arr.filter(x => x >= 100000000000\
    \ && x < 1000000000000).toList\n        val hundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndTens\
    \ = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n       \
    \ val hundredsAndOnesAndOnesAndOnesAndOnesAndOnesAndHundreds = arr.", "      \
    \  val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val reversed = ones + tens + hundreds.reverse\n        val names = \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n        reversed.map(x => names.find(y => y == x.toString)).toList",
  "        val nums = arr.toList\n        val numsLength = nums.map(_.toString).map(_.length).max\n\
    \        val numsLengthString = numsLength.toString\n        val numsLengthStringLength\
    \ = numsLengthString.length\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.toInt\n        val numsLengthStringLength\
    \ = numsLengthStringLength.toInt\n        val numsLengthStringLength = numsLengthStringLength.toInt\n\
    \        val numsLengthStringLength = numsLengthStringLength.toInt\n        val\
    \ numsLengthStringLength = numsLengthStringLength.to", "        val ones = arr.filter(_\
    \ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n        val hundreds\
    \ = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n\
    \        val tenThousands = arr.filter(_ <= 999999).toList\n        val hundredThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val thousandThousands = arr.filter(_\
    \ <= 999999999).toList\n        val oneThousand = arr.filter(_ <= 99999999999).toList\n\
    \        val oneHundred = arr.filter(_ <= 9999999998).toList\n        val oneThousandThousand\
    \ = arr.filter(_ <= 999999999998).toList\n        val oneHundredThousand = arr.filter(_\
    \ <= 999999999999).toList\n        val oneThousandHundred = arr.filter(_ <= 9999999999998).toList\n\
    \        val oneHundredThousandThousand = arr.filter(_ <= 99999999999988).toList\n\
    \        val oneHundredThousandHundred = arr.filter(_ <= 999999999999888).toList\n\
    \        val oneThousandHundredThousand = arr.filter(_ <= 999999999999888).toList\n\
    \        val oneHundredThousandHundredThousand = arr.filter(_ <= 9999999999998888).toList\n\
    \        val oneThousandHundredThousandHundred = arr.filter(_ <= 99999999999988888).toList\n\
    \        val oneHundredThousandHundredThousand = arr.filter(_ <= 999999999999888888).toList\n\
    \        val oneThousandHundredThousandHundredThousand = arr.filter(_ <= 9999999999998888888).toList\n\
    \        val oneHundredThousandHundredThousandHundred = arr.filter(_ <= 99999999999988888888).toList\n\
    \        val oneThousandHundredThousandHundredThousandHundred = arr.filter(_ <=\
    \ 999999999999888888888).toList\n        val oneHundredThousandHundredThousandHundredThousand\
    \ = arr.filter(_ <= 9999999999998888888888).toList\n        val oneThousandHundredThousandHundredThousandHundredThousand\
    \ = arr.filter", "        val ones = arr.filter(_ <= 9).toList\n        val tens\
    \ = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n\
    \        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands\
    \ = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <=\
    \ 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n\
    \        val oneThousandThousands = arr.filter(_ <= 99999999999).toList\n    \
    \    val oneHundredThousands = arr.filter(_ <= 999999999999).toList\n        val\
    \ oneHundredThousandThousands = arr.filter(_ <= 999999999999999).toList\n    \
    \    val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThous",
  "        val len = arr.length\n        if (len == 0) return Nil\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousand",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >=\
    \ 10).toList\n        val tensReversed = tens.reverse\n        val tensReversedString\
    \ = tensReversed.map(_ + 10).map(_.toString).mkString(\"\")\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tensReversedStringLength = tensReversedString.length\n        val\
    \ tensReversedStringLength = tensReversedString.length\n        val tensReversedStringLength\
    \ = tensReversedString.length\n        val tensReversedStringLength = tensReversedString.length\n\
    \        val tens", "        val ones = arr.filter(_ <= 9).toList\n        val\
    \ tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n\
    \        val thousands = arr.filter(_ <= 9999).toList\n        val tenThousands\
    \ = arr.filter(_ <= 999999).toList\n        val oneThousands = arr.filter(_ <=\
    \ 9999999).toList\n        val oneHundreds = arr.filter(_ <= 999999999).toList\n\
    \        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n     \
    \   val oneThousandThousandHundreds = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val result = arr.foldLeft(List[String]()){\n            (acc, x) => {\n\
    \                val digit = math.abs(x)\n                if(digit < 10) {\n \
    \                   acc :+ s\"${digit}\".toUpperCase\n                } else if(digit\
    \ < 100) {\n                    acc :+ s\"${digit/10}\".toUpperCase\n        \
    \        } else if(digit < 1000) {\n                    acc :+ s\"${digit/100}\"\
    .toUpperCase\n                } else if(digit < 10000) {\n                   \
    \ acc :+ s\"${digit/1000}\".toUpperCase\n                } else if(digit < 100000)\
    \ {\n                    acc :+ s\"${digit/10000}\".toUpperCase\n            \
    \    } else if(digit < 1000000) {\n                    acc :+ s\"${digit/100000}\"\
    .toUpperCase\n                } else if(digit < 10000000) {\n                \
    \    acc :+ s\"${digit/1000000}\".toUpperCase\n                } else if(digit\
    \ < 100000000) {\n                    acc :+ s\"${digit/10000000}\".toUpperCase\n\
    \                } else if(digit < 1000000000) {\n                    acc :+ s\"\
    ${digit/100000000}\".toUpperCase\n                } else if(digit < 10000000000)\
    \ {\n                    acc :+ s\"${digit/1000000000}\".toUpperCase\n       \
    \         } else if(digit < 100000000000) {\n                    acc :+ s\"${digit/10000000000}\"\
    .toUpperCase\n                } else if(digit < 1000000000000) {\n           \
    \         acc :+ s\"${digit/100000000000}\".toUpperCase\n                } else\
    \ if(digit < 10000000000000) {\n                    acc :+ s\"${digit/1000000000000}\"\
    .toUpperCase\n                } else if(digit < 100000000000000) {\n         \
    \           acc :+ s\"${digit/10000000000000}\".toUpperCase\n                }\
    \ else if(digit < 1000000000000000) {\n                    acc :+ s\"${digit/100000000000000}\"\
    .toUpperCase\n                } else if(digit < 10000000000000000) {\n       \
    \             acc :+ s\"${digit/1000000000000000}\".toUpperCase\n            \
    \    } else if(digit < 100000000000000000) {\n                    acc :+ s\"${digit/10000000000000000}\"\
    .toUpperCase\n                } else if(digit < 100000000000000000) {\n      \
    \              acc :+ s\"${digit/100000000000000000}\".toUpperCase\n         \
    \       } else if(digit < 1000000000000000000) {\n                    acc :+ s\"\
    ${digit/1000000000000000000}\".toUpperCase\n                } else {\n       \
    \             acc :+ s\"${digit}\".toUpperCase\n                }\n          \
    \  }\n        }\n        if(arr.isEmpty) result else result.reverse", "      \
    \  val ones = arr.filter(x => x < 9l.toLong)\n        val tens = arr.filter(x\
    \ => x >= 9l.toLong && x < 19l.toLong)\n        val teens = arr.filter(x => x\
    \ >= 19l.toLong)\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val teensReversed = teens.reverse\n        val onesReversedString\
    \ = onesReversed.map(x => One(x))\n        val tensReversedString = tensReversed.map(x\
    \ => Two(x))\n        val teensReversedString = teensReversed.map(x => Three(x))\n\
    \        val tensReversedStringString = tensReversedString.map(x => x.mkString)\n\
    \        val teensReversedStringString = teensReversedString.map(x => x.mkString)\n\
    \        val onesReversedStringString = onesReversedString\n        val tensReversedStringStringString\
    \ = tensReversedStringString.map(x => x.mkString)\n        val teensReversedStringStringString\
    \ = teensReversedStringString.map(x => x.mkString)\n        val onesReversedStringStringStringString\
    \ = onesReversedStringStringString\n        val tensReversedStringStringStringStringString\
    \ = tensReversedStringStringStringString.map(x => x.mkString)\n        val teensReversedStringStringStringStringString\
    \ = teensReversedStringStringStringStringString.map(x => x.mkString)\n       \
    \ val onesReversedStringStringStringStringStringString = onesReversedStringStringStringStringStringString.map(x\
    \ => x.mkString)\n        val tensReversedStringStringStringStringStringStringString\
    \ = tensReversedStringStringStringStringStringStringString.map(x => x.mkString)\n\
    \        val teensReversedStringStringStringStringStringStringString = teensReversedStringStringStringStringStringStringStringString.map(x\
    \ => x.mkString)\n        val onesReversedStringStringStringStringStringStringStringString\
    \ = onesReversedStringStringStringStringStringStringStringStringString.map(x =>\
    \ x.mkString)\n        val tensReversedStringStringStringStringStringStringStringStringString\
    \ = tensReversedStringStringStringStringStringStringStringStringStringString.map(x\
    \ => x.mkString)\n        val teensReversedStringStringStringStringStringStringStringStringString\
    \ = teensReversedStringStringStringStringStringStringStringStringStringString.map(x\
    \ => x.mkString)\n        val onesReversedStringStringStringStringStringStringStringString",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong)\n        val\
    \ tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong)\n        val hundreds\
    \ = arr.filter(x => x >= 100l.toLong)\n        val hundredsReversed = hundreds.reverse\n\
    \        val tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n\
    \        val onesReversedString = onesReversed.map(x => onesReversedStringMap.get(x))\n\
    \        val tensReversedString = tensReversed.map(x => tensReversedStringMap.get(x))\n\
    \        val hundredsReversedString = hundredsReversed.map(x => hundredsReversedStringMap.get(x))\n\
    \        val hundredsReversedStringString = hundredsReversedString.mkString(\"\
    \")\n        val tensReversedStringString = tensReversedString.mkString(\"\")\n\
    \        val onesReversedStringString = onesReversedString.mkString(\"\")\n  \
    \      val onesReversedStringListString = onesReversedStringString.split(\",\"\
    )\n        val tensReversedStringListString = tensReversedStringString.split(\"\
    ,\")\n        val hundredsReversedStringListString = hundredsReversedStringString.split(\"\
    ,\")\n        val hundredsReversedStringListStringListString = hundredsReversedStringListString.map(x\
    \ => hundredsReversedStringListStringMap.get(x))\n        val tensReversedStringListStringListString\
    \ = tensReversedStringListString.map(x => tensReversedStringListStringMap.get(x))\n\
    \        val onesReversedStringListStringListString = onesReversedStringListString.map(x\
    \ => onesReversedStringListStringMap.get(x))\n        val onesReversedStringListStringListStringListString\
    \ = onesReversedStringListStringListString.map(x => onesReversedStringListStringListStringMap.get(x))\n\
    \        val tensReversedStringListStringListStringListString = tensReversedStringListStringListString.map(x\
    \ => tensReversedStringListStringListStringMap.get(x))\n        val onesReversedStringListStringListStringListStringListString\
    \ = onesReversedStringListStringListStringListString.map(x => onesReversedStringListStringListStringListStringMap.get(x))\n\
    \        val tensReversedStringListStringListStringListStringListStringListString\
    \ = tensReversedStringListStringListString", "        val ones = arr.filter(x\
    \ => x % 10 == 0)\n        val tens = arr.filter(x => x % 10 != 0)\n        val\
    \ tensReversed = tens.reverse\n        val onesReversed = ones.reverse\n     \
    \   val onesReversedWithTens = onesReversed.zip(tensReversed)\n        val onesReversedWithTensReversed\
    \ = onesReversedWithTens.reverse\n        val onesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversed.zip(onesReversed)\n        val onesReversedWithTensReversedWithOnesReversed\
    \ = onesReversedWithTensReversedWithOnes.reverse\n        val onesReversedWithTensReversedWithOnesReversedWithTens\
    \ = onesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n        val\
    \ onesReversedWithTensReversedWithOnesReversedWithTensReversed = onesReversedWithTensReversedWithOnesReversedWithTens.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTens\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversed.zip(tensReversed)\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.reverse\n\
    \        val onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnes\
    \ = onesReversedWithTensReversedWithOnesReversedWithTensReversedWithOnesReversedWithTensReversed.zip(onesReversed)",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 20).toList\n        val hundreds = arr.filter(x => x >= 20\
    \ && x < 30).toList\n        val thousands = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val tenThousands = arr.filter(x => x >= 40 && x < 50).toList\n      \
    \  val oneThousands = arr.filter(x => x >= 50 && x < 60).toList\n        val oneHundreds\
    \ = arr.filter(x => x >= 60 && x < 70).toList\n        val oneThousandHundreds\
    \ = arr.filter(x => x >= 70 && x < 80).toList\n        val oneThousandThousands\
    \ = arr.filter(x => x >= 80 && x < 90).toList\n        val oneHundredThousands\
    \ = arr.filter(x => x >= 90 && x < 100).toList\n        val oneHundredThousandHundreds\
    \ = arr.filter(x => x >= 100 && x < 1000).toList\n        val oneThousandThousandHundredThousands\
    \ = arr.filter(x => x >= 1000 && x < 10000).toList\n        val oneHundredThousandThousandHundredThousands\
    \ = arr.filter(x => x >= 10000 && x < 100000).toList\n        val oneThousandThousandThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 100000 && x < 1000000).toList\n        val oneHundredThousandThousandThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 1000000 && x < 10000000).toList\n        val oneThousandThousandThousandHundredThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 10000000 && x < 100000000).toList\n        val oneHundredThousandThousandThousandHundredThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n        val oneThousandThousandThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n        val oneHundredThousandThousandThousandHundredThousandHundredThousandHundredThousandHundred",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneHundredThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneHundredThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter", "        val result = arr.filter(x => x >= 1 && x <= 9).sortWith(_\
    \ < _).reverse\n        val map = Map(\"One\" -> 1, \"Two\" -> 2, \"Three\" ->\
    \ 3, \"Four\" -> 4, \"Five\" -> 5, \"Six\" -> 6, \"Seven\" -> 7, \"Eight\" ->\
    \ 8, \"Nine\" -> 9)\n        result.map(x => map.getOrElse(x.toString, x.toString))",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val hundredThousands = arr.filter(_ <= 9999999).toList\n\
    \        val thousandThousands = arr.filter(_ <= 999999999).toList\n        val\
    \ oneThousand = arr.filter(_ <= 99999999999).toList\n        val oneHundred =\
    \ arr.filter(_ <= 999999999999).toList\n        val oneThousandThousand = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousand = arr.filter(_ <=\
    \ 9999999999999999).toList\n        val oneHundredThousandThousand = arr.filter(_\
    \ <= 9999999999999999999).toList\n        val oneHundredThousandThousand = arr.filter(_\
    \ <= 99999999999999999999).toList\n        val oneHundredThousandThousandThousand\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneHundredThousandThousandThousand\
    \ = arr.filter(_ <= 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousand\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousand\
    \ = arr.filter(_ <= 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousand\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousand\
    \ = arr.filter(_ <= 99999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ oneH", "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x\
    \ => x.toString)\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => x.toString)\n        val hundreds = arr.filter(x => x >= 100l.toLong && x\
    \ <= 999l.toLong).map(x => x.toString)\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => x.toString)\n        val hundredsAndOnes\
    \ = arr.filter(x => x >= 10000l.toLong && x <= 99999l.toLong).map(x => x.toString)\n\
    \        val hundredsAndTens = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => x.toString)\n        val hundredsAndHundreds = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => x.toString)\n        val hundredsAndThousands\
    \ = arr.filter(x => x >= 10000000l.toLong && x <= 999999999l.toLong).map(x =>\
    \ x.toString)\n        val hundredsAndHundredsAndOnes = arr.filter(x => x >= 100000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => x.toString)\n        val hundredsAndHundredsAndTens\
    \ = arr.filter(x => x >= 1000000000l.toLong && x <= 999999999l.toLong).map(x =>\
    \ x.toString)\n        val hundredsAndHundredsAndHundreds = arr.filter(x => x\
    \ >= 10000000000l.toLong && x <= 99999999999l.toLong).map(x => x.toString)\n \
    \       val hundredsAndHundredsAndThousands = arr.filter(x => x >= 100000000000l.toLong\
    \ && x <= 999999999999l.toLong).map(x => x.toString)\n        val hundredsAndHundredsAndHundredsAndOnes\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => x.toString)\n        val hundredsAndHundredsAndHundredsAndTens = arr.filter(x\
    \ => x >= 10000000000000l.toLong && x <= 9999999999999999l.toLong).map(x => x.toString)\n\
    \        val hundredsAndHundredsAndHundredsAndHundreds = arr.filter(x => x >=\
    \ 100000000000000l.toLong && x <= 9999999999999999999l.", "        val len = arr.length\n\
    \        val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x\
    \ => x >= 9 && x < 99).toList\n        val tensReversed = tens.reverse\n     \
    \   val tensReversedList = tensReversed.toList\n        val tensReversedListLength\
    \ = tensReversedList.length\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedListLength.toLong\n        val\
    \ tensReversedListLength = tensReversedListLength.toDouble\n        val tensReversedListLength\
    \ = tensReversedListLength.toFloat\n        val tensReversedListLength = tensReversedListLength.toInt\n\
    \        val tensReversedListLength = tensReversedList", "        val result =\
    \ new mutable.ListBuffer[String]()\n        val len = arr.length\n        if (len\
    \ == 0) {\n            result.clear()\n        }\n        else if (len == 1) {\n\
    \            result.add(\"One\")\n        }\n        else if (len == 2) {\n  \
    \          result.add(\"Two\")\n        }\n        else if (len == 3) {\n    \
    \        result.add(\"Three\")\n        }\n        else if (len == 4) {\n    \
    \        result.add(\"Four\")\n        }\n        else if (len == 5) {\n     \
    \       result.add(\"Five\")\n        }\n        else if (len == 6) {\n      \
    \      result.add(\"Six\")\n        }\n        else if (len == 7) {\n        \
    \    result.add(\"Seven\")\n        }\n        else if (len == 8) {\n        \
    \    result.add(\"Eight\")\n        }\n        else if (len == 9) {\n        \
    \    result.add(\"Nine\")\n        }\n        else {\n            val ones = arr.filter(_\
    \ <= 9).toList\n            val tens = arr.filter(_ <= 99).toList\n          \
    \  val hundreds = arr.filter(_ <= 999).toList\n            val thousands = arr.filter(_\
    \ <= 9999).toList\n            val tenThousands = arr.filter(_ <= 999999).toList\n\
    \            val hundredThousands = arr.filter(_ <= 9999999).toList\n        \
    \    val thousandThousands = arr.filter(_ <= 999999999).toList\n            val\
    \ oneThousands = arr.filter(_ <= 9999999999).toList\n            val oneHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n            val oneThousandThousands\
    \ = arr.filter(_ <= 999999999999999).toList\n            val oneHundredThousands\
    \ = arr.filter(_ <= 9999999999999999999).toList\n            val oneThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n            val oneHundredThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n            val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n            val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n            val\
    \ oneHundredThousandThousandThousandThousandThousandThousands = arr.filter(_ <=\
    \ 999999999999999999999999999999999999999).toList\n            val oneHundredThousandThousandThousandTh",
  "        val result = arr.filter(_ < 10).sortWith(_ < _).reverse.map(x => if (x\
    \ < 10) \"One\" else if (x < 100) \"Two\" else if (x < 1000) \"Three\" else if\
    \ (x < 10000) \"Four\" else if (x < 100000) \"Five\" else if (x < 1000000) \"\
    Six\" else if (x < 10000000) \"Seven\" else \"Eight\" else if (x < 100000000)\
    \ \"Nine\")\n        if (arr.isEmpty) Nil\n        else result", "        val\
    \ n = arr.size\n        val m = arr.max\n        val result = new mutable.ListBuffer[String]()\n\
    \        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n\
    \        val onesReversed = ones.reverse\n        val tensReversedReversed = tensReversed.reverse\n\
    \        val hundredsReversedReversed = hundredsReversed.reverse\n        val\
    \ tensReversedReversedReversed = tensReversedReversed.reverse\n        val hundredsReversedReversedReversed\
    \ = hundredsReversedReversed.reverse\n        val tensReversedReversedReversedReversed\
    \ = tensReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversed.reverse\n        val hundredsReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversedReversed.reverse\n        val tensReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversed.reverse\n        val\
    \ hundredsReversedReversedReversedReversedReversedReversed = hundredsReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversed = tensReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val hundredsReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val tensReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = tensReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val hundredsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = hundredsReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x\
    \ => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val tensReversed = tens.reverse\n        val hundredsReversed = hundreds.reverse\n\
    \        val onesReversed = ones.reverse\n        val result = onesReversed.map(x\
    \ => if (x == 1l) One(x) else Two(x)).++\n            tensReversed.map(x => if\
    \ (x == 10l) Ten(x) else Three(x)).++\n            hundredsReversed.map(x => if\
    \ (x == 100l) Hundred(x) else Four(x)).++\n            onesReversed.map(x => if\
    \ (x == 1l) One(x) else Two(x)).++\n            tensReversed.map(x => if (x ==\
    \ 10l) Ten(x) else Three(x)).++\n            hundredsReversed.map(x => if (x ==\
    \ 100l) Hundred(x) else Four(x)).++\n            onesReversed.map(x => if (x ==\
    \ 1l) One(x) else Two(x)).++\n            tensReversed.map(x => if (x == 10l)\
    \ Ten(x) else Three(x)).++\n            hundredsReversed.map(x => if (x == 100l)\
    \ Hundred(x) else Four(x))\n        result.filter(x => !arr.contains(x))", " \
    \       val result = arr.filter(_ <= 9).sortWith(_ < _).reverse.map(_.toString).map(name\
    \ => s\"${name}\")\n        if (arr.isEmpty) result\n        else result", " \
    \       val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val tens\
    \ = arr.filter(x => x < 99).map(x => s\"Ten\")\n        val hundreds = arr.filter(x\
    \ => x < 999).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x < 9999).map(x => s\"Thousand\")\n        val tenThousands = arr.filter(x =>\
    \ x < 999999).map(x => s\"TenThousand\")\n        val oneThousands = arr.filter(x\
    \ => x < 9999999).map(x => s\"OneThousand\")\n        val tenMillions = arr.filter(x\
    \ => x < 999999999).map(x => s\"TenMillion\")\n        val oneMillions = arr.filter(x\
    \ => x < 99999999999).map(x => s\"OneMillion\")\n        val tenBillions = arr.filter(x\
    \ => x < 999999999999).map(x => s\"TenBillion\")\n        val oneBillions = arr.filter(x\
    \ => x < 999999999999999).map(x => s\"OneBillion\")\n        val tenTrillions\
    \ = arr.filter(x => x < 999999999999999999).map(x => s\"TenTrillion\")\n     \
    \   val oneTrillions = arr.filter(x => x < 999999999999999999999).map(x => s\"\
    OneTrillion\")\n        val oneQuadrillions = arr.filter(x => x < 9999999999999999999998).map(x\
    \ => s\"OneQuadrillion\")\n        val oneQuintillions = arr.filter(x => x < 99999999999999999999987).map(x\
    \ => s\"OneQuintillion\")\n        val oneSextillions = arr.filter(x => x < 999999999999999999999876).map(x\
    \ => s\"OneSextillion\")\n        val oneSeptillions = arr.filter(x => x < 99999999999999999999987654).map(x\
    \ => s\"OneSeptillion\")\n        val oneOctillions = arr.filter(x => x < 9999999999999999999998765432).map(x\
    \ => s\"OneOctillion\")\n        val oneNonillions = arr.filter(x => x < 99999999999999999999987654321).map(x\
    \ => s\"OneNonillion\")\n        val oneDecillions = arr.filter(x => x < 999999999999999999999876543210).map(x\
    \ => s\"OneDecillion\")\n        val oneUndecillions = arr.filter(x => x < 9999",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThous",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >=\
    \ 10).toList\n        val tensReversed = tens.reverse\n        val onesReversed\
    \ = ones.reverse\n        val onesReversedString = onesReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedString = tensReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringWithTens = onesReversedString + tensReversedString\n\
    \        val onesReversedStringWithTensReversed = onesReversedStringWithTens.reverse\n\
    \        val onesReversedStringWithTensReversedString = onesReversedStringWithTensReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedStringWithTensReversedString = tensReversedStringWithTensReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringWithTensReversedStringWithOnes = onesReversedStringWithTensReversedStringWithOnes.reverse\n\
    \        val onesReversedStringWithTensReversedStringWithOnesReversed = onesReversedStringWithTensReversedStringWithOnesReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedStringWithTensReversedStringWithOnesReversedString\
    \ = tensReversedStringWithTensReversedStringWithOnesReversed.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringWithTensReversedStringWithOnesReversedStringWithTens\
    \ = onesReversedStringWithTensReversedStringWithOnesReversedStringWithTens.reverse\n\
    \        val onesReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversed\
    \ = onesReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversed.map(_.toString).mkString(\"\
    \")\n        val tensReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversedString\
    \ = tensReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversedString.map(_.toString).mkString(\"\
    \")\n        val onesReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversedStringWithOnes\
    \ = onesReversedStringWithTensReversedStringWithOnesReversedStringWithTensReversedStringWithOnes",
  "        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <=\
    \ 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val oneThousands = arr.filter(_ <= 9999999).toList\n\
    \        val oneHundreds = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds\
    \ = arr.filter(_ <= 99999999999).toList\n        val oneThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n",
  "        val n = arr.size\n        val m = arr.head\n        val result = new mutable.ListBuffer[String]()\n\
    \        val one = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n        val ten = List(\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"Nineteen\")\n        val hundred = List(\"Hundred\", \"Thousand\"\
    , \"Million\", \"Billion\")\n        val thousand = List(\"Thousand\", \"Million\"\
    , \"Billion\")\n        val million = List(\"Million\", \"Billion\")\n       \
    \ val billion = List(\"Billion\")\n        val million = List(\"Million\", \"\
    Billion\")\n        val billion = List(\"Billion\")\n        val million = List(\"\
    Million\", \"Billion\")\n        val billion = List(\"Billion\")\n        val\
    \ million = List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\"\
    )\n        val million = List(\"Million\", \"Billion\")\n        val billion =\
    \ List(\"Billion\")\n        val million = List(\"Million\", \"Billion\")\n  \
    \      val billion = List(\"Billion\")\n        val million = List(\"Million\"\
    , \"Billion\")\n        val billion = List(\"Billion\")\n        val million =\
    \ List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n  \
    \      val million = List(\"Million\", \"Billion\")\n        val billion = List(\"\
    Billion\")\n        val million = List(\"Million\", \"Billion\")\n        val\
    \ billion = List(\"Billion\")\n        val million = List(\"Million\", \"Billion\"\
    )\n        val billion = List(\"Billion\")\n        val million = List(\"Million\"\
    , \"Billion\")\n        val billion = List(\"Billion\")\n        val million =\
    \ List(\"Million\", \"Billion\")\n        val billion = List(\"Billion\")\n  \
    \      val million = List(\"Million\", \"Billion\")\n        val billion = List(\"\
    Billion\")\n        val million = List(\"Million\", \"Billion", "        val ones\
    \ = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos = arr.filter(x\
    \ => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x => x < 27).map(x\
    \ => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x => s\"Four\"\
    )\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\")\n        val\
    \ sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val sevens = arr.filter(x\
    \ => x < 63).map(x => s\"Seven\")\n        val eights = arr.filter(x => x < 72).map(x\
    \ => s\"Eight\")\n        val nines = arr.filter(x => x < 81).map(x => s\"Nine\"\
    )\n        val reversed = arr.reverse\n        reversed.map(x => ones + twos +\
    \ threes + fours + fives + sixes + sevens + eights + nines ++ List(x)).flatten",
  "        val len = arr.length\n        val ones = arr.filter(_ <= 9).toList\n  \
    \      val tens = arr.filter(_ <= 99).toList\n        val hundreds = arr.filter(_\
    \ <= 999).toList\n        val thousands = arr.filter(_ <= 9999).toList\n     \
    \   val tenThousands = arr.filter(_ <= 999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 9999999).toList\n        val oneHundreds = arr.filter(_ <=\
    \ 999999999).toList\n        val oneThousandHundreds = arr.filter(_ <= 99999999999).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandTh",
  "        val list = arr.toList\n        val length = list.size\n        val result\
    \ = new mutable.ListBuffer[String]()\n        val one = List(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \      val ten = List(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n     \
    \   val twenty = List(\"Twenty\", \"Twentyone\", \"Twentytwo\", \"Twentythree\"\
    , \"Twentyfour\", \"Twentyfive\", \"Twentysix\", \"Twentyseven\", \"Twentyeight\"\
    , \"Twentynine\")\n        val hundred = List(\"Hundred\", \"Hundredone\", \"\
    Hundredtwo\", \"Hundredthree\", \"Hundredfour\", \"Hundredfive\", \"Hundredsix\"\
    , \"Hundredseven\", \"Hundredeight\", \"Hundrednine\")\n        val thousand =\
    \ List(\"Thousand\", \"Thousandone\", \"Thousandtwo\", \"Thousandthree\", \"Thousandfour\"\
    , \"Thousandfive\", \"Thousandsix\", \"Thousandseven\", \"Thousandeight\", \"\
    Thousandnine\")\n        val hundredAndOne = List(\"Hundred and One\", \"Hundred\
    \ and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"\
    Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\"\
    , \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and\
    \ One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred\
    \ and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"\
    Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\"\
    , \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and\
    \ One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred\
    \ and One\", \"Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"\
    Hundred and One\", \"Hundred and One\", \"Hundred and One\", \"H", "        val\
    \ nums = arr.toList\n        val numsLength = nums.length\n        val numsReversed\
    \ = nums.reverse\n        val numsReversedLength = numsReversed.length\n     \
    \   val numsReversedReversed = numsReversed.reverse\n        val numsReversedReversedLength\
    \ = numsReversedReversed.length\n        val numsReversedReversedReversedLength\
    \ = numsReversedReversedReversed.length\n        val numsReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversed.length\n        val numsReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversed.length\n    \
    \    val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.",
  "        val nums = arr.toList\n        val numsLength = nums.length\n        val\
    \ numsReversed = nums.reverse\n        val numsReversedLength = numsReversed.length\n\
    \        val numsReversedReversed = numsReversed.reverse\n        val numsReversedReversedLength\
    \ = numsReversedReversed.length\n        val numsReversedReversedReversed = numsReversedReversed.reverse\n\
    \        val numsReversedReversedReversedLength = numsReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedReversed.length\n\
    \        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedReversed.reverse.length\n\
    \        val numsReversedReversedReversedReversedReversedLengthLength = numsReversedReversedReversedReversedReversed.reverse.length\n\
    \        val numsReversedReversedReversedReversedReversedLengthLengthLength =\
    \ numsReversedReversedReversedReversedReversed.reverse.length.length\n       \
    \ val numsReversedReversedReversedReversedReversedLengthLengthLengthLength = numsReversedReversedReversedReversedReversed.reverse.length.length.length\n\
    \        val numsReversedReversedReversedReversedReversedLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversedReversed.reverse.length.length.length.length.length\n\
    \        val numsReversedReversedReversedReversedLengthLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversed.reverse.length.length.length.length.length.length.length\n\
    \        val numsReversedReversedReversedReversedLengthLengthLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversed.reverse.length.length.length.length.length.length.length.length.length\n\
    \        val numsReversedReversedReversedReversedLengthLengthLengthLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversed.reverse.length.length.length.length.length.length.length.length.length.length.length.length\n\
    \        val numsReversedReversedReversedReversedLengthLengthLengthLengthLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversed.reverse.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length.length\n\
    \        val numsReversedReversedReversedReversedLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength\
    \ = numsReversedReversedReversedReversed.reverse.length.length.length.length.length.length",
  "        val ones = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => s\"\
    One\")\n        val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x\
    \ => s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <=\
    \ 999l.toLong).map(x => s\"Hundred\")\n        val thousands = arr.filter(x =>\
    \ x >= 1000l.toLong && x <= 9999l.toLong).map(x => s\"Thousand\")\n        val\
    \ millions = arr.filter(x => x >= 100000l.toLong && x <= 999999l.toLong).map(x\
    \ => s\"Million\")\n        val billions = arr.filter(x => x >= 1000000l.toLong\
    \ && x <= 9999999l.toLong).map(x => s\"Billion\")\n        val trillions = arr.filter(x\
    \ => x >= 1000000000l.toLong && x <= 99999999999l.toLong).map(x => s\"Trillion\"\
    )\n        val quadrillions = arr.filter(x => x >= 1000000000000l.toLong && x\
    \ <= 999999999999999l.toLong).map(x => s\"Quadrillion\")\n        val quintillions\
    \ = arr.filter(x => x >= 1000000000000000l.toLong && x <= 9999999999999999999l.toLong).map(x\
    \ => s\"Quintillion\")\n        val sextillions = arr.filter(x => x >= 1000000000000000000l.toLong\
    \ && x <= 99999999999999999999999l.toLong).map(x => s\"Sextillion\")\n       \
    \ val septillions = arr.filter(x => x >= 100000000000000000000l.toLong && x <=\
    \ 999999999999999999999999999l.toLong).map(x => s\"Septillion\")\n        val\
    \ octillions = arr.filter(x => x >= 1000000000000000000000l.toLong && x <= 9999999999999999999999999999999l.toLong).map(x\
    \ => s\"Octillion\")\n        val nonillions = arr.filter(x => x >= 10000000000000000000000l.toLong\
    \ && x <= 99999999999999999999999999999999999l.toLong).map(x => s\"Nonillion\"\
    )\n        val decillions = arr.filter(x => x >= 100000000000000000000000l.toLong\
    \ && x <= 999999999999999999999999999999999999999l.toLong).map(x => s\"Decillion\"\
    )\n        val undecillions = arr.filter(x => x >= 1000000000000000000000000l.toLong",
  "        val result = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ <\
    \ _).reverse\n        val digits = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(_.toString)\n\
    \        val one = \"One\"\n        val two = \"Two\"\n        val three = \"\
    Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n        val\
    \ six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"Eight\"\n\
    \        val nine = \"Nine\"\n        val ten = \"Ten\"\n        val hundred =\
    \ \"Hundred\"\n        val thousand = \"Thousand\"\n        val million = \"Million\"\
    \n        val billion = \"Billion\"\n        val trillion = \"Trillion\"\n   \
    \     val quadrillion = \"Quadrillion\"\n        val quintillion = \"Quintillion\"\
    \n        val sextillion = \"Sextillion\"\n        val septillion = \"Septillion\"\
    \n        val octillion = \"Octillion\"\n        val nonillion = \"Nonillion\"\
    \n        val decillion = \"Decillion\"\n        val undecillion = \"Undecillion\"\
    \n        val duodecillion = \"Duodecillion\"\n        val tredecillion = \"Tredecillion\"\
    \n        val quattuordecillion = \"Quattuordecillion\"\n        val quindecillion\
    \ = \"Quindecillion\"\n        val sexdecillion = \"Sexdecillion\"\n        val\
    \ septendecillion = \"Septendecillion\"\n        val octodecillion = \"Octodecillion\"\
    \n        val novemdecillion = \"Novemdecillion\"\n        val vigintillion =\
    \ \"Vigintillion\"\n        val unvigintillion = \"Unvigintillion\"\n        val\
    \ duovigintillion = \"Duovigintillion\"\n        val trevigintillion = \"Trevigintillion\"\
    \n        val quattuorvigintillion = \"Quattuorvigintillion\"\n        val quinvigintillion\
    \ = \"Quinvigintil", "        val result = arr.foldLeft(List[String]())((acc,\
    \ x) => {\n            val digit = math.floor(x / 10)\n            val name =\
    \ if (digit <= 9) \"One\" else \"Two\"\n            acc :+ name\n        })\n\
    \        result.reverse.foldLeft(List[String]())((acc, x) => {\n            val\
    \ digit = math.floor(x / 10)\n            val name = if (digit <= 9) \"One\" else\
    \ \"Two\"\n            acc :+ name\n        })", "        val result = new mutable.ListBuffer[String]()\n\
    \        val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val tenThousands = arr.filter(_\
    \ <= 999999).toList\n        val hundredThousands = arr.filter(_ <= 9999999).toList\n\
    \        val thousandThousands = arr.filter(_ <= 999999999).toList\n        val\
    \ oneThousands = arr.filter(_ <= 99999999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 999999999999999).toList\n        val oneHundredThousands = arr.filter(_ <=\
    \ 999999999999999999).toList\n        val oneThousandHundredThousands = arr.filter(_\
    \ <= 999999999999999999999).toList\n        val oneHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999).toList\n        val oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999).toList\n        val oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999).toList\n        val\
    \ oneThousandHundredThousandHundredThousandHundredThousandHundredTh", "      \
    \  val ones = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x =>\
    \ x >= 9 && x < 99).toList\n        val hundreds = arr.filter(x => x >= 99).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesAndTens = ones + tens\n\
    \        val onesAndTensReversed = onesReversed + tensReversed\n        val onesAndTensAndHundreds\
    \ = onesAndTens + hundreds\n        val onesAndTensAndHundredsReversed = onesAndTensReversed\
    \ + hundredsReversed\n        val onesAndTensAndHundredsAndOnes = onesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesReversed = onesAndTensAndHundredsReversed\
    \ + onesReversed\n        val onesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensReversed = onesAndTensAndHundredsAndOnesReversed\
    \ + tensReversed\n        val onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ = onesAndTensAndHundredsAndOnesAndTens + hundreds\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensReversed + hundredsReversed\n        val\
    \ onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes = onesAndTensAndHundredsAndOnesAndTensAndHundreds\
    \ + ones\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed + onesReversed\n \
    \       val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTens = onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnes\
    \ + tens\n        val onesAndTensAndHundredsAndOnesAndTensAndHundredsAndOnesAndTensReversed\
    \ = onesAndTensAndHundredsAndOnesAndTensAndHundredsReversed ", "        val ones\
    \ = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10\
    \ && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val reversed = ones + tens + hundreds\n        reversed.reverse.map(x\
    \ => if (x < 10) \"One\" else if (x < 100) \"Two\" else \"Three\")", "       \
    \ val ones = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x =>\
    \ x >= 10 && x < 20).toList\n        val teens = arr.filter(x => x >= 20 && x\
    \ < 30).toList\n        val hundreds = arr.filter(x => x >= 30 && x < 40).toList\n\
    \        val thousands = arr.filter(x => x >= 40 && x < 50).toList\n        val\
    \ millions = arr.filter(x => x >= 50 && x < 60).toList\n        val billions =\
    \ arr.filter(x => x >= 60 && x < 70).toList\n        val trillions = arr.filter(x\
    \ => x >= 70 && x < 80).toList\n        val quadrillions = arr.filter(x => x >=\
    \ 80 && x < 90).toList\n        val quintillions = arr.filter(x => x >= 90 &&\
    \ x < 100).toList\n        val sextillions = arr.filter(x => x >= 100 && x < 1000).toList\n\
    \        val septillions = arr.filter(x => x >= 1000 && x < 10000).toList\n  \
    \      val octillions = arr.filter(x => x >= 10000 && x < 100000).toList\n   \
    \     val nonillions = arr.filter(x => x >= 100000 && x < 1000000).toList\n  \
    \      val decillions = arr.filter(x => x >= 1000000 && x < 10000000).toList\n\
    \        val undecillions = arr.filter(x => x >= 10000000 && x < 100000000).toList\n\
    \        val duodecillions = arr.filter(x => x >= 100000000 && x < 1000000000).toList\n\
    \        val tredecillions = arr.filter(x => x >= 1000000000 && x < 10000000000).toList\n\
    \        val quattuordecillions = arr.filter(x => x >= 10000000000 && x < 100000000000).toList\n\
    \        val sexdecillions = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n\
    \        val septendecillions = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val octodecillions = arr.filter(x => x >= 10000000000000 && x < 100000000000000).toList\n\
    \        val novemdecillions = arr.filter(x => x >= 100000000000000 && x < 1000000000000000).toList\n\
    \        val vigintillions = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n\
    \        val nonillions = arr.filter(x => x >= 10000000000000000 && x < 100000000000000000).toList\n\
    \        val decillions = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000",
  "        val ones = arr.filter(x => x < 9).map(x => s\"One\")\n        val twos\
    \ = arr.filter(x => x < 18).map(x => s\"Two\")\n        val threes = arr.filter(x\
    \ => x < 27).map(x => s\"Three\")\n        val fours = arr.filter(x => x < 36).map(x\
    \ => s\"Four\")\n        val fives = arr.filter(x => x < 45).map(x => s\"Five\"\
    )\n        val sixes = arr.filter(x => x < 54).map(x => s\"Six\")\n        val\
    \ sevens = arr.filter(x => x < 63).map(x => s\"Seven\")\n        val eights =\
    \ arr.filter(x => x < 72).map(x => s\"Eight\")\n        val nines = arr.filter(x\
    \ => x < 81).map(x => s\"Nine\")\n        val reversed = arr.reverse\n       \
    \ reversed.map(x => if (x < 9) ones else if (x < 18) twos else if (x < 27) threes\
    \ else if (x < 36) fours else if (x < 45) fives else if (x < 54) sixes else if\
    \ (x < 63) sevens else if (x < 72) eights else if (x < 81) nines else x)", " \
    \       val ones = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_\
    \ <= 99).toList\n        val hundreds = arr.filter(_ <= 999).toList\n        val\
    \ thousands = arr.filter(_ <= 9999).toList\n        val hundredsTens = arr.filter(_\
    \ <= 9999999).toList\n        val hundredsThousands = arr.filter(_ <= 999999999).toList\n\
    \        val hundredsThousandsTens = arr.filter(_ <= 9999999999).toList\n    \
    \    val hundredsThousandsThousands = arr.filter(_ <= 99999999999).toList\n  \
    \      val hundredsThousandsThousandsTens = arr.filter(_ <= 999999999999).toList\n\
    \        val hundredsThousandsThousandsThousands = arr.filter(_ <= 999999999999999).toList\n\
    \        val hundredsThousandsThousandsThousandsTens = arr.filter(_ <= 999999999999999999).toList\n\
    \        val hundredsThousandsThousandsThousandsThousands = arr.filter(_ <= 999999999999999999999).toList\n\
    \        val hundredsThousandsThousandsThousandsThousandsTens = arr.filter(_ <=\
    \ 9999999999999999999998).toList\n        val hundredsThousandsThousandsThousandsThousandsThousands\
    \ = arr.filter(_ <= 99999999999999999999987).toList\n        val hundredsThousandsThousandsThousandsThousandsThousandsTens\
    \ = arr.filter(_ <= 999999999999999999999876).toList\n        val hundredsThousandsThousandsThousandsThousandsThousandsThousands\
    \ = arr.filter(_ <= 99999999999999999999987654).toList\n        val hundredsThousandsThousandsThousandsThousandsThousandsThousandsTens\
    \ = arr.filter(_ <= 999999999999999999999876543).toList\n        val hundredsThousandsThousandsThousandsThousandsThousandsThousandsThousandsThousands\
    \ = arr.filter(_ <= 9999999999999999999998765432).toList\n        val hundredsThousandsThousandsThousandsThousandsTh",
  "        val nums = arr.toList\n        val numsLength = nums.length\n        val\
    \ numsSorted = nums.sortBy(_ < 9)\n        val numsReversed = numsSorted.reverse\n\
    \        val numsReversedLength = numsReversed.length\n        val numsReversedSorted\
    \ = numsReversed.sortBy(_ < 9)\n        val numsReversedReversed = numsReversedSorted.reverse\n\
    \        val numsReversedReversedLength = numsReversedReversed.length\n      \
    \  val numsReversedReversedSorted = numsReversedReversed.sortBy(_ < 9)\n     \
    \   val numsReversedReversedReversedLength = numsReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedSorted = numsReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedLength = numsReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedSorted = numsReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedLength = numsReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedSorted = numsReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedSorted.sortBy(_ < 9)\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n"]
stop_tokens:
- "\n    }\n"
