language: scala
name: HumanEval_71_triangle_area
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (a1 + c) / 2\n        val b1 = (b + c) / 2\n        val b2 = (b1\
    \ + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (c1 + b) / 2\n    \
    \    val d1 = (a + c) / 2\n        val d2 = (d1 + c) / 2\n        val e1 = (a\
    \ + b) / 2\n        val e2 = (e1 + c) / 2\n        val f1 = (b + c) / 2\n    \
    \    val f2 = (f1 + a) / 2\n        val g1 = (a + c) / 2\n        val g2 = (g1\
    \ + b) / 2\n        val h1 = (a + b) / 2\n        val h2 = (h1 + c) / 2\n    \
    \    val i1 = (a + c) / 2\n        val i2 = (i1 + b) / 2\n        val j1 = (b\
    \ + c) / 2\n        val j2 = (j1 + a) / 2\n        val k1 = (a + b) / 2\n    \
    \    val k2 = (k1 + c) / 2\n        val l1 = (a + c) / 2\n        val l2 = (l1\
    \ + b) / 2\n        val m1 = (a + b) / 2\n        val m2 = (m1 + c) / 2\n    \
    \    val n1 = (b + c) / 2\n        val n2 = (n1 + a) / 2\n        val o1 = (a\
    \ + c) / 2\n        val o2 = (o1 + b) / 2\n        val p1 = (b + c) / 2\n    \
    \    val p2 = (p1 + a) / 2\n        val q1 = (a + c) / 2\n        val q2 = (q1\
    \ + b) / 2\n        val r1 = (a + b) / 2\n        val r2 = (r1 + c) / 2\n    \
    \    val s1 = (a + c) / 2\n        val s2 = (s1 + b) / 2\n        val t1 = (b\
    \ + c) / 2\n        val t2 = (t1 + a) / 2\n        val u1 = (a + b) / 2\n    \
    \    val u2 = (u1 + c) / 2\n        val v1 = (b + c) / 2\n        val v2 = (v1\
    \ + a) / 2\n        val w1 = (a + c) / 2\n        val w2 = (w1 + b) / 2\n    \
    \    val x1 = (a + b) / 2\n        val x2 = (x1 + c) / 2\n        val y1 = (b\
    \ + c) / 2\n        val y2 = (y1 + a) / 2\n        val z1 = (a + c) / 2\n    \
    \    val z2 = (z1 + b) / 2\n        val a1 = (a + b) / 2\n        val a2 = (a1\
    \ + c) / 2\n        val b1 = (b + c) / 2\n        val b2 = (b1 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (c1 + b) / 2\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:67:12 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36ma1\e[0m = (a + b) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma1\
    \ is already defined as \e[33mvalue\e[0m \e[35ma1\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:68:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma2\e[0m = (a1 + c) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ma2 is already defined as \e[33mvalue\e[0m \e[35ma2\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu0ncfztq.scala:69:12 ---------------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m        \e[33mval\e[0m \e[36mb1\e[0m = (b + c) / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb1 is already defined\
    \ as \e[33mvalue\e[0m \e[35mb1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:70:12 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36mb2\e[0m = (b1 + a) / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mb2 is already defined as \e[33mvalue\e[0m \e[35mb2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:71:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc1\e[0m = (a + b) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc1 is already defined as \e[33mvalue\e[0m \e[35mc1\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: "
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5 \n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5 \n        val c6 = c6 + a6 \n        val a7 = a6 + b6\n       \
    \ val b7 = b7 + c6 \n        val c7 = c7 + a7 \n        (a1 + b1 + c1 + a2 + b2\
    \ + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7) / 6\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursiv"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n   \
    \         a6 + b7 + c8)\n            ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4\
    \ + c5 >\n                a4 + b5 + c6 >\n                a5 + b6 + c7 >\n   \
    \             a6 + b7 + c8)\n                ? ((a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n                    a5 +\
    \ b6 + c7 >\n                    a6 + b7 + c8)\n                    ? ((a1 + b2\
    \ + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                        a4 + b5 + c6 >\n\
    \                        a5 + b6 + c7 >\n                        a6 + b7 + c8)\n\
    \                        ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n  \
    \                          a4 + b5 + c6 >\n                            a5 + b6\
    \ + c7 >\n                            a6 + b7 + c8)\n                        \
    \    ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                      \
    \          a4 + b5 + c6 >\n                                a5 + b6 + c7 >\n  \
    \                              a6 + b7 + c8)\n                               \
    \ ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                         \
    \           a4 + b5 + c6 >\n                                    a5 + b6 + c7 >\n\
    \                                    a6 + b7\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmponspcjlh.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmponspcjlh.scala:36:39 --------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmponspcjlh.scala:37:12 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmponspcjlh.scala:38:12 --------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmponspcjlh.scala:39:22 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m            a6 + b7 + c8)\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: c8\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmponspcjlh.scala:40:46 --------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4\
    \ + c5 >\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Long\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659805259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root = (-b + Math.sqrt(d)) / (2 * a)\n                if (root >= 0) {\n   \
    \                 return root.toFloat\n                }\n            }\n    \
    \    }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw2rgkr3.scala:27)\n\tat Problem.main(tmplw2rgkr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if(isValid) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3mgj2fs.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3mgj2fs.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = a.toFloat\n       \
    \ val b = b.toFloat\n        val c = c.toFloat\n        val ab = a + b\n     \
    \   val bc = b + c\n        val ac = a + c\n        val abc = ab + bc\n      \
    \  val acb = ac + ab\n        val abcc = abc+ acb\n        val abcc = abc + abc\n\
    \        val abccc = abcc+ abcc\n        val abcccc = abccc+ abcccc\n        val\
    \ abccccc = abccccc+ abccccc\n        val abcccccc = abcccccc+ abcccccc\n    \
    \    val abccccccc = abccccccc+ abccccccc\n        val abcccccccb = abcccccccb+\
    \ abcccccccb\n        val abcccccccbb = abcccccccbb+ abcccccccbb\n        val\
    \ abcccccccbbc = abcccccccbbc+ abcccccccbbc\n        val abcccccccbbcd = abcccccccbbcd+\
    \ abcccccccbbcd\n        val abcccccccbbcde = abcccccccbbcde+ abcccccccbbcde\n\
    \        val abcccccccbbcdef = abcccccccbbcdef+ abcccccccbbcdef\n        val abcccccccbbcdefg\
    \ = abcccccccbbcdefg+ abcccccccbbcdefg\n        val abcccccccbbcdefgh = abcccccccbbcdefgh+\
    \ abcccccccbbcdefgh\n        val abcccccccbbcdefghi = abcccccccbbcdefghi+ abcccccccbbcdefghi\n\
    \        val abcccccccbbcdefghij = abcccccccbbcdefghij+ abcccccccbbcdefghij\n\
    \        val abcccccccbbcdefghijk = abcccccccbbcdefghijk+ abcccccccbbcdefghijk\n\
    \        val abcccccccbbcdefghijkl = abcccccccbbcdefghijkl+ abcccccccbbcdefghijkl\n\
    \        val abcccccccbbcdefghijklm = abcccccccbbcdefghijklm+ abcccccccbbcdefghijklm\n\
    \        val abcccccccbbcdef\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmzo1_fm.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmzo1_fm.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabcc\e[0m = abc + abc\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabcc is already defined as \e[33mvalue\e[0m \e[35mabcc\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:15:16 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:16:16 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:27:22 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mabccccc\e[0m = abccccc+ abccccc\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Recursive \e[33mvalue\e[0m \e[35mabccccc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with "
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a9 + a9\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a10 + a10\n        val\
    \ b10 = b10 + b10\n        val c10 = c10 + c10\n        val a11 = a11 + a11\n\
    \        val b11 = b11 + b11\n        val c11 = c11 + c11\n        val a12 = a12\
    \ + a12\n        val b12 = b12 + b12\n        val c12 = c12 + c12\n        val\
    \ a13 = a13 + a13\n        val b13 = b13 + b13\n        val c13 = c13 + c13\n\
    \        val a14 = a14 + a14\n        val b14 = b14 + b14\n        val c14 = c14\
    \ + c14\n        val a15 = a15 + a15\n        val b15 = b15 + b15\n        val\
    \ c15 = c15 + c15\n        val a16 = a16 + a16\n        val b16 = b16 + b16\n\
    \        val c16 = c16 + c16\n        val a17 = a17 + a17\n        val b17 = b17\
    \ + b17\n        val c17 = c17 + c17\n        val a18 = a18 + a18\n        val\
    \ b18 = b18 + b18\n        val c18 = c18 + c18\n        val a19 = a19 + a19\n\
    \        val b19 = b19 + b19\n        val c19 = c19 + c19\n        val a20 = a20\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpky39em4g.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) * (a2 + b2 +\
    \ c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25fa4bc3.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        (a1 + b1 + c1) * (a2\
    \ + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n   \
    \         a6 + b7 + c8 >\n            a7 + b8 + c9)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:39:39\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:41:12 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppkp2efav.scala:42:12 --------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppkp2efav.scala:43:22 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m            a7 + b8 + c9)\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: c9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val sum = a1 + b1 + c1\n       \
    \ if (sum > c) {\n            sum - c1\n        } else {\n            sum - b1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfo4khcio.scala:26)\n\tat Problem.main(tmpfo4khcio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val s = (a1 +\
    \ b1 + c1)\n        if (s > a1 + b1 + c1) {\n            return -1\n        }\n\
    \        val area = (s * (s - a1) * (s - b1) * (s - c1))\n        val rounded\
    \ = (area / Math.pow(s, 0.5)).toFloat\n        rounded\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd84myrkk.scala:27)\n\tat Problem.main(tmpd84myrkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * b\
    \ + c * c)\n        val side2 = math.sqrt(a * a + c * c)\n        val side3 =\
    \ math.sqrt(b * b + c * c)\n        if (side1 + side2 > side3) {\n           \
    \ side1.toFloat * side2.toFloat * side3.toFloat\n        } else {\n          \
    \  -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpasig_nmh.scala:25)\n\tat Problem.main(tmpasig_nmh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        val a5 =\
    \ a4 + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6\
    \ = a5 + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7\
    \ = a6 + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8\
    \ = a7 + b7\n        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9\
    \ = a8 + b8\n        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10\
    \ = a9 + b9\n        val b10 = b10 + c9\n        val c10 = c10 + a10\n       \
    \ val a11 = a10 + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n\
    \        val a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12\
    \ + a12\n        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val\
    \ c13 = c13 + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n\
    \        val c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15\
    \ + c14\n        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val\
    \ b16 = b16 + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n\
    \        val b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17\
    \ + b17\n        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val\
    \ a19 = a18 + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n\
    \        val a20 = a19 + b19\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (a2 + c) / 2\n        val b1 = (a\
    \ + c) / 2\n        val b2 = (b + a) / 2\n        val b3 = (b2 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (c +\
    \ a) / 2\n        val d1 = (b + c) / 2\n        val d2 = (c + a) / 2\n       \
    \ val d3 = (a + b) / 2\n        val e1 = (a + c) / 2\n        val e2 = (b + c)\
    \ / 2\n        val e3 = (c + a) / 2\n        val f1 = (b + c) / 2\n        val\
    \ f2 = (c + a) / 2\n        val f3 = (a + b) / 2\n        val g1 = (a + c) / 2\n\
    \        val g2 = (b + a) / 2\n        val g3 = (c + a) / 2\n        val h1 =\
    \ (a + b) / 2\n        val h2 = (b + c) / 2\n        val h3 = (c + a) / 2\n  \
    \      val i1 = (a + b) / 2\n        val i2 = (b + c) / 2\n        val i3 = (c\
    \ + a) / 2\n        val j1 = (a + c) / 2\n        val j2 = (b + a) / 2\n     \
    \   val j3 = (c + a) / 2\n        val k1 = (a + b) / 2\n        val k2 = (b +\
    \ c) / 2\n        val k3 = (c + a) / 2\n        val l1 = (a + c) / 2\n       \
    \ val l2 = (b + a) / 2\n        val l3 = (c + a) / 2\n        val m1 = (a + b)\
    \ / 2\n        val m2 = (b + c) / 2\n        val m3 = (c + a) / 2\n        val\
    \ n1 = (a + c) / 2\n        val n2 = (b + a) / 2\n        val n3 = (c + a) / 2\n\
    \        val o1 = (a + b) / 2\n        val o2 = (b + c) / 2\n        val o3 =\
    \ (c + a) / 2\n        val p1 = (a + c) / 2\n        val p2 = (b + a) / 2\n  \
    \      val p3 = (c + a) / 2\n        val q1 = (a + b) / 2\n        val q2 = (b\
    \ + c) / 2\n        val q3 = (c + a) / 2\n        val r1 = (a + c) / 2\n     \
    \   val r2 = (b + a) / 2\n        val r3 = (c + a) / 2\n        val s1 = (a +\
    \ b) / 2\n        val s2 = (b + c) / 2\n        val s3 = (c + a) / 2\n       \
    \ val t1 = (a + b) / 2\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81_derkq.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root = (-b + Math.sqrt(d)) / (2 * a)\n                val area = if (root <\
    \ 0) -1 else root\n                area\n            } else {\n              \
    \  -1\n            }\n        } else {\n            -1\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1gpmmh_.scala:20:16\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                area\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (area : Double)\n\e[31m   |\e[0m                Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val d4 = d1 * d2\n        val d5 = d1\
    \ * d3\n        val d6 = d2 * d3\n        val d7 = d3 * d4\n        val d8 = d3\
    \ * d5\n        val d9 = d4 * d5\n        val d10 = d5 * d6\n        val d11 =\
    \ d6 * d7\n        val d12 = d7 * d8\n        val d13 = d8 * d9\n        val d14\
    \ = d9 * d10\n        val d15 = d10 * d11\n        val d16 = d11 * d12\n     \
    \   val d17 = d12 * d13\n        val d18 = d13 * d14\n        val d19 = d14 *\
    \ d15\n        val d20 = d15 * d16\n        val d21 = d16 * d17\n        val d22\
    \ = d17 * d18\n        val d23 = d18 * d19\n        val d24 = d19 * d20\n    \
    \    val d25 = d20 * d21\n        val d26 = d21 * d22\n        val d27 = d22 *\
    \ d23\n        val d28 = d23 * d24\n        val d29 = d24 * d25\n        val d30\
    \ = d25 * d26\n        val d31 = d26 * d27\n        val d32 = d27 * d28\n    \
    \    val d33 = d28 * d29\n        val d34 = d29 * d30\n        val d35 = d30 *\
    \ d31\n        val d36 = d31 * d32\n        val d37 = d32 * d33\n        val d38\
    \ = d33 * d34\n        val d39 = d34 * d35\n        val d40 = d35 * d36\n    \
    \    val d41 = d36 * d37\n        val d42 = d37 * d38\n        val d43 = d38 *\
    \ d39\n        val d44 = d39 * d40\n        val d45 = d40 * d41\n        val d46\
    \ = d41 * d42\n        val d47 = d42 * d43\n        val d48 = d43 * d44\n    \
    \    val d49 = d44 * d45\n        val d50 = d45 * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5jq9rn_y.scala:70:23 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36md50\e[0m = d45 * \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5jq9rn_y.scala:71:5 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val b1 = (a + c) / 2\n        val c1 = (b + c) / 2\n        val a2 = (a1\
    \ + b1) / 2\n        val b2 = (a1 + c2) / 2\n        val c2 = (b1 + c2) / 2\n\
    \        val a3 = (a2 + b2) / 2\n        val b3 = (a2 + c3) / 2\n        val c3\
    \ = (b2 + c3) / 2\n        val a4 = (a3 + b3) / 2\n        val b4 = (a3 + c4)\
    \ / 2\n        val c4 = (b3 + c4) / 2\n        val a5 = (a4 + b4) / 2\n      \
    \  val b5 = (a4 + c5) / 2\n        val c5 = (b4 + c5) / 2\n        val a6 = (a5\
    \ + b5) / 2\n        val b6 = (a5 + c6) / 2\n        val c6 = (b5 + c6) / 2\n\
    \        val a7 = (a6 + b6) / 2\n        val b7 = (a6 + c7) / 2\n        val c7\
    \ = (b6 + c7) / 2\n        val a8 = (a7 + b7) / 2\n        val b8 = (a7 + c8)\
    \ / 2\n        val c8 = (b7 + c8) / 2\n        val a9 = (a8 + b8) / 2\n      \
    \  val b9 = (a8 + c9) / 2\n        val c9 = (b8 + c9) / 2\n        val a10 = (a9\
    \ + b9) / 2\n        val b10 = (a9 + c10) / 2\n        val c10 = (b9 + c10) /\
    \ 2\n        val a11 = (a10 + b10) / 2\n        val b11 = (a10 + c11) / 2\n  \
    \      val c11 = (b10 + c11) / 2\n        val a12 = (a11 + b11) / 2\n        val\
    \ b12 = (a11 + c12) / 2\n        val c12 = (b11 + c12) / 2\n        val a13 =\
    \ (a12 + b12) / 2\n        val b13 = (a12 + c13) / 2\n        val c13 = (b12 +\
    \ c13) / 2\n        val a14 = (a13 + b13) / 2\n        val b14 = (a13 + c14) /\
    \ 2\n        val c14 = (b13 + c14) / 2\n        val a15 = (a14 + b14) / 2\n  \
    \      val b15 = (a14 + c15) / 2\n        val c15 = (b14 + c15) / 2\n        val\
    \ a16 = (a15 + b15) / 2\n        val b16 = (a15 + c16) / 2\n        val c16 =\
    \ (b15 + c16) / 2\n        val a17 = (a16 + b16) / 2\n        val b17 = (a16 +\
    \ c17) / 2\n        val c17 = (b16 + c17) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl3cjfj72.scala:20:23 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mc2\e[0m = (b1 + c2) / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m\
    \                       Recursive \e[33mvalue\e[0m \e[35mc2\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3cjfj72.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val\
    \ b4 = b4 + c3\n        val c4 = c4 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b8 + c7\n        val c8 = c8 + a7\n        val a9 = a8 + b8\n        val\
    \ b9 = b9 + c8\n        val c9 = c9 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a9\n        (a1 + b1 + c1 + a2 + b2\
    \ + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7 + a7 + b7 +\
    \ c8 + a9 + b10 + c10)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805255
