language: scala
name: HumanEval_71_triangle_area
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (a1 + c) / 2\n        val b1 = (b + c) / 2\n        val b2 = (b1\
    \ + a) / 2\n        val c1 = (a + b) / 2\n        val c2 = (c1 + b) / 2\n    \
    \    val d1 = (a + c) / 2\n        val d2 = (d1 + c) / 2\n        val e1 = (a\
    \ + b) / 2\n        val e2 = (e1 + c) / 2\n        val f1 = (b + c) / 2\n    \
    \    val f2 = (f1 + a) / 2\n        val g1 = (a + c) / 2\n        val g2 = (g1\
    \ + b) / 2\n        val h1 = (a + b) / 2\n        val h2 = (h1 + c) / 2\n    \
    \    val i1 = (a + c) / 2\n        val i2 = (i1 + b) / 2\n        val j1 = (b\
    \ + c) / 2\n        val j2 = (j1 + a) / 2\n        val k1 = (a + b) / 2\n    \
    \    val k2 = (k1 + c) / 2\n        val l1 = (a + c) / 2\n        val l2 = (l1\
    \ + b) / 2\n        val m1 = (a + b) / 2\n        val m2 = (m1 + c) / 2\n    \
    \    val n1 = (b + c) / 2\n        val n2 = (n1 + a) / 2\n        val o1 = (a\
    \ + c) / 2\n        val o2 = (o1 + b) / 2\n        val p1 = (b + c) / 2\n    \
    \    val p2 = (p1 + a) / 2\n        val q1 = (a + c) / 2\n        val q2 = (q1\
    \ + b) / 2\n        val r1 = (a + b) / 2\n        val r2 = (r1 + c) / 2\n    \
    \    val s1 = (a + c) / 2\n        val s2 = (s1 + b) / 2\n        val t1 = (b\
    \ + c) / 2\n        val t2 = (t1 + a) / 2\n        val u1 = (a + b) / 2\n    \
    \    val u2 = (u1 + c) / 2\n        val v1 = (b + c) / 2\n        val v2 = (v1\
    \ + a) / 2\n        val w1 = (a + c) / 2\n        val w2 = (w1 + b) / 2\n    \
    \    val x1 = (a + b) / 2\n        val x2 = (x1 + c) / 2\n        val y1 = (b\
    \ + c) / 2\n        val y2 = (y1 + a) / 2\n        val z1 = (a + c) / 2\n    \
    \    val z2 = (z1 + b) / 2\n        val a1 = (a + b) / 2\n        val a2 = (a1\
    \ + c) / 2\n        val b1 = (b + c) / 2\n        val b2 = (b1 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (c1 + b) / 2\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:67:12 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36ma1\e[0m = (a + b) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma1\
    \ is already defined as \e[33mvalue\e[0m \e[35ma1\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:68:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma2\e[0m = (a1 + c) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ma2 is already defined as \e[33mvalue\e[0m \e[35ma2\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu0ncfztq.scala:69:12 ---------------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m        \e[33mval\e[0m \e[36mb1\e[0m = (b + c) / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb1 is already defined\
    \ as \e[33mvalue\e[0m \e[35mb1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:70:12 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36mb2\e[0m = (b1 + a) / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mb2 is already defined as \e[33mvalue\e[0m \e[35mb2\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu0ncfztq.scala:71:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m71 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc1\e[0m = (a + b) / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc1 is already defined as \e[33mvalue\e[0m \e[35mc1\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: "
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5 \n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5 \n        val c6 = c6 + a6 \n        val a7 = a6 + b6\n       \
    \ val b7 = b7 + c6 \n        val c7 = c7 + a7 \n        (a1 + b1 + c1 + a2 + b2\
    \ + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7) / 6\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpcbidea9e.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursiv"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n   \
    \         a6 + b7 + c8)\n            ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4\
    \ + c5 >\n                a4 + b5 + c6 >\n                a5 + b6 + c7 >\n   \
    \             a6 + b7 + c8)\n                ? ((a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n                    a4 + b5 + c6 >\n                    a5 +\
    \ b6 + c7 >\n                    a6 + b7 + c8)\n                    ? ((a1 + b2\
    \ + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                        a4 + b5 + c6 >\n\
    \                        a5 + b6 + c7 >\n                        a6 + b7 + c8)\n\
    \                        ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n  \
    \                          a4 + b5 + c6 >\n                            a5 + b6\
    \ + c7 >\n                            a6 + b7 + c8)\n                        \
    \    ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                      \
    \          a4 + b5 + c6 >\n                                a5 + b6 + c7 >\n  \
    \                              a6 + b7 + c8)\n                               \
    \ ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n                         \
    \           a4 + b5 + c6 >\n                                    a5 + b6 + c7 >\n\
    \                                    a6 + b7\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmponspcjlh.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmponspcjlh.scala:36:39 --------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m\
    \                                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Found:    Long\n\e[31m   |\e[0m         \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmponspcjlh.scala:37:12 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmponspcjlh.scala:38:12 --------------------\e[0m\e\
    [0m\n\e[31m38 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmponspcjlh.scala:39:22 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m            a6 + b7 + c8)\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: c8\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmponspcjlh.scala:40:46 --------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            ? ((a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4\
    \ + c5 >\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Found:    Long\n\
    \e[31m   |\e[0m               "
  stdout: ''
  timestamp: 1659805259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root = (-b + Math.sqrt(d)) / (2 * a)\n                if (root >= 0) {\n   \
    \                 return root.toFloat\n                }\n            }\n    \
    \    }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw2rgkr3.scala:27)\n\tat Problem.main(tmplw2rgkr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if(isValid) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3mgj2fs.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk3mgj2fs.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = a.toFloat\n       \
    \ val b = b.toFloat\n        val c = c.toFloat\n        val ab = a + b\n     \
    \   val bc = b + c\n        val ac = a + c\n        val abc = ab + bc\n      \
    \  val acb = ac + ab\n        val abcc = abc+ acb\n        val abcc = abc + abc\n\
    \        val abccc = abcc+ abcc\n        val abcccc = abccc+ abcccc\n        val\
    \ abccccc = abccccc+ abccccc\n        val abcccccc = abcccccc+ abcccccc\n    \
    \    val abccccccc = abccccccc+ abccccccc\n        val abcccccccb = abcccccccb+\
    \ abcccccccb\n        val abcccccccbb = abcccccccbb+ abcccccccbb\n        val\
    \ abcccccccbbc = abcccccccbbc+ abcccccccbbc\n        val abcccccccbbcd = abcccccccbbcd+\
    \ abcccccccbbcd\n        val abcccccccbbcde = abcccccccbbcde+ abcccccccbbcde\n\
    \        val abcccccccbbcdef = abcccccccbbcdef+ abcccccccbbcdef\n        val abcccccccbbcdefg\
    \ = abcccccccbbcdefg+ abcccccccbbcdefg\n        val abcccccccbbcdefgh = abcccccccbbcdefgh+\
    \ abcccccccbbcdefgh\n        val abcccccccbbcdefghi = abcccccccbbcdefghi+ abcccccccbbcdefghi\n\
    \        val abcccccccbbcdefghij = abcccccccbbcdefghij+ abcccccccbbcdefghij\n\
    \        val abcccccccbbcdefghijk = abcccccccbbcdefghijk+ abcccccccbbcdefghijk\n\
    \        val abcccccccbbcdefghijkl = abcccccccbbcdefghijkl+ abcccccccbbcdefghijkl\n\
    \        val abcccccccbbcdefghijklm = abcccccccbbcdefghijklm+ abcccccccbbcdefghijklm\n\
    \        val abcccccccbbcdef\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmzo1_fm.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmzo1_fm.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mabcc\e[0m = abc + abc\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabcc is already defined as \e[33mvalue\e[0m \e[35mabcc\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:15:16 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:16:16 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:17:16 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c.toFloat\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsmzo1_fm.scala:27:22 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mabccccc\e[0m = abccccc+ abccccc\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Recursive \e[33mvalue\e[0m \e[35mabccccc\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with "
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a9 + a9\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a10 + a10\n        val\
    \ b10 = b10 + b10\n        val c10 = c10 + c10\n        val a11 = a11 + a11\n\
    \        val b11 = b11 + b11\n        val c11 = c11 + c11\n        val a12 = a12\
    \ + a12\n        val b12 = b12 + b12\n        val c12 = c12 + c12\n        val\
    \ a13 = a13 + a13\n        val b13 = b13 + b13\n        val c13 = c13 + c13\n\
    \        val a14 = a14 + a14\n        val b14 = b14 + b14\n        val c14 = c14\
    \ + c14\n        val a15 = a15 + a15\n        val b15 = b15 + b15\n        val\
    \ c15 = c15 + c15\n        val a16 = a16 + a16\n        val b16 = b16 + b16\n\
    \        val c16 = c16 + c16\n        val a17 = a17 + a17\n        val b17 = b17\
    \ + b17\n        val c17 = c17 + c17\n        val a18 = a18 + a18\n        val\
    \ b18 = b18 + b18\n        val c18 = c18 + c18\n        val a19 = a19 + a19\n\
    \        val b19 = b19 + b19\n        val c19 = c19 + c19\n        val a20 = a20\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpky39em4g.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpky39em4g.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) * (a2 + b2 +\
    \ c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp25fa4bc3.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        (a1 + b1 + c1) * (a2\
    \ + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n   \
    \         a6 + b7 + c8 >\n            a7 + b8 + c9)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:39:39\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:41:12 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppkp2efav.scala:42:12 --------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppkp2efav.scala:43:22 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m            a7 + b8 + c9)\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: c9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805259
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val sum = a1 + b1 + c1\n       \
    \ if (sum > c) {\n            sum - c1\n        } else {\n            sum - b1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfo4khcio.scala:26)\n\tat Problem.main(tmpfo4khcio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val s = (a1 +\
    \ b1 + c1)\n        if (s > a1 + b1 + c1) {\n            return -1\n        }\n\
    \        val area = (s * (s - a1) * (s - b1) * (s - c1))\n        val rounded\
    \ = (area / Math.pow(s, 0.5)).toFloat\n        rounded\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd84myrkk.scala:27)\n\tat Problem.main(tmpd84myrkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * b\
    \ + c * c)\n        val side2 = math.sqrt(a * a + c * c)\n        val side3 =\
    \ math.sqrt(b * b + c * c)\n        if (side1 + side2 > side3) {\n           \
    \ side1.toFloat * side2.toFloat * side3.toFloat\n        } else {\n          \
    \  -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpasig_nmh.scala:25)\n\tat Problem.main(tmpasig_nmh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        val a5 =\
    \ a4 + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6\
    \ = a5 + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7\
    \ = a6 + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8\
    \ = a7 + b7\n        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9\
    \ = a8 + b8\n        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10\
    \ = a9 + b9\n        val b10 = b10 + c9\n        val c10 = c10 + a10\n       \
    \ val a11 = a10 + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n\
    \        val a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12\
    \ + a12\n        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val\
    \ c13 = c13 + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n\
    \        val c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15\
    \ + c14\n        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val\
    \ b16 = b16 + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n\
    \        val b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17\
    \ + b17\n        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val\
    \ a19 = a18 + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n\
    \        val a20 = a19 + b19\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp59alj1x_.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (a2 + c) / 2\n        val b1 = (a\
    \ + c) / 2\n        val b2 = (b + a) / 2\n        val b3 = (b2 + a) / 2\n    \
    \    val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (c +\
    \ a) / 2\n        val d1 = (b + c) / 2\n        val d2 = (c + a) / 2\n       \
    \ val d3 = (a + b) / 2\n        val e1 = (a + c) / 2\n        val e2 = (b + c)\
    \ / 2\n        val e3 = (c + a) / 2\n        val f1 = (b + c) / 2\n        val\
    \ f2 = (c + a) / 2\n        val f3 = (a + b) / 2\n        val g1 = (a + c) / 2\n\
    \        val g2 = (b + a) / 2\n        val g3 = (c + a) / 2\n        val h1 =\
    \ (a + b) / 2\n        val h2 = (b + c) / 2\n        val h3 = (c + a) / 2\n  \
    \      val i1 = (a + b) / 2\n        val i2 = (b + c) / 2\n        val i3 = (c\
    \ + a) / 2\n        val j1 = (a + c) / 2\n        val j2 = (b + a) / 2\n     \
    \   val j3 = (c + a) / 2\n        val k1 = (a + b) / 2\n        val k2 = (b +\
    \ c) / 2\n        val k3 = (c + a) / 2\n        val l1 = (a + c) / 2\n       \
    \ val l2 = (b + a) / 2\n        val l3 = (c + a) / 2\n        val m1 = (a + b)\
    \ / 2\n        val m2 = (b + c) / 2\n        val m3 = (c + a) / 2\n        val\
    \ n1 = (a + c) / 2\n        val n2 = (b + a) / 2\n        val n3 = (c + a) / 2\n\
    \        val o1 = (a + b) / 2\n        val o2 = (b + c) / 2\n        val o3 =\
    \ (c + a) / 2\n        val p1 = (a + c) / 2\n        val p2 = (b + a) / 2\n  \
    \      val p3 = (c + a) / 2\n        val q1 = (a + b) / 2\n        val q2 = (b\
    \ + c) / 2\n        val q3 = (c + a) / 2\n        val r1 = (a + c) / 2\n     \
    \   val r2 = (b + a) / 2\n        val r3 = (c + a) / 2\n        val s1 = (a +\
    \ b) / 2\n        val s2 = (b + c) / 2\n        val s3 = (c + a) / 2\n       \
    \ val t1 = (a + b) / 2\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp81_derkq.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b * b - 4 * a * c\n            if (d > 0) {\n                val\
    \ root = (-b + Math.sqrt(d)) / (2 * a)\n                val area = if (root <\
    \ 0) -1 else root\n                area\n            } else {\n              \
    \  -1\n            }\n        } else {\n            -1\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1gpmmh_.scala:20:16\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                area\n\e[31m\e\
    [31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                Found:\
    \    (area : Double)\n\e[31m   |\e[0m                Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val d4 = d1 * d2\n        val d5 = d1\
    \ * d3\n        val d6 = d2 * d3\n        val d7 = d3 * d4\n        val d8 = d3\
    \ * d5\n        val d9 = d4 * d5\n        val d10 = d5 * d6\n        val d11 =\
    \ d6 * d7\n        val d12 = d7 * d8\n        val d13 = d8 * d9\n        val d14\
    \ = d9 * d10\n        val d15 = d10 * d11\n        val d16 = d11 * d12\n     \
    \   val d17 = d12 * d13\n        val d18 = d13 * d14\n        val d19 = d14 *\
    \ d15\n        val d20 = d15 * d16\n        val d21 = d16 * d17\n        val d22\
    \ = d17 * d18\n        val d23 = d18 * d19\n        val d24 = d19 * d20\n    \
    \    val d25 = d20 * d21\n        val d26 = d21 * d22\n        val d27 = d22 *\
    \ d23\n        val d28 = d23 * d24\n        val d29 = d24 * d25\n        val d30\
    \ = d25 * d26\n        val d31 = d26 * d27\n        val d32 = d27 * d28\n    \
    \    val d33 = d28 * d29\n        val d34 = d29 * d30\n        val d35 = d30 *\
    \ d31\n        val d36 = d31 * d32\n        val d37 = d32 * d33\n        val d38\
    \ = d33 * d34\n        val d39 = d34 * d35\n        val d40 = d35 * d36\n    \
    \    val d41 = d36 * d37\n        val d42 = d37 * d38\n        val d43 = d38 *\
    \ d39\n        val d44 = d39 * d40\n        val d45 = d40 * d41\n        val d46\
    \ = d41 * d42\n        val d47 = d42 * d43\n        val d48 = d43 * d44\n    \
    \    val d49 = d44 * d45\n        val d50 = d45 * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5jq9rn_y.scala:70:23 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36md50\e[0m = d45 * \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5jq9rn_y.scala:71:5 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val b1 = (a + c) / 2\n        val c1 = (b + c) / 2\n        val a2 = (a1\
    \ + b1) / 2\n        val b2 = (a1 + c2) / 2\n        val c2 = (b1 + c2) / 2\n\
    \        val a3 = (a2 + b2) / 2\n        val b3 = (a2 + c3) / 2\n        val c3\
    \ = (b2 + c3) / 2\n        val a4 = (a3 + b3) / 2\n        val b4 = (a3 + c4)\
    \ / 2\n        val c4 = (b3 + c4) / 2\n        val a5 = (a4 + b4) / 2\n      \
    \  val b5 = (a4 + c5) / 2\n        val c5 = (b4 + c5) / 2\n        val a6 = (a5\
    \ + b5) / 2\n        val b6 = (a5 + c6) / 2\n        val c6 = (b5 + c6) / 2\n\
    \        val a7 = (a6 + b6) / 2\n        val b7 = (a6 + c7) / 2\n        val c7\
    \ = (b6 + c7) / 2\n        val a8 = (a7 + b7) / 2\n        val b8 = (a7 + c8)\
    \ / 2\n        val c8 = (b7 + c8) / 2\n        val a9 = (a8 + b8) / 2\n      \
    \  val b9 = (a8 + c9) / 2\n        val c9 = (b8 + c9) / 2\n        val a10 = (a9\
    \ + b9) / 2\n        val b10 = (a9 + c10) / 2\n        val c10 = (b9 + c10) /\
    \ 2\n        val a11 = (a10 + b10) / 2\n        val b11 = (a10 + c11) / 2\n  \
    \      val c11 = (b10 + c11) / 2\n        val a12 = (a11 + b11) / 2\n        val\
    \ b12 = (a11 + c12) / 2\n        val c12 = (b11 + c12) / 2\n        val a13 =\
    \ (a12 + b12) / 2\n        val b13 = (a12 + c13) / 2\n        val c13 = (b12 +\
    \ c13) / 2\n        val a14 = (a13 + b13) / 2\n        val b14 = (a13 + c14) /\
    \ 2\n        val c14 = (b13 + c14) / 2\n        val a15 = (a14 + b14) / 2\n  \
    \      val b15 = (a14 + c15) / 2\n        val c15 = (b14 + c15) / 2\n        val\
    \ a16 = (a15 + b15) / 2\n        val b16 = (a15 + c16) / 2\n        val c16 =\
    \ (b15 + c16) / 2\n        val a17 = (a16 + b16) / 2\n        val b17 = (a16 +\
    \ c17) / 2\n        val c17 = (b16 + c17) / 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl3cjfj72.scala:20:23 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mc2\e[0m = (b1 + c2) / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m\
    \                       Recursive \e[33mvalue\e[0m \e[35mc2\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3cjfj72.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val\
    \ b4 = b4 + c3\n        val c4 = c4 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b8 + c7\n        val c8 = c8 + a7\n        val a9 = a8 + b8\n        val\
    \ b9 = b9 + c8\n        val c9 = c9 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a9\n        (a1 + b1 + c1 + a2 + b2\
    \ + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c7 + a7 + b7 +\
    \ c8 + a9 + b10 + c10)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpn9xj0b1c.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b2 + c3 > a2\
    \ + b3 + c4 > a3 + b4 + c5 > a4 + b5 + c6 >\n            a5 + b6 + c7 >\n    \
    \        a6 + b7 + c8)\n            ? a1 + b2 + c3 / a2 + b3 + c4 / a3 + b4 +\
    \ c5 / a4 + b5 + c6 / a5 + b6 + c7 / a6 + b7 + c8 / a7\n            : -1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp8wjldmwo.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010129
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * sum / 2)\n        \
    \    (area.toDouble * 2).toFloat\n        } else {\n            -1.0\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5snt1ye9.scala:24)\n\tat Problem.main(tmp5snt1ye9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        val abc\
    \ = math.min(ab, ac, bc)\n        val abc_ab = math.abs(abc-ab)\n        val abc_ac\
    \ = math.abs(abc-ac)\n        val abc_bc = math.abs(abc-bc)\n        val abc_abc\
    \ = math.min(abc_ab, abc_ac, abc_bc)\n        val abc_abc_ab = math.abs(abc_abc-abc_ab)\n\
    \        val abc_abc_ac = math.abs(abc_abc-ac)\n        val abc_abc_bc = math.abs(abc_abc-bc)\n\
    \        val abc_abc_abc = math.min(abc_abc_ab, abc_abc_ac, abc_abc_bc)\n    \
    \    val abc_abc_abc_ab = math.abs(abc_abc_abc-abc_abc_ab)\n        val abc_abc_abc_ac\
    \ = math.abs(abc_abc_abc-ac)\n        val abc_abc_abc_bc = math.abs(abc_abc_abc-bc)\n\
    \        val abc_abc_abc_abc = math.min(abc_abc_abc_ab, abc_abc_abc_ac, abc_abc_abc_bc)\n\
    \        val abc_abc_abc_abc_ab = math.abs(abc_abc_abc_abc-abc_abc_abc_ab)\n \
    \       val abc_abc_abc_abc_ac = math.abs(abc_abc_abc_abc-ac)\n        val abc_abc_abc_abc_bc\
    \ = math.abs(abc_abc_abc_abc-bc)\n        val abc_abc_abc_abc_abc = math.min(abc_abc_abc_abc_ab,\
    \ abc_abc_abc_abc_ac, abc_abc_abc_abc_bc)\n        val abc_abc_abc_abc_abc_ab\
    \ = math.abs(abc_abc_abc_abc_abc-abc_abc_abc_abc_ab)\n        val abc_abc_abc_abc_abc_ac\
    \ = math.abs(abc_abc_abc_abc_abc-ac)\n        val abc_abc_abc_abc_abc_bc = math.abs(abc_abc_abc_abc_abc-bc)\n\
    \        val abc_abc_\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfng216x6.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfng216x6.scala:18:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e\
    [0m \e[36mabc\e[0m = math.min(ab, ac, bc)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with\
    \ types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float,\
    \ y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m\
    \ (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((ab : Long), (ac : Long),\
    \ (bc : Long))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfng216x6.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + b1\n        val b3\
    \ = b1 + c1\n        val c3 = c1 + a1\n        val a4 = a1 + b1\n        val b4\
    \ = b1 + c1\n        val c4 = c1 + a1\n        val a5 = a1 + b1\n        val b5\
    \ = b1 + c1\n        val c5 = c1 + a1\n        val a6 = a1 + b1\n        val b6\
    \ = b1 + c1\n        val c6 = c1 + a1\n        val a7 = a1 + b1\n        val b7\
    \ = b1 + c1\n        val c7 = c1 + a1\n        val a8 = a1 + b1\n        val b8\
    \ = b1 + c1\n        val c8 = c1 + a1\n        val a9 = a1 + b1\n        val b9\
    \ = b1 + c1\n        val c9 = c1 + a1\n        val a10 = a1 + b1\n        val\
    \ b10 = b1 + c1\n        val c10 = c1 + a1\n        val a11 = a1 + b1\n      \
    \  val b11 = b1 + c1\n        val c11 = c1 + a1\n        val a12 = a1 + b1\n \
    \       val b12 = b1 + c1\n        val c12 = c1 + a1\n        val a13 = a1 + b1\n\
    \        val b13 = b1 + c1\n        val c13 = c1 + a1\n        val a14 = a1 +\
    \ b1\n        val b14 = b1 + c1\n        val c14 = c1 + a1\n        val a15 =\
    \ a1 + b1\n        val b15 = b1 + c1\n        val c15 = c1 + a1\n        val a16\
    \ = a1 + b1\n        val b16 = b1 + c1\n        val c16 = c1 + a1\n        val\
    \ a17 = a1 + b1\n        val b17 = b1 + c1\n        val c17 = c1 + a1\n      \
    \  val a18 = a1 + b1\n        val b18 = b1 + c1\n        val c18 = c1 + a1\n \
    \       val a19 = a1 + b1\n        val b19 = b1 + c1\n        val c19 = c1 + a1\n\
    \        val a20 = a1 + b1\n        val b20 = b1 + c1\n        val c20 = c1 +\
    \ a1\n        val a21 = a1 + b1\n        val b21 = b1 + c1\n        val c21 =\
    \ c1 + a1\n        val a22 = a1 + b1\n        val b22 = b1 + c1\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkcltw62.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n\
    \        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n\
    \        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n\
    \        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n\
    \        val b10 = b9 + c9\n        val c10 = c9 + a9\n        (a1 + b2 + c2)\
    \ * (a2 + b3 + c3) * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6) * (a6 +\
    \ b7 + c7) * (a7 + b8 + c8) * (a8 + b9 + c9) * (a9 + b10 + c10)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ciwppes.scala:48)\n\tat Problem.main(tmp6ciwppes.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n   \
    \         a6 + b7 + c8 >\n            a7 + b8 + c9)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:39:39\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppkp2efav.scala:41:12 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppkp2efav.scala:42:12 --------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppkp2efav.scala:43:22 ------------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m            a7 + b8 + c9)\n\e[31m\e[31m   |\e[0m                      ^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: c9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8\
    \ = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9\
    \ = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a * b * c) / 2.0\n\
    \        val rounded = math.round(area * 100.0) / 100.0\n        if (rounded ==\
    \ area) rounded\n        else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_sltajp5.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (rounded\
    \ == area) rounded\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    (rounded : Double)\n\
    \e[31m   |\e[0m                             Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4\
    \ + b4\n        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5\
    \ + b5\n        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6\
    \ + b6\n        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpedlqgm4d.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        if (sum > a1 && sum > b1 && sum > c1) {\n            val\
    \ a2 = math.abs(a1 - b1)\n            val b2 = math.abs(b1 - c1)\n           \
    \ val c2 = math.abs(c1 - a1)\n            val area = a2 + b2 + c2\n          \
    \  area.toFloat\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5mv87uho.scala:30)\n\tat Problem.main(tmp5mv87uho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpuoy46yrs.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        val abcd\
    \ = math.abs(abc * bcd)\n        val abce = math.abs(abc + ab)\n        val bcde\
    \ = math.abs(bc + abc)\n        val abcde = math.abs(abcd * bcde)\n        val\
    \ abcef = math.abs(abce * bcde)\n        val bcdef = math.abs(bcd * abcef)\n \
    \       val abcdf = math.abs(abcd * abcef)\n        val abceg = math.abs(abce\
    \ * abcef)\n        val bcdeg = math.abs(bcd * abceg)\n        val abcdeh = math.abs(abcde\
    \ * abceg)\n        val abcefh = math.abs(abce * bcdeg)\n        val bcdefh =\
    \ math.abs(bcd * abcefh)\n        val abcdfh = math.abs(abcd * abcefh)\n     \
    \   val abcegh = math.abs(abce * abcefh)\n        val bcdegh = math.abs(bcd *\
    \ abcegh)\n        val abcdehl = math.abs(abcde * abcegh)\n        val abcefhl\
    \ = math.abs(abce * bcdegh)\n        val bcdefhl = math.abs(bcd * abcefhl)\n \
    \       val abcdfhl = math.abs(abcd * abcefhl)\n        val abceghl = math.abs(abce\
    \ * abcefhl)\n        val bcdeghl = math.abs(bcd * abceghl)\n        val abcdehll\
    \ = math.abs(abcde * abceghl)\n        val abcefhll = math.abs(abce * bcdeghl)\n\
    \        val bcdefhll = math.abs(bcd * abcefhll)\n        val abcdfhll = math.abs(abcd\
    \ * abcefhll)\n        val abceghll = math.abs(abce * abcefhll)\n        val bcdeghll\
    \ = math.abs(bcd * abceghll)\n        val abcdehlll = math.abs(abcde * abceghll)\n\
    \        val abcefhlll = math.abs(abce * bcdeghll)\n        val bcdefhlll = math.abs(bcd\
    \ * abcefhlll)\n        val abcdfhlll = math.abs(abcd * abce\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplyr59kwz.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplyr59kwz.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val s = (a1 +\
    \ b1 + c1)\n        if (s > a1 + b1 + c1) {\n            return -1\n        }\n\
    \        val area = (s * s) / (a1 * a1 + b1 * b1 + c1 * c1)\n        val rounded\
    \ = area.toString.split(\"\\\\.\").last.toString.toFloat\n        rounded.toFloat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf1h9v3zm.scala:27)\n\tat Problem.main(tmpf1h9v3zm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b2 + c3 > a2 + b3 + c4\
    \ > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n \
    \           a6 + b7 + c8)\n            ? a1 * b2 * c3 + a2 * b3 * c4 + a3 * b4\
    \ * c5 + a4 * b5 * c6 + a5 * b6 * c7 + a6 * b7 * c8\n            : -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo__2z4ig.scala:36:39\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Double\n\e[31m   |\e[0m                                   \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo__2z4ig.scala:37:12\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Double\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo__2z4ig.scala:38:12 --------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo__2z4ig.scala:39:22 ------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m            a6 + b7 + c8)\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      Not found: c8\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpefo09bal.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpefo09bal.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(c-a)\n        val bc = math.abs(c-b)\n        val area\
    \ = ab*ac*bc\n        if(a+b+c > ab && ab+ac+bc > ab && ab+ac+bc > ab) {\n   \
    \         area\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphzc_sn5.scala:26)\n\tat Problem.main(tmpphzc_sn5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val a4 = (a1\
    \ + a2 + a3) / 2\n        val b1 = (b + c) / 2\n        val b2 = (b + a) / 2\n\
    \        val b3 = (c + a) / 2\n        val b4 = (b1 + b2 + b3) / 2\n        val\
    \ c1 = (c + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (a + c) / 2\n\
    \        val c4 = (a1 + a2 + a3) / 2\n        val d1 = (b1 + c) / 2\n        val\
    \ d2 = (b1 + a) / 2\n        val d3 = (b2 + a) / 2\n        val d4 = (b3 + a)\
    \ / 2\n        val e1 = (b1 + b2) / 2\n        val e2 = (b2 + b3) / 2\n      \
    \  val e3 = (b3 + b2) / 2\n        val e4 = (b1 + b4) / 2\n        val f1 = (b2\
    \ + b4) / 2\n        val f2 = (b3 + b4) / 2\n        val f3 = (b3 + b2) / 2\n\
    \        val f4 = (b2 + b4) / 2\n        val g1 = (b3 + b4) / 2\n        val g2\
    \ = (b3 + b2) / 2\n        val g3 = (b1 + b4) / 2\n        val g4 = (b1 + b2)\
    \ / 2\n        val h1 = (b2 + b4) / 2\n        val h2 = (b3 + b4) / 2\n      \
    \  val h3 = (b3 + b2) / 2\n        val h4 = (b2 + b4) / 2\n        val i1 = (b1\
    \ + b4) / 2\n        val i2 = (b2 + b4) / 2\n        val i3 = (b3 + b4) / 2\n\
    \        val i4 = (b1 + b2) / 2\n        val j1 = (b2 + b4) / 2\n        val j2\
    \ = (b3 + b4) / 2\n        val j3 = (b3 + b2) / 2\n        val j4 = (b2 + b4)\
    \ / 2\n        val k1 = (b3 + b4) / 2\n        val k2 = (b3 + b2) / 2\n      \
    \  val k3 = (b1 + b4) / 2\n        val k4 = (b1 + b2) / 2\n        val l1 = (b2\
    \ + b4) / 2\n        val l2 = (b3 + b4) / 2\n        val l3 = (b3 + b2) / 2\n\
    \        val l4 = (b2 + b4) / 2\n        val m1 = (b3 + b4) / 2\n        val m2\
    \ = (b3 + b2) / 2\n        val m3 = (b1 + b4) / 2\n        val m4 = (b1 + b2)\
    \ / 2\n        val n1 = (b2 + b4) / 2\n        val n2 = (b3 + b4) / 2\n      \
    \  val n3 = (b3 + b2) / 2\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpag044uot.scala:70:11 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpag044uot.scala:71:5 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0f2s1s6k.scala:36)\n\tat Problem.main(tmp0f2s1s6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        val abc\
    \ = math.min(ab, ac, bc)\n        abc / math.max(ab, ac, bc)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4ni854eb.scala:18:23 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab,\
    \ ac, bc)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in\
    \ \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double,\
    \ y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e\
    [0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m  \
    \ |\e[0mmatch arguments ((ab : Long), (ac : Long), (bc : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ sum = ab + bc + ac\n        if (sum > 0) {\n            val area = ab * b *\
    \ c / sum\n            area.toFloat\n        } else {\n            -1\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28f5no4w.scala:27)\n\tat Problem.main(tmp28f5no4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2) * (a2 + b3 + c3)\
    \ * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5kgcuxi.scala:36)\n\tat Problem.main(tmpd5kgcuxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 * d2 > d3 * d1) d1\
    \ * d2 else d3 * d1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2z0c9k_m.scala:28)\n\tat Problem.main(tmp2z0c9k_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) * (a2 + b2 + c2)\
    \ * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwhegjzt2.scala:36)\n\tat Problem.main(tmpwhegjzt2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = (a + b +\
    \ c) / 2\n        if (s > a) -1\n        else if (s > b) -1\n        else if (s\
    \ > c) -1\n        else math.sqrt(s * (s - a) * (s - b) * (s - c)).toFloat\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqounssf.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqounssf.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdqounssf.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5 \n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a6 \n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a7 \n        val a8 = a7 + b7\n        val\
    \ b8 = b8 + c7\n        val c8 = c8 + a8 \n        val a9 = a8 + b8\n        val\
    \ b9 = b9 + c8\n        val c9 = c9 + a9 \n        val a10 = a9 + b9\n       \
    \ val b10 = b10 + c9 \n        val c10 = c10 + a10 \n        val a11 = a10 + b10\n\
    \        val b11 = b11 + c10 \n        val c11 = c11 + a11 \n        val a12 =\
    \ a11 + b11\n        val b12 = b12 + c11 \n        val c12 = c12 + a12 \n    \
    \    val a13 = a12 + b12\n        val b13 = b13 + c12 \n        val c13 = c13\
    \ + a13 \n        val a14 = a13 + b13\n        val b14 = b14 + c13 \n        val\
    \ c14 = c14 + a14 \n        val a15 = a14 + b14\n        val b15 = b15 + c14 \n\
    \        val c15 = c15 + a15 \n        val a16 = a15 + b15\n        val b16 =\
    \ b16 + c15 \n        val c16 = c16 + a16 \n        val a17 = a16 + b16\n    \
    \    val b17 = b17 + c16 \n        val c17 = c17 + a17 \n        val a18 = a17\
    \ + b17\n        val b18 = b18 + c17 \n        val c18 = c18 + a18 \n        val\
    \ a19 = a18 + b18\n        val b19 = b19 + c18 \n        val c19 = c19 + a19 \n\
    \        val a20 = a19 + \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6ritkmlo.scala:72:23 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \e[36ma20\e[0m = a19 + \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp6ritkmlo.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp6ritkmlo.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp6ritkmlo.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp6ritkmlo.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp6ritkmlo.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Rec"
  stdout: ''
  timestamp: 1660010139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1 + a2\
    \ + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n  \
    \      a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyan1so2u.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val sides = (a+b+c) / 3\n        if (sides > 0 && sides <= sides) {\n\
    \            (area / sides).round(2)\n        } else {\n            -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp6i8bcx3m.scala:18:27 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            (area / sides).round(\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  \e[33mmethod\e[0m \e[35mround\e[0m in \e[33mclass\e[0m \e[35mRichLong\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + a1\n        val b2\
    \ = b1 + b1\n        val c2 = c1 + c1\n        val a3 = a2 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c3 + c3\n        val a4 = a3 + a3\n        val b4\
    \ = b4 + b4\n        val c4 = c4 + c4\n        val a5 = a4 + a4\n        val b5\
    \ = b5 + b5\n        val c5 = c5 + c5\n        val a6 = a5 + a5\n        val b6\
    \ = b6 + b6\n        val c6 = c6 + c6\n        val a7 = a6 + a6\n        val b7\
    \ = b7 + b7\n        val c7 = c7 + c7\n        val a8 = a7 + a7\n        val b8\
    \ = b8 + b8\n        val c8 = c8 + c8\n        val a9 = a7 + a8\n        val b9\
    \ = b9 + b9\n        val c9 = c9 + c9\n        val a10 = a9 + a10\n        val\
    \ b10 = b9 + b10\n        val c10 = c9 + c10\n        val a11 = a10 + a10\n  \
    \      val b11 = b10 + b11\n        val c11 = c10 + c11\n        val a12 = a11\
    \ + a11\n        val b12 = b11 + b12\n        val c12 = c11 + c12\n        val\
    \ a13 = a12 + a12\n        val b13 = b12 + b13\n        val c13 = c12 + c13\n\
    \        val a14 = a13 + a13\n        val b14 = b13 + b14\n        val c14 = c13\
    \ + c14\n        val a15 = a14 + a14\n        val b15 = b14 + b15\n        val\
    \ c15 = c14 + c15\n        val a16 = a15 + a15\n        val b16 = b15 + b16\n\
    \        val c16 = c15 + c16\n        val a17 = a16 + a16\n        val b17 = b16\
    \ + b17\n        val c17 = c16 + c17\n        val a18 = a17 + a17\n        val\
    \ b18 = b17 + b18\n        val c18 = c17 + c18\n        val a19 = a18 + a18\n\
    \        val b19 = b18 + b19\n        val c19 = c18 + c19\n        val a20 = a19\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + b4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp_rmq233p.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + b6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val side1 = math.sqrt(a * a + b * b)\n       \
    \     val side2 = math.sqrt(c * c + d * d)\n            val side3 = math.sqrt(a\
    \ * a + c * c)\n            val area = side1 * side2 * side3\n            val\
    \ rounded = area.toString.split(\"\\\\.\").head\n            val roundedFloat\
    \ = rounded.toFloat\n            roundedFloat\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ykufd4n.scala:18:42 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          Not found:\
    \ d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpojspx0f3.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9\
    \ * b1) - (a9 * b0) - (a9 * c0) + (a9 * c1) - (a9 * c2) - (a9 * c3) - (a9 * c4)\
    \ - (a9 * c5) - (a9 * c6) - (a9 * c7) - (a9 * c8) - (a9 * c9) - (a9 * c10)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy05mcezc.scala:42:134 -----------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        (a9 * b9) - (a9 * c9) + (a9 * b8) + (a9 * b7)\
    \ - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) - (a9 * b2) - (a9 * b1) - (a9\
    \ * b0) - (a9 * c0) + (a9 * c1) - (a9 * c2) - (a9 * c3) - (a9 * c4) - (a9 * c5)\
    \ - (a9 * c6) - (a9 * c7) - (a9 * c8) - (a9 * c9) - (a9 * c10)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                  ^^\e[0m\n\e\
    [31m   |\e[0m                                                           Not found:\
    \ b0\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val a3 = a1 + a2\n        val b2\
    \ = b1 + a2\n        val c1 = c + b\n        val c2 = c + a\n        val b3 =\
    \ b1 + b2\n        val c3 = c1 + c2\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b3\n        val c4 = c1 + c3\n        val a5 = a2 + a3\n        val b5\
    \ = b2 + b4\n        val c5 = c2 + c5\n        val a6 = a2 + a5\n        val b6\
    \ = b2 + b6\n        val c6 = c2 + c6\n        val a7 = a3 + a5\n        val b7\
    \ = b3 + b7\n        val c7 = c3 + c7\n        val a8 = a4 + a6\n        val b8\
    \ = b4 + b8\n        val c8 = c4 + c8\n        val a9 = a5 + a7\n        val b9\
    \ = b5 + b9\n        val c9 = c5 + c9\n        val a10 = a6 + a8\n        val\
    \ b10 = b6 + b10\n        val c10 = c6 + c10\n        val a11 = a7 + a9\n    \
    \    val b11 = b7 + b11\n        val c11 = c7 + c11\n        val a12 = a8 + a10\n\
    \        val b12 = b8 + b12\n        val c12 = c8 + c12\n        val a13 = a9\
    \ + a11\n        val b13 = b9 + b13\n        val c13 = c9 + c13\n        val a14\
    \ = a10 + a12\n        val b14 = b10 + b14\n        val c14 = c10 + c14\n    \
    \    val a15 = a11 + a13\n        val b15 = b11 + b15\n        val c15 = c11 +\
    \ c15\n        val a16 = a12 + a14\n        val b16 = b12 + b16\n        val c16\
    \ = c12 + c16\n        val a17 = a13 + a15\n        val b17 = b13 + b17\n    \
    \    val c17 = c13 + c17\n        val a18 = a14 + a16\n        val b18 = b14 +\
    \ b18\n        val c18 = c14 + c18\n        val a19 = a15 + a17\n        val b19\
    \ = b15 + b19\n        val c19 = c15 + c19\n        val a20\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwtu5kuit.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwtu5kuit.scala:29:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc5\e[0m = c2 + c5\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mc5\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwtu5kuit.scala:31:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb6\e[0m = b2 + b6\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mb6\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwtu5kuit.scala:32:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc6\e[0m = c2 + c6\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mc6\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwtu5kuit.scala:34:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb7\e[0m = b3 + b7\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mb7\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwtu5kuit.scala:35:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc7\e[0m = c3 + c7\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mc7\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explai"
  stdout: ''
  timestamp: 1660010143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        if (sum > sides.last) sides.last else sides.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplns9k3ei.scala:20)\n\tat Problem.main(tmplns9k3ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val a4 = (a1\
    \ + a2) / 2\n        val a5 = (a2 + a3) / 2\n        val a6 = (a3 + a4) / 2\n\
    \        (a1 + a2 + a3 + a4 + a5 + a6) / 6\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6zee39n.scala:24)\n\tat Problem.main(tmpf6zee39n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2oh3v9m.scala:39)\n\tat Problem.main(tmpz2oh3v9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    return -1\n        }\n        val area = a + (b * 2) + (c * 2) * (b * 2)\
    \ / (4 * a)\n        val rounded = math.round(area * 100) / 100\n        if (rounded\
    \ == area) {\n            return rounded\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_2ustd9v.scala:26)\n\tat Problem.main(tmp_2ustd9v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n\
    \        val b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n\
    \        val b8 = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n\
    \        val b9 = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n\
    \        val b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 +\
    \ b10\n        val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12\
    \ = a11 + b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n    \
    \    val a13 = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 +\
    \ a12\n        val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14\
    \ = c13 + a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n    \
    \    val c15 = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 +\
    \ c15\n        val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17\
    \ = b16 + c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n    \
    \    val b18 = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 +\
    \ b18\n        val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20\
    \ = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0sv12j1.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val abs = math.max(a,b,c)\n\
    \        val area = abs * abs * abs\n        val rounded = math.round(area * 100)\
    \ / 100\n        if (rounded == area) rounded else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvvrpzd4_.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvvrpzd4_.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvvrpzd4_.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > a * a + b * b + c * c) {\n            val r = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n            val r2 = r * r\n            val\
    \ r3 = r2 * r\n            val r4 = r3 * r\n            val r5 = r4 * r\n    \
    \        val r6 = r5 * r\n            val r7 = r6 * r\n            val r8 = r7\
    \ * r\n            val r9 = r8 * r\n            val r10 = r9 * r\n           \
    \ val r11 = r10 * r\n            val r12 = r11 * r\n            val r13 = r12\
    \ * r\n            val r14 = r13 * r\n            val r15 = r14 * r\n        \
    \    val r16 = r15 * r\n            val r17 = r16 * r\n            val r18 = r17\
    \ * r\n            val r19 = r18 * r\n            val r20 = r19 * r\n        \
    \    val r21 = r20 * r\n            val r22 = r21 * r\n            val r23 = r22\
    \ * r\n            val r24 = r23 * r\n            val r25 = r24 * r\n        \
    \    val r26 = r25 * r\n            val r27 = r26 * r\n            val r28 = r27\
    \ * r\n            val r29 = r28 * r\n            val r30 = r29 * r\n        \
    \    val r31 = r30 * r\n            val r32 = r31 * r\n            val r33 = r32\
    \ * r\n            val r34 = r33 * r\n            val r35 = r34 * r\n        \
    \    val r36 = r35 * r\n            val r37 = r36 * r\n            val r38 = r37\
    \ * r\n            val r39 = r38 * r\n            val r40 = r39 * r\n        \
    \    val r41 = r40 * r\n            val r42 = r41 * r\n            val r43 = r42\
    \ * r\n            val r44 = r43 * r\n            val r45 = r44 * r\n        \
    \    val r46 = r45 * r\n            val r47 = r46 * r\n            val r48 = r47\
    \ * r\n            val r49 = r48 * r\n            val r50 = r49 * r\n        \
    \    val r51 = r50 * r\n            val r52 = r5\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp38a057gh.scala:86:0 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp38a057gh.scala:15:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36ma\e[0m = math.abs(a)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35ma\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp38a057gh.scala:16:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb\e[0m = math.abs(b)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mb\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp38a057gh.scala:17:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = math.abs(c)\n\e[31m\e[31m   |\e[0m                         ^\e\
    [0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mc\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp38a057gh.scala:85:1\
    \ ---------------------\e[0m\e[0m\n\e[31m85 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp38a057gh.scala:73:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m73 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * a * a + b * b + c *\
    \ c)\n            (area / 2).toFloat\n        } else {\n            -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphdh_ikst.scala:24)\n\tat Problem.main(tmphdh_ikst.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ sum = ab + bc + ac\n        if (sum > 0) {\n            val area = math.pow(sum,\
    \ 0.5f)\n            area\n        } else {\n            -1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz5ecqwxd.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + c1\n        val b3\
    \ = b1 + a2\n        val c3 = c1 + b1\n        val a4 = a2 + b2\n        val b4\
    \ = b2 + c3\n        val c4 = c2 + b2\n        val a5 = a2 + c3\n        val b5\
    \ = b2 + a4\n        val c5 = c2 + b3\n        val a6 = a3 + b4\n        val b6\
    \ = b3 + c5\n        val c6 = c3 + b4\n        val a7 = a3 + c5\n        val b7\
    \ = b3 + a6\n        val c7 = c3 + b5\n        val a8 = a4 + b6\n        val b8\
    \ = b4 + c7\n        val c8 = c4 + b6\n        val a9 = a4 + c7\n        val b9\
    \ = b4 + a8\n        val c9 = c4 + b5\n        val a10 = a5 + b8\n        val\
    \ b10 = b5 + c9\n        val c10 = c5 + b5\n        val a11 = a5 + c9\n      \
    \  val b11 = b5 + a10\n        val c11 = c5 + b5\n        val a12 = a6 + b8\n\
    \        val b12 = b6 + c10\n        val c12 = c6 + b6\n        val a13 = a6 +\
    \ c10\n        val b13 = b6 + a12\n        val c13 = c6 + b6\n        val a14\
    \ = a7 + b8\n        val b14 = b7 + c11\n        val c14 = c7 + b7\n        val\
    \ a15 = a7 + c11\n        val b15 = b7 + a13\n        val c15 = c7 + b7\n    \
    \    val a16 = a8 + b8\n        val b16 = b8 + c12\n        val c16 = c8 + b8\n\
    \        val a17 = a8 + c12\n        val b17 = b8 + a14\n        val c17 = c8\
    \ + b8\n        val a18 = a9 + b9\n        val b18 = b9 + c13\n        val c18\
    \ = c9 + b9\n        val a19 = a9 + c13\n        val b19 = b9 + a15\n        val\
    \ c19 = c9 + b9\n        val a20 = a10 + b10\n        val b20 = b10 + c14\n  \
    \      val c\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp83e87zw0.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp83e87zw0.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mc1\e[0m = c / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\
    \e[31m   |\e[0mvalue / is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\
    \e[31m   |\e[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp83e87zw0.scala:75:5 ---------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c).sorted\n\
    \        val sum = sides.sum\n        if (sum > sides(2)) sides(2).toFloat else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnmtqmcr.scala:20)\n\tat Problem.main(tmpcnmtqmcr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3) / 2.0\n        val rounded = area * 1000.0\n\
    \        rounded.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_a6r667.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_a6r667.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3) / 2.0\n        if (side1 + side2 == side3\
    \ && side1 + side2 == side4 && side1 + side2 == side1) {\n            area\n \
    \       } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm83elswl.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm83elswl.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm83elswl.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c).sorted\n\
    \        val sum = sides.sum\n        if (sum > sides.last) sides.last else -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnp10zfx8.scala:20)\n\tat Problem.main(tmpnp10zfx8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isTriangle = (a + b > c) && (a + c > b) && (b + c > a)\n        if\
    \ (isTriangle) {\n            area\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7f1pak1m.scala:26)\n\tat Problem.main(tmp7f1pak1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if (isValid) {\n     \
    \       val isValid2 = a + b > c\n            val isValid3 = a + c > b\n     \
    \       val isValid4 = b + c > a\n            if (isValid2 && isValid3 && isValid4)\
    \ {\n                area\n            } else {\n                -1\n        \
    \    }\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7v2csxk.scala:33)\n\tat Problem.main(tmpy7v2csxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c3 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + a3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + a4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + a5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + a6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + a7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + a8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b9 + a10\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b10 + a11\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b11 + a12\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b12 + a13\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b13 + a14\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b14 + a15\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b15\
    \ + a16\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b16 + a17\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b17 + a18\n        val c18 = c17 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b18 + a19\n        val c19 = c17 + a19\n        val\
    \ a20 = a19 + b19\n        val b20 = b19\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:23:17 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c3 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc3\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + a3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpm48zweh2.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val area = math.pow(a * b, 0.5)\n \
    \           val rounded = math.round(area * 100) / 100\n            return rounded\n\
    \        } else {\n            return -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp63wo9t8p.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp63wo9t8p.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp63wo9t8p.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ b1 = b + c\n        val c1 = c + a\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            area / 100.0f\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4ezc0ogs.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4ezc0ogs.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4ezc0ogs.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ezc0ogs.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area / \e[31m100.0f\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\
    \e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            area\n        } else {\n      \
    \      -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpppxhm6rv.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            area / 2\n        } else {\n  \
    \          -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9mzci0i.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * a * a + sum * b * b\
    \ + sum * c * c)\n            area\n        } else {\n            -1\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3_dh19j.scala:18:12\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 > a4 + b5 + c6 >\n            a5 + b6 + c7 >\n            a6 +\
    \ b7 + c8 >\n            a7 + b8 + c9)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3fu6slyh.scala:39:39\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 > a4 + b5 + c6 >\n\e[31m\e[31m   |\e[0m             \
    \                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \                 Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3fu6slyh.scala:39:54 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        (a1 + b2 + c3 > a2 + b3 + c4 > a3 + b4 + c5 > a4 + b5 + c6 >\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                      Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3fu6slyh.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            a5 + b6 + c7 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3fu6slyh.scala:41:12 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp3fu6slyh.scala:42:22 ------------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            a7 + b8 + c9)\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      Not found: c9\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 error"
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 + d3 * d3) \n            else -1\n \
    \       area.toFloat\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqryc2ont.scala:29)\n\tat Problem.main(tmpqryc2ont.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = a.toFloat\n       \
    \ val b = b.toFloat\n        val c = c.toFloat\n        val ab = a + b\n     \
    \   val bc = b + c\n        val ac = a + c\n        val abc = ab + bc\n      \
    \  val abcc = abc + ac\n        val abcc = abcc + ab\n        val abccc = abcc\
    \ + abc + ac\n        val abcccc = abccc + abc + ac + abc\n        val abccccc\
    \ = abcccc + abc + ac + abc + abc\n        val abcccccc = abccccc + abc + ac +\
    \ abc + abc + abc\n        val abccccccc = abcccccc + abc + ac + abc + abc + abc\
    \ + abc\n        val abcccccccd = abccccccc + abc + ac + abc + abc + abc + abc\
    \ + abc + abc + abc\n        val abcccccccde = abcccccccc + abc + ac + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc\n        val abcccccccdef\
    \ = abcccccccc + abc + ac + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc\n        val abcccccccdefg = abcccccccc\
    \ + abc + ac + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\
    \ + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + ab\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk29n6rr0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mabcc\e[0m = abcc + ab\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mabcc is already\
    \ defined as \e[33mvalue\e[0m \e[35mabcc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk29n6rr0.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpk29n6rr0.scala:16:16 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpk29n6rr0.scala:17:16 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = c.toFloat\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpk29n6rr0.scala:30:26 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mabcccccccde\e[0m = abcccccccc\
    \ + abc + ac + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc + abc\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: abcccccccc\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk29n6rr0.scala:31:27 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m       "
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            val area = (a * side1 + b * side2 + c * side3)\
    \ / 4\n            area.toFloat\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpean4_0m0.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpean4_0m0.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ b1 = b + c\n        val c1 = c + a\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        if (sum > 0) {\n            val a2 = a1 * a1\n          \
    \  val b2 = b1 * b1\n            val c2 = c1 * c1\n            val a3 = a1 * a2\n\
    \            val b3 = b1 * b2\n            val c3 = c1 * c2\n            val a4\
    \ = a1 * a3\n            val b4 = b1 * b3\n            val c4 = c1 * c3\n    \
    \        val a5 = a1 * a4\n            val b5 = b1 * b4\n            val c5 =\
    \ c1 * c5\n            val a6 = a1 * a5\n            val b6 = b1 * b5\n      \
    \      val c6 = c1 * c6\n            val a7 = a1 * a6\n            val b7 = b1\
    \ * b6\n            val c7 = c1 * c7\n            val a8 = a1 * a7\n         \
    \   val b8 = b1 * b7\n            val c8 = c1 * c8\n            val a9 = a1 *\
    \ a8\n            val b9 = b1 * b8\n            val c9 = c1 * c9\n           \
    \ val a10 = a1 * a9\n            val b10 = b1 * b9\n            val c10 = c1 *\
    \ c10\n            val a11 = a1 * a10\n            val b11 = b1 * b10\n      \
    \      val c11 = c1 * c11\n            val a12 = a1 * a11\n            val b12\
    \ = b1 * b11\n            val c12 = c1 * c12\n            val a13 = a1 * a12\n\
    \            val b13 = b1 * b12\n            val c13 = c1 * c13\n            val\
    \ a14 = a1 * a13\n            val b14 = b1 * b13\n            val c14 = c1 * c14\n\
    \            val a15 = a1 * a14\n            val b15 = b1 * b14\n            val\
    \ c15 = c1 * c15\n            val a16 = a1 * a15\n            val b16 = b1 * b15\n\
    \            val c16 = c1 * c16\n            val a17 = a1 * a16\n            val\
    \ b17 = b1 * b16\n            val c17 = c1 * c17\n            val a18 = a1 * a17\n\
    \            val b18 = b1 * b17\n            val c18 = c1 * c18\n            val\
    \ a19 = a1 * a18\n            val b19 = b1 * b18\n            val c19 = c1 * c19\n\
    \            val a20 = a1 * a19\n            val b20 = b1 * b19\n            val\
    \ c20 = c1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjls1iou.scala:91:0 ----------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjls1iou.scala:31:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e\
    [0m \e[36mc5\e[0m = c1 * c5\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc5\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjls1iou.scala:34:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e\
    [0m \e[36mc6\e[0m = c1 * c6\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc6\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjls1iou.scala:37:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e\
    [0m \e[36mc7\e[0m = c1 * c7\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc7\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjls1iou.scala:40:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36mc8\e[0m = c1 * c8\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc8\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptjls1iou.scala:43:26\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e\
    [0m \e[36mc9\e[0m = c1 * c9\n\e[31m\e[31m   |\e[0m                          ^\e\
    [0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e[0m \e[35mc9\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer exp"
  stdout: ''
  timestamp: 1660010155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if (isValid) {\n     \
    \       val side1 = math.sqrt(a * a + b * b)\n            val side2 = math.sqrt(c\
    \ * c + d * d)\n            val side3 = math.sqrt(a * a + c * c)\n           \
    \ val area1 = side1 * side1\n            val area2 = side2 * side2\n         \
    \   val area3 = side3 * side3\n            val area4 = side1 * side2\n       \
    \     val area5 = side1 * side3\n            val area6 = side2 * side3\n     \
    \       val area7 = side1 * side4\n            val area8 = side2 * side4\n   \
    \         val area9 = side3 * side4\n            val area10 = side1 * side5\n\
    \            val area11 = side2 * side5\n            val area12 = side3 * side5\n\
    \            val area13 = side1 * side6\n            val area14 = side2 * side6\n\
    \            val area15 = side3 * side6\n            val area16 = side1 * side7\n\
    \            val area17 = side2 * side7\n            val area18 = side3 * side7\n\
    \            val area19 = side1 * side8\n            val area20 = side2 * side8\n\
    \            val area21 = side3 * side8\n            val area22 = side1 * side9\n\
    \            val area23 = side2 * side9\n            val area24 = side3 * side9\n\
    \            val area25 = side1 * side10\n            val area26 = side2 * side10\n\
    \            val area27 = side3 * side10\n            val area28 = side1 * side11\n\
    \            val area29 = side2 * side11\n            val area30 = side3 * side11\n\
    \            val area31 = side1 * side12\n            val area32 = side2 * side12\n\
    \            val area33 = side3 * side12\n            val area34 = side1 * side13\n\
    \            val area35 = side2 * side13\n            val area36 = side3 * side13\n\
    \            val area37 = side1 * side14\n            val area38 = side2 * side14\n\
    \            val area39 = side3 * side14\n            val area40 = side1 * side15\n\
    \            val area41 = side2 * side15\n            val area42 = side3 * side15\n\
    \            val area43 = side1 * side16\n            val area44 = side2 * side16\n\
    \            val area45 = side3 * side16\n            val area46 = side1 * side17\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpec2cmxtm.scala:67:15 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpec2cmxtm.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpec2cmxtm.scala:19:42\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m         \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpec2cmxtm.scala:27:32 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m            \e[33mval\e[0m \e[36marea7\e[0m = side1 * side4\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Not found: side4\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpec2cmxtm.scala:28:32 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36marea8\e[0m = side2 * side4\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Not found: side4\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpec2cmxtm.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36marea9\e[0m = side3 *\
    \ side4\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: side4\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not F"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        if (sum > a1 && sum > b1 && sum > c1) {\n            val\
    \ a2 = a1 - b1 - c1\n            val b2 = b1 - a1 - c2\n            val c2 = c1\
    \ - a1 - b2\n            val a3 = a1 + b1 + c1\n            val b3 = b1 + a1 +\
    \ c2\n            val c3 = c1 + a1 + b2\n            val a4 = a1 + b1 - c1\n \
    \           val b4 = b1 - a1 - c2\n            val c4 = c1 - a1 - b2\n       \
    \     val a5 = a1 - b1 - c1\n            val b5 = b1 - a1 - c2\n            val\
    \ c5 = c1 - a1 - b2\n            val a6 = a1 + b1 + c1 - 1l\n            val b6\
    \ = b1 + a1 + c2 - 1l\n            val c6 = c1 + a1 + b2 - 1l\n            val\
    \ a7 = a1 + b1 - c1 - 1l\n            val b7 = b1 - a1 - c2 - 1l\n           \
    \ val c7 = c1 - a1 - b2 - 1l\n            val a8 = a1 - b1 - c1 - 1l\n       \
    \     val b8 = b1 - a1 - c2 - 1l\n            val c8 = c1 - a1 - b2 - 1l\n   \
    \         val a9 = a1 + b1 - c1 - 1l\n            val b9 = b1 - a1 - c2 - 1l\n\
    \            val c9 = c1 - a1 - b2 - 1l\n            val a10 = a1 - b1 - c1 -\
    \ 1l\n            val b10 = b1 - a1 - c2 - 1l\n            val c10 = c1 - a1 -\
    \ b2 - 1l\n            val a11 = a1 + b1 - c1 - 1l\n            val b11 = b1 -\
    \ a1 - c2 - 1l\n            val c11 = c1 - a1 - b2 - 1l\n            val a12 =\
    \ a1 - b1 - c1 - 1l\n            val b12 = b1 - a1 - c2 - 1l\n            val\
    \ c12 = c1 - a1 - b2 - 1l\n            val a13 = a1 + b1 - c1 - 1l\n         \
    \   val b13 = b1 - a1 - c2 - 1l\n            val c13 = c1 - a1 - b2 - 1l\n   \
    \         val a14 = a1 - b1 - c1 - 1l\n            val b14 = b1 - a1 - c2 - 1l\n\
    \            val c14 = c1 - a1 - b2 - 1l\n            val a15\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi3uln7ao.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi3uln7ao.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpi3uln7ao.scala:22:31 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mc2\e[0m = c1 - a1 - b2\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     Recursive \e[33mvalue\e[0m \e[35mb2\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi3uln7ao.scala:73:1\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpi3uln7ao.scala:61:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val a3 = a1 + a2\n        val b2\
    \ = b1 + c\n        val c1 = b1 + b2\n        val c2 = a1 + b2\n        val a4\
    \ = a2 + b1\n        val b3 = b2 + c\n        val c3 = b2 + a1\n        val a5\
    \ = a3 + b3\n        val b4 = b3 + c1\n        val c4 = a3 + b1\n        val a6\
    \ = a4 + b4\n        val b5 = b4 + c2\n        val c5 = a4 + b2\n        val a7\
    \ = a5 + b5\n        val b6 = b5 + c3\n        val c6 = a5 + b4\n        val a8\
    \ = a6 + b6\n        val b7 = b6 + c4\n        val c7 = a6 + b5\n        val a9\
    \ = a7 + b7\n        val b8 = b7 + c5\n        val c8 = a7 + b6\n        val a10\
    \ = a8 + b8\n        val b9 = b8 + c6\n        val c9 = a8 + b7\n        val a11\
    \ = a9 + b9\n        val b10 = b9 + c7\n        val c10 = a9 + b8\n        val\
    \ a12 = a10 + b10\n        val b11 = b10 + c7\n        val c11 = a10 + b9\n  \
    \      val a13 = a11 + b11\n        val b12 = b11 + c7\n        val c12 = a11\
    \ + b10\n        val a14 = a12 + b12\n        val b13 = b12 + c7\n        val\
    \ c13 = a12 + b11\n        val a15 = a13 + b13\n        val b14 = b13 + c7\n \
    \       val c14 = a13 + b12\n        val a16 = a14 + b14\n        val b15 = b14\
    \ + c7\n        val c15 = a14 + b13\n        val a17 = a15 + b15\n        val\
    \ b16 = b15 + c7\n        val c16 = a15 + b14\n        val a18 = a16 + b16\n \
    \       val b17 = b16 + c7\n        val c17 = a16 + b15\n        val a19 = a17\
    \ + b17\n        val b18 = b17 + c7\n        val c18 = a17 + b16\n        val\
    \ a20 = a18 + b18\n        val b19 = b18 + c7\n        val c19 = a18 + b17\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpy39wojll.scala:73:11 ---------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy39wojll.scala:74:5 ---------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    return -1\n        }\n        val area = (a * b) / c\n        val rounded\
    \ = Math.round(area * 100) / 100\n        if (rounded == area) {\n           \
    \ return rounded\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpohg6juoc.scala:26)\n\tat Problem.main(tmpohg6juoc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = (a + b - c) / 2\n            triangleArea(a + d, b + d, c + d)\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bkl9xti.scala:23)\n\tat Problem.main(tmp4bkl9xti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1 + a2\
    \ + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n  \
    \          a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpicft6oxl.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b2 + a2\n        val c3 = b2 + a3\n        val a4 = a1 + b3\n        val b4\
    \ = b2 + b3\n        val c4 = c2 + b3\n        val a5 = a1 + b4\n        val b5\
    \ = b2 + b4\n        val c5 = c2 + b4\n        val a6 = a1 + c5\n        val b6\
    \ = b2 + c5\n        val c6 = c2 + c5\n        val a7 = a3 + b6\n        val b7\
    \ = b4 + b6\n        val c7 = c5 + b6\n        val a8 = a3 + b7\n        val b8\
    \ = b4 + b7\n        val c8 = c5 + b7\n        val a9 = a3 + b8\n        val b9\
    \ = b4 + b8\n        val c9 = c5 + b8\n        val a10 = a3 + c9\n        val\
    \ b10 = b4 + c9\n        val c10 = c5 + c9\n        val a11 = a4 + b10\n     \
    \   val b11 = b5 + b10\n        val c11 = c6 + b10\n        val a12 = a5 + b11\n\
    \        val b12 = b5 + c11\n        val c12 = c6 + c11\n        val a13 = a5\
    \ + c12\n        val b13 = b5 + c12\n        val c13 = c6 + c12\n        val a14\
    \ = a6 + b13\n        val b14 = b6 + b13\n        val c14 = c6 + b13\n       \
    \ val a15 = a6 + c14\n        val b15 = b6 + c14\n        val c15 = c6 + c14\n\
    \        val a16 = a7 + b15\n        val b16 = b7 + b15\n        val c16 = c7\
    \ + b15\n        val a17 = a7 + c16\n        val b17 = b7 + c16\n        val c17\
    \ = c7 + c16\n        val a18 = a8 + b17\n        val b18 = b8 + b17\n       \
    \ val c18 = c8 + b17\n        val a19 = a8 + c18\n        val b19 = b8 + c18\n\
    \        val c19 = c8 + c18\n        val a20 = a9 + b19\n        val b20 = b9\
    \ + b19\n        val c20 = c9 + b19\n        val a2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp342ipoh6.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp342ipoh6.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mc4\e[0m = c2 + b3\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp342ipoh6.scala:26:17 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c2 + b4\n\e[31m\e[31m\
    \   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp342ipoh6.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mc6\e[0m = c2 + c5\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp342ipoh6.scala:73:5 ---------------------\e[0m\e\
    [0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + b4\n        val b5\
    \ = b2 + a5\n        val c5 = a3 + b5\n        val a6 = a3 + b5\n        val b6\
    \ = b3 + a5\n        val c6 = b3 + a6\n        val a7 = a3 + b6\n        val b7\
    \ = b3 + a6\n        val c7 = a4 + b6\n        val a8 = a4 + b7\n        val b8\
    \ = b4 + a7\n        val c8 = b4 + a8\n        val a9 = a5 + b8\n        val b9\
    \ = b5 + a9\n        val c9 = a5 + b9\n        val a10 = a6 + b9\n        val\
    \ b10 = b6 + a10\n        val c10 = b6 + b10\n        val a11 = a6 + c10\n   \
    \     val b11 = b7 + a11\n        val c11 = b7 + b11\n        val a12 = a8 + c11\n\
    \        val b12 = b8 + a12\n        val c12 = b8 + b12\n        val a13 = a9\
    \ + c12\n        val b13 = b9 + a13\n        val c13 = b9 + b13\n        val a14\
    \ = a10 + c13\n        val b14 = b10 + a14\n        val c14 = b10 + b14\n    \
    \    val a15 = a11 + c14\n        val b15 = b11 + a15\n        val c15 = b11 +\
    \ b15\n        val a16 = a12 + c15\n        val b16 = b12 + a16\n        val c16\
    \ = b12 + b16\n        val a17 = a13 + c16\n        val b17 = b13 + a17\n    \
    \    val c17 = b13 + b17\n        val a18 = a14 + c17\n        val b18 = b14 +\
    \ a18\n        val c18 = b14 + b18\n        val a19 = a15 + c18\n        val b19\
    \ = b15 + a19\n        val c19 = b15 + b19\n        val a20 = a16 + c19\n    \
    \    val b20 = b16 + a20\n        val c20 = b16 + b20\n        val a21 = a17 +\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsd8svkdd.scala:72:23 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \e[36ma21\e[0m = a17 + \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsd8svkdd.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsd8svkdd.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpsd8svkdd.scala:73:5 ---------------------\e[0m\e\
    [0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2\
    \ + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n            a7\
    \ + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1arhxyr.scala:36:9\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m        (a1 + b1 + c1 + a2 +\
    \ b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n\e[31m\e\
    [31m   |\e[0m         ^\e[0m\n\e[31m   |\e[0m         Found:    Double\n\e[31m\
    \   |\e[0m         Required: Float\n\e[31m37 |\e[0m            a7 + b7 + c7)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n         a7 + b7\
    \ + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3q9i2hew.scala:40)\n\tat Problem.main(tmp3q9i2hew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.min(ab, ac, bc)\n        val abc_ab = math.min(ab, abc)\n       \
    \ val abc_ac = math.min(abc, ac)\n        val abc_bc = math.min(abc, bc)\n   \
    \     val abc_abc = math.min(abc, abc)\n        val abc_abc_ab = math.min(abc,\
    \ abc_ab)\n        val abc_abc_ac = math.min(abc_ac, abc)\n        val abc_abc_bc\
    \ = math.min(abc_bc, abc)\n        val abc_abc_abc = math.min(abc_abc, abc)\n\
    \        val abc_abc_abc_ab = math.min(abc_abc_ab, abc)\n        val abc_abc_abc_ac\
    \ = math.min(abc_abc_ac, abc)\n        val abc_abc_abc_bc = math.min(abc_abc_bc,\
    \ abc)\n        val abc_abc_abc_abc = math.min(abc_abc_abc, abc)\n        val\
    \ abc_abc_abc_abc_ab = math.min(abc_abc_abc_ab, abc)\n        val abc_abc_abc_abc_ac\
    \ = math.min(abc_abc_abc_ac, abc)\n        val abc_abc_abc_abc_bc = math.min(abc_abc_abc_bc,\
    \ abc)\n        val abc_abc_abc_abc_abc = math.min(abc_abc_abc_abc, abc)\n   \
    \     val abc_abc_abc_abc_abc_ab = math.min(abc_abc_abc_abc_ab, abc)\n       \
    \ val abc_abc_abc_abc_abc_ac = math.min(abc_abc_abc_abc_ac, abc)\n        val\
    \ abc_abc_abc_abc_abc_bc = math.min(abc_abc_abc_abc_bc, abc)\n        val abc_abc_abc_abc_abc_abc\
    \ = math.min(abc_abc_abc_abc_abc, abc)\n        val abc_abc_abc_abc_abc_abc_ab\
    \ = math.min(abc_abc_abc_abc_abc_ab, abc)\n        val abc_abc_abc_abc_abc_abc_ac\
    \ = math.min(\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps6g3gpr0.scala:40:50 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mabc_abc_abc_abc_abc_abc_ac\e\
    [0m = math.min(\n\e[31m\e[31m   |\e[0m                                       \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmps6g3gpr0.scala:18:23 -----------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mabc\e[0m = math.min(ab, ac, bc)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((ab : Long),\
    \ (ac : Long), (bc : Long))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps6g3gpr0.scala:40:46\
    \ -----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e\
    [0m \e[36mabc_abc_abc_abc_abc_abc_ac\e[0m = math.min(\n\e[31m\e[31m   |\e[0m \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Null)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps6g3gpr0.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c3 > a2 + b3 + c4 >\
    \ a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c6 >\n   \
    \         a6 + b6 + c5 >\n            a6 + b5 + c4 >\n            a5 + b4 + c3\
    \ >\n            a4 + b3 + c2 >\n            a3 + b2 + c1 >\n            a2 +\
    \ b1 + c1 >\n            a1 + b1 + c1 >\n            a1 + b1 + c1)\n         \
    \   ? Math.sqrt(a1 * b2 - a2 * b1 + a3 * b3 - a3 * b2 + a4 * b3 - a4 * b2 + a5\
    \ * b4 - a5 * b3 + a6 * b5 - a6 * b4 + a7 * b6 - a7 * b5)\n            : -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhtaqxo0.scala:33:39\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Long\n\e[31m   |\e[0m                                     \
    \  Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhtaqxo0.scala:34:12\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpqhtaqxo0.scala:35:12 --------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            a5 + b6 + c6 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqhtaqxo0.scala:36:12 --------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            a6 + b6 + c5 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e\
    [0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqhtaqxo0.scala:37:12 --------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m            a6 + b5 + c4 >\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqhtaqxo0.scala:38:12\
    \ --------------------\e[0m\e[0m\n\e[31m38 |\e[0m            a5 + b4 + c3 >\n\e\
    [31m\e[31m   |\e["
  stdout: ''
  timestamp: 1660010160
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) (sum * 0.5f) else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fi4e6tg.scala:20)\n\tat Problem.main(tmp4fi4e6tg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        if\
    \ (ab > bc) {\n            if (ab > ac) {\n                val area = ab * bc\
    \ / 2.0\n                if (area > 0) area else -1\n            } else {\n  \
    \              val area = bc * ac / 2.0\n                if (area > 0) area else\
    \ -1\n            }\n        } else {\n            if (bc > ac) {\n          \
    \      val area = bc * ab / 2.0\n                if (area > 0) area else -1\n\
    \            } else {\n                val area = ac * ab / 2.0\n            \
    \    if (area > 0) area else -1\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptbs2czbw.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mif\e[0m\
    \ (area > \e[31m0\e[0m) area \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Found:    (area : Double)\n\e[31m   |\e[0m                      \
    \        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptbs2czbw.scala:24:30 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                \e[33mif\e[0m (area > \e[31m0\e[0m) area \e[33melse\e\
    [0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (area : Double)\n\e[31m\
    \   |\e[0m                              Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptbs2czbw.scala:29:30 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mif\e[0m (area > \e[31m0\e[0m) area\
    \ \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^\e[0m\n\e[31m   |\e[0m                              Found:    (area\
    \ : Double)\n\e[31m   |\e[0m                              Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptbs2czbw.scala:32:30\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                \e[33mif\e[0m\
    \ (area > \e[31m0\e[0m) area \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \            Found:    (area : Double)\n\e[31m   |\e[0m                      \
    \        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val area = math.round(a * b / (sum\
    \ - c))\n            area\n        } else {\n            -1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl1se97en.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl1se97en.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl1se97en.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnz49xjci.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val side1 = math.sqrt(a * a + b * b)\n       \
    \     val side2 = math.sqrt(c * c + d * d)\n            val side3 = math.sqrt(a\
    \ * a + c * c)\n            val area = side1 * side2 * side3\n            val\
    \ rounded = math.round(area * 100) / 100\n            if (rounded == area)\n \
    \               rounded\n            else\n                -1\n        } else\n\
    \            -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm64wtvdc.scala:18:42 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                                          Not found:\
    \ d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val\
    \ b7 = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val\
    \ b8 = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b2 + c3 > a2 + b3 + c4\
    \ > a3 + b4 + c5 >\n            a4 + b5 + c6 >\n            a5 + b6 + c7 >\n \
    \           a6 + b7 + c8 >\n            a7 + b8 + c9)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqeqvnwzd.scala:39:39\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        (a1 + b2 + c3 > a2 +\
    \ b3 + c4 > a3 + b4 + c5 >\n\e[31m\e[31m   |\e[0m                            \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Found:    Double\n\e[31m   |\e[0m                                   \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqeqvnwzd.scala:40:12\
    \ --------------------\e[0m\e[0m\n\e[31m40 |\e[0m            a4 + b5 + c6 >\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Double\n\e[31m   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqeqvnwzd.scala:41:12 --------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            a5 + b6 + c7 >\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpqeqvnwzd.scala:42:12 --------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m            a6 + b7 + c8 >\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m  \
    \ |\e[0m            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpqeqvnwzd.scala:43:22 ------------------------\e[0m\e\
    [0m\n\e[31m43 |\e[0m            a7 + b8 + c9)\n\e[31m\e[31m   |\e[0m         \
    \             ^^\e[0m\n\e[31m   |\e[0m                      Not found: c9\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            return sum\n        } else {\n    \
    \        return -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpns2gljtx.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpns2gljtx.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpns2gljtx.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010159
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        val abdc\
    \ = math.abs(ab + bc)\n        val bcda = math.abs(bc + ab)\n        val abdca\
    \ = math.abs(ab + bc)\n        val abdcbc = math.abs(ab + bc)\n        val abdcab\
    \ = math.abs(ab + bc)\n        val abdcbca = math.abs(ab + bc)\n        val abdcbcba\
    \ = math.abs(ab + bc)\n        val abdcbcab = math.abs(ab + bc)\n        val abdcbcbac\
    \ = math.abs(ab + bc)\n        val abdcbcbaca = math.abs(ab + bc)\n        val\
    \ abdcbcbacc = math.abs(ab + bc)\n        val abdcbcbaccb = math.abs(ab + bc)\n\
    \        val abdcbcbaccc = math.abs(ab + bc)\n        val abdcbcbaccca = math.abs(ab\
    \ + bc)\n        val abdcbcbacccb = math.abs(ab + bc)\n        val abdcbcbacccc\
    \ = math.abs(ab + bc)\n        val abdcbcbaccccb = math.abs(ab + bc)\n       \
    \ val abdcbcbaccccc = math.abs(ab + bc)\n        val abdcbcbaccccca = math.abs(ab\
    \ + bc)\n        val abdcbcbacccccb = math.abs(ab + bc)\n        val abdcbcbacccccc\
    \ = math.abs(ab + bc)\n        val abdcbcbacccccba = math.abs(ab + bc)\n     \
    \   val abdcbcbacccccbac = math.abs(ab + bc)\n        val abdcbcbacccccbaca =\
    \ math.abs(ab + bc)\n        val abdcbcbacccccbacc = math.abs(ab + bc)\n     \
    \   val abdcbcbacccccbaccb = math.abs(ab + bc)\n        val abdcbcbacccccbaccc\
    \ = math.abs(ab + bc)\n        val abdcbcbacccccbaccca = math.abs(ab + b\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizvzf10f.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpizvzf10f.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val r = math.round(sum * 0.5f)\n  \
    \          val area = r * r * c\n            area\n        } else {\n        \
    \    -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzjjlk_em.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzjjlk_em.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzjjlk_em.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0f2s1s6k.scala:36)\n\tat Problem.main(tmp0f2s1s6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side1\n        val area2\
    \ = side2 * side2\n        val area3 = side3 * side3\n        val area4 = side4\
    \ * side4\n        val area5 = side1 + side2 + side3\n        val area6 = side1\
    \ + side2 + side4\n        val area7 = side1 + side3 + side4\n        val area8\
    \ = side2 + side3 + side4\n        val area9 = side1 + side2 + side3\n       \
    \ val area10 = side1 + side3 + side4\n        val area11 = side1 + side2 + side4\n\
    \        val area12 = side1 + side2 + side3\n        val area13 = side1 + side3\
    \ + side4\n        val area14 = side2 + side3 + side4\n        val area15 = side1\
    \ + side2 + side4\n        val area16 = side1 + side2 + side3\n        val area17\
    \ = side1 + side3 + side4\n        val area18 = side2 + side3 + side4\n      \
    \  val area19 = side1 + side2 + side3\n        val area20 = side1 + side3 + side4\n\
    \        val area21 = side1 + side2 + side4\n        val area22 = side1 + side2\
    \ + side3\n        val area23 = side1 + side3 + side4\n        val area24 = side2\
    \ + side3 + side4\n        val area25 = side1 + side2 + side3\n        val area26\
    \ = side1 + side3 + side4\n        val area27 = side2 + side3 + side4\n      \
    \  val area28 = side1 + side2 + side3\n        val area29 = side1 + side3 + side4\n\
    \        val area30 = side2 + side3 + side4\n        val area31 = side1 + side2\
    \ + side4\n        val area32 = side1 + side2 + side3\n        val area33 = side1\
    \ + side3 + side4\n        val area34 = side2 + side3 + side4\n        val area35\
    \ = side1 + side2 + side3\n        val area36 = side1 + side3 + side4\n      \
    \  val area37 = side2 + side3 + side4\n        val area38 = side1 + side2 + side3\n\
    \        val area39 = side1 + side3 + side4\n        val area40 = side2 + side\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz_nrdbp.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz_nrdbp.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz_nrdbp.scala:59:29 ------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36marea40\e[0m = side2 + side\n\
    \e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e[0m \
    \                            Not found: side\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzz_nrdbp.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area1 = side1 * side1\n        val area2\
    \ = side2 * side2\n        val area3 = side3 * side3\n        val area4 = side4\
    \ * side4\n        val area5 = side1 + side2 + side3\n        val area6 = side1\
    \ + side2 + side4\n        val area7 = side1 + side3 + side4\n        val area8\
    \ = side1 + side2 + side5\n        val area9 = side1 + side3 + side5\n       \
    \ val area10 = side1 + side4 + side5\n        val area11 = side2 + side3 + side4\n\
    \        val area12 = side2 + side3 + side5\n        val area13 = side2 + side4\
    \ + side5\n        val area14 = side3 + side4 + side5\n        val area15 = side1\
    \ + side2 + side3\n        val area16 = side1 + side2 + side4\n        val area17\
    \ = side1 + side3 + side4\n        val area18 = side1 + side2 + side5\n      \
    \  val area19 = side1 + side3 + side5\n        val area20 = side1 + side4 + side5\n\
    \        val area21 = side2 + side3 + side4\n        val area22 = side2 + side3\
    \ + side5\n        val area23 = side2 + side4 + side5\n        val area24 = side3\
    \ + side4 + side5\n        val area25 = side1 + side2 + side3\n        val area26\
    \ = side1 + side2 + side4\n        val area27 = side1 + side3 + side4\n      \
    \  val area28 = side1 + side2 + side5\n        val area29 = side1 + side3 + side5\n\
    \        val area30 = side1 + side4 + side5\n        val area31 = side2 + side3\
    \ + side4\n        val area32 = side2 + side3 + side5\n        val area33 = side2\
    \ + side4 + side5\n        val area34 = side3 + side4 + side5\n        val area35\
    \ = side1 + side2 + side3\n        val area36 = side1 + side2 + side4\n      \
    \  val area37 = side1 + side3 + side4\n        val area38 = side1 + side2 + side5\n\
    \        val area39 = side1 + side3 + side5\n        val area40 = side1 + side\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36marea8\e[0m = side1 + side2\
    \ + side5\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: side5\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:28:36 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36marea9\e[0m = side1 + side3\
    \ + side5\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: side5\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:29:37 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36marea10\e[0m = side1 + side4\
    \ + side5\n\e[31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     Not found: side5\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplo6f_xdw.scala:31:37 ------------------------\e\
    [0m\e[0"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6\
    \ + b6\n        val b7 = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 +\
    \ c1) * (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6\
    \ + b6 + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2oh3v9m.scala:39)\n\tat Problem.main(tmpz2oh3v9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val bc = math.abs(b-c)\n        val ac = math.abs(a-c)\n        if (ab\
    \ > bc && ab > ac) {\n            val sum = a + b + c\n            val area =\
    \ math.pow(sum, 2) / 3\n            (area.toFloat * 100).toInt\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvv57nyz2.scala:27)\n\tat Problem.main(tmpvv57nyz2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        if (a + b > c) {\n\
    \            val area = (a * b) / c\n            area\n        } else {\n    \
    \        -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp60bubigs.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp60bubigs.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp60bubigs.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val a2 = a*a\n \
    \       val b2 = b*b\n        val c2 = c*c\n        val a3 = a*a\n        val\
    \ b3 = b*b\n        val c3 = c*c\n        val a4 = a*a\n        val b4 = b*b\n\
    \        val c4 = c*c\n        val a5 = a*a\n        val b5 = b*b\n        val\
    \ c5 = c*c\n        val a6 = a*a\n        val b6 = b*b\n        val c6 = c*c\n\
    \        val a7 = a*a\n        val b7 = b*b\n        val c7 = c*c\n        val\
    \ a8 = a*a\n        val b8 = b*b\n        val c8 = c*c\n        val a9 = a*a\n\
    \        val b9 = b*b\n        val c9 = c*c\n        val a10 = a*a\n        val\
    \ b10 = b*b\n        val c10 = c*c\n        val a11 = a*a\n        val b11 = b*b\n\
    \        val c11 = c*c\n        val a12 = a*a\n        val b12 = b*b\n       \
    \ val c12 = c*c\n        val a13 = a*a\n        val b13 = b*b\n        val c13\
    \ = c*c\n        val a14 = a*a\n        val b14 = b*b\n        val c14 = c*c\n\
    \        val a15 = a*a\n        val b15 = b*b\n        val c15 = c*c\n       \
    \ val a16 = a*a\n        val b16 = b*b\n        val c16 = c*c\n        val a17\
    \ = a*a\n        val b17 = b*b\n        val c17 = c*c\n        val a18 = a*a\n\
    \        val b18 = b*b\n        val c18 = c*c\n        val a19 = a*a\n       \
    \ val b19 = b*b\n        val c19 = c*c\n        val a20 = a*a\n        val b20\
    \ = b*b\n        val c20 = c*c\n        val a21 = a*a\n        val b21 = b*b\n\
    \        val c21 = c*c\n        val a22 = a*a\n        val b22 = b*b\n       \
    \ val c22 = c*c\n        val a23 = a*a\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0kb3ock4.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0kb3ock4.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0kb3ock4.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kb3ock4.scala:83:5 ---------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area2 = side1 * side2 * side3\n    \
    \    val area3 = side1 * side2 * side4\n        val area4 = side1 * side3 * side4\n\
    \        val area5 = side1 * side2 * side4\n        val area6 = side1 * side3\
    \ * side5\n        val area7 = side1 * side4 * side5\n        val area8 = side1\
    \ * side3 * side6\n        val area9 = side1 * side4 * side6\n        val area10\
    \ = side1 * side5 * side6\n        val area11 = side2 * side3 * side6\n      \
    \  val area12 = side2 * side4 * side6\n        val area13 = side2 * side5 * side6\n\
    \        val area14 = side2 * side3 * side7\n        val area15 = side2 * side4\
    \ * side7\n        val area16 = side2 * side5 * side7\n        val area17 = side2\
    \ * side3 * side8\n        val area18 = side2 * side4 * side8\n        val area19\
    \ = side2 * side5 * side8\n        val area20 = side2 * side3 * side9\n      \
    \  val area21 = side2 * side4 * side9\n        val area22 = side2 * side5 * side9\n\
    \        val area23 = side2 * side3 * side10\n        val area24 = side2 * side4\
    \ * side10\n        val area25 = side2 * side5 * side10\n        val area26 =\
    \ side3 * side4 * side10\n        val area27 = side3 * side5 * side10\n      \
    \  val area28 = side3 * side6 * side10\n        val area29 = side3 * side7 * side10\n\
    \        val area30 = side3 * side8 * side10\n        val area31 = side3 * side9\
    \ * side10\n        val area32 = side3 * side10 * side10\n        val area33 =\
    \ side4 * side5 * side10\n        val area34 = side4 * side6 * side10\n      \
    \  val area35 = side4 * side7 * side10\n        val area36 = side4 * side8 * side10\n\
    \        val area37 = side4 * side9 * side10\n        val area38 = side4 * side10\
    \ * side10\n        val area39 = side5 * side6 * side10\n        val area40 =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0jz_y9ez.scala:58:20 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36marea40\e[0m = \n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0jz_y9ez.scala:17:38 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e\
    [31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e[0m   \
    \                                   Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0jz_y9ez.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jz_y9ez.scala:24:36 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36marea6\e[0m = side1 * side3\
    \ * side5\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: side5\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jz_y9ez.scala:25:36 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36marea7\e[0m = side1 * side4\
    \ * side5\n\e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: side5\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0jz_y9ez.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 > 0 && d2 > 0 && d3\
    \ > 0) (d1 * d2 * d3) / Math.sqrt(d1 * d2 * d3 + d1 * d2 * d1 + d2 * d3 * d2)\
    \ else -1\n        area\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu0l8sf2p.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        area\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (area : Double)\n\
    \e[31m   |\e[0m        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ b1 = b + c\n        val c1 = c + a\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpopahd2fn.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sides = List(a, b, c)\n\
    \        val sum = sides.sum\n        val isValid = sides.forall(s => s > 0)\n\
    \        if (isValid) {\n            val area = sides.foldLeft(0.0f) { (acc, side)\
    \ => acc + side * side }\n            (area / sum).toFloat\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjhqgf3f.scala:26)\n\tat Problem.main(tmphjhqgf3f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4) + (a9 * b3) + (a9 * b2) + (a9\
    \ * b1) + (a9 * a1) - (a9 * a2) - (a9 * a3) - (a9 * a4) + (a9 * a5) + (a9 * a6)\
    \ + (a9 * a7) + (a9 * a8) + (a9 * a9)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxmedkd_u.scala:45)\n\tat Problem.main(tmpxmedkd_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3\
    \ + b3\n        val b4 = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1\
    \ + c1 + a2 + b2 + c2 + a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0oi11x1u.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp0oi11x1u.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = (a + b) / 2\n    \
    \    val a2 = (b + c) / 2\n        val a3 = (c + a) / 2\n        val b1 = (a +\
    \ c) / 2\n        val b2 = (c + b) / 2\n        val b3 = (b + a) / 2\n       \
    \ val c1 = (a + b) / 2\n        val c2 = (b + c) / 2\n        val c3 = (c + a)\
    \ / 2\n        val d1 = (a + c) / 2\n        val d2 = (c + b) / 2\n        val\
    \ d3 = (b + a) / 2\n        val e1 = (a + b) / 2\n        val e2 = (c + b) / 2\n\
    \        val e3 = (b + c) / 2\n        val f1 = (a + c) / 2\n        val f2 =\
    \ (c + a) / 2\n        val f3 = (b + a) / 2\n        val g1 = (a + c) / 2\n  \
    \      val g2 = (c + b) / 2\n        val g3 = (b + c) / 2\n        val h1 = (a\
    \ + b) / 2\n        val h2 = (c + a) / 2\n        val h3 = (b + a) / 2\n     \
    \   val i1 = (a + c) / 2\n        val i2 = (c + b) / 2\n        val i3 = (b +\
    \ c) / 2\n        val j1 = (a + b) / 2\n        val j2 = (c + a) / 2\n       \
    \ val j3 = (b + a) / 2\n        val k1 = (a + c) / 2\n        val k2 = (c + b)\
    \ / 2\n        val k3 = (b + c) / 2\n        val l1 = (a + b) / 2\n        val\
    \ l2 = (c + a) / 2\n        val l3 = (b + a) / 2\n        val m1 = (a + c) / 2\n\
    \        val m2 = (c + b) / 2\n        val m3 = (b + c) / 2\n        val n1 =\
    \ (a + b) / 2\n        val n2 = (c + a) / 2\n        val n3 = (b + a) / 2\n  \
    \      val o1 = (a + c) / 2\n        val o2 = (c + b) / 2\n        val o3 = (b\
    \ + c) / 2\n        val p1 = (a + b) / 2\n        val p2 = (c + a) / 2\n     \
    \   val p3 = (b + a) / 2\n        val q1 = (a + c) / 2\n        val q2 = (c +\
    \ b) / 2\n        val q3 = (b + c) / 2\n        val r1 = (a + b) / 2\n       \
    \ val r2 = (c + a) / 2\n        val r3 = (b + a) / 2\n        val s1 = (a + c)\
    \ / 2\n        val s2 = (c + b) / 2\n        val s3 = (b + c) / 2\n        val\
    \ t1 = (a + b) / 2\n\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkypqq4fw.scala:74:5\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area / side1\n        } else {\n          \
    \  -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaim7kfff.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaim7kfff.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaim7kfff.scala:22:12 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            area / side1\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnz49xjci.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val sum = a1\
    \ + b1 + c1\n        if (sum > a1 && sum > b1 && sum > c1) {\n            val\
    \ area = a * b * c\n            val rounded = math.round(area * 100) / 100\n \
    \           rounded\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_0t0u_wn.scala:28)\n\tat Problem.main(tmp_0t0u_wn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = math.abs(a)\n    \
    \    val b1 = math.abs(b)\n        val c1 = math.abs(c)\n        val a2 = math.abs(a1\
    \ + b1)\n        val b2 = math.abs(b1 + c1)\n        val c2 = math.abs(c1 + a1)\n\
    \        val a3 = math.abs(a2 + b2)\n        val b3 = math.abs(b2 + c2)\n    \
    \    val c3 = math.abs(c2 + a2)\n        val a4 = math.abs(a3 + b3)\n        val\
    \ b4 = math.abs(b3 + c3)\n        val c4 = math.abs(c3 + a3)\n        val a5 =\
    \ math.abs(a4 + b4)\n        val b5 = math.abs(b4 + c4)\n        val c5 = math.abs(c4\
    \ + a4)\n        val a6 = math.abs(a5 + b5)\n        val b6 = math.abs(b5 + c5)\n\
    \        val c6 = math.abs(c5 + a5)\n        val a7 = math.abs(a6 + b6)\n    \
    \    val b7 = math.abs(b6 + c6)\n        val c7 = math.abs(c6 + a6)\n        val\
    \ a8 = math.abs(a7 + b7)\n        val b8 = math.abs(b7 + c7)\n        val c8 =\
    \ math.abs(c7 + a7)\n        val a9 = math.abs(a8 + b8)\n        val b9 = math.abs(b8\
    \ + c8)\n        val c9 = math.abs(c8 + a8)\n        val a10 = math.abs(a9 + b9)\n\
    \        val b10 = math.abs(b9 + c9)\n        val c10 = math.abs(c9 + a9)\n  \
    \      val a11 = math.abs(a10 + b10)\n        val b11 = math.abs(b10 + c10)\n\
    \        val c11 = math.abs(c10 + a10)\n        val a12 = math.abs(a11 + b11)\n\
    \        val b12 = math.abs(b11 + c11)\n        val c12 = math.abs(c11 + a11)\n\
    \        val a13 = math.abs(a12 + b12)\n        val b13 = math.abs(b12 + c12)\n\
    \        val c13 = math.abs(c12 + a12)\n        val a14 = math.abs(a13 + b13)\n\
    \        val b14 = math.abs(b13 + c13)\n        val c14 = math.abs(c13 + a13)\n\
    \        val a15 = math.abs(a14 + b14)\n        val b15 = math.abs(b14 + c14)\n\
    \        val c15 = math.abs(c14 + a14)\n        val a16 = math.abs(a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8olccyno.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8olccyno.scala:61:5 ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val\
    \ b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val\
    \ b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val\
    \ b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2) * (a2 + b3 +\
    \ c3) * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyxtuadp.scala:33:8\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m        (a1 + b2 + c2) * (a2\
    \ + b3 + c3) * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 + b1 - c1\n            val\
    \ b2 = b1 + c1 - a1\n            val c2 = c1 + a1 - b1\n            val a3 = a2\
    \ + b2 - c2\n            val b3 = b2 + c2 - a2\n            val c3 = c2 + a2 -\
    \ b2\n            val a4 = a3 + b3 - c3\n            val b4 = b3 + c3 - a3\n \
    \           val c4 = c3 + a3 - b3\n            val a5 = a4 + b4 - c4\n       \
    \     val b5 = b5 + c4 - a4\n            val c5 = c5 + a4 - b4\n            val\
    \ a6 = a5 + b5 - c5\n            val b6 = b5 + c5 - a5\n            val c6 = c5\
    \ + a5 - b5\n            val a7 = a6 + b6 - c6\n            val b7 = b6 + c6 -\
    \ a6\n            val c7 = c6 + a6 - b6\n            val a8 = a7 + b7 - c7\n \
    \           val b8 = b7 + c7 - a7\n            val c8 = c7 + a7 - b7\n       \
    \     val a9 = a8 + b8 - c8\n            val b9 = b8 + c8 - a8\n            val\
    \ c9 = c8 + a8 - b8\n            val a10 = a9 + b9 - c9\n            val b10 =\
    \ b9 + c9 - a9\n            val c10 = c9 + a9 - b9\n            (a10.toFloat *\
    \ a10.toFloat * a10.toFloat) + (b10.toFloat * b10.toFloat * b10.toFloat) + (c10.toFloat\
    \ * c10.toFloat * c10.toFloat)\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3guasug1.scala:30:21 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4 -\
    \ a4\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \               Recursive \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3guasug1.scala:31:21 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mc5\e[0m = c5 + a4 -\
    \ b4\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \               Recursive \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8\
    \ = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9\
    \ = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        (a9 * b9) - (a9 * c9) + (a9 * b8)\
    \ + (a9 * b7) - (a9 * b6) + (a9 * b5) - (a9 * b4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvxp6urd.scala:45)\n\tat Problem.main(tmpcvxp6urd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area / side1\n        } else {\n          \
    \  -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaim7kfff.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaim7kfff.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaim7kfff.scala:22:12 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            area / side1\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e[31m\
    \   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = if (a + b > c) (a\
    \ * b) / 2 else -1\n        area.toFloat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoei_ld5.scala:21)\n\tat Problem.main(tmpgoei_ld5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpojspx0f3.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        if (side1\
    \ + side2 > side3) {\n            area\n        } else {\n            -1\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnz49xjci.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.abs(ab + ac)\n        val bca = math.abs(bc + ab)\n        val abcb\
    \ = math.abs(abc + bc)\n        val abcc = math.abs(abc + cc)\n        val bcca\
    \ = math.abs(bcc + ab)\n        val bccaa = math.abs(bcca + ac)\n        val bccaab\
    \ = math.abs(bcca + abc)\n        val bccaabc = math.abs(bcca + abcb)\n      \
    \  val bccaabcb = math.abs(bcca + bcca)\n        val bccaabcca = math.abs(bcca\
    \ + bccaa)\n        val bccaabccaa = math.abs(bcca + bccaab)\n        val bccaabccaab\
    \ = math.abs(bcca + bccaabc)\n        val bccaabccaabc = math.abs(bcca + bccaabcb)\n\
    \        val bccaabccaabcb = math.abs(bcca + bccaabcca)\n        val bccaabccaabcca\
    \ = math.abs(bcca + bccaabccaa)\n        val bccaabccaabccaa = math.abs(bcca +\
    \ bccaabccaab)\n        val bccaabccaabccaab = math.abs(bcca + bccaabccaabc)\n\
    \        val bccaabccaabccaabc = math.abs(bcca + bccaabccaabcb)\n        val bccaabccaabccaabcb\
    \ = math.abs(bcca + bccaabccaabcca)\n        val bccaabccaabccaabcca = math.abs(bcca\
    \ + bccaabccaabccaa)\n        val bccaabccaabccaabccaa = math.abs(bcca + bccaabccaabccaab)\n\
    \        val bccaabccaabccaabccaab = math.abs(bcca + bccaabccaabccaabc)\n    \
    \    val bccaabccaabccaabccaabc = math.abs(bcca + bccaabccaabccaabcb)\n      \
    \  val bccaabccaabccaabccaabcb = math.abs(bcca + bccaabccaabccaabcca)\n      \
    \  val bccaabccaabccaabccaabcca = math.abs(bcca + bccaabccaabccaabccaa)\n    \
    \    val bccaabccaabccaabccaabccaa = math.abs(bcc\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7qjjh1_c.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qjjh1_c.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mabcc\e[0m = math.abs(abc + cc)\n\e[31m\e[31m   |\e[0m                    \
    \              ^^\e[0m\n\e[31m   |\e[0m                                  Not found:\
    \ cc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qjjh1_c.scala:22:28\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mbcca\e[0m = math.abs(bcc + ab)\n\e[31m\e[31m   |\e[0m                    \
    \        ^^^\e[0m\n\e[31m   |\e[0m                            Not found: bcc\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7qjjh1_c.scala:43:49\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mbccaabccaabccaabccaabccaa\e[0m = math.abs(bcc\n\e[31m\e[31m   |\e[0m     \
    \                                            ^^^\e[0m\n\e[31m   |\e[0m       \
    \                                          Not found: bcc\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7qjjh1_c.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = Math.abs(a)\n    \
    \    val b1 = Math.abs(b)\n        val c1 = Math.abs(c)\n        val a2 = a1 +\
    \ b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2\
    \ + b2\n        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3\
    \ + b3\n        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4\
    \ + b4\n        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5\
    \ + b5\n        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 +\
    \ c2) * (a2 + b3 + c3) * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3xqyp8j.scala:36)\n\tat Problem.main(tmpk3xqyp8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val area2 = side1 * side2\n        val area3\
    \ = side1 * side3\n        val area4 = side2 * side4\n        val area5 = side3\
    \ * side4\n        val area6 = side1 + side2 + side3 + side4\n        val area7\
    \ = side1 + side2 + side3 + side5\n        val area8 = side1 + side2 + side3 +\
    \ side6\n        val area9 = side1 + side2 + side3 + side7\n        val area10\
    \ = side1 + side2 + side3 + side8\n        val area11 = side1 + side2 + side3\
    \ + side9\n        val area12 = side1 + side2 + side3 + side10\n        val area13\
    \ = side1 + side2 + side3 + side11\n        val area14 = side1 + side2 + side3\
    \ + side12\n        val area15 = side1 + side2 + side3 + side13\n        val area16\
    \ = side1 + side2 + side3 + side14\n        val area17 = side1 + side2 + side3\
    \ + side15\n        val area18 = side1 + side2 + side3 + side16\n        val area19\
    \ = side1 + side2 + side3 + side17\n        val area20 = side1 + side2 + side3\
    \ + side18\n        val area21 = side1 + side2 + side3 + side19\n        val area22\
    \ = side1 + side2 + side3 + side20\n        val area23 = side1 + side2 + side3\
    \ + side21\n        val area24 = side1 + side2 + side3 + side22\n        val area25\
    \ = side1 + side2 + side3 + side23\n        val area26 = side1 + side2 + side3\
    \ + side24\n        val area27 = side1 + side2 + side3 + side25\n        val area28\
    \ = side1 + side2 + side3 + side26\n        val area29 = side1 + side2 + side3\
    \ + side27\n        val area30 = side1 + side2 + side3 + side28\n        val area31\
    \ = side1 + side2 + side3 + side29\n        val area32 = side1 + side2 + side3\
    \ + side30\n        val area33 = side1 + side2 + side3 + side31\n        val area34\
    \ = side1 + side2 + side3 + side32\n        val area35 = side1 + side2 + side3\
    \ + side33\n        val area36 = side1 + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9ri0i8wm.scala:54:28 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36marea36\e[0m = side1 + \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ri0i8wm.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ri0i8wm.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ri0i8wm.scala:25:44 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36marea7\e[0m = side1 + side2\
    \ + side3 + side5\n\e[31m\e[31m   |\e[0m                                     \
    \       ^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \  Not found: side5\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ri0i8wm.scala:26:44\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36marea8\e[0m = side1 + side2 + side3 + side6\n\e[31m\e[31m   |\e[0m        \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                               Not found: side6\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp9ri0i8wm.scal"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4) / 6\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpefo09bal.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpefo09bal.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a - b)\n\
    \        val ac = math.abs(a - c)\n        val bc = math.abs(b - c)\n        val\
    \ sum = ab + ac + bc\n        if (sum > 0) {\n            val area = ab * ac *\
    \ bc / sum\n            area\n        } else {\n            -1\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx20_bjds.scala:27)\n\tat Problem.main(tmpx20_bjds.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val side1 = math.sqrt(sum)\n            val side2\
    \ = math.sqrt(side1 * side1)\n            val side3 = math.sqrt(side2 * side2)\n\
    \            val area = side1 * side2 * side3\n            val rounded = area.toString.replaceAll(\"\
    \\\\.\", \"\").replace(\".\", \".\")\n            rounded.toFloat\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpejv46ii7.scala:28)\n\tat Problem.main(tmpejv46ii7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val side5 = math.sqrt(a * a + b * b)\n \
    \       val side6 = math.sqrt(c * c + d * d)\n        val side7 = math.sqrt(a\
    \ * a + c * c)\n        val side8 = math.sqrt(b * b + d * d)\n        val side9\
    \ = math.sqrt(a * a + b * b)\n        val side10 = math.sqrt(c * c + d * d)\n\
    \        val side11 = math.sqrt(a * a + c * c)\n        val side12 = math.sqrt(b\
    \ * b + d * d)\n        val side13 = math.sqrt(a * a + c * c)\n        val side14\
    \ = math.sqrt(b * b + d * d)\n        val side15 = math.sqrt(a * a + c * c)\n\
    \        val side16 = math.sqrt(b * b + d * d)\n        val side17 = math.sqrt(a\
    \ * a + c * c)\n        val side18 = math.sqrt(b * b + d * d)\n        val side19\
    \ = math.sqrt(a * a + c * c)\n        val side20 = math.sqrt(b * b + d * d)\n\
    \        val side21 = math.sqrt(a * a + c * c)\n        val side22 = math.sqrt(b\
    \ * b + d * d)\n        val side23 = math.sqrt(a * a + c * c)\n        val side24\
    \ = math.sqrt(b * b + d * d)\n        val side25 = math.sqrt(a * a + c * c)\n\
    \        val side26 = math.sqrt(b * b + d * d)\n        val side27 = math.sqrt(a\
    \ * a + c * c)\n        val side28 = math.sqrt(b * b + d * d)\n        val side29\
    \ = math.sqrt(a * a + c * c)\n        val side30 = math.sqrt(b * b + d * d)\n\
    \        val side31 = math.sqrt(a * a + c * c)\n        val side32 = math.sqrt(b\
    \ * b + d * d)\n        val side33 = math.sqrt(a * a + c * c)\n        val side34\
    \ = math.sqrt(b * b + d * d)\n        val side35 = math.sqrt(a * a + c * c)\n\
    \        val side36 = math.sqrt(b * b + d * d)\n        val side37 = math.sqrt(a\
    \ * a + c * c)\n        val side38 = math.sqrt(b * b + d * d)\n        val side39\
    \ = math.sqrt(a * a + c * c)\n        val side40 = math.sqrt(b * b + d * d)\n\
    \        val side41 = math.sqrt(a * a + c * c)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mside6\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mside8\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:25:39 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mside10\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeszci5lp.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660010174
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = (ab + bc) / (2 * a)\n        val t = (ac + ab) / (2 * a)\n        if (s\
    \ > t) s else t\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa56_q44c.scala:23)\n\tat Problem.main(tmpa56_q44c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c10 + a10\n        val a12 = a11 +\
    \ b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val a13\
    \ = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n    \
    \    val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13 +\
    \ a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val c15\
    \ = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n    \
    \    val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16 +\
    \ c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val b18\
    \ = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n    \
    \    val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19 +\
    \ b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpojspx0f3.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 - c1\n            val b2\
    \ = b1 - a1\n            val c2 = c1 - b1\n            val area = a2 * b2 + a2\
    \ * c2 + b2 * c2\n            area.toFloat\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghdau6gt.scala:30)\n\tat Problem.main(tmpghdau6gt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        if (side1 + side2 > side3 && side1 + side4\
    \ > side3) {\n            area\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr7h2kle.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcr7h2kle.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0f2s1s6k.scala:36)\n\tat Problem.main(tmp0f2s1s6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + b1\n        val b3\
    \ = b1 + c1\n        val c3 = c1 + a1\n        val a4 = a1 + b1\n        val b4\
    \ = b1 + c1\n        val c4 = c1 + a1\n        val a5 = a1 + b1\n        val b5\
    \ = b1 + c1\n        val c5 = c1 + a1\n        val a6 = a1 + b1\n        val b6\
    \ = b1 + c1\n        val c6 = c1 + a1\n        val a7 = a1 + b1\n        val b7\
    \ = b1 + c1\n        val c7 = c1 + a1\n        val a8 = a1 + b1\n        val b8\
    \ = b1 + c1\n        val c8 = c1 + a1\n        val a9 = a1 + b1\n        val b9\
    \ = b1 + c1\n        val c9 = c1 + a1\n        val a10 = a1 + b1\n        val\
    \ b10 = b1 + c1\n        val c10 = c1 + a1\n        val a11 = a1 + b1\n      \
    \  val b11 = b1 + c1\n        val c11 = c1 + a1\n        val a12 = a1 + b1\n \
    \       val b12 = b1 + c1\n        val c12 = c1 + a1\n        val a13 = a1 + b1\n\
    \        val b13 = b1 + c1\n        val c13 = c1 + a1\n        val a14 = a1 +\
    \ b1\n        val b14 = b1 + c1\n        val c14 = c1 + a1\n        val a15 =\
    \ a1 + b1\n        val b15 = b1 + c1\n        val c15 = c1 + a1\n        val a16\
    \ = a1 + b1\n        val b16 = b1 + c1\n        val c16 = c1 + a1\n        val\
    \ a17 = a1 + b1\n        val b17 = b1 + c1\n        val c17 = c1 + a1\n      \
    \  val a18 = a1 + b1\n        val b18 = b1 + c1\n        val c18 = c1 + a1\n \
    \       val a19 = a1 + b1\n        val b19 = b1 + c1\n        val c19 = c1 + a1\n\
    \        val a20 = a1 + b1\n        val b20 = b1 + c1\n        val c20 = c1 +\
    \ a1\n        val a21 = a1 + b1\n        val b21 = b1 + c1\n        val c21 =\
    \ c1 + a1\n        val a22 = a1 + b1\n        val b22 = b1 + c1\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkcltw62.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if (isValid) {\n     \
    \       val side1 = math.sqrt(a * a + b * b)\n            val side2 = math.sqrt(c\
    \ * c + d * d)\n            val side3 = math.sqrt(a * a + c * c)\n           \
    \ val side4 = math.sqrt(b * b + d * d)\n            val area1 = side1 * side2\n\
    \            val area2 = side3 * side4\n            val area3 = side1 * side3\n\
    \            val area4 = side2 * side4\n            val area5 = side1 * side4\n\
    \            val area6 = side2 * side3\n            val area7 = side3 * side1\n\
    \            val area8 = side4 * side2\n            val area9 = side3 * side2\n\
    \            val area10 = side4 * side1\n            val area11 = side1 * side3\n\
    \            val area12 = side2 * side4\n            val area13 = side1 * side4\n\
    \            val area14 = side2 * side3\n            val area15 = side3 * side1\n\
    \            val area16 = side4 * side2\n            val area17 = side3 * side2\n\
    \            val area18 = side4 * side1\n            val area19 = side1 * side4\n\
    \            val area20 = side2 * side3\n            val area21 = side1 * side3\n\
    \            val area22 = side2 * side4\n            val area23 = side3 * side1\n\
    \            val area24 = side4 * side2\n            val area25 = side3 * side2\n\
    \            val area26 = side4 * side1\n            val area27 = side1 * side4\n\
    \            val area28 = side2 * side3\n            val area29 = side1 * side3\n\
    \            val area30 = side2 * side4\n            val area31 = side3 * side1\n\
    \            val area32 = side4 * side2\n            val area33 = side3 * side2\n\
    \            val area34 = side4 * side1\n            val area35 = side1 * side4\n\
    \            val area36 = side2 * side3\n            val area37 = side1 * side3\n\
    \            val area38 = side2 * side4\n            val area39 = side3 * side1\n\
    \            val area40 = side4 * side2\n            val area41 = side3 * side2\n\
    \            val area42 = side4 * side1\n            val area43 = side1 * side4\n\
    \            val area44 = side2 * side3\n            val area45 = side1 * side3\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzu4lv_9k.scala:82:0 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzu4lv_9k.scala:19:42\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mside2\e[0m = math.sqrt(c * c + d * d)\n\e[31m\e[31m   |\e[0m         \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                      Not found: d\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpzu4lv_9k.scala:21:42 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b * b + d * d)\n\e\
    [31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                          Not found: d\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzu4lv_9k.scala:81:1 ---------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmpzu4lv_9k.scala:69:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m69 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        val a9 = a8 + b8\n        val b9\
    \ = b8 + c8\n        val c9 = c8 + a8\n        val a10 = a9 + b9\n        val\
    \ b10 = b9 + c9\n        val c10 = c9 + a9\n        val a11 = a10 + b10\n    \
    \    val b11 = b10 + c10\n        val c11 = c110 + a10\n        val a12 = a11\
    \ + b11\n        val b12 = b11 + c11\n        val c12 = c11 + a11\n        val\
    \ a13 = a12 + b12\n        val b13 = b12 + c12\n        val c13 = c12 + a12\n\
    \        val a14 = a13 + b13\n        val b14 = b13 + c13\n        val c14 = c13\
    \ + a13\n        val a15 = a14 + b14\n        val b15 = b14 + c14\n        val\
    \ c15 = c14 + a14\n        val a16 = a15 + b15\n        val b16 = b15 + c15\n\
    \        val c16 = c15 + a15\n        val a17 = a16 + b16\n        val b17 = b16\
    \ + c16\n        val c17 = c16 + a16\n        val a18 = a17 + b17\n        val\
    \ b18 = b17 + c17\n        val c18 = c17 + a17\n        val a19 = a18 + b18\n\
    \        val b19 = b18 + c18\n        val c19 = c18 + a18\n        val a20 = a19\
    \ + b19\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yvm5ekn.scala:47:18 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mc11\e[0m = c110 + a10\n\e\
    [31m\e[31m   |\e[0m                  ^^^^\e[0m\n\e[31m   |\e[0m              \
    \    Not found: c110\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_yvm5ekn.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = a + b\n        val\
    \ bc = b + c\n        val ac = a + c\n        if (ab > bc && ab > ac) {\n    \
    \        val a1 = a / ab\n            val b1 = b / ab\n            val c1 = c\
    \ / ab\n            val a2 = a * b\n            val b2 = b * b\n            val\
    \ c2 = c * b\n            val a3 = a * c\n            val b3 = b * c\n       \
    \     val c3 = c * c\n            (a1 + a2 + a3) / ab\n        } else if (bc >\
    \ ab && bc > ac) {\n            val a1 = a / bc\n            val b1 = b / bc\n\
    \            val c1 = c / bc\n            val a2 = a * b\n            val b2 =\
    \ b * b\n            val c2 = c * b\n            val a3 = a * c\n            val\
    \ b3 = b * c\n            val c3 = c * c\n            (a1 + a2 + a3) / bc\n  \
    \      } else if (ac > ab && ac > bc) {\n            val a1 = a / ac\n       \
    \     val b1 = b / ac\n            val c1 = c / ac\n            val a2 = a * b\n\
    \            val b2 = b * b\n            val c2 = c * b\n            val a3 =\
    \ a * c\n            val b3 = b * c\n            val c3 = c * c\n            (a1\
    \ + a2 + a3) / ac\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5rpxrqq.scala:56)\n\tat Problem.main(tmpd5rpxrqq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val a3 = a1 + b2\n        val b2\
    \ = b1 + c\n        val c1 = a1 + b2\n        val c2 = b1 + c2\n        val c3\
    \ = b2 + c\n        val a4 = a2 + c3\n        val b3 = b2 + c1\n        val c4\
    \ = b2 + c3\n        val c5 = b3 + c4\n        val a5 = a3 + c4\n        val b4\
    \ = b3 + c5\n        val c6 = b3 + c4\n        val c7 = c3 + c5\n        val a6\
    \ = a3 + c6\n        val b5 = b3 + c7\n        val c8 = c3 + c6\n        val c9\
    \ = c3 + c7\n        val a10 = a3 + c8\n        val b6 = b3 + c9\n        val\
    \ c10 = c3 + c8\n        val c11 = c3 + c9\n        val a12 = a3 + c10\n     \
    \   val b7 = b3 + c11\n        val c12 = b3 + c10\n        val c13 = b4 + c11\n\
    \        val a13 = a4 + c12\n        val b8 = b4 + c13\n        val c14 = b4 +\
    \ c12\n        val c15 = b5 + c13\n        val a14 = a5 + c14\n        val b9\
    \ = b5 + c15\n        val c16 = b5 + c14\n        val c17 = c6 + c15\n       \
    \ val a15 = a6 + c16\n        val b10 = b6 + c17\n        val c18 = c6 + c16\n\
    \        val c19 = c7 + c17\n        val a16 = a6 + c18\n        val b11 = b6\
    \ + c19\n        val c20 = c6 + c18\n        val c21 = c7 + c19\n        val a17\
    \ = a6 + c20\n        val b12 = b7 + c21\n        val c22 = c7 + c20\n       \
    \ val c23 = c8 + c21\n        val a18 = a7 + c22\n        val b13 = b7 + c23\n\
    \        val c24 = c7 + c22\n        val c25 = c8 + c23\n        val a19 = a7\
    \ + c24\n        val b14 = b8 + c25\n        val c26 = c8 + c24\n        val c27\
    \ = c9 + c25\n        val a20 = a8 + c26\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpzdyfn2rl.scala:72:11 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzdyfn2rl.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mc2\e[0m = b1 + c2\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Recursive \e[33mvalue\e[0m \e[35mc2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzdyfn2rl.scala:63:18 ------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m        \e[33mval\e[0m \e[36ma18\e[0m = a7 + c22\n\e\
    [31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                \
    \  Not found: a7\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdyfn2rl.scala:67:18\
    \ ------------------------\e[0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e\
    [36ma19\e[0m = a7 + c24\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: a7\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpzdyfn2rl.scala:71:18 ------------------------\e[0m\e\
    [0m\n\e[31m71 |\e[0m        \e[33mval\e[0m \e[36ma20\e[0m = a8 + c26\n\e[31m\e\
    [31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ a8\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzdyfn2rl.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a * b + c) / 2\n\
    \        val area2 = (a * a + b * b + c * c) / 2\n        val area3 = (a * a *\
    \ a * b * b + c * c * c) / 6\n        val area4 = (a * a * a * b * b * c + c *\
    \ c * c * c) / 24\n        val area5 = (a * a * a * b * b * c * c + c * c * c\
    \ * c * c) / 120\n        val area6 = (a * a * a * b * b * c * c * c + c * c *\
    \ c * c * c * c) / 720\n        val area7 = (a * a * a * b * b * c * c * c * c\
    \ + c * c * c * c * c * c * c) / 5040\n        val area8 = (a * a * a * b * b\
    \ * c * c * c * c * c + c * c * c * c * c * c * c * c) / 40320\n        val area9\
    \ = (a * a * a * b * b * c * c * c * c * c * c + c * c * c * c * c * c * c * c\
    \ * c) / 362880\n        val area10 = (a * a * a * b * b * c * c * c * c * c *\
    \ c + c * c * c * c * c * c * c * c * c) / 2675808\n        val area11 = (a *\
    \ a * a * b * b * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c) /\
    \ 251658240\n        val area12 = (a * a * a * b * b * c * c * c * c * c * c +\
    \ c * c * c * c * c * c * c * c * c) / 2305843008\n        val area13 = (a * a\
    \ * a * b * b * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c) / 20910228400\n\
    \        val area14 = (a * a * a * b * b * c * c * c * c * c * c * c + c * c *\
    \ c * c * c * c * c * c * c) / 19721720800\n        val area15 = (a * a * a *\
    \ b * b * c * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c * c) /\
    \ 18358557600\n        val area16 = (a * a * a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp2aaured.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpp2aaured.scala:26:103\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e\
    [33mval\e[0m \e[36marea12\e[0m = (a * a * a * b * b * c * c * c * c * c * c +\
    \ c * c * c * c * c * c * c * c * c) / \e[31m2305843008\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                         number too large\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpp2aaured.scala:27:103 ----------------------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36marea13\e[0m = (a * a * a * b\
    \ * b * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c) / \e[31m20910228400\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                    ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmpp2aaured.scala:28:107 ----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36marea14\e[0m = (a * a * a\
    \ * b * b * c * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c) / \e\
    [31m19721720800\e[0m\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                         ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpp2aaured.scala:29:111 ----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36marea15\e[0m = (a * a * a\
    \ * b * b * c * c * c * c * c * c * c + c * c * c * c * c * c * c * c * c * c)\
    \ / \e[31m18358557600\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = (a * b + c) >= a\n        val isValid2 = (a * a + b * b\
    \ + c * c) >= a\n        val isValid3 = (a * b + c * c) >= a\n        val isValid4\
    \ = (a * a + b * b + c * c) >= a\n        val isValid5 = (a * b + c * c) >= a\n\
    \        val isValid6 = (a * a + b * b + c * c) >= a\n        val isValid7 = (a\
    \ * b + c * c) >= a\n        val isValid8 = (a * a + b * b + c * c) >= a\n   \
    \     val isValid9 = (a * b + c * c) >= a\n        val isValid10 = (a * a + b\
    \ * b + c * c) >= a\n        val isValid11 = (a * b + c * c) >= a\n        val\
    \ isValid12 = (a * a + b * b + c * c) >= a\n        val isValid13 = (a * b + c\
    \ * c) >= a\n        val isValid14 = (a * a + b * b + c * c) >= a\n        val\
    \ isValid15 = (a * b + c * c) >= a\n        val isValid16 = (a * a + b * b + c\
    \ * c) >= a\n        val isValid17 = (a * b + c * c) >= a\n        val isValid18\
    \ = (a * a + b * b + c * c) >= a\n        val isValid19 = (a * b + c * c) >= a\n\
    \        val isValid20 = (a * a + b * b + c * c) >= a\n        val isValid21 =\
    \ (a * b + c * c) >= a\n        val isValid22 = (a * a + b * b + c * c) >= a\n\
    \        val isValid23 = (a * b + c * c) >= a\n        val isValid24 = (a * a\
    \ + b * b + c * c) >= a\n        val isValid25 = (a * b + c * c) >= a\n      \
    \  val isValid26 = (a * a + b * b + c * c) >= a\n        val isValid27 = (a *\
    \ b + c * c) >= a\n        val isValid28 = (a * a + b * b + c * c) >= a\n    \
    \    val isValid29 = (a * b + c * c) >= a\n        val isValid30 = (a * a + b\
    \ * b + c * c) >= a\n        val isValid31 = (a * b + c * c) >= a\n        val\
    \ isValid32 = (a * a + b * b + c * c) >= a\n        val isValid33 = (a * b + c\
    \ * c) >= a\n        val isValid34 = (a * a + b * b + c * c) >= a\n        val\
    \ isValid35 = (a * b + c * c) >= a\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9irnzm7b.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val bc = math.abs(c - b)\n        val ac = math.abs(c - a)\n        val\
    \ s = ab + bc + ac\n        if (s > 0) {\n            val area = math.sqrt(s *\
    \ (s - ab) * (s - bc) * (s - ac))\n            area\n        } else {\n      \
    \      -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpppxhm6rv.scala:21:12\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = Math.abs(a)\n     \
    \   val b = Math.abs(b)\n        val c = Math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = s * (s - a) * (s - b) * (s -\
    \ c)\n            area / Math.pow(a+b+c, 1/3)\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpumobj4w1.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpumobj4w1.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpumobj4w1.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a * b * c) / 2.0\n\
    \        val rounded = math.round(area * 100) / 100.0\n        if (rounded ==\
    \ area) rounded else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy8c87agg.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (rounded\
    \ == area) rounded \e[33melse\e[0m -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \     Found:    (rounded : Double)\n\e[31m   |\e[0m                          \
    \   Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val d = math.sqrt((a + b) * (b + c)\
    \ * (c + a))\n            val area = d * (b - c) * (a + c)\n            (area\
    \ / sum).round(2)\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) ==\
    \ (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt0nq8kqn.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt0nq8kqn.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt0nq8kqn.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = math.sqrt(sum * a * a + sum * b * b\
    \ + sum * c * c)\n            (area.toDouble * 2).toFloat\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfg6pvxq5.scala:24)\n\tat Problem.main(tmpfg6pvxq5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val side1 = math.sqrt(a * a\
    \ + b * b)\n        val side2 = math.sqrt(c * c + d * d)\n        val side3 =\
    \ math.sqrt(a * a + c * c)\n        val side4 = math.sqrt(b * b + d * d)\n   \
    \     val area = (side1 + side2 + side3) / 2.0\n        val rounded = area.toString.replaceAll(\"\
    \\\\.\\\\d+$\", \"\")\n        if (rounded == side1.toString + side2.toString\
    \ + side3.toString) {\n            area\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpupz0duqc.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpupz0duqc.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpupz0duqc.scala:22:12 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        (a1 + b1 + c1) *\
    \ (a2 + b2 + c2) * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6\
    \ + c6) * (a7 + b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpmdjmnupy.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        val a8 = a7 + b7\n        val b8\
    \ = b7 + c7\n        val c8 = c7 + a7\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 + a6 + b6 + c6 +\n            a7\
    \ + b7 + c7 + a8 + b8 + c8)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2bnb8jn.scala:43)\n\tat Problem.main(tmpn2bnb8jn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + c1\n        val b3\
    \ = b1 + a2\n        val c3 = c1 + b1\n        val a4 = a2 + b2\n        val b4\
    \ = b2 + c3\n        val c4 = c2 + b2\n        val a5 = a2 + c3\n        val b5\
    \ = b2 + a4\n        val c5 = c2 + b3\n        val a6 = a3 + b4\n        val b6\
    \ = b3 + c5\n        val c6 = c3 + b4\n        val a7 = a3 + c5\n        val b7\
    \ = b3 + a6\n        val c7 = c3 + b5\n        val a8 = a4 + b6\n        val b8\
    \ = b4 + c7\n        val c8 = c4 + b6\n        val a9 = a4 + c7\n        val b9\
    \ = b4 + a8\n        val c9 = c4 + b5\n        val a10 = a5 + b6\n        val\
    \ b10 = b5 + c7\n        val c10 = c5 + b6\n        val a11 = a5 + c7\n      \
    \  val b11 = b5 + a8\n        val c11 = c5 + b5\n        val a12 = a6 + b6\n \
    \       val b12 = b6 + c7\n        val c12 = c6 + b6\n        val a13 = a6 + c7\n\
    \        val b13 = b6 + a8\n        val c13 = c6 + b5\n        val a14 = a7 +\
    \ b6\n        val b14 = b7 + c7\n        val c14 = c7 + b6\n        val a15 =\
    \ a7 + c7\n        val b15 = b7 + a8\n        val c15 = c7 + b5\n        val a16\
    \ = a8 + b6\n        val b16 = b8 + c7\n        val c16 = c8 + b6\n        val\
    \ a17 = a8 + c7\n        val b17 = b8 + a8\n        val c17 = c8 + b5\n      \
    \  val a18 = a9 + b6\n        val b18 = b9 + c7\n        val c18 = c9 + b6\n \
    \       val a19 = a9 + c7\n        val b19 = b9 + a8\n        val c19 = c9 + b5\n\
    \        val a20 = a10 + b6\n        val b20 = b10 + c7\n        val c20 = c10\
    \ + b6\n        val a21 = a10\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptuoafi0z.scala:76:5\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val area = (a * b) / c\n            (area.toString.toDouble * 100).round\n\
    \        } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bujj23x.scala:23)\n\tat Problem.main(tmp4bujj23x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val area1 = (d1 * d2) / 2.0\n        area1.toFloat\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4oizao2t.scala:27)\n\tat Problem.main(tmp4oizao2t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val sum = a1 + b1 +\
    \ c1\n        if (sum > 0) {\n            val a2 = a1 + b1 - c1\n            val\
    \ b2 = b1 + c1 - a1\n            val c2 = c1 + a1 - b1\n            val a3 = a2\
    \ + b2 - c2\n            val b3 = b2 + c2 - a2\n            val c3 = c2 + a2 -\
    \ b2\n            val a4 = a3 + b3 - c3\n            val b4 = b3 + c3 - a3\n \
    \           val c4 = c3 + a3 - b3\n            val a5 = a4 + b4 - c4\n       \
    \     val b5 = b4 + c4 - a4\n            val c5 = c4 + a4 - b4\n            val\
    \ a6 = a5 + b5 - c5\n            val b6 = b5 + c5 - a5\n            val c6 = c5\
    \ + a5 - b5\n            val a7 = a6 + b6 - c6\n            val b7 = b6 + c6 -\
    \ a6\n            val c7 = c6 + a6 - b6\n            val a8 = a7 + b7 - c7\n \
    \           val b8 = b7 + c7 - a7\n            val c8 = c7 + a7 - b7\n       \
    \     val a9 = a8 + b8 - c8\n            val b9 = b8 + c8 - a8\n            val\
    \ c9 = c8 + a8 - b8\n            val a10 = a9 + b9 - c9\n            val b10 =\
    \ b9 + c9 - a9\n            val c10 = c9 + a9 - b9\n            (a10.toFloat *\
    \ a10.toFloat + b10.toFloat * b10.toFloat + c10.toFloat * c10.toFloat)\n     \
    \   } else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprynov4yc.scala:53)\n\tat Problem.main(tmprynov4yc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = (a + b) - c\n            val e = Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2))\n            val f = Math.sqrt(Math.pow(c, 2) + Math.pow(d, 2))\n      \
    \      val area = f / e\n            area\n        } else {\n            -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzgs7qdr6.scala:20:12\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            area\n\e[31m\e[31m\
    \   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            Found:    (area :\
    \ Double)\n\e[31m   |\e[0m            Required: Float\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val\
    \ b4 = b4 + c3\n        val c4 = c4 + a4 \n        (a1 + b1 + c1 + a2 + b2 + c2\
    \ + a3 + b3 + c3 + a4 + b4 + c4) / 6.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpznoo_xs5.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpznoo_xs5.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n\
    \        val b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n\
    \        val b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n\
    \        val b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n\
    \        val b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n\
    \        val b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n\
    \        val b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10\
    \ + b10\n        val b11 = b11 + c10\n        val c11 = c11 + a11\n        val\
    \ a12 = a11 + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n\
    \        val a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13\
    \ + a13\n        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val\
    \ c14 = c14 + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n\
    \        val c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16\
    \ + c15\n        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val\
    \ b17 = b17 + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n\
    \        val b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18\
    \ + b18\n        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val\
    \ a20 = a19 + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp91buk516.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp91buk516.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b1 + c1 + a2 + b2 + c2 +\
    \ a3 + b3 + c3 + a4 + b4 + c4 + a5 + b5 + c5 +\n            a6 + b6 + c6)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2bkshxq.scala:37)\n\tat Problem.main(tmpb2bkshxq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val a = math.abs(a - b)\n         \
    \   val b = math.abs(b - c)\n            val c = math.abs(c - sum)\n         \
    \   val area = math.pow(a, 2) * math.pow(b, 2) * math.pow(c, 2)\n            val\
    \ rounded = math.round(area * 100) / 100\n            rounded\n        } else\
    \ {\n            -1\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps3jh97te.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps3jh97te.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps3jh97te.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps3jh97te.scala:20:29 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36ma\e[0m = math.abs(a\
    \ - b)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e\
    [0m                             Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps3jh97te.scala:21:29\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mb\e[0m = math.abs(b - c)\n\e[31m\e[31m   |\e[0m                    \
    \         ^\e[0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e\
    [0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps3jh97te.scala:22:29 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    "
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = Math.sqrt(a * a)\n\
    \        val b = Math.sqrt(b * b)\n        val c = Math.sqrt(c * c)\n        val\
    \ s = (a + b + c) / 2\n        if (s > a) -1\n        else if (s > b) -1\n   \
    \     else if (s > c) -1\n        else (s * s) / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk61l6zvq.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk61l6zvq.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk61l6zvq.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk61l6zvq.scala:22:13 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m (s * s) / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    Double\n\e[31m   |\e[0m             Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a+b+c\n\
    \        if (sum > c) {\n            val d = math.sqrt((b*b) - (4*a*c))\n    \
    \        val area = math.round(d*100)/100\n            return area\n        }\n\
    \        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcey3sxgr.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcey3sxgr.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcey3sxgr.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val s = a + b +\
    \ c\n        if (s > 0) {\n            val area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n            area\n        } else {\n            -1\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy7is1mge.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy7is1mge.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy7is1mge.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy7is1mge.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m   \
    \         Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a1 + c1\n        val b3\
    \ = b1 + a2\n        val c3 = c1 + b1\n        val a4 = a2 + b2\n        val b4\
    \ = b2 + c3\n        val c4 = c2 + b2\n        val a5 = a2 + c3\n        val b5\
    \ = b2 + a4\n        val c5 = c2 + b3\n        val a6 = a3 + b4\n        val b6\
    \ = b3 + c5\n        val c6 = c3 + b4\n        val a7 = a3 + c5\n        val b7\
    \ = b3 + a6\n        val c7 = c3 + b5\n        val a8 = a4 + b6\n        val b8\
    \ = b4 + c7\n        val c8 = c4 + b6\n        val a9 = a4 + c7\n        val b9\
    \ = b4 + a8\n        val c9 = c4 + b5\n        val a10 = a5 + b6\n        val\
    \ b10 = b5 + c7\n        val c10 = c5 + b6\n        val a11 = a5 + c7\n      \
    \  val b11 = b5 + a8\n        val c11 = c5 + b5\n        val a12 = a6 + b6\n \
    \       val b12 = b6 + c7\n        val c12 = c6 + b6\n        val a13 = a6 + c7\n\
    \        val b13 = b6 + a8\n        val c13 = c6 + b5\n        val a14 = a7 +\
    \ b7\n        val b14 = b7 + c8\n        val c14 = c7 + b7\n        val a15 =\
    \ a7 + c8\n        val b15 = b7 + a9\n        val c15 = c7 + b5\n        val a16\
    \ = a8 + b8\n        val b16 = b8 + c9\n        val c16 = c8 + b8\n        val\
    \ a17 = a8 + c9\n        val b17 = b8 + a10\n        val c17 = c8 + b5\n     \
    \   val a18 = a9 + b9\n        val b18 = b9 + c10\n        val c18 = c9 + b9\n\
    \        val a19 = a9 + c10\n        val b19 = b9 + a11\n        val c19 = c9\
    \ + b5\n        val a20 = a10 + b10\n        val b20 = b10 + c11\n        val\
    \ c20 = c10 + b10\n        \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfccjd5ee.scala:76:5\
    \ ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if(isValid) {\n      \
    \      val isValidSides = a > 0 && b > 0 && c > 0\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValidArea\
    \ = area > 0 && area > a\n            val isValidArea = area > 0 && area > a\n\
    \            val isValidArea = area > 0 && area > a\n            val isValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l),\
    \ (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n   \
    \ assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpddma_pf_.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpddma_pf_.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpddma_pf_.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36misValidArea\e[0m = area > \e[31m0\e\
    [0m && area > a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misValidArea is already defined as \e[33mvalue\e[0m \e[35misValidArea\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpddma_pf_.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36misValidArea\e[0m = area > \e[31m0\e\
    [0m && area > a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misValidArea is already defined as \e[33mvalue\e[0m \e[35misValidArea\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpddma_pf_.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36misValidArea\e[0m = area > \e[31m0\e\
    [0m && area > a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misValidArea is already defined as \e[33mvalue\e[0m \e[35misValidArea\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpddma_pf_.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36misValidArea\e[0m = area > \e[31m0\e\
    [0m && area > a\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misValidArea"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(b - a)\n\
    \        val ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val\
    \ abc = math.abs(ab + ac)\n        val bcd = math.abs(bc + ab)\n        val abdc\
    \ = math.abs(ab + bc)\n        val bcda = math.abs(bc + ab)\n        val abdca\
    \ = math.abs(ab + bc)\n        val bcdaa = math.abs(bc + ab)\n        val abdcab\
    \ = math.abs(ab + bc)\n        val bcdaab = math.abs(bc + ab)\n        val abdcabc\
    \ = math.abs(ab + bc)\n        val bcdaabc = math.abs(bc + ab)\n        val abdcabcd\
    \ = math.abs(ab + bc)\n        val bcdaabcd = math.abs(bc + ab)\n        val abdcabcdab\
    \ = math.abs(ab + bc)\n        val bcdaabcdab = math.abs(bc + ab)\n        val\
    \ abdcabcdabc = math.abs(ab + bc)\n        val bcdaabcdabc = math.abs(bc + ab)\n\
    \        val abdcabcdabcd = math.abs(ab + bc)\n        val bcdaabcdabcd = math.abs(bc\
    \ + ab)\n        val abdcabcdabcdab = math.abs(ab + bc)\n        val bcdaabcdabcdab\
    \ = math.abs(bc + ab)\n        val abdcabcdabcdabc = math.abs(ab + bc)\n     \
    \   val bcdaabcdabcdabc = math.abs(bc + ab)\n        val abdcabcdabcdabcd = math.abs(ab\
    \ + bc)\n        val bcdaabcdabcdabcd = math.abs(bc + ab)\n        val abdcabcdabcdabcdab\
    \ = math.abs(ab + bc)\n        val bcdaabcdabcdabcdab = math.abs(bc + ab)\n  \
    \      val abdcabcdabcdabcdabc = math.abs(ab + bc)\n        val bcdaabcdabcdabcdabc\
    \ = math.abs(bc + ab)\n        val abdcabcdabcdabcdabcdab = math.abs(ab + bc)\n\
    \        val bcdaabcdabcdabcdabcdab = math.abs(bc + ab)\n        val abdcabcdabcdabcdabcdabc\
    \ = math.abs(ab + bc)\n        val bcdaabcdabcdabcdabcdab = math.abs(bc + ab)\n\
    \        val abdcabcdabcdabcdabcdabc = math.abs(ab + bc)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeemkpv5i.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mbcdaabcdabcdabcdabcdab\e\
    [0m = math.abs(bc + ab)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbcdaabcdabcdabcdabcdab is already defined as \e[33mvalue\e\
    [0m \e[35mbcdaabcdabcdabcdabcdab\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeemkpv5i.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mabdcabcdabcdabcdabcdabc\e\
    [0m = math.abs(ab + bc)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mabdcabcdabcdabcdabcdabc is already defined as \e[33mvalue\e\
    [0m \e[35mabdcabcdabcdabcdabcdabc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeemkpv5i.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c3\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val b5\
    \ = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a5 + b5\n        val b6\
    \ = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val b7\
    \ = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val b8\
    \ = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val b9\
    \ = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpdrs5dj_r.scala:32:17 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mc6\e[0m = c6 + a6\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val ab = math.abs(a-b)\n  \
    \      val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        val sum\
    \ = ab + ac + bc\n        if (sum > 0) {\n            val area = math.sqrt((ab*ab\
    \ + ac*ac + bc*bc))\n            (area / sum).toFloat\n        } else {\n    \
    \        -1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppako3eg9.scala:27)\n\tat Problem.main(tmppako3eg9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = Math.sqrt(a * a)\n\
    \        val b = Math.sqrt(b * b)\n        val c = Math.sqrt(c * c)\n        val\
    \ s = (a + b + c) / 2\n        if (s > 0) {\n            val area = s * (s - a)\
    \ * (s - b) * (s - c)\n            (area / Math.PI).toFloat\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsrnhoa7v.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = Math.sqrt(a * a)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsrnhoa7v.scala:16:26 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = Math.sqrt(b * b)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsrnhoa7v.scala:17:26 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = Math.sqrt(c * c)\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2.0\n        val\
    \ b1 = b / 2.0\n        val c1 = c / 2.0\n        val a2 = a1 + b1\n        val\
    \ b2 = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val\
    \ b3 = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val\
    \ b4 = b4 + c3\n        val c4 = c4 + a4\n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5\n        val a6 = a6 + b5\n        val\
    \ b6 = b6 + c5\n        val c6 = c6 + a6\n        val a7 = a6 + b6\n        val\
    \ b7 = b7 + c6\n        val c7 = c7 + a7\n        val a8 = a7 + b7\n        val\
    \ b8 = b8 + c7\n        val c8 = c8 + a8\n        val a9 = a8 + b8\n        val\
    \ b9 = b9 + c8\n        val c9 = c9 + a9\n        val a10 = a9 + b9\n        val\
    \ b10 = b10 + c9\n        val c10 = c10 + a10\n        val a11 = a10 + b10\n \
    \       val b11 = b11 + c10\n        val c11 = c11 + a11\n        val a12 = a11\
    \ + b11\n        val b12 = b12 + c11\n        val c12 = c12 + a12\n        val\
    \ a13 = a12 + b12\n        val b13 = b13 + c12\n        val c13 = c13 + a13\n\
    \        val a14 = a13 + b13\n        val b14 = b14 + c13\n        val c14 = c14\
    \ + a14\n        val a15 = a14 + b14\n        val b15 = b15 + c14\n        val\
    \ c15 = c15 + a15\n        val a16 = a15 + b15\n        val b16 = b16 + c15\n\
    \        val c16 = c16 + a16\n        val a17 = a16 + b16\n        val b17 = b17\
    \ + c16\n        val c17 = c17 + a17\n        val a18 = a17 + b17\n        val\
    \ b18 = b18 + c17\n        val c18 = c18 + a18\n        val a19 = a18 + b18\n\
    \        val b19 = b19 + c18\n        val c19 = c19 + a19\n        val a20 = a19\
    \ + b\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:29:17 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c5 + a5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:30:17 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36ma6\e[0m = a6 + b5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35ma6\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpzwuxbwkt.scala:31:17 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mb6\e[0m = b6 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e["
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b2 + b2\n        val c3 = c2 + c2\n        val a4 = a1 + a3\n        val b4\
    \ = b2 + b3\n        val c4 = c2 + c4\n        val a5 = a1 + b4\n        val b5\
    \ = b2 + b5\n        val c5 = c2 + c5\n        val a6 = a1 + b5\n        val b6\
    \ = b2 + b6\n        val c6 = c2 + c6\n        val a7 = a1 + b6\n        val b7\
    \ = b2 + b7\n        val c7 = c2 + c7\n        val a8 = a1 + b7\n        val b8\
    \ = b2 + b8\n        val c8 = c2 + c8\n        val a9 = a1 + b8\n        val b9\
    \ = b2 + b9\n        val c9 = c2 + c9\n        val a10 = a1 + b9\n        val\
    \ b10 = b2 + b10\n        val c10 = c2 + c10\n        val a11 = a1 + b10\n   \
    \     val b11 = b2 + b11\n        val c11 = c2 + c11\n        val a12 = a1 + b11\n\
    \        val b12 = b2 + b12\n        val c12 = c2 + c12\n        val a13 = a1\
    \ + b12\n        val b13 = b2 + b13\n        val c13 = c2 + c13\n        val a14\
    \ = a1 + b13\n        val b14 = b2 + b14\n        val c14 = c2 + c14\n       \
    \ val a15 = a1 + b14\n        val b15 = b2 + b15\n        val c15 = c2 + c15\n\
    \        val a16 = a1 + b15\n        val b16 = b2 + b16\n        val c16 = c2\
    \ + c16\n        val a17 = a1 + b16\n        val b17 = b2 + b17\n        val c17\
    \ = c2 + c17\n        val a18 = a1 + b17\n        val b18 = b2 + b18\n       \
    \ val c18 = c2 + c18\n        val a19 = a1 + b18\n        val b19 = b2 + b19\n\
    \        val c19 = c2 + c19\n        val a20 = a1 + b19\n        val b20 = b2\
    \ + b20\n        val c20 = c2 + c20\n        val a21 = a1 + b20\n        val b21\
    \ = b2 + b21\n        val c21 = c2 + c21\n        val a22 = a1 + b\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvcjjrlu.scala:20:17 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mc3\e[0m = c2 + c2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvcjjrlu.scala:23:17\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mc4\e[0m = c2 + c4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmppvcjjrlu.scala:25:22 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b2 + b5\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppvcjjrlu.scala:26:17 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc5\e[0m = c2 + c5\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppvcjjrlu.scala:28:22\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mb6\e[0m = b2 + b6\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      Recursive \e[33mvalue\e[0m \e[35mb6\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppvcjjrlu.scala:29:17\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mc6\e[0m = c2 + c6\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: c2\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val area = a / (a + b + c)\n            area.toString.toDouble\n        }\
    \ else {\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ziy96yb.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            area.toString.toDouble\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Double\n\e[31m   |\e[0m            Required: Float\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a3\n        val a4 = a3 + b3\n        val b4\
    \ = b4 + c3\n        val c4 = c4 + a4 \n        val a5 = a4 + b4\n        val\
    \ b5 = b5 + c4\n        val c5 = c5 + a5 \n        val a6 = a5 + b5\n        val\
    \ b6 = b6 + c5 \n        val c6 = c6 + a6 \n        val a7 = a6 + b6\n       \
    \ val b7 = b7 + c6 \n        val c7 = c7 + a7 \n        val a8 = a7 + b7\n   \
    \     val b8 = b8 + c7 \n        val c8 = c8 + a8 \n        val a9 = a8 + b8\n\
    \        val b9 = b9 + c8 \n        val c9 = c9 + a9 \n        val a10 = a9 +\
    \ b9\n        val b10 = b10 + c9 \n        val c10 = c10 + a10 \n        val a11\
    \ = a10 + b10\n        val b11 = b11 + c10 \n        val c11 = c11 + a11 \n  \
    \      val a12 = a11 + b11\n        val b12 = b12 + c11 \n        val c12 = c12\
    \ + a12 \n        val a13 = a12 + b12\n        val b13 = b13 + c12 \n        val\
    \ c13 = c13 + a13 \n        val a14 = a13 + b13\n        val b14 = b14 + c13 \n\
    \        val c14 = c14 + a14 \n        val a15 = a14 + b14\n        val b15 =\
    \ b15 + c14 \n        val c15 = c15 + a15 \n        val a16 = a15 + b15\n    \
    \    val b16 = b16 + c15 \n        val c16 = c16 + a16 \n        val a17 = a16\
    \ + b16\n        val b17 = b17 + c16 \n        val c17 = c17 + a17 \n        val\
    \ a18 = a17 + b17\n        val b18 = b18 + c17 \n        val c18 = c18 + a18 \n\
    \        val a19 = a18 + b18\n        val b19 = b19 + c18 \n        val c19 =\
    \ c19 + a19 \n        val a\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv5wpwq3f.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv5wpwq3f.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36ma1\e[0m = a / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\
    \e[31m   |\e[0mvalue / is not a member of Null, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.javaBigInteger2bigInt\n\e[31m   |\e[0m  import\
    \ math.Numeric.BigDecimalAsIfIntegral.mkNumericOps\n\e[31m   |\e[0m  import math.Numeric.BigDecimalIsFractional.mkNumericOps\n\
    \e[31m   |\e[0m  import math.Numeric.BigIntIsIntegral.mkNumericOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv5wpwq3f.scala:25:17 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb4\e[0m = b4 + c3\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpv5wpwq3f.scala:26:17 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mc4\e[0m = c4 + a4 \n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mc4\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpv5wpwq3f.scala:28:17 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b5 + c4\n\e[31m\e\
    [31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error:"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val isValid = a > 0 && b > 0 && c > 0\n        if(isValid) {\n      \
    \      val side1 = math.sqrt(a * a + b * b)\n            val side2 = math.sqrt(c\
    \ * c + d * d)\n            val side3 = math.sqrt(a * a + c * c)\n           \
    \ val isValidSide1 = side1 > 0 && side2 > 0 && side3 > 0\n            if(isValidSide1)\
    \ {\n                val isValidSide2 = side1 > 0 && side2 > 0 && side3 > 0\n\
    \                if(isValidSide2) {\n                    val isValidSide3 = side1\
    \ > 0 && side2 > 0 && side3 > 0\n                    if(isValidSide3) {\n    \
    \                    val isValidSide4 = side1 > 0 && side2 > 0 && side3 > 0\n\
    \                        if(isValidSide4) {\n                            val isValidSide5\
    \ = side1 > 0 && side2 > 0 && side3 > 0\n                            if(isValidSide5)\
    \ {\n                                val isValidSide6 = side1 > 0 && side2 > 0\
    \ && side3 > 0\n                                if(isValidSide6) {\n         \
    \                           val isValidSide7 = side1 > 0 && side2 > 0 && side3\
    \ > 0\n                                    if(isValidSide7) {\n              \
    \                          val isValidSide8 = side1 > 0 && side2 > 0 && side3\
    \ > 0\n                                        if(isValidSide8) {\n          \
    \                                  val isValidSide9 = side1 > 0 && side2 > 0 &&\
    \ side3 > 0\n                                            if(isValidSide9) {\n\
    \                                                val isValidSide10 = side1 > 0\
    \ && side2 > 0 && side3 > 0\n                                                if(isValidSide10)\
    \ {\n                                                    val isValidSide11 = side1\
    \ > 0 && side2 > 0 && side3 > 0\n                                            \
    \        if(isValidSide11) {\n                                               \
    \         val isValidSide12 = side1 > 0 && side2 > 0 && side3 > 0\n          \
    \                                              if(isValidSide12) {\n         \
    \                                                   val isValidSide13 = side1\
    \ > 0 && side2 > 0 && side3 > 0\n                                            \
    \                if(isValidSide13) {\n                                       \
    \                         val isValidSide14 = side1 > 0 && side2 > 0 && side3\
    \ > 0\n                                                                if(isValidSide14)\
    \ {\n                                                                    val isValidSide15\
    \ = side1 > 0 && side2 > 0 && side3 > 0\n                                    \
    \                                if(isValidSide15) {\n                       \
    \                                                 val isValidSide16 = side1 >\
    \ 0 && side2 > 0 && side3 > 0\n                                              \
    \                          if(isValidSide16) {\n                             \
    \                                               val isValidSide17 = side1 > 0\
    \ && side2 > 0 && side3 > 0\n                                                \
    \                            if(isValidSide17) {\n                           \
    \                                                     val isValidSide18 = side1\
    \ > 0 && side2 > 0 && side3 > 0\n                                            \
    \                                    if(isValidSide18) {\n                   \
    \                                                                 val isValidSide19\
    \ = side1 > 0 && side2 > 0 && side3 > 0\n                                    \
    \                                                if(isValidSide19) {\n       \
    \                                                                            \
    \     val isValid\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmhh2n9iv.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmhh2n9iv.scala:74:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpmhh2n9iv.scala:19:42 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c * c +\
    \ d * d)\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                          Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpmhh2n9iv.scala:61:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a = math.abs(a)\n     \
    \   val b = math.abs(b)\n        val c = math.abs(c)\n        val sum = a + b\
    \ + c\n        if (sum > c) {\n            val d = math.min(a + c, b + c)\n  \
    \          val area = d * (d - a) * (d - b) * (d - c)\n            val rounded\
    \ = math.round(area / sum * 100) / 100\n            return rounded\n        }\n\
    \        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8lihwaky.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = math.abs(a)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8lihwaky.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = math.abs(b)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8lihwaky.scala:17:25 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.abs(c)\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Recursive \e[33mvalue\e[0m \e[35mc\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        if (a + b > c) {\n        \
    \    val d = b - a\n            val e = c - b\n            val f = d - e\n   \
    \         val g = Math.sqrt(f * f + e * e)\n            val h = Math.sqrt(g *\
    \ g + f * f)\n            val i = h / 2\n            val j = g / 2\n         \
    \   val k = a / 2\n            val l = b / 2\n            val m = c / 2\n    \
    \        val n = Math.sqrt(i * i + j * j + k * k + l * l + m * m)\n          \
    \  val p = 2 * Math.sqrt(i * i + j * j + k * k + l * l + m * m)\n            val\
    \ q = Math.sqrt(p * p + q * q)\n            val r = Math.sqrt(p * p + q * q)\n\
    \            val s = Math.sqrt(r * r + n * n)\n            val t = Math.sqrt(r\
    \ * r + n * n)\n            val u = 2 * Math.sqrt(r * r + n * n)\n           \
    \ val v = Math.sqrt(u * u + t * t)\n            val w = Math.sqrt(u * u + t *\
    \ t)\n            val x = Math.sqrt(w * w + v * v)\n            val y = Math.sqrt(w\
    \ * w + v * v)\n            val z = Math.sqrt(x * x + y * y)\n            val\
    \ area = Math.sqrt(x * x + y * y + z * z)\n            area\n        } else {\n\
    \            -1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l),\
    \ (2l), (10l)) == -1l);\n    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n\
    \    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l),\
    \ (2l), (3l)) == -1l);\n    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n\
    \    assert(triangleArea((2l), (6l), (3l)) == -1l);\n    assert(triangleArea((1l),\
    \ (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l), (2l), (10l)) == -1l);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp59o4eq1m.scala:28:38 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mq\e[0m = Math.sqrt(p\
    \ * p + q * q)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Recursive \e[33mvalue\e\
    [0m \e[35mq\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp59o4eq1m.scala:39:12 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m            area\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m \
    \  |\e[0m            Found:    (area : Double)\n\e[31m   |\e[0m            Required:\
    \ Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a / 2\n        val\
    \ b1 = b / 2\n        val c1 = c / 2\n        val a2 = a1 + b1\n        val b2\
    \ = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n        val b3\
    \ = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n        val b4\
    \ = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n        val b5\
    \ = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n        val b6\
    \ = b5 + c5\n        val c6 = c5 + a5\n        val a7 = a6 + b6\n        val b7\
    \ = b6 + c6\n        val c7 = c6 + a6\n        (a1 + b1 + c1) * (a2 + b2 + c2)\
    \ * (a3 + b3 + c3) * (a4 + b4 + c4) * (a5 + b5 + c5) * (a6 + b6 + c6) * (a7 +\
    \ b7 + c7)\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ehmlz5p.scala:39)\n\tat Problem.main(tmp9ehmlz5p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a.toFloat\n      \
    \  val b1 = b.toFloat\n        val c1 = c.toFloat\n        val a2 = a1 + b1\n\
    \        val b2 = b1 + c1\n        val c2 = c1 + a1\n        val a3 = a2 + b2\n\
    \        val b3 = b2 + c2\n        val c3 = c2 + a2\n        val a4 = a3 + b3\n\
    \        val b4 = b3 + c3\n        val c4 = c3 + a3\n        val a5 = a4 + b4\n\
    \        val b5 = b4 + c4\n        val c5 = c4 + a4\n        val a6 = a5 + b5\n\
    \        val b6 = b5 + c5\n        val c6 = c5 + a5\n        (a1 + b2 + c2) *\
    \ (a2 + b3 + c3) * (a3 + b4 + c4) * (a4 + b5 + c5) * (a5 + b6 + c6)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa38kjb6h.scala:36)\n\tat Problem.main(tmpa38kjb6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b1 = b + c\n        val b2 = b + a\n        val c1 =\
    \ c + a\n        val c2 = c + b\n        val d1 = b2 - b1\n        val d2 = c2\
    \ - c1\n        val d3 = a2 - a1\n        val area = if (d1 * d2 == d3 * d1) \n\
    \            (d1 * d2) * (d2 * d3) \n            else -1\n        area\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l))\
    \ == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1582ufvj.scala:30)\n\tat Problem.main(tmp1582ufvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val sum = a + b + c\n     \
    \   if (sum > 0) {\n            val area = a / sum\n            val area2 = b\
    \ / sum\n            val area3 = c / sum\n            val area4 = area + area2\
    \ + area3\n            area4.toFloat\n        } else {\n            -1\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn95o32wj.scala:27)\n\tat Problem.main(tmpn95o32wj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = Math.abs((a * b)\
    \ - (c * c))\n        val rounded = area.toFloat / 2\n        if (rounded == area)\
    \ rounded else -1\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlm6jnio.scala:20)\n\tat Problem.main(tmpwlm6jnio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val a1 = a + b\n        val\
    \ a2 = a + c\n        val b2 = b + c\n        val a3 = a1 + a2\n        val b3\
    \ = b1 + b2\n        val c3 = b2 + a3\n        val a4 = a1 + a3\n        val b4\
    \ = b1 + b4\n        val c4 = b2 + b4\n        val a5 = a2 + a4\n        val b5\
    \ = b2 + b5\n        val c5 = b3 + b5\n        val a6 = a3 + a4\n        val b6\
    \ = b3 + b6\n        val c6 = c4 + b6\n        val a7 = a3 + a5\n        val b7\
    \ = b3 + b7\n        val c7 = c5 + b7\n        val a8 = a4 + a6\n        val b8\
    \ = b4 + b8\n        val c8 = c4 + b8\n        val a9 = a5 + a7\n        val b9\
    \ = b5 + b9\n        val c9 = c5 + b9\n        val a10 = a6 + a8\n        val\
    \ b10 = b6 + b10\n        val c10 = c6 + b10\n        val a11 = a7 + a9\n    \
    \    val b11 = b7 + b11\n        val c11 = c7 + b11\n        val a12 = a8 + a10\n\
    \        val b12 = b8 + b12\n        val c12 = c8 + b12\n        val a13 = a9\
    \ + a11\n        val b13 = b9 + b13\n        val c13 = c9 + b13\n        val a14\
    \ = a10 + a12\n        val b14 = b10 + b14\n        val c14 = c10 + b14\n    \
    \    val a15 = a11 + a13\n        val b15 = b11 + b15\n        val c15 = c11 +\
    \ b15\n        val a16 = a12 + a14\n        val b16 = b12 + b16\n        val c16\
    \ = c12 + b16\n        val a17 = a13 + a15\n        val b17 = b13 + b17\n    \
    \    val c17 = c13 + b17\n        val a18 = a14 + a16\n        val b18 = b14 +\
    \ b18\n        val c18 = c14 + b18\n        val a19 = a15 + a17\n        val b19\
    \ = b15 + b19\n        val c19 = c15 + b19\n        val a20 = a16 + a18\n    \
    \    val b20 = b16 + b20\n        val c20 = c16 + b\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triangleArea((3l), (4l), (5l)) == (6.0f));\n\
    \    assert(triangleArea((1l), (2l), (10l)) == -1l);\n    assert(triangleArea((4l),\
    \ (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l), (2l), (2l)) == (1.73f));\n\
    \    assert(triangleArea((1l), (2l), (3l)) == -1l);\n    assert(triangleArea((10l),\
    \ (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l), (6l), (3l)) == -1l);\n\
    \    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n    assert(triangleArea((2l),\
    \ (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y0bu_e0.scala:19:17 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mb3\e[0m = b1 + b2\n\e[31m\e\
    [31m   |\e[0m                 ^^\e[0m\n\e[31m   |\e[0m                 Not found:\
    \ b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0y0bu_e0.scala:22:17\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mb4\e[0m = b1 + b4\n\e[31m\e[31m   |\e[0m                 ^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: b1\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp0y0bu_e0.scala:25:22 ---------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mb5\e[0m = b2 + b5\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      Recursive\
    \ \e[33mvalue\e[0m \e[35mb5\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0y0bu_e0.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Float\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return the area\
    \ of\n    // the triangle rounded to 2 decimal points if the three sides form\
    \ a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid\
    \ triangle when the sum of any two sides is greater \n    // than the third side.\n\
    \    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n \
    \   // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a\
    \ : Long, b : Long, c : Long) : Float = {\n        val area = (a + b + c) / 2\n\
    \        val side1 = math.sqrt(a * a + b * b)\n        val side2 = math.sqrt(c\
    \ * c + d * d)\n        val side3 = math.sqrt(a * a + c * c)\n        val side4\
    \ = math.sqrt(b * b + d * d)\n        val isValid = side1 + side2 > side3\n  \
    \      if (isValid) {\n            area\n        } else {\n            -1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((3l),\
    \ (4l), (5l)) == (6.0f));\n    assert(triangleArea((1l), (2l), (10l)) == -1l);\n\
    \    assert(triangleArea((4l), (8l), (5l)) == (8.18f));\n    assert(triangleArea((2l),\
    \ (2l), (2l)) == (1.73f));\n    assert(triangleArea((1l), (2l), (3l)) == -1l);\n\
    \    assert(triangleArea((10l), (5l), (7l)) == (16.25f));\n    assert(triangleArea((2l),\
    \ (6l), (3l)) == -1l);\n    assert(triangleArea((1l), (1l), (1l)) == (0.43f));\n\
    \    assert(triangleArea((2l), (2l), (10l)) == -1l);\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mside2\e[0m = math.sqrt(c\
    \ * c + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp44jbj3iw.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mside4\e[0m = math.sqrt(b\
    \ * b + d * d)\n\e[31m\e[31m   |\e[0m                                      ^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805255
