language: scala
name: HumanEval_140_fix_spaces
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces > 2) {\n      \
    \      val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            newText2.replaceAll(\"_\", \"-\")\n        } else {\n           \
    \ text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng9b6tig.scala:29)\n\tat Problem.main(tmpng9b6tig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \"\"\n        var lastSpaceCount = 0\n       \
    \ for(i <- 0 until text.length){\n            val c = text.charAt(i)\n       \
    \     if(c == ' '){\n                lastSpaceIndex = i\n                lastSpace\
    \ = c\n                lastSpaceCount = 1\n            }\n            else{\n\
    \                lastSpaceCount = lastSpaceCount + 1\n                if(lastSpaceCount\
    \ > 2){\n                    result = result.substring(0, lastSpaceIndex) + result.substring(lastSpaceIndex\
    \ + 1, lastSpaceIndex + 1) + result.substring(lastSpaceIndex + 2)\n          \
    \      }\n                lastSpace = \"\"\n                lastSpaceIndex = -1\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pnqyviu.scala:24:28\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lastSpace = c\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (c : Char)\n\e[31m   |\e[0m                \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            (newText take consecutiveSpaces).mkString + \n                (newText\
    \ drop (consecutiveSpaces + 1)).mkString\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp959gwifb.scala:28)\n\tat Problem.main(tmp959gwifb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(_.toLowerCase).toList\n\
    \            val consecutiveSpaces = spacedText.sliding(2).map(_.length).sum\n\
    \            val fixedText = spacedText.map(_.toLowerCase).map(s => if (s == \"\
    \ \") \"_\" else s)\n            val fixedTextWithConsecutiveSpaces = fixedText.take(consecutiveSpaces).mkString(\"\
    \ \")\n            fixedTextWithConsecutiveSpaces + fixedText.drop(consecutiveSpaces)\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfosv14oi.scala:29)\n\tat Problem.main(tmpfosv14oi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val spaceCount = fixedText.count(_ == '_')\n        if (spaceCount\
    \ > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"_\"\
    )\n            fixedText2.replaceAll(\"_+\", \"-\")\n        } else {\n      \
    \      fixedText\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_0iz8pk.scala:28)\n\tat Problem.main(tmpr_0iz8pk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceCount = text.count(_\
    \ == ' ')\n            val lastSpace = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, lastSpaceIndex).replaceAll(\"\\\\s+\", \"_\") + text.substring(lastSpaceIndex\
    \ + 1)\n            result = newText\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabzf759w.scala:29)\n\tat Problem.main(tmpabzf759w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.replaceAll(' ', '_')\n        } else {\n            text.replaceAll('\
    \ ', '-')\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^\e[0m\n\e[31m   |\e[0m                            Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'_'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:28 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e\
    [0m                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'-'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            spacedText.mkString\n        } else {\n           \
    \ text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q4s_ish.scala:26)\n\tat Problem.main(tmp1q4s_ish.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.replaceAll(\" \", \"-\")\n            val\
    \ newText3 = newText2.replaceAll(\"-\", \" \")\n            val newText4 = newText3.replaceAll(\"\
    _\", \"-\")\n            val newText5 = newText4.replaceAll(\"-\", \" \")\n  \
    \          val newText6 = newText5.replaceAll(\"_\", \"-\")\n            val newText7\
    \ = newText6.replaceAll(\"-\", \" \")\n            val newText8 = newText7.replaceAll(\"\
    -\", \" \")\n            val newText9 = newText8.replaceAll(\"-\", \" \")\n  \
    \          val newText10 = newText9.replaceAll(\"-\", \" \")\n            val\
    \ newText11 = newText10.replaceAll(\"-\", \" \")\n            val newText12 =\
    \ newText11.replaceAll(\"-\", \" \")\n            val newText13 = newText12.replaceAll(\"\
    -\", \" \")\n            val newText14 = newText13.replaceAll(\"-\", \" \")\n\
    \            val newText15 = newText14.replaceAll(\"-\", \" \")\n            val\
    \ newText16 = newText15.replaceAll(\"-\", \" \")\n            val newText17 =\
    \ newText16.replaceAll(\"-\", \" \")\n            val newText18 = newText17.replaceAll(\"\
    -\", \" \")\n            val newText19 = newText18.replaceAll(\"-\", \" \")\n\
    \            val newText20 = newText19.replaceAll(\"-\", \" \")\n            val\
    \ newText21 = newText20.replaceAll(\"-\", \" \")\n            val newText22 =\
    \ newText21.replaceAll(\"-\", \" \")\n            val newText23 = newText22.replaceAll(\"\
    -\", \" \")\n            val newText24 = newText23.replaceAll(\"-\", \" \")\n\
    \            val newText25 = newText24.replaceAll(\"-\", \" \")\n            val\
    \ newText26 = newText25.replaceAll(\"-\", \" \")\n            val newText27 =\
    \ newText26.replaceAll(\"-\", \" \")\n            val newText28 = newText27.replaceAll(\"\
    -\", \" \")\n            val newText29 = newText28.replaceAll(\"-\", \" \")\n\
    \            val newText30 = newText29.replaceAll(\"-\", \" \")\n            val\
    \ newText31 = newText30.replaceAll(\"-\", \" \")\n            val newText32 =\
    \ newText31.replaceAll(\"-\", \" \")\n            val newText33 = newText32.replaceAll(\"\
    -\", \" \")\n            val newText34 = newText33.replaceAll(\"-\", \" \")\n\
    \            val newText35 = newText34.replaceAll(\"-\", \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ubmebp8.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ubmebp8.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp2ubmebp8.scala:52:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m52 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewText35\e[0m = newText34.replaceAll(\e[31m\"-\"\e\
    [0m, \n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnot enough arguments for \e[33mmethod\e[0m \e[35mreplaceAll\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (x$0: String, x$1: String): String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ubmebp8.scala:62:1 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp2ubmebp8.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val newSpaces = text.count(_\
    \ == ' ')\n            newText = newText.replaceAll(\"\\\\s+\", \"_\")\n     \
    \       newText = newText.replaceAll(\"\\\\s+\", \"-\")\n        }\n        newText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w2ry_tf.scala:27)\n\tat Problem.main(tmp9w2ry_tf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.substring(0,newText.length-1)\n          \
    \  val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.substring(0,newText3.length-1)\n        \
    \    val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.substring(0,newText5.length-1)\n        \
    \    val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.substring(0,newText7.length-1)\n        \
    \    val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.substring(0,newText9.length-1)\n       \
    \     val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.substring(0,newText11.length-1)\n     \
    \       val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.substring(0,newText13.length-1)\n     \
    \       val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.substring(0,newText15.length-1)\n     \
    \       val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.substring(0,newText17.length-1)\n     \
    \       val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.substring(0,newText19.length-1)\n     \
    \       val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.substring(0,newText21.length-1)\n     \
    \       val newText23 = newText22.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText24 = newText23.substring(0,newText23.length-1)\n     \
    \       val newText25 = newText24.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText26 = newText25.split(' ').\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmx8pb7e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkmx8pb7e.scala:55:0 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx8pb7e.scala:54:1 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpkmx8pb7e.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newTextWithConsecutiveSpaces = newText.substring(0, newText.length\
    \ - consecutiveSpaces)\n            val newTextWithSpaces = newTextWithConsecutiveSpaces\
    \ + newText.substring(newText.length - consecutiveSpaces)\n            newTextWithSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2phmdcn.scala:29)\n\tat Problem.main(tmpx2phmdcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val fixedText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString\n\
    \            val fixedTextWithConsecutiveSpaces = fixedText.take(consecutiveSpaces).mkString(\"\
    \") + \"-\" + fixedText.drop(consecutiveSpaces).mkString(\"\")\n            fixedTextWithConsecutiveSpaces\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzayhn1ck.scala:28)\n\tat Problem.main(tmpzayhn1ck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = words.map(word => if (word.equals(\" \")) {\n            word.replaceAll(\"\
    \ \", \"_\")\n        } else {\n            word\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpviy9r6nd.scala:26)\n\tat Problem.main(tmpviy9r6nd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    _\", \"-\")\n        } else {\n            spaces\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso9jihff.scala:26)\n\tat Problem.main(tmpso9jihff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces).replaceAll(\"\\\\s+\", \"-\")\n            result\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4l6_rqxz.scala:27)\n\tat Problem.main(tmp4l6_rqxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val firstSpace = text.indexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, firstSpace) + text.substring(lastSpace)\n            fixSpaces(newText)\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 14\n\
    \tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmpmcksn6h1.scala:20)\n\tat Problem$.main(tmpmcksn6h1.scala:28)\n\
    \tat Problem.main(tmpmcksn6h1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newTextWithSpaces = newText.replace(' ', '_')\n            if\
    \ (consecutiveSpaces == 1) {\n                newTextWithSpaces.replace('-', '_')\n\
    \            } else {\n                newTextWithSpaces.replace('-', '_')\n \
    \           }\n        } else {\n            text\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprxvdadi5.scala:32)\n\tat Problem.main(tmprxvdadi5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = mutable.ListBuffer[String]()\n        val spaces = mutable.ListBuffer[String]()\n\
    \        val consecutiveSpaces = mutable.ListBuffer[String]()\n        val consecutiveSpaceCount\
    \ = mutable.ListBuffer[Int]()\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        val consecutiveSpaceCount = 0\n        val consecutiveSpaceCounts = mutable.ListBuffer[Int]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ckvtyxf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaceCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsecutiveSpaceCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsecutiveSpaceCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ckvtyxf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaceCounts\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsecutiveSpaceCounts is already defined as \e[33mvalue\e\
    [0m \e[35mconsecutiveSpaceCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ckvtyxf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaceCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsecutiveSpaceCount is already defined as \e[33mvalue\e\
    [0m \e[35mconsecutiveSpaceCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ckvtyxf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaceCounts\e\
    [0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mconsecutiveSpaceCounts is already defined as \e[33mvalue\e\
    [0m \e[35mconsecutiveSpaceCounts\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ckvtyxf.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == \" \")\n      \
    \  if (consecutiveSpaces > 1) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\")\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmper0apmsb.scala:17:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaces\e[0m =\
    \ fixedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == '_')\n        if\
    \ (consecutiveSpaces > 1) {\n            fixedText.replaceAll(\"_+\", \"_\")\n\
    \        } else {\n            fixedText\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2_kcxut.scala:27)\n\tat Problem.main(tmpl2_kcxut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            spacedText.mkString(\" \")\n        } else {\n\
    \            text\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqa05nljs.scala:26)\n\tat Problem.main(tmpqa05nljs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \"\"\n        var lastChar = \"\"\n        var\
    \ lastCharIndex = 0\n        var lastCharIndexInSpace = 0\n        var lastCharIndexInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzzz7uyhk.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzzz7uyhk.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharIndexInSpaceInSpace\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastCharIndexInSpaceInSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastCharIndexInSpaceInSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzzz7uyhk.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36mlastCharIndexInSpaceInSpaceInSpace\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIndexInSpaceInSpaceInSpace is already defined as \e\
    [33mvariable\e[0m \e[35mlastCharIndexInSpaceInSpaceInSpace\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzzz7uyhk.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharIndexInSpaceInSpaceInSpace\e[0m = \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlastCharIndexInSpaceInSpaceInSpace is already defined as \e[33mvariable\e[0m\
    \ \e[35mlastCharIndexInSpaceInSpaceInSpace\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzzz7uyhk.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharIndexInSpaceInSpaceInSpace\e[0m = \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mlastCharIndexInSpaceInSpaceInSpace is already defined as \e[33mvariable"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = 0\n\
    \        var nextSpace = 0\n        while(nextSpace < text.length){\n        \
    \    if(text.charAt(nextSpace) == ' '){\n                lastSpace = nextSpace\n\
    \                nextSpace = nextSpace + 1\n            }else{\n             \
    \   if(lastSpace != 0){\n                    result = result.substring(0, lastSpace)\
    \ + \"_\" + result.substring(lastSpace)\n                    lastSpace = 0\n \
    \               }\n                nextSpace = nextSpace + 1\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdm1mwbx0.scala:35)\n\tat Problem.main(tmpdm1mwbx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val spacedText = text.split(\" \").map(_.toLowerCase).mkString(\"\
    \ \")\n            val consecutiveSpaces = text.count(_ == ' ')\n            if(consecutiveSpaces\
    \ > 1) {\n                val consecutiveSpacedText = text.split(\" \").map(_.toLowerCase).mkString(\"\
    \")\n                val fixedText = spacedText.replaceAll(\" \", \"_\")\n   \
    \             fixedText.replaceAll(consecutiveSpaces, \"-\")\n            } else\
    \ {\n                fixedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy566ag_d.scala:23:37\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                fixedText.replaceAll(consecutiveSpaces,\
    \ \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  Found:    (consecutiveSpaces : Int)\n\e[31m   |\e[0m                      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpy566ag_d.scala:25:16 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                fixedText\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: fixedText\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0lk1vsy7.scala:26)\n\tat Problem.main(tmp0lk1vsy7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replaceAll(\" \", \"\
    _\")\n        else text.replaceAll(\"\\\\s+\", \"-\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ho1g0ut.scala:23)\n\tat Problem.main(tmp8ho1g0ut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").split(\"_\")\n        var i = 0\n        while (i < spaces.length) {\n  \
    \          if (spaces(i).length() > 2) {\n                spaces(i) = spaces(i).replaceAll(\"\
    \\\\s+\", \"-\")\n            }\n            i += 1\n        }\n        spaces.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6ybkz3w.scala:28)\n\tat Problem.main(tmph6ybkz3w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = words.map(word => if (word.equals(\" \")) {\n            \"_\"\n        }\
    \ else {\n            word\n        })\n        val newText = newWords.mkString(\"\
    \ \")\n        if (newText.length > 2) {\n            newText.replaceAll(\"\\\\\
    s+\", \"-\")\n        } else {\n            newText\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpesg2epd8.scala:31)\n\tat Problem.main(tmpesg2epd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replaceAll(\"\\\\s+\", \"_\")\n        else\
    \ text.replaceAll(\"\\\\s+\", \"-\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwwav5ma1.scala:24)\n\tat Problem.main(tmpwwav5ma1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.split(\"\\\\s+\").length\n\
    \        if (consecutiveSpaces > 1) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\")\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3axf327.scala:28)\n\tat Problem.main(tmpr3axf327.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpaceCount = 0\n        var lastSpace = \" \"\n      \
    \  var lastChar = ' '\n        var lastCharIndex = -1\n        var lastCharCount\
    \ = 0\n        var lastChar = ' '\n        while(newText.length > 0) {\n     \
    \       lastChar = newText.charAt(newText.length-1)\n            lastCharCount\
    \ = lastChar.length\n            lastCharIndex = newText.length-1\n          \
    \  lastSpaceIndex = newText.lastIndexOf(lastSpace)\n            lastSpaceCount\
    \ = lastSpaceIndex\n            lastSpace = newSpace\n            newText = newText.substring(0,\
    \ lastSpaceIndex) + newText.substring(lastSpaceIndex+1, newText.length)\n    \
    \    }\n        return newText\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplshvljdp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mlastChar\e[0m = \e[31m'\
    \ '\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlastChar\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastChar\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplshvljdp.scala:26:37\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            lastCharCount\
    \ = lastChar.length\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplshvljdp.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            lastSpace = newSpace\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    Not found: newSpace\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.split(' ').map(x => if (x == \" \") \"\
    _\" else x).mkString\n            fixSpaces(newText)\n        } else {\n     \
    \       text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m07fbd7.scala:26)\n\tat Problem.main(tmp7m07fbd7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ ==\
    \ ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\"\\\\s+\", \"-\")).mkString\n   \
    \             spacedText + \"-\" + consecutiveSpacedText\n            } else {\n\
    \                spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmxpn0v2.scala:32)\n\tat Problem.main(tmpfmxpn0v2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85d7vrb4.scala:26)\n\tat Problem.main(tmp85d7vrb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val spacedText2 = spacedText.replaceAll(\"\
    _+\", \"_\")\n            spacedText2\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaqyt1twa.scala:27)\n\tat Problem.main(tmpaqyt1twa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hjdihw2.scala:27)\n\tat Problem.main(tmp6hjdihw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replaceAll(\"\\\\s+\", \"_\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ju2d82p.scala:24)\n\tat Problem.main(tmp4ju2d82p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (fixedText.length > 2 && fixedText2.length > 2) {\n            fixedText2\n\
    \        } else {\n            fixedText\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy2u348qh.scala:27)\n\tat Problem.main(tmpy2u348qh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hjdihw2.scala:27)\n\tat Problem.main(tmp6hjdihw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replaceAll(\"\\\\s+\", \"-\")\n        else\
    \ text\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dt0r_50.scala:24)\n\tat Problem.main(tmp8dt0r_50.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(\"\\\\s+\", \"\
    _\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzj55bef.scala:24)\n\tat Problem.main(tmpwzj55bef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7eoj14yv.scala:26)\n\tat Problem.main(tmp7eoj14yv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replaceAll(\" \", \"_\")\n        else text.replaceAll(\"\
    \ \", \"-\")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxg928r2y.scala:24)\n\tat Problem.main(tmpxg928r2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            spacedText.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdgsmwoqk.scala:26)\n\tat Problem.main(tmpdgsmwoqk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val fixedText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            (fixedText.dropRight(fixedText.length - consecutiveSpaces)\n    \
    \            + fixedText.takeRight(fixedText.length - consecutiveSpaces)\n   \
    \             + fixedText.drop(fixedText.length - consecutiveSpaces)\n       \
    \         + fixedText.take(fixedText.length - consecutiveSpaces)\n           \
    \     + fixedText.drop(fixedText.length - consecutiveSpaces)\n               \
    \ + fixedText.take(fixedText.length - consecutiveSpaces)\n                + fixedText.drop(fixedText.length\
    \ - consecutiveSpaces)\n                + fixedText.take(fixedText.length - consecutiveSpaces)\n\
    \                + fixedText.drop(fixedText.length - consecutiveSpaces)\n    \
    \            + fixedText.take(fixedText.length - consecutiveSpaces)\n        \
    \        + fixedText.drop(fixedText.length - consecutiveSpaces)\n            \
    \    + fixedText.take(fixedText.length - consecutiveSpaces)\n                +\
    \ fixedText.drop(fixedText.length - consecutiveSpaces)\n                + fixedText.take(fixedText.length\
    \ - consecutiveSpaces)\n                + fixedText.drop(fixedText.length - consecutiveSpaces)\n\
    \                + fixedText.take(fixedText.length - consecutiveSpaces)\n    \
    \            + fixedText.drop(fixedText.length - consecutiveSpaces)\n        \
    \        + fixedText.take(fixedText.length - consecutiveSpaces)\n            \
    \    + fixedText.drop(fixedText.length - consecutiveSpaces)\n                +\
    \ fixedText.take(fixedText.length - consecutiveSpaces)\n                + fixedText.drop(fixedText.length\
    \ - consecutiveSpaces)\n                + fixedText.take(fixedText.length - consecutiveSpaces)\n\
    \                + fixedText.drop(fixedText.length - consecutiveSpaces)\n    \
    \            + fixedText.take(fixedText.length - consecutiveSpaces)\n        \
    \        + fixedText.drop(fixedText.length - consecutiveSpaces)\n            \
    \    + fixedText.take(fixedText.length - consecutiveSpaces)\n                +\
    \ fixedText.drop(fixedText.length - consecutiveSpaces)\n                + fixedText.take(fixedText.length\
    \ - consecutiveSpaces)\n                + fixedText.drop(fixedText.length - consecutiveSpaces)\n\
    \                + fixedText.take(fixedText.length - consecutiveSpaces)\n    \
    \            + fixedText.drop(fixedText.length - consecutiveSpaces)\n        \
    \        + fixedText.take(fixedText.length - consecutiveSpaces)\n            \
    \    + fixedText.drop(fixedText.length - consecutiveSpaces)\n                +\
    \ fixed\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb8cey01.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb8cey01.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmppb8cey01.scala:53:18 ------------------------\e[0m\e[0m\n\
    \e[31m53 |\e[0m                + fixed\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: fixed\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppb8cey01.scala:63:1 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmppb8cey01.scala:55:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces > 2) text + \"_\"\n        else text.replaceAll(' ', '_')\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2a953suv.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2a953suv.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1p0cn9q.scala:24)\n\tat Problem.main(tmph1p0cn9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var spaceCount =\
    \ 0\n        var lastSpace = \" \"\n        var lastChar = \"\"\n        for(i\
    \ <- 0 until text.length){\n            val c = text.charAt(i)\n            if(c\
    \ == \" \"){\n                spaceCount += 1\n                lastSpace = c\n\
    \            }\n            if(c == lastSpace){\n                spaceCount -=\
    \ 1\n            }\n            if((spaceCount > 1) && (lastChar == c)){\n   \
    \             result += \"-\"\n                lastChar = \"\"\n             \
    \   spaceCount = 0\n            }\n            result += c\n            lastChar\
    \ = c\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmph64cb8eb.scala:22:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(c == \e[31m\" \"\e[0m){\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmph64cb8eb.scala:24:28 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                lastSpace = c\n\e[31m\e[31m   |\e[0m     \
    \                       ^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    (c : Char)\n\e[31m   |\e[0m                            Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmph64cb8eb.scala:26:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m(c == lastSpace){\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph64cb8eb.scala:29:36 -----------------------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m            \e[33mif\e[0m((spaceCount > \e[31m1\e[0m) && (lastChar\
    \ == c)){\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph64cb8eb.scala:35:23\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m            lastChar = c\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (c : Char)\n\e[31m   |\e[0m                       Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == '_')\n        if\
    \ (consecutiveSpaces > 1) {\n            val fixedText2 = fixedText.replaceAll(\"\
    _+\", \"_\")\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_j8cgzm.scala:28)\n\tat Problem.main(tmp7_j8cgzm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(s\
    \ => if (s.equals(\" \") || s.equals(\"\")) \"_\" else s).mkString\n         \
    \   newText\n        } else {\n            text\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0kly05yq.scala:26)\n\tat Problem.main(tmp0kly05yq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val spaceCount = spaces.split(\"_\").length\n        if (spaceCount >\
    \ 2) {\n            val consecutiveSpaces = spaces.split(\"_\").dropRight(2).mkString(\"\
    -\")\n            spaces = spaces.replaceAll(\" \", consecutiveSpaces)\n     \
    \   }\n        spaces\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp30mn3_cv.scala:20:19 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            spaces = spaces.replaceAll(\e[31m\" \"\e\
    [0m, consecutiveSpaces)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val spaces\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var spaceCount =\
    \ 0\n        var lastSpace = false\n        for(i <- 0 until text.length){\n \
    \           if(text.charAt(i) == ' '){\n                spaceCount += 1\n    \
    \            lastSpace = false\n            }\n            else{\n           \
    \     spaceCount = 0\n                lastSpace = true\n            }\n      \
    \      if(spaceCount > 2){\n                result = result.replace(text.charAt(i),\
    \ text.charAt(i).toString + \"_\")\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpefgteh9k.scala:29:32 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                result = result.replace(text.charAt(i),\
    \ text.charAt(i).toString + \e[31m\"_\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence): String\n\
    \e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch arguments\
    \ (Char, String)\n1 error found\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            val lastSpace = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo0a6swth.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo0a6swth.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e[31m' '\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo0a6swth.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo0a6swth.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo0a6swth.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined "
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.take(spaces - 1).mkString\
    \ + text.drop(spaces - 1).mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_tlnbr03.scala:24)\n\tat Problem.main(tmp_tlnbr03.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").split(\"_\")\n        val result = \"\"\n        spaces.foreach(s => {\n\
    \            if (s.equals(\"_\")) {\n                result += s\n           \
    \ } else {\n                result += s.replaceAll(\"\\\\s+\", \"-\")\n      \
    \      }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl6e5bwfm.scala:20:23 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result += s\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of String - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl6e5bwfm.scala:22:23 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                result += s.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"-\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value += is not a member of String - did you mean result.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(\" \").map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\" \", \"-\")\n            if (consecutiveSpaces\
    \ == 1) {\n                newText2\n            } else {\n                newText2\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp785e8rud.scala:32)\n\tat Problem.main(tmp785e8rud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(\" \").map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq78s3qy.scala:26)\n\tat Problem.main(tmpkq78s3qy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var prevSpace = false\n\
    \        var nextSpace = false\n        var lastSpace = false\n        var lastSpaceIndex\
    \ = -1\n        for (i <- 0 until text.length)\n        {\n            val c =\
    \ text.charAt(i)\n            if (c == ' ')\n            {\n                if\
    \ (prevSpace)\n                {\n                    result += c\n          \
    \      }\n                else\n                {\n                    result\
    \ += c\n                    prevSpace = true\n                }\n            }\n\
    \            else if (c == ' ')\n            {\n                nextSpace = true\n\
    \            }\n            else if (prevSpace && nextSpace)\n            {\n\
    \                result += c\n                lastSpaceIndex = i\n           \
    \     lastSpace = c\n                prevSpace = false\n                nextSpace\
    \ = false\n            }\n            else\n            {\n                result\
    \ += c\n                prevSpace = false\n                nextSpace = false\n\
    \            }\n        }\n        if (lastSpaceIndex > 0)\n        {\n      \
    \      val lastSpace = text.charAt(lastSpaceIndex)\n            if (lastSpace\
    \ == ' ')\n            {\n                result += lastSpace\n            }\n\
    \            else\n            {\n                result += \"-\"\n          \
    \  }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76c8lite.scala:44:28\
    \ --------------------\e[0m\e[0m\n\e[31m44 |\e[0m                lastSpace = c\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (c : Char)\n\e[31m   |\e[0m                \
    \            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"-\"\n        else text.take(spaces - 1).mkString +\
    \ \"_\" + text.drop(spaces - 1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgysezl9_.scala:24)\n\tat Problem.main(tmpgysezl9_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == \" \")\n      \
    \  if (consecutiveSpaces > 1) {\n            val fixedTextWithSpaces = fixedText.replaceAll(\"\
    \\\\s+\", \"-\")\n            fixedTextWithSpaces\n        } else {\n        \
    \    fixedText\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsxuou6ok.scala:17:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaces\e[0m =\
    \ fixedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = consecutiveSpaces.foldLeft(spacedText) {\n                    case (acc, space)\
    \ => acc + (if (space == ' ') \"_\" else \" \")\n                }\n         \
    \       spacedText + consecutiveSpacedText\n            } else {\n           \
    \     spacedText\n            }\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwbnhqcm0.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mconsecutiveSpacedText\e\
    [0m = consecutiveSpaces.foldLeft(spacedText) {\n\e[31m\e[31m   |\e[0m        \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value foldLeft is not a member of\
    \ Int\n1 error found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1)\n            for (i <-\
    \ 0 until consecutiveSpaces) {\n                result += \"-\"\n            }\n\
    \            result += text.substring(spaces - 1)\n        } else {\n        \
    \    text \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb137pdlk.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += \e[31m\"-\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb137pdlk.scala:23:19 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            result += text.substring(spaces - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029160
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ == '\
    \ ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\" \", \"-\")).mkString\n        \
    \        spacedText + \" \" + consecutiveSpacedText\n            } else {\n  \
    \              spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsfesda26.scala:32)\n\tat Problem.main(tmpsfesda26.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => if (x == \" \") \"_\" else x).mkString\n            result = spacedText.replaceAll(\"\
    \ \", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnfj43l8w.scala:26)\n\tat Problem.main(tmpnfj43l8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(\" \").map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwnk81bm.scala:26)\n\tat Problem.main(tmpjwnk81bm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = text.count(_\
    \ == ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => if (x == \" \") \"-\" else x).mkString\n      \
    \          spacedText + \"-\" + consecutiveSpacedText\n            } else {\n\
    \                spacedText\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmdvswj7r.scala:32)\n\tat Problem.main(tmpmdvswj7r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixed = text.replaceAll(\"\\\\s+\", \"_\"\
    )\n        if (fixed.length() > 2) {\n            val fixed2 = fixed.substring(0,\
    \ fixed.length - 2)\n            fixed2.replaceAll(\"\\\\s+\", \"-\")\n      \
    \  } else {\n            fixed\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr75s9ly9.scala:25)\n\tat Problem.main(tmpr75s9ly9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.split(' ').map(_.toLowerCase).mkString(\"-\")\n        } else {\n\
    \            text.split(' ').map(_.toLowerCase).mkString(\"-\")\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpes3go_hh.scala:26)\n\tat Problem.main(tmpes3go_hh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text + \"_-_\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpamaw0c3i.scala:24)\n\tat Problem.main(tmpamaw0c3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            newText\n        } else {\n     \
    \       text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcl3bhv6l.scala:26)\n\tat Problem.main(tmpcl3bhv6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \"\"\n        var lastChar = \"\"\n        var\
    \ lastCharIndex = 0\n        var lastCharIndexInSpace = 0\n        var lastCharIndexInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpace = 0\n    \
    \    var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpace = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ = 0\n        var lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz7uejmsw.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz7uejmsw.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpace\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpace is already\
    \ defined as \e[33mvariable\e[0m \e[35mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz7uejmsw.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mvar\e[0m \e[36mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  lastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpz7uejmsw.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m \e[36mlastCharIndexInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpaceInSpace\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1660029162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2b_l2hf.scala:26)\n\tat Problem.main(tmpk2b_l2hf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9owqtghj.scala:23)\n\tat Problem.main(tmp9owqtghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.split(' ').map(_.toLowerCase).mkString.toLowerCase\n        } else\
    \ {\n            text.split(' ').map(_.toLowerCase).mkString.toLowerCase.replaceAll(\"\
    \\\\s+\", \"-\")\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue_6h5n1.scala:26)\n\tat Problem.main(tmpue_6h5n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ListBuffer[String]()\n        var lastSpace = 0\n        for(word\
    \ <- words) {\n            if(word.equals(\" \")) {\n                lastSpace\
    \ = word.length\n                fixedWords += \"_\"\n            } else {\n \
    \               if(lastSpace == word.length) fixedWords += \"_\"\n           \
    \     fixedWords += word\n                lastSpace = 0\n            }\n     \
    \   }\n        fixedWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6e9air3.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val fixedWords\
    \ = mutable.ListBuffer[String]()\n        val spaceCount = 0\n        for (word\
    \ <- words) {\n            if (word.equals(\" \")) {\n                spaceCount\
    \ += 1\n                if (spaceCount > 1) {\n                    fixedWords\
    \ += \"-\"\n                }\n            } else {\n                fixedWords\
    \ += word\n            }\n        }\n        fixedWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpicj90c8o.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mfixedWords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpicj90c8o.scala:21:27 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                spaceCount += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value\
    \ += is not a member of Int - did you mean spaceCount.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixed = text.replaceAll(\"\\\\s+\", \"_\"\
    )\n        val consecutive = fixed.split(\"_\").length\n        if (consecutive\
    \ > 2) {\n            fixed.split(\"_\").map(_.trim).mkString(\"-\")\n       \
    \ } else {\n            fixed\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphoxbq72.scala:27)\n\tat Problem.main(tmpphoxbq72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\"\\\\s+\", \"_\"))\n            result = spacedText.mkString\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpao19tn5_.scala:26)\n\tat Problem.main(tmpao19tn5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        fixedText = fixedText.replaceAll(\"\
    \\\\s+\", \"_\")\n        fixedText = fixedText.replaceAll(\"\\\\s+\", \"-\")\n\
    \        fixedText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zbdf7n2.scala:24)\n\tat Problem.main(tmp3zbdf7n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + '_'\n        else if\
    \ (spaces == 2) text + '_-'\n        else text + '_'\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpacr12_6j.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e\
    [0m) text + \e[31m'_\e[0m-'\n\e[31m\e[31m   |\e[0m                           \
    \             ^\e[0m\n\e[31m   |\e[0m                                        unclosed\
    \ character literal\n\e[31m\e[31m-- Error: /tmp/tmpacr12_6j.scala:19:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (spaces == \e[31m2\e\
    [0m) text + \e[31m'_\e[0m-'\n\e[31m\e[31m   |\e[0m                           \
    \          ^\e[0m\n\e[31m   |\e[0msymbol literal '_ is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"_\" or an application Symbol(\"_\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{_} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n2 errors found\n"
  stdout: ''
  timestamp: 1660029161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7dxmgmir.scala:26)\n\tat Problem.main(tmp7dxmgmir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length() > 2) {\n            newText2.substring(0,newText2.length()\
    \ - 2)\n        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_4o_d1i.scala:25)\n\tat Problem.main(tmp0_4o_d1i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.substring(0, newText2.length -\
    \ 2)\n        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz_y63ekg.scala:25)\n\tat Problem.main(tmpz_y63ekg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces).reduce(_ + _ + \"_\") + \"-\" + text.drop(spaces).reduce(_\
    \ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn5vgarh.scala:19:38\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.take(spaces).reduce(_\
    \ + _ + \e[31m\"_\"\e[0m) + \e[31m\"-\"\e[0m + text.drop(spaces).reduce(_ + _)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                      Found:    String\n\e[31m  \
    \ |\e[0m                                      Required: Char\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvn5vgarh.scala:19:84 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.take(spaces).reduce(_ +\
    \ _ + \e[31m\"_\"\e[0m) + \e[31m\"-\"\e[0m + text.drop(spaces).reduce(_ + _)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                                     Found:    Int\n\e[31m   |\e[0m         \
    \                                                 Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7dxmgmir.scala:26)\n\tat Problem.main(tmp7dxmgmir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"-\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjv3vem0g.scala:23)\n\tat Problem.main(tmpjv3vem0g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \" \"\n        var lastChar = \"\"\n        var\
    \ lastCharIndex = 0\n        var lastCharCount = 1\n        var lastCharCountBeforeLastSpace\
    \ = 0\n        var lastCharCountAfterLastSpace = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpace\
    \ = 0\n        var lastCharCountBeforeLastSpaceAfterLastSpace = 0\n        var\
    \ lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace =\
    \ 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n\
    \        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n \
    \       var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n  \
    \      var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n   \
    \     var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n    \
    \    var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n     \
    \   var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n      \
    \  var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n       \
    \ var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n        var\
    \ lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace =\
    \ 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n\
    \        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n \
    \       var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n  \
    \      var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n   \
    \     var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n    \
    \    var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n     \
    \   var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n      \
    \  var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n       \
    \ var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n        var\
    \ lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ = 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace =\
    \ 0\n        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n\
    \        var lastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace = 0\n \
    \       var last\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyah3elpy.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyah3elpy.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e[0m = \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyah3elpy.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mvar\e[0m \e[36mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyah3elpy.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mvar\e[0m \e[36mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\
    \ is already defined as \e[33mvariable\e[0m \e[35mlastCharCountBeforeLastSpaceBeforeLastSpaceAfterLastSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp"
  stdout: ''
  timestamp: 1660029179
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces).replaceAll(\"\\\\s+\", \"-\")\n            result\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeiqjdxrs.scala:27)\n\tat Problem.main(tmpeiqjdxrs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029180
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces).replaceAll(\" \", \"-\")\n            result\n     \
    \   } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg68mnkrh.scala:27)\n\tat Problem.main(tmpg68mnkrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbc7hao9e.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbc7hao9e.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpbc7hao9e.scala:51:1 ---------------------\e[0m\e[0m\n\
    \e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpbc7hao9e.scala:43:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m43 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        var i = 0\n    \
    \    while (i < newText.length) {\n            if (newText.charAt(i) == ' ') {\n\
    \                newText = newText.substring(0, i) + \"_\" + newText.substring(i\
    \ + 1)\n                i = i + 1\n            }\n            i = i + 1\n    \
    \    }\n        if (newText.length >= 2) {\n            var i = 0\n          \
    \  while (i < newText.length) {\n                if (newText.charAt(i) == ' ')\
    \ {\n                    newText = newText.substring(0, i) + \"-\" + newText.substring(i\
    \ + 1)\n                    i = i + 1\n                }\n                i =\
    \ i + 1\n            }\n        }\n        newText\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuqpi6uw.scala:40)\n\tat Problem.main(tmpnuqpi6uw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\" \", \"_\")\n        if (consecutiveSpaces.length()\
    \ > 2) {\n            consecutiveSpaces.replaceAll(\"_\", \"-\")\n        } else\
    \ {\n            spaces\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3s66oxbn.scala:26)\n\tat Problem.main(tmp3s66oxbn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val fixedText = text.split(\" \").map(_.toLowerCase).map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            (fixedText + (if (consecutiveSpaces\
    \ == 0) \"\" else s\"-$consecutiveSpaces\"))\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6a4q8oo.scala:27)\n\tat Problem.main(tmpw6a4q8oo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + '_'\n        else text.take(spaces\
    \ - 1).mkString + '_' + text.drop(spaces - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5o64qx1j.scala:23)\n\tat Problem.main(tmp5o64qx1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val firstSpace = text.indexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, firstSpace) + \"-\" + text.substring(lastSpace + 1)\n  \
    \          return newText\n        }\n        return text\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrp1eca2.scala:27)\n\tat Problem.main(tmplrp1eca2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0lk1vsy7.scala:26)\n\tat Problem.main(tmp0lk1vsy7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpclu3uwjj.scala:26)\n\tat Problem.main(tmpclu3uwjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7dxmgmir.scala:26)\n\tat Problem.main(tmp7dxmgmir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.replaceAll(' ', '-')\n            val\
    \ newText2 = newText.replaceAll(' ', '-')\n            if(newText2.length < newText.length)\
    \ {\n                newText2\n            } else {\n                newText\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxh89uv_k.scala:18:42\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Found:    (\e[31m' '\e[0m : Char)\n\
    \e[31m   |\e[0m                                          Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxh89uv_k.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                               ^^^\e[0m\n\e[31m   |\e\
    [0m                                               Found:    (\e[31m'-'\e[0m :\
    \ Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxh89uv_k.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText2\e[0m = newText.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                              ^^^\e[0m\n\e[31m  \
    \ |\e[0m                                              Found:    (\e[31m' '\e[0m\
    \ : Char)\n\e[31m   |\e[0m                                              Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxh89uv_k.scala:19:51\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText2\e[0m = newText.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  Found:    (\e[31m'-'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \ Required: String\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\")).mkString\n            val consecutiveSpaces = text.count(_ ==\
    \ ' ')\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = text.split(\" \").map(x => x.replaceAll(\"\\\\s+\", \"-\")).mkString\n   \
    \             spacedText + consecutiveSpacedText\n            } else {\n     \
    \           spacedText\n            }\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpneekm37d.scala:32)\n\tat Problem.main(tmpneekm37d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val lastSpace = text.lastIndexOf(' ')\n        \
    \    val firstSpace = text.indexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, firstSpace) + \"_\" + text.substring(firstSpace + 1, lastSpace)\n\
    \            fixSpaces(newText)\n        } else {\n            text\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfeqci3og.scala:28)\n\tat Problem.main(tmpfeqci3og.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceIndex = text.lastIndexOf('\
    \ ')\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ spaces = text.count(_ == ' ')\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n            val lastSpace\
    \ = text.substring(lastSpaceIndex + 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n            val lastSpace\
    \ = text.substring(lastSpaceIndex + 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n            val lastSpace\
    \ = text.substring(lastSpaceIndex + 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n            val lastSpace\
    \ = text.substring(lastSpaceIndex + 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n            val lastSpace\
    \ = text.substring(lastSpaceIndex + 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaceIndex - 1)\n            val lastSpace = text.substring(lastSpaceIndex\
    \ + 1)\n            val lastSpaceIndex = text.lastIndexOf(' ', spaceIndex - 1)\n\
    \            val lastSpace = text.substring(lastSpaceIndex + 1)\n            val\
    \ lastSpaceIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0dlw9xd7.scala:57:32 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0dlw9xd7.scala:68:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dlw9xd7.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m, spaceIndex - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dlw9xd7.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mlastSpace\e[0m = text.substring(lastSpaceIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpace is already defined as \e[33mvalue\e[0m \e[35mlastSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0dlw9xd7.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m = text.lastIndexOf(\e\
    [31m' '\e[0m, spaceIndex - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ de"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces - 1) + text.substring(consecutiveSpaces, text.length)\n\
    \            result\n        } else {\n            text\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0249yoqz.scala:27)\n\tat Problem.main(tmp0249yoqz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvdbtf207.scala:25)\n\tat Problem.main(tmpvdbtf207.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.take(spaces - 1).mkString\
    \ + \"_\" + text.drop(spaces - 1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps8q752tj.scala:24)\n\tat Problem.main(tmps8q752tj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       fixedText2.length < fixedText.length ? fixedText2 : fixedText\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ywwse1v.scala:18:60 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        fixedText2.length < fixedText.length ? fixedText2\
    \ : \e[35mfixedText\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                                Not found: type fixedText\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ywwse1v.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        fixedText2.length < fixedText.length ? fixedText2\
    \ : \e[35mfixedText\e[0m\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value ? is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"_\")\n          \
    \  val newText3 = newText2.replaceAll(\"\\\\s+\", \"-\")\n            val newText4\
    \ = newText3.replaceAll(\"_+\", \"-\")\n            val newText5 = newText4.replaceAll(\"\
    _\", \"-\")\n            val newText6 = newText5.replaceAll(\"_\", \"-\")\n  \
    \          val newText7 = newText6.replaceAll(\"_\", \"-\")\n            val newText8\
    \ = newText7.replaceAll(\"_\", \"-\")\n            val newText9 = newText8.replaceAll(\"\
    _\", \"-\")\n            val newText10 = newText9.replaceAll(\"_\", \"-\")\n \
    \           val newText11 = newText10.replaceAll(\"_\", \"-\")\n            val\
    \ newText12 = newText11.replaceAll(\"_\", \"-\")\n            val newText13 =\
    \ newText12.replaceAll(\"_\", \"-\")\n            val newText14 = newText13.replaceAll(\"\
    _\", \"-\")\n            val newText15 = newText14.replaceAll(\"_\", \"-\")\n\
    \            val newText16 = newText15.replaceAll(\"_\", \"-\")\n            val\
    \ newText17 = newText16.replaceAll(\"_\", \"-\")\n            val newText18 =\
    \ newText17.replaceAll(\"_\", \"-\")\n            val newText19 = newText18.replaceAll(\"\
    _\", \"-\")\n            val newText20 = newText19.replaceAll(\"_\", \"-\")\n\
    \            val newText21 = newText20.replaceAll(\"_\", \"-\")\n            val\
    \ newText22 = newText21.replaceAll(\"_\", \"-\")\n            val newText23 =\
    \ newText22.replaceAll(\"_\", \"-\")\n            val newText24 = newText23.replaceAll(\"\
    _\", \"-\")\n            val newText25 = newText24.replaceAll(\"_\", \"-\")\n\
    \            val newText26 = newText25.replaceAll(\"_\", \"-\")\n            val\
    \ newText27 = newText26.replaceAll(\"_\", \"-\")\n            val newText28 =\
    \ newText27.replaceAll(\"_\", \"-\")\n            val newText29 = newText28.replaceAll(\"\
    _\", \"-\")\n            val newText30 = newText29.replaceAll(\"_\", \"-\")\n\
    \            val newText31 = newText30.replaceAll(\"_\", \"-\")\n            val\
    \ newText32 = newText31.replaceAll(\"_\", \"-\")\n            val newText33 =\
    \ newText32.replace\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqjdm4_9f.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpqjdm4_9f.scala:50:38\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnewText33\e[0m = newText32.replace\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous overload. The\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence):\
    \ String\n\e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mboth\
    \ match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpqjdm4_9f.scala:60:1 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpqjdm4_9f.scala:52:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m52 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (spaces.length() > 2) {\n            val spacedText = spaces.replaceAll(\"\
    \\\\s+\", \"-\")\n            spacedText\n        } else {\n            spaces\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftgtmzr9.scala:27)\n\tat Problem.main(tmpftgtmzr9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       fixedText2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnl5m_69_.scala:23)\n\tat Problem.main(tmpnl5m_69_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces > 2) text + \"_\"\n        else text.replaceAll(' ', '_')\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2a953suv.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2a953suv.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spacedText = text.split(\"\
    \ \").map(x => x.replaceAll(\" \", \"_\"))\n            result = spacedText.mkString(\"\
    \ \")\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpclu3uwjj.scala:26)\n\tat Problem.main(tmpclu3uwjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1) + text.substring(spaces\
    \ - 1, consecutiveSpaces)\n            fixSpaces(result)\n        } else {\n \
    \           text\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpit8a4lfe.scala:27)\n\tat Problem.main(tmpit8a4lfe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaces = text.count(_ ==\
    \ ' ')\n            val lastSpace = text.lastIndexOf(' ')\n            val lastSpaceIndex\
    \ = text.lastIndexOf(' ', spaces - 1)\n            val firstSpaceIndex = text.indexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace = text.charAt(firstSpaceIndex)\n\
    \            val lastSpace = text.charAt(lastSpaceIndex)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', spaces - 1)\n            val lastSpaceIndex = text.lastIndexOf('\
    \ ', spaces - 1)\n            val firstSpace\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwgh3sm5v.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwgh3sm5v.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgh3sm5v.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mlastSpace\e[0m = text.charAt(lastSpaceIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastSpace is already defined as \e[33mvalue\e[0m \e[35mlastSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgh3sm5v.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mfirstSpaceIndex\e[0m = text.indexOf(\e\
    [31m' '\e[0m, spaces - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstSpaceIndex is already defined as \e[33mvalue\e[0m \e\
    [35mfirstSpaceIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwgh3sm5v.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mlastSpaceIndex\e[0m\
    \ = text.lastIndexOf(\e[31m' '\e[0m, spaces - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mlastSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mlastSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwgh3sm5v.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mfirstSpace\e[0m = text.charAt(firstSpaceIndex)\n\
    \e[31m\e[31m  "
  stdout: ''
  timestamp: 1660029198
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvdbtf207.scala:25)\n\tat Problem.main(tmpvdbtf207.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.dropRight(spaces)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58hlwvep.scala:23)\n\tat Problem.main(tmp58hlwvep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        var lastSpaceIndex\
    \ = 0\n        var lastSpace = \" \"\n        var newLastSpaceIndex = -1\n   \
    \     var newLastSpace = \" \"\n        var spaceCount = 0\n        for(i <- 0\
    \ until text.length){\n            if(text.charAt(i) == ' '){\n              \
    \  spaceCount += 1\n                if(spaceCount > 2){\n                    newLastSpaceIndex\
    \ = i\n                    newLastSpace = text.charAt(newLastSpaceIndex)\n   \
    \             }\n            }\n            else{\n                spaceCount\
    \ = 0\n            }\n        }\n        if(newLastSpaceIndex != -1){\n      \
    \      newText = newText.substring(0, newLastSpaceIndex) + newLastSpace + newText.substring(newLastSpaceIndex\
    \ + 1)\n        }\n        return newText\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp29plpabh.scala:27:46\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    newLastSpace\
    \ = text.charAt(newLastSpaceIndex)\n\e[31m\e[31m   |\e[0m                    \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                          Found:    Char\n\e[31m   |\e[0m                   \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(s\
    \ => if (s.equals(\" \") || s.equals(\"\")) \"_\" else s).mkString\n         \
    \   fixSpaces(newText)\n        } else {\n            text\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd93s9isv.scala:26)\n\tat Problem.main(tmpd93s9isv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpngbi12rk.scala:26)\n\tat Problem.main(tmpngbi12rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029203
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8jyplwb5.scala:26)\n\tat Problem.main(tmp8jyplwb5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val lastSpace = text.lastIndexOf('\
    \ ')\n            val firstSpace = text.indexOf(' ', lastSpace + 1)\n        \
    \    val lastSpaceIndex = text.lastIndexOf(' ')\n            val firstSpaceIndex\
    \ = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf('\
    \ ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ',\
    \ lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex\
    \ + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n\
    \            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n   \
    \         val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n      \
    \      val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n         \
    \   val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val\
    \ firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf('\
    \ ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ',\
    \ lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex\
    \ + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n\
    \            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n   \
    \         val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n      \
    \      val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n         \
    \   val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val\
    \ firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf('\
    \ ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ',\
    \ lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex\
    \ + 1)\n            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n\
    \            val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n   \
    \         val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n      \
    \      val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n         \
    \   val firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val\
    \ firstSpaceIndex = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex\
    \ = text.indexOf(' ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf('\
    \ ', lastSpaceIndex + 1)\n            val firstSpaceIndex = text.indexOf(' ',\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwq45ph7w.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwq45ph7w.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwq45ph7w.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mfirstSpaceIndex\e[0m = text.indexOf(\e\
    [31m' '\e[0m, lastSpaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mfirstSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mfirstSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwq45ph7w.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mfirstSpaceIndex\e[0m = text.indexOf(\e\
    [31m' '\e[0m, lastSpaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mfirstSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mfirstSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwq45ph7w.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mfirstSpaceIndex\e[0m = text.indexOf(\e\
    [31m' '\e[0m, lastSpaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mfirstSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mfirstSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwq45ph7w.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e["
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        val consecutiveSpaces = text.count(_ == ' ' && _ != ' ')\n\
    \        if (spaces > 2 && consecutiveSpaces > 0) {\n            result = text.replaceAll('\
    \ ', '-')\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0rjooyu6.scala:18:43 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaces\e[0m =\
    \ text.count(_ == \e[31m' '\e[0m && _ != \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0rjooyu6.scala:20:37 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result = text.replaceAll(\e[31m' '\e[0m,\
    \ \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                                     Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0rjooyu6.scala:20:42\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result = text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'-'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                 ^^^\e[0m\n\e[31m   |\e[0m                                  \
    \        Found:    (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n          \
    \  if (consecutiveSpaces == 1) {\n                newText2\n            } else\
    \ {\n                newText2\n            }\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphilk3ks8.scala:32)\n\tat Problem.main(tmphilk3ks8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029207
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces > 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1p0cn9q.scala:24)\n\tat Problem.main(tmph1p0cn9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\")).mkString\n            val spacedText2 = spacedText.replaceAll(\"\
    _+\", \"_\")\n            spacedText2\n        } else {\n            text\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hx273yd.scala:27)\n\tat Problem.main(tmp7hx273yd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.replaceAll(\" \", \"-\")\n            val\
    \ newText3 = newText2.replaceAll(\"-\", \" \")\n            val newText4 = newText3.replaceAll(\"\
    -\", \" \")\n            val newText5 = newText4.replaceAll(\"-\", \" \")\n  \
    \          val newText6 = newText5.replaceAll(\"-\", \" \")\n            val newText7\
    \ = newText6.replaceAll(\"-\", \" \")\n            val newText8 = newText7.replaceAll(\"\
    -\", \" \")\n            val newText9 = newText8.replaceAll(\"-\", \" \")\n  \
    \          val newText10 = newText9.replaceAll(\"-\", \" \")\n            val\
    \ newText11 = newText10.replaceAll(\"-\", \" \")\n            val newText12 =\
    \ newText11.replaceAll(\"-\", \" \")\n            val newText13 = newText12.replaceAll(\"\
    -\", \" \")\n            val newText14 = newText13.replaceAll(\"-\", \" \")\n\
    \            val newText15 = newText14.replaceAll(\"-\", \" \")\n            val\
    \ newText16 = newText15.replaceAll(\"-\", \" \")\n            val newText17 =\
    \ newText16.replaceAll(\"-\", \" \")\n            val newText18 = newText17.replaceAll(\"\
    -\", \" \")\n            val newText19 = newText18.replaceAll(\"-\", \" \")\n\
    \            val newText20 = newText19.replaceAll(\"-\", \" \")\n            val\
    \ newText21 = newText20.replaceAll(\"-\", \" \")\n            val newText22 =\
    \ newText21.replaceAll(\"-\", \" \")\n            val newText23 = newText22.replaceAll(\"\
    -\", \" \")\n            val newText24 = newText23.replaceAll(\"-\", \" \")\n\
    \            val newText25 = newText24.replaceAll(\"-\", \" \")\n            val\
    \ newText26 = newText25.replaceAll(\"-\", \" \")\n            val newText27 =\
    \ newText26.replaceAll(\"-\", \" \")\n            val newText28 = newText27.replaceAll(\"\
    -\", \" \")\n            val newText29 = newText28.replaceAll(\"-\", \" \")\n\
    \            val newText30 = newText29.replaceAll(\"-\", \" \")\n            val\
    \ newText31 = newText30.replaceAll(\"-\", \" \")\n            val newText32 =\
    \ newText31.replaceAll(\"-\", \" \")\n            val newText33 = newText32.replaceAll(\"\
    -\", \" \")\n            val newText34 = newText33.replaceAll(\"-\", \" \")\n\
    \            val new\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpujc0c_v1.scala:53:16 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m            \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpujc0c_v1.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpujc0c_v1.scala:63:1 ---------------------\e[0m\e[0m\n\
    \e[31m63 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpujc0c_v1.scala:55:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m55 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText = spacedText.mkString(\" \")\n     \
    \       spacedText\n        } else {\n            text\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqzmg0qp3.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mspacedText\e[0m = spacedText.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspacedText is already defined as \e[33mvalue\e[0m \e[35mspacedText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpqzmg0qp3.scala:20:12 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            spacedText\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (spacedText : Array[String])\n\e[31m\
    \   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => x.replaceAll('\
    \ ', '_'))\n            val consecSpaces = spacedText.take(spacedText.length -\
    \ 1).count(_ == ' ')\n            val lastSpace = spacedText.last\n          \
    \  if (consecSpaces > 1) {\n                lastSpace.replaceAll(' ', '-')\n \
    \           } else {\n                lastSpace\n            }\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1u4_so7.scala:18:67\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mspacedText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                          Found:    (\e[31m' '\e[0m : Char)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1u4_so7.scala:18:72\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mspacedText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                               Found:    (\e[31m'_'\e[0m : Char)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmph1u4_so7.scala:19:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mconsecSpaces\e[0m =\
    \ spacedText.take(spacedText.length - \e[31m1\e[0m).count(_ == \e[31m' '\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph1u4_so7.scala:22:37 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                lastSpace.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (\e[31m' '\e[0m : Char)\n\e\
    [31m   |\e[0m                                     Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660029208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).toList.map(_.swapCase).toList.map(_.toString).mkString(\"\
    -\")\n            return newText\n        }\n        else {\n            return\
    \ text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpozqqcubn.scala:18:74 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnewText\e[0m = text.split(\e\
    [31m' '\e[0m).map(_.toLowerCase).toList.map(_.swapCase).toList.map(_.toString).mkString(\e\
    [31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                     value swapCase is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"-\")\n \
    \       fixedText2\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnl5m_69_.scala:23)\n\tat Problem.main(tmpnl5m_69_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceCount = text.count(_\
    \ == ' ')\n            val newText = text.split(' ').map(_.toLowerCase).toList\n\
    \            val newSpaceCount = newText.count(_ == ' ')\n            val newSpaces\
    \ = newText.count(_ == ' ')\n            if (newSpaceCount > 1) {\n          \
    \      val newText = newText.map(_.toLowerCase).toList\n                val newSpaceCount\
    \ = newText.count(_ == ' ')\n                val newSpaces = newText.count(_ ==\
    \ ' ')\n                val newSpaceIndex = newSpaceCount - 1\n              \
    \  val newSpaces = newText.take(newSpaceIndex).count(_ == ' ')\n             \
    \   val newSpaceIndex = newSpaces - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = newSpaceIndex\
    \ - 1\n                val newSpaceIndex = newSpaceIndex - 1\n               \
    \ val newSpaceIndex = newSpaceIndex - 1\n                val newSpaceIndex = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdks_atdk.scala:66:35 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m                \e[33mval\e[0m \e[36mnewSpaceIndex\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdks_atdk.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpdks_atdk.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewSpaceCount\e[0m = newText.count(_ == \e[31m' '\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpdks_atdk.scala:22:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewSpaces\e[0m = newText.count(_\
    \ == \e[31m' '\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdks_atdk.scala:28:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e\
    [0m \e[36mnewSpaces\e[0m = newText.take(newSpaceIndex).count(_ == \e[31m' '\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewSpaces is already defined as \e[33mvalue\e[0m \e[35mnewSpaces\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdks_atdk.scala:29:20 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m                \e[33mval\e[0m \e[36mnewSpaceIndex\e[0m = newSpaces\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(_.toLowerCase).map(s\
    \ => if (s.equals(\"\")) \"_\" else s)\n            val consecutiveSpaces = spacedText.sliding(2).map(_.mkString(\"\
    -\"))\n            spacedText.zip(consecutiveSpaces).map(s => s.mkString(\" \"\
    )).mkString(\" \")\n        } else {\n            text\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp92v_x0un.scala:20:57 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            spacedText.zip(consecutiveSpaces).map(\e\
    [36ms\e[0m => s.mkString(\e[31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of (String, String) - did you\
    \ mean s.toString?\n\e[31m\e[31m-- Error: /tmp/tmp92v_x0un.scala:20:71 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            spacedText.zip(consecutiveSpaces).map(\e\
    [36ms\e[0m => s.mkString(\e[31m\" \"\e[0m)).mkString(\e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029207
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = text.lastIndexOf('\
    \ ')\n        while (lastSpace != -1) {\n            val nextSpace = text.indexOf('\
    \ ', lastSpace + 1)\n            if (nextSpace == -1) {\n                result\
    \ += text.substring(lastSpace)\n            } else {\n                result +=\
    \ text.substring(lastSpace, nextSpace)\n                result += text.substring(nextSpace)\n\
    \            }\n            lastSpace = text.lastIndexOf(' ')\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660029208
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixed = text\n        fixed = fixed.replaceAll(\"\
    \\\\s+\", \"_\")\n        fixed = fixed.substring(0, fixed.length - 2)\n     \
    \   fixed\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqpblnafx.scala:22)\n\tat Problem.main(tmpqpblnafx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(_.toLowerCase).mkString(\"\
    \ \")\n            val consecutiveSpaces = text.count(_ == ' ')\n            if\
    \ (consecutiveSpaces > 1) {\n                val consecutiveSpacedText = text.split(\"\
    \ \").map(_.toLowerCase).mkString(\"\")\n                val newText = spacedText.replaceAll(\"\
    \ \", \"-\")\n                val newConsecutiveSpacedText = consecutiveSpacedText.replaceAll(\"\
    \ \", \"-\")\n                val newText = newText.replaceAll(consecutiveSpacedText,\
    \ \"-\")\n                println(newText)\n                println(newConsecutiveSpacedText)\n\
    \                println(newText)\n                println(newConsecutiveSpacedText)\n\
    \            }\n        }\n        text\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplbxperrr.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mnewText\e[0m = newText.replaceAll(consecutiveSpacedText,\
    \ \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewText is already defined as \e[33mvalue\e[0m \e[35mnewText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660029201
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 1) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \\\\s+\", \"_\"))\n            spacedText.mkString(\" \")\n        } else {\n\
    \            text\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7sc0mr79.scala:26)\n\tat Problem.main(tmp7sc0mr79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        val spaceIndex = text.indexOf(' ')\n        while (spaceIndex\
    \ >= 0) {\n            if (lastSpaceIndex == -1) {\n                lastSpaceIndex\
    \ = spaceIndex\n            }\n            else {\n                if (lastSpaceIndex\
    \ != spaceIndex) {\n                    result = result.replace(\" \", \"_\")\n\
    \                }\n            }\n            lastSpaceIndex = spaceIndex\n \
    \           spaceIndex = text.indexOf(' ', spaceIndex + 1)\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_i4gnqx9.scala:29:23 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            spaceIndex = text.indexOf(\e[31m' '\e[0m,\
    \ spaceIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val spaceIndex\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ if (spaces == 2) text + \"_-\"\n        else text.replaceAll(' ', '_')\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0juj0jjm.scala:20:29\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                             Found:    (\e[31m'\
    \ '\e[0m : Char)\n\e[31m   |\e[0m                             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0juj0jjm.scala:20:34\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33melse\e[0m text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                  Found:  \
    \  (\e[31m'_'\e[0m : Char)\n\e[31m   |\e[0m                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029208
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = words.map(word => {\n            if (word.equals(\" \")) {\n             \
    \   \"_\"\n            } else {\n                word\n            }\n       \
    \ })\n        val newText = newWords.mkString(\" \")\n        if (newText.length\
    \ > 2) {\n            newText.replaceAll(\"\\\\s+\", \"-\")\n        } else {\n\
    \            newText\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdi9exviz.scala:33)\n\tat Problem.main(tmpdi9exviz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029221
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val consecutiveSpaces = fixedText.count(_ == \" \")\n      \
    \  if (consecutiveSpaces > 1) {\n            val fixedText2 = fixedText.replaceAll(\"\
    \\\\s+\", \"-\")\n            fixedText2\n        } else {\n            fixedText\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmper0apmsb.scala:17:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mconsecutiveSpaces\e[0m =\
    \ fixedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else text.replace(\" \", \"_\") + \"-\" + text.replace(\" \", \"_\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9owqtghj.scala:23)\n\tat Problem.main(tmp9owqtghj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText2 = spacedText.map(x => x.replaceAll(\"\
    _\", \"-\"))\n            spacedText2.mkString(\" \")\n        } else {\n    \
    \        text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hjdihw2.scala:27)\n\tat Problem.main(tmp6hjdihw2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val result\
    \ = new StringBuilder\n        var lastSpace = 0\n        for (word <- words)\
    \ {\n            if (word.equals(\" \")) {\n                lastSpace = word.length\n\
    \            }\n            else {\n                if (lastSpace > 0) {\n   \
    \                 result.append(word.substring(0, lastSpace))\n              \
    \      result.append(word.substring(lastSpace))\n                    lastSpace\
    \ = 0\n                }\n                else {\n                    result.append(word)\n\
    \                }\n            }\n        }\n        result.toString()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpknlnzh1b.scala:38)\n\tat Problem.main(tmpknlnzh1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.substring(0, spaces - 1)\n            for (i <-\
    \ 1 to consecutiveSpaces) {\n                result += \"-\"\n            }\n\
    \            result\n        } else {\n            text\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf5d96sn0.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += \e[31m\"-\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660029218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val newText = text.split(\" \").map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvnr5ii_r.scala:26)\n\tat Problem.main(tmpvnr5ii_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText = spacedText.mkString(\" \")\n     \
    \       spacedText\n        } else {\n            text\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqzmg0qp3.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mspacedText\e[0m = spacedText.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspacedText is already defined as \e[33mvalue\e[0m \e[35mspacedText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpqzmg0qp3.scala:20:12 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            spacedText\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (spacedText : Array[String])\n\e[31m\
    \   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").split(\"_\")\n        val consecutiveSpaces = spaces.zipWithIndex.filter(_._2\
    \ == 1).map(_._1)\n        val consecutiveUnderscores = consecutiveSpaces.map(_.replaceAll(\"\
    _+\", \"-\"))\n        val result = consecutiveUnderscores.mkString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2n8gu8m7.scala:23)\n\tat Problem.main(tmp2n8gu8m7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.substring(0, text.lastIndexOf(' '))\n        } else {\n         \
    \   text.substring(0, text.lastIndexOf(' '))\n                + text.substring(text.lastIndexOf('\
    \ ') + 1)\n                + text.substring(text.lastIndexOf(' ') + 1)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 7\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fixSpaces(tmplj2kbjet.scala:22)\n\tat Problem$.main(tmplj2kbjet.scala:28)\n\
    \tat Problem.main(tmplj2kbjet.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029223
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            (newText.dropRight(consecutiveSpaces)\n                + newText.take(consecutiveSpaces)\n\
    \                + newText.drop(consecutiveSpaces + 1)).mkString\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ojgsze2.scala:29)\n\tat Problem.main(tmp4ojgsze2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        fixedText = fixedText.replaceAll(\"\
    \ \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n      \
    \  fixedText = fixedText.replaceAll(\"  \", \" \")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixedText.replaceAll(\"\
    \  \", \"_\")\n        fixedText = fixedText.replaceAll(\"  \", \"_\")\n     \
    \   fixedText = fixedText.replaceAll(\"  \", \"_\")\n        fixedText = fixed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp331qy8z.scala:59:20 ------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        fixedText = fixed\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: fixed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        if (newText.length > 2) {\n            newText.replaceAll(\"\\\\\
    s+\", \"-\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxu5194cw.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mif\e[0m (newText.length\
    \ > \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\
    \        Maybe you are missing an else part for the conditional?\n\e[31m18 |\e\
    [0m            newText.replaceAll(\e[31m\"\\\\s+\"\e[0m, \e[31m\"-\"\e[0m)\n\e\
    [31m19 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        var lastSpaceIndex\
    \ = -1\n        for(i <- 0 until text.length){\n            if(text.charAt(i)\
    \ == ' '){\n                lastSpaceIndex = i\n            }\n        }\n   \
    \     for(i <- 0 until text.length){\n            if(text.charAt(i) == ' ' &&\
    \ i != lastSpaceIndex){\n                fixedText = fixedText.substring(0, i)\
    \ + \"_\" + fixedText.substring(i + 1)\n            }\n        }\n        fixedText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3c7zcgp6.scala:32)\n\tat Problem.main(tmp3c7zcgp6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val newText = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val newText2 = newText.replaceAll(\"\\\\s+\", \"-\")\n        if\
    \ (newText2.length > 2) {\n            newText2.substring(0,newText2.length-1)\n\
    \        } else {\n            newText2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzusoxlr.scala:25)\n\tat Problem.main(tmppzusoxlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            if (consecutiveSpaces == 1) {\n                newText\n\
    \            } else {\n                newText.replaceAll(\"\\\\s+\", \"-\")\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0xt0k4b.scala:31)\n\tat Problem.main(tmpl0xt0k4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixed = text.replaceAll(\" \", \"_\")\n\
    \        val split = fixed.split(\"_\")\n        val result = split.map(x => if\
    \ (x.equals(\"\")) \"_\" else x)\n        val result = result.filter(x => x.length()\
    \ > 2)\n        val result = result.map(x => if (x.equals(\"\")) \"_\" else x)\n\
    \        val result = result.mkString(\"-\")\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmj4z8qe.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.filter(\e\
    [36mx\e[0m => x.length() > \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxmj4z8qe.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x.equals(\e[31m\"\"\e[0m)) \e[31m\"_\"\e[0m \e[33melse\e[0m\
    \ x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxmj4z8qe.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = result.mkString(\e[31m\"\
    -\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpxmj4z8qe.scala:22:8 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (result : Array[String])\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 1) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val fixedText = text.split(\" \").map(x => if (x == \" \") \"_\" else\
    \ x).mkString\n            if (consecutiveSpaces == fixedText.count(_ == \" \"\
    )) {\n                fixedText\n            } else {\n                fixedText.replaceAll(\"\
    \ \", \"_\")\n            }\n        } else {\n            text\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphfr1zttd.scala:20:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (consecutiveSpaces == fixedText.count(_\
    \ == \e[31m\" \"\e[0m)) {\n\e[31m\e[31m   |\e[0m                             \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(\" \").map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq78s3qy.scala:26)\n\tat Problem.main(tmpkq78s3qy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\" \", \"_\")\n\
    \        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"_\")\n      \
    \  if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    _\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpqmj8bm.scala:26)\n\tat Problem.main(tmphpqmj8bm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029224
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString(\"\
    -\")\n            newText\n        } else {\n            text\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7eoj14yv.scala:26)\n\tat Problem.main(tmp7eoj14yv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceIndex = text.lastIndexOf('\
    \ ')\n            val newText = text.substring(0, spaceIndex) + \"-\" + text.substring(spaceIndex\
    \ + 1)\n        }\n        newText\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqd1e8qx.scala:26)\n\tat Problem.main(tmpqqd1e8qx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpace = 0\n\
    \        var lastSpaceCount = 0\n        var lastSpaceChar = \"\"\n        for(i\
    \ <- 0 until text.length){\n            val c = text.charAt(i)\n            if(c\
    \ == ' '){\n                lastSpace = i\n                lastSpaceCount = 1\n\
    \                lastSpaceChar = c\n            }\n            else{\n       \
    \         lastSpaceCount = lastSpaceCount + 1\n                if(lastSpaceCount\
    \ == 2){\n                    result = result.substring(0, lastSpace) + lastSpaceChar\
    \ + result.substring(lastSpace)\n                }\n                lastSpace\
    \ = 0\n                lastSpaceCount = 0\n                lastSpaceChar = \"\"\
    \n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7ef4eh4.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                lastSpaceChar\
    \ = c\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Found:    (c : Char)\n\e[31m   |\e[0m     \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029226
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => if (x ==\
    \ \" \") \"_\" else x).mkString\n            fixSpaces(newText)\n        } else\
    \ {\n            text\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0lk1vsy7.scala:26)\n\tat Problem.main(tmp0lk1vsy7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newTextWithConsecutiveSpaces = newText.take(consecutiveSpaces)\n\
    \            val newTextWithConsecutiveSpacesReplaced = newTextWithConsecutiveSpaces.mkString.replaceAll(\"\
    \\\\s+\", \"-\")\n            val newTextWithConsecutiveSpacesReplacedWithSpaces\
    \ = newTextWithConsecutiveSpacesReplaced.mkString(\" \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscores\
    \ = newTextWithConsecutiveSpacesReplacedWithSpaces.replaceAll(\"\\\\s+\", \"_\"\
    )\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpaces\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscores.mkString(\" \")\n    \
    \        val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphen\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpaces.replaceAll(\"\
    \\\\s+\", \"_- \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpaces\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphen.mkString(\"\
    \ \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphen\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpaces.replaceAll(\"\
    \\\\s+\", \"_- \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphenWithSpaces\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphen.mkString(\"\
    \ \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphenWithSpacesAndHyphen\
    \ = newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphenWithSpaces.replaceAll(\"\
    \\\\s+\", \"_- \")\n            val newTextWithConsecutiveSpacesReplacedWithUnderscoresWithSpacesAndHyphenWithSpacesAndHyphenWithSpacesAndHy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfr6m4gc0.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfr6m4gc0.scala:41:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpfr6m4gc0.scala:40:1 ---------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpfr6m4gc0.scala:32:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m32 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029228
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(s => if (s ==\
    \ \" \") \"_\" else s).mkString\n            if (consecutiveSpaces == 1) {\n \
    \               text.split(' ').map(_.toLowerCase).map(s => if (s == \" \") \"\
    _\" else s).mkString\n            } else {\n                newText\n        \
    \    }\n        } else {\n            text\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkc2zypxn.scala:31)\n\tat Problem.main(tmpkc2zypxn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var fixedText = text\n        fixedText = fixedText.replaceAll(\"\
    \\\\s+\", \"_\")\n        fixedText = fixedText.replaceAll(\"\\\\s+\", \"-\")\n\
    \        fixedText\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zbdf7n2.scala:24)\n\tat Problem.main(tmp3zbdf7n2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces-1) + text.drop(spaces-1).replaceAll(' ', '-')\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq88uezm2.scala:19:66\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.take(spaces-\e\
    [31m1\e[0m) + text.drop(spaces-\e[31m1\e[0m).replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                ^^^\e[0m\n\e[31m   |\e[0m                                   \
    \               Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e[0m           \
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq88uezm2.scala:19:71 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33melse\e[0m text.take(spaces-\e[31m1\e[0m)\
    \ + text.drop(spaces-\e[31m1\e[0m).replaceAll(\e[31m' '\e[0m, \e[31m'-'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^\e[0m\n\e[31m   |\e[0m                                    \
    \              Found:    (\e[31m'-'\e[0m : Char)\n\e[31m   |\e[0m            \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 1) {\n            val spacedText = text.split(\" \").map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            val spacedText = spacedText.mkString(\" \")\n     \
    \       spacedText\n        } else {\n            text\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmped012vn5.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mspacedText\e[0m = spacedText.mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mspacedText is already defined as \e[33mvalue\e[0m \e[35mspacedText\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmped012vn5.scala:20:12 --------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            spacedText\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    (spacedText : Array[String])\n\e[31m\
    \   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029227
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val result = text.split(' ').map(x => if (x == \" \") \"_\" else x).mkString\n\
    \            if (consecutiveSpaces == 1) {\n                result + \"-\"\n \
    \           } else {\n                result + \"-\" + result.drop(consecutiveSpaces)\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6b82z4a3.scala:31)\n\tat Problem.main(tmp6b82z4a3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val newText = text.split(' ').map(x => x.replaceAll('\
    \ ', '_'))\n            newText.mkString\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm9_815km.scala:18:64\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                        ^^^\e[0m\n\e[31m   |\e[0m           \
    \                                       Found:    (\e[31m' '\e[0m : Char)\n\e\
    [31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm9_815km.scala:18:69\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mnewText\e[0m = text.split(\e[31m' '\e[0m).map(\e[36mx\e[0m => x.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m))\n\e[31m\e[31m   |\e[0m                        \
    \                                             ^^^\e[0m\n\e[31m   |\e[0m      \
    \                                            Found:    (\e[31m'_'\e[0m : Char)\n\
    \e[31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\").split(\"_\")\n        val result = \"\"\n        var i = 0\n        while\
    \ (i < spaces.length) {\n            if (spaces(i).equals(spaces(i + 1))) {\n\
    \                result += \"-\"\n                i += 1\n            } else {\n\
    \                result += spaces(i)\n                i += 1\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ckbqeyn.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result += \e[31m\"-\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean result.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3ckbqeyn.scala:24:23 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                result += spaces(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = words.map(word => {\n            if (word.equals(\" \")) {\n             \
    \   \"_\"\n            } else {\n                word\n            }\n       \
    \ })\n        val newText = newWords.mkString(\" \")\n        if (newText.length\
    \ > 2) {\n            newText.replaceAll(\" \", \"-\")\n        } else {\n   \
    \         newText\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpno_04m_4.scala:33)\n\tat Problem.main(tmpno_04m_4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => if (x\
    \ == \" \") \"_\" else x).mkString\n            val consecutiveSpaces = spacedText.count(_\
    \ == \" \")\n            if (consecutiveSpaces > 1) {\n                val consecutiveSpacedText\
    \ = spacedText.split(' ').map(x => if (x == \" \") \"-\" else x).mkString\n  \
    \              consecutiveSpacedText\n            } else {\n                spacedText\n\
    \            }\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp16k1_y80.scala:19:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mconsecutiveSpaces\e\
    [0m = spacedText.count(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types Char and String cannot be compared with == or !=\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029231
