language: scala
name: HumanEval_140_fix_spaces
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces > 2) {\n      \
    \      val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            newText2.replaceAll(\"_\", \"-\")\n        } else {\n           \
    \ text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpng9b6tig.scala:29)\n\tat Problem.main(tmpng9b6tig.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        var lastSpaceIndex\
    \ = -1\n        var lastSpace = \"\"\n        var lastSpaceCount = 0\n       \
    \ for(i <- 0 until text.length){\n            val c = text.charAt(i)\n       \
    \     if(c == ' '){\n                lastSpaceIndex = i\n                lastSpace\
    \ = c\n                lastSpaceCount = 1\n            }\n            else{\n\
    \                lastSpaceCount = lastSpaceCount + 1\n                if(lastSpaceCount\
    \ > 2){\n                    result = result.substring(0, lastSpaceIndex) + result.substring(lastSpaceIndex\
    \ + 1, lastSpaceIndex + 1) + result.substring(lastSpaceIndex + 2)\n          \
    \      }\n                lastSpace = \"\"\n                lastSpaceIndex = -1\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0pnqyviu.scala:24:28\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lastSpace = c\n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    (c : Char)\n\e[31m   |\e[0m                \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            (newText take consecutiveSpaces).mkString + \n                (newText\
    \ drop (consecutiveSpaces + 1)).mkString\n        } else {\n            text\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp959gwifb.scala:28)\n\tat Problem.main(tmp959gwifb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            result = text.replaceAll(\"\\\
    \\s+\", \"_\")\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elud5am.scala:25)\n\tat Problem.main(tmp1elud5am.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(_.toLowerCase).toList\n\
    \            val consecutiveSpaces = spacedText.sliding(2).map(_.length).sum\n\
    \            val fixedText = spacedText.map(_.toLowerCase).map(s => if (s == \"\
    \ \") \"_\" else s)\n            val fixedTextWithConsecutiveSpaces = fixedText.take(consecutiveSpaces).mkString(\"\
    \ \")\n            fixedTextWithConsecutiveSpaces + fixedText.drop(consecutiveSpaces)\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfosv14oi.scala:29)\n\tat Problem.main(tmpfosv14oi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text + \"_\"\n        else\
    \ text.take(spaces - 1).mkString + \"_\" + text.drop(spaces - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpulwru1cb.scala:23)\n\tat Problem.main(tmpulwru1cb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.replaceAll(\"\\\\s+\", \"\
    _\")\n        val consecutiveSpaces = spaces.replaceAll(\"\\\\s+\", \"-\")\n \
    \       if (consecutiveSpaces.length() > 2) {\n            consecutiveSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            consecutiveSpaces\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wtknz9d.scala:27)\n\tat Problem.main(tmp0wtknz9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800356
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val fixedText = text.replaceAll(\"\\\\s+\",\
    \ \"_\")\n        val spaceCount = fixedText.count(_ == '_')\n        if (spaceCount\
    \ > 2) {\n            val fixedText2 = fixedText.replaceAll(\"\\\\s+\", \"_\"\
    )\n            fixedText2.replaceAll(\"_+\", \"-\")\n        } else {\n      \
    \      fixedText\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_0iz8pk.scala:28)\n\tat Problem.main(tmpr_0iz8pk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800567
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var result = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val spaceCount = text.count(_\
    \ == ' ')\n            val lastSpace = text.lastIndexOf(' ')\n            val\
    \ lastSpaceIndex = text.lastIndexOf(' ', lastSpace + 1)\n            val newText\
    \ = text.substring(0, lastSpaceIndex).replaceAll(\"\\\\s+\", \"_\") + text.substring(lastSpaceIndex\
    \ + 1)\n            result = newText\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabzf759w.scala:29)\n\tat Problem.main(tmpabzf759w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 1) {\n            text\n        } else if (spaces == 2) {\n     \
    \       text.replaceAll(' ', '_')\n        } else {\n            text.replaceAll('\
    \ ', '-')\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:28\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e\
    [31m' '\e[0m, \e[31m'_'\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \   ^^^\e[0m\n\e[31m   |\e[0m                            Found:    (\e[31m' '\e\
    [0m : Char)\n\e[31m   |\e[0m                            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'_'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'_'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:28 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^\e[0m\n\e[31m   |\e\
    [0m                            Found:    (\e[31m' '\e[0m : Char)\n\e[31m   |\e\
    [0m                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprcyhm7f5.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            text.replaceAll(\e[31m' '\e[0m, \e[31m'-'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (\e[31m'-'\e[0m : Char)\n\e\
    [31m   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800357
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val spacedText = text.split(' ').map(x => x.replaceAll(\"\
    \ \", \"_\"))\n            spacedText.mkString\n        } else {\n           \
    \ text\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1q4s_ish.scala:26)\n\tat Problem.main(tmp1q4s_ish.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if(spaces\
    \ > 2) {\n            val newText = text.split(' ').map(_.toLowerCase).map(_.toUpperCase).mkString\n\
    \            val newText2 = newText.replaceAll(\" \", \"-\")\n            val\
    \ newText3 = newText2.replaceAll(\"-\", \" \")\n            val newText4 = newText3.replaceAll(\"\
    _\", \"-\")\n            val newText5 = newText4.replaceAll(\"-\", \" \")\n  \
    \          val newText6 = newText5.replaceAll(\"_\", \"-\")\n            val newText7\
    \ = newText6.replaceAll(\"-\", \" \")\n            val newText8 = newText7.replaceAll(\"\
    -\", \" \")\n            val newText9 = newText8.replaceAll(\"-\", \" \")\n  \
    \          val newText10 = newText9.replaceAll(\"-\", \" \")\n            val\
    \ newText11 = newText10.replaceAll(\"-\", \" \")\n            val newText12 =\
    \ newText11.replaceAll(\"-\", \" \")\n            val newText13 = newText12.replaceAll(\"\
    -\", \" \")\n            val newText14 = newText13.replaceAll(\"-\", \" \")\n\
    \            val newText15 = newText14.replaceAll(\"-\", \" \")\n            val\
    \ newText16 = newText15.replaceAll(\"-\", \" \")\n            val newText17 =\
    \ newText16.replaceAll(\"-\", \" \")\n            val newText18 = newText17.replaceAll(\"\
    -\", \" \")\n            val newText19 = newText18.replaceAll(\"-\", \" \")\n\
    \            val newText20 = newText19.replaceAll(\"-\", \" \")\n            val\
    \ newText21 = newText20.replaceAll(\"-\", \" \")\n            val newText22 =\
    \ newText21.replaceAll(\"-\", \" \")\n            val newText23 = newText22.replaceAll(\"\
    -\", \" \")\n            val newText24 = newText23.replaceAll(\"-\", \" \")\n\
    \            val newText25 = newText24.replaceAll(\"-\", \" \")\n            val\
    \ newText26 = newText25.replaceAll(\"-\", \" \")\n            val newText27 =\
    \ newText26.replaceAll(\"-\", \" \")\n            val newText28 = newText27.replaceAll(\"\
    -\", \" \")\n            val newText29 = newText28.replaceAll(\"-\", \" \")\n\
    \            val newText30 = newText29.replaceAll(\"-\", \" \")\n            val\
    \ newText31 = newText30.replaceAll(\"-\", \" \")\n            val newText32 =\
    \ newText31.replaceAll(\"-\", \" \")\n            val newText33 = newText32.replaceAll(\"\
    -\", \" \")\n            val newText34 = newText33.replaceAll(\"-\", \" \")\n\
    \            val newText35 = newText34.replaceAll(\"-\", \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ubmebp8.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ubmebp8.scala:63:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp2ubmebp8.scala:52:48\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m52 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnewText35\e[0m = newText34.replaceAll(\e[31m\"-\"\e\
    [0m, \n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnot enough arguments for \e[33mmethod\e[0m \e[35mreplaceAll\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (x$0: String, x$1: String): String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ubmebp8.scala:62:1 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp2ubmebp8.scala:54:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        var newText = text\n        val spaces = text.count(_\
    \ == ' ')\n        if (spaces > 2) {\n            val newSpaces = text.count(_\
    \ == ' ')\n            newText = newText.replaceAll(\"\\\\s+\", \"_\")\n     \
    \       newText = newText.replaceAll(\"\\\\s+\", \"-\")\n        }\n        newText\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w2ry_tf.scala:27)\n\tat Problem.main(tmp9w2ry_tf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText2 = newText.substring(0,newText.length-1)\n          \
    \  val newText3 = newText2.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText4 = newText3.substring(0,newText3.length-1)\n        \
    \    val newText5 = newText4.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText6 = newText5.substring(0,newText5.length-1)\n        \
    \    val newText7 = newText6.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText8 = newText7.substring(0,newText7.length-1)\n        \
    \    val newText9 = newText8.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText10 = newText9.substring(0,newText9.length-1)\n       \
    \     val newText11 = newText10.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText12 = newText11.substring(0,newText11.length-1)\n     \
    \       val newText13 = newText12.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText14 = newText13.substring(0,newText13.length-1)\n     \
    \       val newText15 = newText14.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText16 = newText15.substring(0,newText15.length-1)\n     \
    \       val newText17 = newText16.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText18 = newText17.substring(0,newText17.length-1)\n     \
    \       val newText19 = newText18.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText20 = newText19.substring(0,newText19.length-1)\n     \
    \       val newText21 = newText20.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText22 = newText21.substring(0,newText21.length-1)\n     \
    \       val newText23 = newText22.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText24 = newText23.substring(0,newText23.length-1)\n     \
    \       val newText25 = newText24.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newText26 = newText25.split(' ').\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\"\
    )));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n\
    \    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkmx8pb7e.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpkmx8pb7e.scala:55:0 ----------------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkmx8pb7e.scala:54:1 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpkmx8pb7e.scala:46:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m46 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800368
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val newText = text.split(' ').map(_.toLowerCase).map(_.toString).mkString\n\
    \            val newTextWithConsecutiveSpaces = newText.substring(0, newText.length\
    \ - consecutiveSpaces)\n            val newTextWithSpaces = newTextWithConsecutiveSpaces\
    \ + newText.substring(newText.length - consecutiveSpaces)\n            newTextWithSpaces.replaceAll(\"\
    \\\\s+\", \"-\")\n        } else {\n            text\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\")).equals((\"\
    Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"Mudasir_Hanif_\"\
    )));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\"\
    )));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2phmdcn.scala:29)\n\tat Problem.main(tmpx2phmdcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces > 2) {\n            val consecutiveSpaces = text.count(_ == ' ')\n \
    \           val fixedText = text.split(' ').map(_.toLowerCase).map(_.toString).map(_.trim).map(_.toUpperCase).mkString\n\
    \            val fixedTextWithConsecutiveSpaces = fixedText.take(consecutiveSpaces).mkString(\"\
    \") + \"-\" + fixedText.drop(consecutiveSpaces).mkString(\"\")\n            fixedTextWithConsecutiveSpaces\n\
    \        } else {\n            text\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fixSpaces((\"Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"\
    Mudasir Hanif \")).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow\
    \ Yellow  Dirty  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n   \
    \ assert(fixSpaces((\"Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"\
    \   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzayhn1ck.scala:28)\n\tat Problem.main(tmpzayhn1ck.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val words = text.split(\" \")\n        val newWords\
    \ = words.map(word => if (word.equals(\" \")) {\n            word.replaceAll(\"\
    \ \", \"_\")\n        } else {\n            word\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"\
    Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \"\
    )).equals((\"Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty\
    \  Fellow\")).equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"\
    Exa   mple\")).equals((\"Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2\
    \ mple\")).equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpviy9r6nd.scala:26)\n\tat Problem.main(tmpviy9r6nd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800568
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string text, replace all spaces in it with underscores, \n\
    \    // and if a string has more than 2 consecutive spaces, \n    // then replace\
    \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    //\
    \ (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\"\
    )\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>>\
    \ fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text\
    \ : String) : String = {\n        val spaces = text.count(_ == ' ')\n        if\
    \ (spaces == 0) text\n        else if (spaces == 1) text.replace(\" \", \"_\"\
    )\n        else if (spaces == 2) text.replace(\" \", \"-\")\n        else text\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
    )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
    Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
    Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
    Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2qp20px.scala:24)\n\tat Problem.main(tmpv2qp20px.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800346
