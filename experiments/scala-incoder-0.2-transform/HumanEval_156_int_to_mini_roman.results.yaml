language: scala
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptv39phpg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptv39phpg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmikpzra.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmikpzra.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659806082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.toInt) {\n            val n =\
    \ nums.toInt / i\n            val m = nums.toInt % i\n            roman += if\
    \ (n == 1) \"M\" else if (n == 2) \"MM\" else if (n == 3) \"MMM\" else \"\"\n\
    \            roman += if (m == 1) \"D\" else if (m == 2) \"DC\" else if (m ==\
    \ 3) \"DCC\" else \"\"\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpih_0z4n1.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (n == \e[31m1\e[0m)\
    \ \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m2\e[0m) \e[31m\"\
    MM\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (n == \e[31m3\e[0m) \e[31m\"MMM\"\e[0m\
    \ \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     expression expected but \e[31mif\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpih_0z4n1.scala:21:21\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            roman += \e\
    [33mif\e[0m (m == \e[31m1\e[0m) \e[31m\"D\"\e[0m \e[33melse\e[0m \e[33mif\e[0m\
    \ (m == \e[31m2\e[0m) \e[31m\"DC\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (m == \e\
    [31m3\e[0m) \e[31m\"DCC\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m\n\e[31m\e[31m \
    \  |\e[0m                     ^^\e[0m\n\e[31m   |\e[0m                     expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpih_0z4n1.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659806342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val num\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktlg1_os.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpktlg1_os.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktlg1_os.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktlg1_os.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpktlg1_os.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap2 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap3 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap4 = scala.collection.mutable.HashMap.empty[Int, Int]\n   \
    \     val numsMap5 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap6 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap9 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap10 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap12 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap13 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap14 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap17 =\
    \ scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap18 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap21 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap22 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap23 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb1u_77ip.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb1u_77ip.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1) + \"m\")\n            i -= 1000\n        }\n        while(i\
    \ >= 100) {\n            roman.append(roman.last.substring(0, roman.last.length\
    \ - 1) + \"c\")\n            i -= 100\n        }\n        while(i >= 10) {\n \
    \           roman.append(roman.last.substring(0, roman.last.length - 1) + \"l\"\
    )\n            i -= 10\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length - 1) + \"x\")\n        roman.toString().toLowerCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmp1nhxylq_.scala:26)\n\tat Problem$.main(tmp1nhxylq_.scala:33)\n\
    \tat Problem.main(tmp1nhxylq_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var index\
    \ = 0\n        var i = 0\n        while (i < numsString.length) {\n          \
    \  if (numsString(index).equals(\"1\")) {\n                roman += scala.math.pow(10,\
    \ i).toString.reverse\n                i += 1\n            } else if (numsString(index).equals(\"\
    0\")) {\n                roman += scala.math.pow(10, i).toString.reverse\n   \
    \             i += 1\n            } else {\n                roman += scala.math.pow(10,\
    \ i).toString.reverse\n                i += 1\n            }\n            index\
    \ += 1\n        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9smu4jsw.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9j25y2yl.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9j25y2yl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9j25y2yl.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9j25y2yl.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Int]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[String, Int]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap8 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Int]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[String, Int]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap13 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Int]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[String, Int]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap18 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Int]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[String, Int]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap23 = scala.collection.mutable.Map[String, Int]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Int]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[String, Int]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Int]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Int]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp25lcs8ug.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp25lcs8ug.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy11dn7jy.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy11dn7jy.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy11dn7jy.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy11dn7jy.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[Int, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap7 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[Int, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap12 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[Int, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap17 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[Int, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap22 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[Int, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Int, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39ti_bce.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap4 = scala.collection.mutable.Map[Long, String]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap6 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap7 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap9 = scala.collection.mutable.Map[Long, String]()\n        val numsMap10\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap11 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap12 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap14 = scala.collection.mutable.Map[Long, String]()\n        val numsMap15\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap16 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap17 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap19 = scala.collection.mutable.Map[Long, String]()\n        val numsMap20\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap21 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap22 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap24 = scala.collection.mutable.Map[Long, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap26 = scala.collection.mutable.Map[Long,\
    \ String]\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvps9ihun.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[String, Long]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap8 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[String, Long]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap13 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[String, Long]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap18 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[String, Long]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap23 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[String, Long]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcqb7wcz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcqb7wcz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val num = numsString.charAt(i).toInt\n\
    \            val romanNum = scala.math.pow(10, num).toInt\n            roman +=\
    \ romanNum.toString\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6v74w31.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder3 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder6 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder10 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder11 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder12 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder15 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder17 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder20 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder21 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder24 = scala.collection.mutable.List\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzv497evz.scala:41:59 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder24\e[0m\
    \ = scala.collection.mutable.List\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue List is\
    \ not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv497evz.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[String, Long]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap8 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[String, Long]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap13 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[String, Long]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap18 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[String, Long]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap23 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[String, Long]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcqb7wcz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcqb7wcz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        for (i <-\
    \ 0 until numsStr.length)\n            roman += numsStr(i).toLowerCase\n     \
    \   roman.reverse.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr00e64jc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659806342
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousand\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpis5g_awu.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpis5g_awu.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tenths = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdd_565ej.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdd_565ej.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdd_565ej.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdd_565ej.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder2 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder3 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder4 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder6 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder8 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder10 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder11 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder12 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder13 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder15 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder16 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder17 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder18 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder20 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder21 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder23 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder24 = scala.collection.mutable.List\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzv497evz.scala:41:59 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder24\e[0m\
    \ = scala.collection.mutable.List\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue List is\
    \ not a member of scala.collection.mutable - did you mean mutable.ListMap?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzv497evz.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659806088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val minDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val minDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val minDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val minDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val minDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val minDigitIndex\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val maxDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val minDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val maxDigitIndex = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val min\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4v0kjgr5.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4v0kjgr5.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigitIndex is already defined as \e[33mvalue\e[0m \e[35mmaxDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v0kjgr5.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mminDigitIndex\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDigitIndex is already defined as \e[33mvalue\e[0m \e[35mminDigitIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v0kjgr5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxDigits is already defined as \e[33mvalue\e[0m \e[35mmaxDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4v0kjgr5.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mminDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDigits"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val hundredsTens = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val hundredsHundreds = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val thousandsTens = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ thousandsHundreds = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ hundredsThousands = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ thousandsThousands = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsTens = scala.collection.mutable.ListBuffer[Int]()\n        val numsHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsHundredsTens = scala.collection.mutable.ListBuffer[Int]()\n \
    \       val numsHundredsHundreds = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsThousandsTens = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsThousandsHundreds = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsHundredsThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsThousandsThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsHundredsThousandsTens = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsHundredsThousandsHundreds = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsThousandsThousandsTens = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsThousandsThousandsH\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpciq3h3d6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpciq3h3d6.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7je6yq_3.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var romanNum\
    \ = number\n        while(romanNum > 0) {\n            roman += romanNum % 100\n\
    \            romanNum /= 100\n        }\n        roman.reverse.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppu49urlq.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            roman += romanNum\
    \ % \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Long\n\e[31m   |\e[0m     \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTens = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numTen = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer[Int]()\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf94rmu00.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf94rmu00.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf94rmu00.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf94rmu00.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf94rmu00.scala:33:12 -----"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.length)\n            roman +=\
    \ nums(i).toRoman\n        roman.toList.reverse.mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__3maf64.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp__3maf64.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.length)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value length is not a member of Double\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        var index = 0\n        while(number\
    \ > 0) {\n            val digit = number % 10\n            number /= 10\n    \
    \        digits += digit\n        }\n        while(index >= 0) {\n           \
    \ val digit = digits(index)\n            roman += scala.math.pow(10, index).toString\
    \ + digit\n            index += 1\n        }\n        roman.mkString.toLowerCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzylx_jp.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpkzylx_jp.scala:22:22 --------------------\e[0m\e[0m\n\e[31m22 |\e[0m\
    \            digits += digit\n\e[31m\e[31m   |\e[0m                      ^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    (digit : Long)\n\e[31m   |\e\
    [0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while (i > 0) {\n            roman += romanDigits(i).toLowerCase\
    \ + romanDigits(i-1).toLowerCase\n            i -= 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3c4228u.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigits(i).toLowerCase + romanDigits(i-\e\
    [31m1\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: romanDigits\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfqnn44lz.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfqnn44lz.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyiy931tt.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder22\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyiy931tt.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        val numsDigits\
    \ = nums.toString.length\n        var i = 0\n        while (i < numsLength) {\n\
    \            val digit = nums(i).toInt\n            if (digit < 1000) {\n    \
    \            roman.append(digit.toString)\n            } else {\n            \
    \    val digits = scala.math.pow(10, digit - 1000)\n                val digitsLength\
    \ = digits.length\n                val digitsDigits = digits.toString.length\n\
    \                val digitToAdd = digitsDigits - numsDigits\n                val\
    \ digitToSubtract = numsDigits - digitsDigits\n                val digitToAdd\
    \ = if (digitToAdd < 0) digitToAdd * -1 else digitToAdd\n                val digitToSubtract\
    \ = if (digitToSubtract < 0) digitToSubtract * -1 else digitToSubtract\n     \
    \           val newDigit = digitToAdd + digitToSubtract\n                roman.append(digits(newDigit).toString)\n\
    \            }\n            i += 1\n        }\n        roman.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq6ijf885.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpq6ijf885.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsLength\e[0m = nums.length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value length is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpq6ijf885.scala:21:24 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = nums(i).toInt\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq6ijf885.scala:30:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e\
    [0m \e[36mdigitToAdd\e[0m = \e[33mif\e[0m (digitToAdd < \e[31m0\e[0m) digitToAdd\
    \ * -\e[31m1\e[0m \e[33melse\e[0m digitToAdd\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitToAdd is already defined as \e[33mvalue\e[0m \e[35mdigitToAdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq6ijf885.scala:31:20 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m                \e[33mval\e[0m \e[36mdigitToSubtract\e[0m = \e[33mif\e\
    [0m (digitToSubtract < \e[31m0\e[0m) digitToSubtract * -\e[31m1\e[0m \e[33melse\e\
    [0m digitToSubtract\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md"
  stdout: ''
  timestamp: 1660010431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphn3p1k09.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphn3p1k09.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphn3p1k09.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphn3p1k09.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7obqwcuz.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7obqwcuz.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7obqwcuz.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7obqwcuz.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7obqwcuz.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already d"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i).toInt\n            if (num < 1000) {\n                roman +=\
    \ numsArray(i).toString.toLower\n                i += 1\n            } else {\n\
    \                val num2 = num - 1000\n                val num3 = num2 / 100\n\
    \                val num4 = num2 - num3 * 100\n                val num5 = num3\
    \ / 10\n                val num6 = num3 - num5 * 10\n                val num7\
    \ = num5 / 1\n                val num8 = num5 - num7 * 1\n                val\
    \ num9 = num7 / 10\n                val num10 = num7 - num9 * 10\n           \
    \     val num11 = num9 / 100\n                val num12 = num9 - num11 * 100\n\
    \                val num13 = num11 / 1000\n                val num14 = num11 -\
    \ num13 * 1000\n                val num15 = num13 / 10000\n                val\
    \ num16 = num13 - num15 * 10000\n                val num17 = num15 / 100000\n\
    \                val num18 = num15 - num17 * 100000\n                val num19\
    \ = num17 / 1000000\n                val num20 = num17 - num19 * 1000000\n   \
    \             val num21 = num19 / 10000000\n                val num22 = num19\
    \ - num21 * 10000000\n                val num23 = num21 / 100000000\n        \
    \        val num24 = num21 - num23 * 100000000\n                val num25 = num23\
    \ / 1000000000\n                val num26 = num23 - num25 * 1000000000\n     \
    \           val num27 = num25 / 1000000000000\n                val num28 = num25\
    \ - num27 * 1000000000000\n                val num29 = num27 / 1000000000000000\n\
    \                val num30 = num27 - num29 * 1000000000000000\n              \
    \  val num31 = num29 / 1000000000000000000\n                val num32 = num29\
    \ - num31 * 1000000000000000000\n                val num33 = num31 / 1000000000000000000000\n\
    \                val num34 = num31 - num33 * 1000000000000000000000\n        \
    \        val num35 = num33 / 1000000000000000000000000\n                val num36\
    \ = num33 - num35 * \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwy5vwol8.scala:61:43 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m                \e[33mval\e[0m \e[36mnum36\e[0m = num33\
    \ - num35 * \n\e[31m\e[31m   |\e[0m                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwy5vwol8.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwy5vwol8.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpwy5vwol8.scala:52:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m                \e[33mval\e[0m \e[36mnum27\e[0m = num25\
    \ / \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     number too large\n\e[31m\e[31m-- Error: /tmp/tmpwy5vwol8.scala:53:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m                \e[33mval\e[0m \e[36mnum28\e[0m = num25\
    \ - num27 * \e[31m1000000000000\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                             number too large\n\e[31m\e[31m-- Error: /tmp/tmpwy5vwol8.scala:54:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m54 |\e[0m       \
    \         \e[33mval\e[0m \e[36mnum29\e[0m = num27 / \e[31m1000000000000000\e[0m\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmpwy5vwol8.scala:55:44 ---"
  stdout: ''
  timestamp: 1660010426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0xxgmu4n.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0xxgmu4n.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0xxgmu4n.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0xxgmu4n.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplabtz8lj.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplabtz8lj.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        var i = number\n\
    \        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n            i -= 1000\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ei656ht.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStringBuilder = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilderBuilder2 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder3 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder4 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder5 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder6 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder7 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder8 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder9 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder10 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder11 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder12 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder13 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder14 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder15 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder16 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder17 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder18 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder19 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder20 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder21 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder22 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder23 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder24 = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        val numsStringBuilder25 = scala.collection.mutable.StringBuilder.new\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy978o1t_.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy978o1t_.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ romanNum = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRoman\
    \ = scala.collection.mutable.Map[Int, String]((1000, \"M\"), (900, \"CM\"), (500,\
    \ \"D\"), (400, \"CD\"), (100, \"C\"), (90, \"XC\"), (50, \"L\"), (40, \"XL\"\
    ), (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (10, \"I\"))\n        val\
    \ numToRomanNum = scala.collection.mutable.Map[Int, Int]((1000, \"M\"), (900,\
    \ \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"), (90, \"XC\"), (50, \"L\"\
    ), (40, \"XL\"), (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"), (10, \"I\"\
    ))\n        val numToRomanNumReverse = scala.collection.mutable.Map[Int, Int]((1000,\
    \ \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"), (90, \"XC\"\
    ), (50, \"L\"), (40, \"XL\"), (10, \"X\"), (9, \"IX\"), (5, \"V\"), (4, \"IV\"\
    ), (10, \"I\"))\n        val numToRomanNumReverse2 = scala.collection.mutable.Map[Int,\
    \ Int]((1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"\
    ), (90, \"XC\"), (50, \"L\"), (40, \"XL\"), (10, \"X\"), (9, \"IX\"), (5, \"V\"\
    ), (4, \"IV\"), (10, \"I\"))\n        val numToRomanNumReverse3 = scala.collection.mutable.Map[Int,\
    \ Int]((1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"\
    ), (90, \"XC\"), (50, \"L\"), (40, \"XL\"), (10, \"X\"), (9, \"IX\"), (5, \"V\"\
    ), (4, \"IV\"), (10, \"I\"))\n        val numToRomanNumReverse4 = scala.collection.mutable.Map[Int,\
    \ Int]((1000, \"M\"), (900, \"CM\"), (500, \"D\"), (400, \"CD\"), (100, \"C\"\
    ), (90, \"XC\")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7s6bxfo_.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7s6bxfo_.scala:18:74 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \        \e[33mval\e[0m \e[36mnumToRomanNum\e[0m = scala.collection.mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]((\e[31m1000\e[0m, \e[31m\"M\"\e[0m), (\e[31m900\e\
    [0m, \e[31m\"CM\"\e[0m), (\e[31m500\e[0m, \e[31m\"D\"\e[0m), (\e[31m400\e[0m,\
    \ \e[31m\"CD\"\e[0m), (\e[31m100\e[0m, \e[31m\"C\"\e[0m), (\e[31m90\e[0m, \e[31m\"\
    XC\"\e[0m), (\e[31m50\e[0m, \e[31m\"L\"\e[0m), (\e[31m40\e[0m, \e[31m\"XL\"\e\
    [0m), (\e[31m10\e[0m, \e[31m\"X\"\e[0m), (\e[31m9\e[0m, \e[31m\"IX\"\e[0m), (\e\
    [31m5\e[0m, \e[31m\"V\"\e[0m), (\e[31m4\e[0m, \e[31m\"IV\"\e[0m), (\e[31m10\e\
    [0m, \e[31m\"I\"\e[0m))\n\e[31m\e[31m   |\e[0m                               \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                        Found:    (\e[32m\"M\"\e[0m : String)\n\
    \e[31m   |\e[0m                                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7s6bxfo_.scala:18:86\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumToRomanNum\e\
    [0m = scala.collection.mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]((\e[31m1000\e\
    [0m, \e[31m\"M\"\e[0m), (\e[31m900\e[0m, \e[31m\"CM\"\e[0m), (\e[31m500\e[0m,\
    \ \e[31m\"D\"\e[0m), (\e[31m400\e[0m, \e[31m\"CD\"\e[0m), (\e[31m100\e[0m, \e\
    [31m\"C\"\e[0m), (\e[31m90\e[0m, \e[31m\"XC\"\e[0m), (\e[31m50\e[0m, \e[31m\"\
    L\"\e[0m), (\e[31m40\e[0m, \e[31m\"XL\"\e[0m), (\e[31m10\e[0m, \e[31m\"X\"\e[0m),\
    \ (\e[31m9\e[0m, \e[31m\"IX\"\e[0m), (\e[31m5\e[0m, \e[31m\"V\"\e[0m), (\e[31m4\e\
    [0m, \e[31m\"IV\"\e[0m), (\e[31m10\e[0m, \e[31m\"I\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \            ^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \         Found:    (\e[32m\"CM\"\e[0m : String)\n\e[31m   |\e[0m            \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e"
  stdout: ''
  timestamp: 1660010435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphc1ry_6a.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphc1ry_6a.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptv39phpg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptv39phpg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphc1ry_6a.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphc1ry_6a.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var index = 0\n      \
    \  while (number > 0) {\n            val remainder = number % 10\n           \
    \ roman.append(remainder)\n            number /= 10\n            index += 1\n\
    \        }\n        roman.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o76mh9x.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3o76mh9x.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp28p67lut.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp28p67lut.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val tensHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tensThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tensHundredsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val ones = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val onesTens = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val onesHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val onesThousands = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val onesHundredsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val tensThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val tensThousandsHundredsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val onesThousandsHundredsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val onesThousandsHundredsThousandsTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val onesThousandsHundredsThousandsHundred\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ukop57m.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7ukop57m.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws8fz2ze.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        val numsRemaining\
    \ = nums.toList\n        val numsRemainingLength = numsRemaining.length\n    \
    \    val numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ numsRemainingLength = numsRemainingLength - 1\n        val numsRemainingLength\
    \ = numsRemainingLength - 1\n        val numsRemainingLength = numsRemainingLength\
    \ - 1\n        val numsRemainingLength = numsRemainingLength - 1\n        val\
    \ nums\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpklsk2ew0.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpklsk2ew0.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsRemainingLength\e[0m = numsRemainingLength - \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnumsRemainingLength is already defined as \e[33mvalue\e[0m \e[35mnumsRemainingLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpklsk2ew0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsRemainingLength\e[0m = numsRemainingLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsRemainingLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsRemainingLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklsk2ew0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsRemainingLength\e[0m\
    \ = numsRemainingLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsRemainingLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsRemainingLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpklsk2ew0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsRemainingLength\e[0m\
    \ = numsRemainingLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsRemainingLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsRemainingLength\e[0m"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            number /= i\n            roman += if (remainder >\
    \ 0) \"M\" else if (remainder < 0) \"m\" else \"I\"\n        }\n        roman.toList.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5r3fvo2l.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder > \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder < \e[31m0\e[0m)\
    \ \e[31m\"m\"\e[0m \e[33melse\e[0m \e[31m\"I\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5r3fvo2l.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp5r3fvo2l.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums) {\n\e\
    [31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                    Found:    (nums : Double)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5r3fvo2l.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= i\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value /= is not a member of Long - did you mean number.!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toInt\n            val romanDigit = digit\
    \ % 10\n            val romanDigitString = romanDigit.toString\n            roman.append(romanDigitString)\n\
    \            val newDigit = digit / 10\n            val newDigitString = newDigit.toString\n\
    \            roman.append(newDigitString)\n        }\n        roman.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpayfuq9nn.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpayfuq9nn.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpayfuq9nn.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        var i = 0\n\
    \        while (number > 0) {\n            digits += number%10\n            number\
    \ /= 10\n        }\n        digits.reverse.foreach(roman.append(digits(i)))\n\
    \        roman.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2knu4ip0.scala:19:22\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            digits += number%\e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2knu4ip0.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            number /= \e\
    [31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value /= is not a member of Long - did you mean number.!=?\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp2knu4ip0.scala:22:37 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        digits.reverse.foreach(roman.append(digits(i)))\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e\
    [0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems:\
    \ String*): (roman : scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e\
    [0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\e\
    [31m   |\e[0mmatch arguments (Int)\n3 errors found\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i > 0){\n            val remainder = i % 10\n      \
    \      roman.append(remainder.toString)\n            i /= 10\n        }\n    \
    \    roman.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3k6utme.scala:25)\n\tat Problem.main(tmpz3k6utme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var romanNum\
    \ = number\n        while(romanNum > 0) {\n            roman += romanNum % 10\
    \ + romanNum / 10\n            romanNum = romanNum / 10\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kt5z9_o.scala:18:37\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            roman += romanNum\
    \ % \e[31m10\e[0m + romanNum / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \               Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val tenths = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredths\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tenthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcie7unci.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcie7unci.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcie7unci.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcie7unci.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of tople"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        var num = 0\n       \
    \ while (number > 0) {\n            num += 1\n            number -= num\n    \
    \        nums += num\n        }\n        var i = 0\n        while (i < nums.length)\
    \ {\n            roman += nums(i).roman\n            i += 1\n        }\n     \
    \   roman.toList.reverse.mkString.toLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_gdubmf.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            number -= num\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx_gdubmf.scala:25:29\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            roman += nums(i).roman\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     value roman is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanDigits = mutable.ArrayBuffer(\n            \"M\", \"D\", \"\
    C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n \
    \       val romanDigit = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanDigits = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanDigit = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanDigits = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanDigit\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanDigits = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanDigit = mutable.ArrayBuffer(\n  \
    \          \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanDigits = mutable.ArrayBuffer(\n     \
    \       \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanDigit = mutable.ArrayBuffer(\n          \
    \  \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanDigits = mutable.ArrayBuffer(\n            \"\
    M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \        )\n        val romanDigit = mutable.ArrayBuffer(\n            \"M\",\
    \ \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanDigits = mutable.ArrayBuffer(\n            \"M\",\
    \ \"D\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps1wly4dj.scala:55:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[31m\"M\"\e[0m, \"D\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmps1wly4dj.scala:57:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps1wly4dj.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromanDigits\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m   |\e[0m       \
    \ ^\e[0m\n\e[31m   |\e[0mromanDigits is already defined as \e[33mvalue\e[0m \e\
    [35mromanDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m25 |\e\
    [0m            \e[31m\"M\"\e[0m, \e[31m\"D\"\e[0m, \e[31m\"C\"\e[0m, \e[31m\"\
    XC\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"IX\"\
    \e[0m, \e[31m\"V\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"I\"\e[0m\n\e[31m26 |\e[0m\
    \        )\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps1wly4dj.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mromanDigit\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mromanDigit is already defined\
    \ as \e[33mvalue\e[0m \e[35mromanDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m28 |\e[0m            \e[31m\"M\"\e[0m, \e[31m\"D\"\e[0m, \e[31m\"C\"\e[0m,\
    \ \e[31m\"XC\"\e[0m, \e[31m\"L\"\e[0m, \e[31m\"XL\"\e[0m, \e[31m\"X\"\e[0m, \e\
    [31m\"IX\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"IV\"\e[0m, \e[31m\"I\"\e[0m\n\e[31m29\
    \ |\e[0m        )\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps1wly4dj.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mromanDigits\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m   |\e[0m       \
    \ ^\e[0m\n\e[31m   |\e[0mromanDigits is already d"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnb48aqqe.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnb48aqqe.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tens = scala.collection.mutable.ListBuffer[Int]()\n        val hundreds\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousands = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val tenths = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ hundredths = scala.collection.mutable.ListBuffer[Int]()\n        val thousandths\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ thousandthths = scala.collection.mutable.ListBuffer[Int]()\n        val hundredthths\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ hundredthths = scala.collection.mutable.ListBuffer[Int]()\n        val thousandthths\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ thousandthths = scala.collection.mutable.ListBuffer[Int]()\n        val hundredthths\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ hundredthths = scala.collection.mutable.ListBuffer[Int]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm615je3x.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm615je3x.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm615je3x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm615je3x.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nami"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7je6yq_3.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while (i > 0) {\n            roman += romanDigits(i).toLowerCase\n\
    \            i -= romanDigits(i).toLong\n        }\n        roman.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqslndr5.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigits(i).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpiqslndr5.scala:19:14 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            i -= romanDigits(i).toLong\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiqslndr5.scala:19:17\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            i -= romanDigits(i).toLong\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val num = numsString.charAt(i)\n\
    \            val romanNum = roman.map(_.toInt).find(_.toString == num).getOrElse(0)\n\
    \            if (romanNum > 0) {\n                roman.append(romanNum.toString)\n\
    \            } else {\n                roman.append(num)\n            }\n    \
    \        i += 1\n        }\n        roman.mkString.toLowerCase\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6_b7r_q.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numsStrLen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLen\
    \ = scal\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqo6z0gsg.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqo6z0gsg.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqo6z0gsg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqo6z0gsg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStrLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLen is already defined as \e[33mvalue\e[0m \e[35mnumsStrLen\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStr =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numsLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numsLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numsLenLenLenLenLenLenLenLenLenLenLenLen\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5hr2ek46.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5hr2ek46.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLen is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5hr2ek46.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5hr2ek46.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitio"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsArr\
    \ = numsStr.split(\"\\\\.\")\n        val numsArrLength = numsArr.length\n   \
    \     val numsArrLength = numsArrLength - 1\n        for (i <- 0 until numsArrLength)\
    \ {\n            val num = numsArr(i).toInt\n            val numStr = num.toString\n\
    \            val numStrArr = numStr.split(\"\\\\\")\n            val numStrArrLength\
    \ = numStrArr.length\n            val numStrArrLength = numStrArrLength - 1\n\
    \            for (j <- 0 until numStrArrLength) {\n                val numStr\
    \ = numStrArr(j).toInt\n                val numStrStr = numStrStr.toString\n \
    \               val numStrStrArr = numStrStr.split(\"x\")\n                val\
    \ numStrStrArrLength = numStrStrArr.length\n                val numStrStrArrLength\
    \ = numStrStrArrLength - 1\n                for (k <- 0 until numStrStrArrLength)\
    \ {\n                    val numStr = numStrStrArr(k)\n                    val\
    \ numStrStr = numStrStr.toString\n                    val numStrStrArr = numStrStr.split(\"\
    i\")\n                    val numStrStrArrLength = numStrStrArr.length\n     \
    \               val numStrStrArrLength = numStrStrArrLength - 1\n            \
    \        for (l <- 0 until numStrStrArrLength) {\n                        val\
    \ numStr = numStrStrArr(l)\n                        val numStrStr = numStrStr.toString\n\
    \                        val numStrStrArr = numStrStr.split(\"v\")\n         \
    \               val numStrStrArrLength = numStrStrArr.length\n               \
    \         val numStrStrArrLength = numStrStrArrLength - 1\n                  \
    \      for (m <- 0 until numStrStrArrLength) {\n                            val\
    \ numStr = numStrStrArr(m)\n                            val numStrStr = numStrStr.toString\n\
    \                            val numStrStrArr = numStrStr.split(\"x\")\n     \
    \                       val numStrStrArrLength = numStrStrArr.length\n       \
    \                     val numStrStrArrLength = numStrStrArrLength - 1\n      \
    \                      for (n <- 0 until numStrStrArrLength) {\n             \
    \                   val numStr = numStrStrArr(n)\n                           \
    \     val numStrStr = numStrStr.toString\n                                val\
    \ numStrStrArr = numStrStr.split(\"i\")\n                                val numStrStrArrLength\
    \ = numStrStrArr.length\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpofidijps.scala:75:0 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpofidijps.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrLength\e[0m = numsArrLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsArrLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsArrLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpofidijps.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpofidijps.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mnumStrArrLength\e[0m = numStrArrLength - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumStrArrLength is already defined as \e[33mvalue\e[0m \e[35mnumStrArrLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[33m\e[33m-- Warning: /tmp/tmpofidijps.scala:57:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphn3p1k09.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphn3p1k09.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphn3p1k09.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphn3p1k09.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsThousandsThousandsHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredsThousandsThousandsThousandsThousandsThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandsThousandsThousand\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoyr67rjd.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoyr67rjd.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (i < number) {\n            roman += romanDigits(i).toLowerCase\
    \ + romanDigits(number-i).toLowerCase\n            i += 1\n        }\n       \
    \ roman.toString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8k2ro916.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigits(i).toLowerCase + romanDigits(number-i).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val num = numsString.charAt(i)\n\
    \            val romanNum = roman.lastOption.map(_.charAt(0)).orElse(\"\")\n \
    \           val romanNumLen = roman.lastOption.map(_.length).orElse(0)\n     \
    \       val romanNumLen2 = romanNumLen + romanNumLen\n            val romanNumLen3\
    \ = romanNumLen + romanNumLen + romanNumLen\n            val romanNumLen4 = romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen\n            val romanNumLen5 = romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\n    \
    \        val romanNumLen6 = romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen\n            val romanNumLen7\
    \ = romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen\n            val romanNumLen8\
    \ = romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\n\
    \            val romanNumLen9 = romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen\n            val romanNumLen10\
    \ = romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxa5upek1.scala:31:185 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mromanNumLen10\e[0m =\
    \ romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen\
    \ + romanNumLen + romanNumLen + romanNumLen + romanNumLen + romanNumLen + \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                     expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxa5upek1.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpxa5upek1.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxa5upek1.scala:50:1 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpxa5upek1.scala:33:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i).toInt\n            if (num < 0 || num > 3999) {\n           \
    \     roman.append(\"_\")\n            } else {\n                val romanNum\
    \ = scala.math.pow(10, num).toInt\n                val romanNumString = romanNum.toString.reverse\n\
    \                val romanNumArray = romanNumString.toCharArray\n            \
    \    val romanNumArrayLength = romanNumArray.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val romanNumStringLength = romanNumString.length\n                val romanNumStringLength\
    \ = romanNumString.length\n                val romanNumStringLength = romanNumString.length\n\
    \                val romanNumStringLength = romanNumString.length\n          \
    \      val ro\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0dpbemz.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx0dpbemz.scala:77:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m77 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpx0dpbemz.scala:15:20 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpx0dpbemz.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mromanNumStringLength\e\
    [0m = romanNumString.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanNumStringLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mromanNumStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx0dpbemz.scala:32:20 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36mromanNumStringLength\e\
    [0m = romanNumString.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mromanNumStringLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mromanNumStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx0dpbemz.scala:33:20 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mromanNumStringLength\e\
    [0m = romanNumString.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplabtz8lj.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplabtz8lj.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32ijttz8.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp32ijttz8.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99otviv0.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv4epc4qk.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv4epc4qk.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv4epc4qk.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv4epc4qk.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ftq344h.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var i = number\n     \
    \   while (i > 0) {\n            roman += romanDigits(i%10)\n            i /=\
    \ 10\n        }\n        roman.foldLeft(\"\")(_ + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5yyu8e9a.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num / 100\n            val hundreds = num %\
    \ 100\n            val hundredsStr = if (hundreds == 0) \"M\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr2 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr3 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr4 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr5 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr6 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr7 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr8 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr9 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr10 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr11 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr12 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr13 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr14 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr15 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr16 = if (digit == 0) \"C\" else intToMiniRoman(digit)\n\
    \            val hundredsStr17 = if (hundreds == 0) \"D\" else intToMiniRoman(hundreds)\n\
    \            val hundredsStr18 = if (digit == 0) \"C\" else intToMiniRoman\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe4y_cys7.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4y_cys7.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4y_cys7.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until nums.size) {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value size is\
    \ not a member of Double\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpe4y_cys7.scala:18:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mnums\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe4y_cys7.scala:57:1\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpe4y_cys7.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var i = 0\n        while (i < numsArray.length)\
    \ {\n            val num = numsArray(i)\n            if (num == 'I') {\n     \
    \           roman.append(\"x\")\n            } else if (num == 'V') {\n      \
    \          roman.append(\"v\")\n            } else if (num == 'X') {\n       \
    \         roman.append(\"x\")\n            } else if (num == 'L') {\n        \
    \        roman.append(\"l\")\n            } else if (num == 'C') {\n         \
    \       roman.append(\"c\")\n            } else if (num == 'D') {\n          \
    \      roman.append(\"d\")\n            } else if (num == 'M') {\n           \
    \     roman.append(\"m\")\n            } else if (num == 'I') {\n            \
    \    roman.append(\"x\")\n            } else if (num == 'I') {\n             \
    \   roman.append(\"x\")\n            } else if (num == 'I') {\n              \
    \  roman.append(\"x\")\n            } else if (num == 'I') {\n               \
    \ roman.append(\"x\")\n            } else if (num == 'I') {\n                roman.append(\"\
    x\")\n            } else if (num == 'I') {\n                roman.append(\"x\"\
    )\n            } else if (num == 'I') {\n                roman.append(\"x\")\n\
    \            } else if (num == 'I') {\n                roman.append(\"x\")\n \
    \           } else if (num == 'I') {\n                roman.append(\"x\")\n  \
    \          } else if (num == 'I') {\n                roman.append(\"x\")\n   \
    \         } else if (num == 'I') {\n                roman.append(\"x\")\n    \
    \        } else if (num == 'I') {\n                roman.append(\"x\")\n     \
    \       } else if (num == 'I') {\n                roman.append(\"x\")\n      \
    \      } else if (num == 'I') {\n                roman.append(\"x\")\n       \
    \     } else if (num == 'I') {\n                roman.append(\"x\")\n        \
    \    } else if (num == 'I') {\n                roman.append(\"x\")\n         \
    \   } else if (num == 'I') {\n                roman.append(\"x\")\n          \
    \  } else if (num == 'I') {\n                roman.append(\"x\")\n           \
    \ } else if (num == 'I') {\n                roman.append(\"x\")\n            }\
    \ else if (num == 'I') {\n                roman.append(\"x\")\n            } else\
    \ if (num == 'I') {\n                roman.append(\"x\")\n            } else if\
    \ (num == 'I') {\n                roman.append(\"x\")\n            } else if (num\
    \ == 'I') {\n                roman.append(\"x\")\n            } else if (num ==\
    \ 'I') {\n                roman.append(\"x\")\n            } else if (num == 'I')\
    \ {\n                roman.append(\"x\")\n            } else if (num == 'I') {\n\
    \                roman.append(\"x\")\n            } else if (num == 'I') {\n \
    \               roman.append(\"x\")\n            } else if (num\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpttxfm7ts.scala:91:4 ----------------------------\e\
    [0m\e[0m\n\e[31m91 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpttxfm7ts.scala:110:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m110 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpttxfm7ts.scala:15:20 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpttxfm7ts.scala:90:23 --------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (num\n\e\
    [31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m          \
    \             Found:    (num : Char)\n\e[31m   |\e[0m                       Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttxfm7ts.scala:109:1\
    \ --------------------\e[0m\e[0m\n\e[31m109 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: String\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpttxfm7ts.scala:92:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m92 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while(i < number) {\n            roman += romanDigit(number %\
    \ 10)\n            number /= 10\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnq9wwq0p.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigit(number % \e[31m10\e[0m)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnq9wwq0p.scala:19:19 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\"\")\n        var i = 0\n        while\
    \ (i < number) {\n            roman += intToRoman(i).toLowerCase\n           \
    \ i += 1\n        }\n        roman.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36_pywbc.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanDigit = num / 100\n            val remainder =\
    \ num % 100\n            val romanDigitString = romanDigit.toString\n        \
    \    val romanDigitStringWithSpaces = romanDigitString + \" \"\n            if\
    \ (remainder >= 10) {\n                roman.append(romanDigitStringWithSpaces)\n\
    \                roman.append(intToMiniRoman(remainder))\n            } else {\n\
    \                roman.append(romanDigitString)\n            }\n        }\n  \
    \      roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4s9kb9eq.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4s9kb9eq.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp4s9kb9eq.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanNum = num.toString.toRoman\n            roman\
    \ += romanNum\n        }\n        roman.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk30p61wa.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk30p61wa.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpk30p61wa.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum2 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val\
    \ romanNum3 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum4\
    \ = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\"\
    , \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n        val romanNum5 = mutable.ArrayBuffer(\n\
    \            \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n        )\n        val romanNum6 = mutable.ArrayBuffer(\n   \
    \         \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n        )\n        val romanNum7 = mutable.ArrayBuffer(\n       \
    \     \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"\n        )\n        val romanNum8 = mutable.ArrayBuffer(\n           \
    \ \"M\", \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n        )\n        val romanNum9 = mutable.ArrayBuffer(\n            \"M\"\
    , \"D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n \
    \       )\n        val romanNum10 = mutable.ArrayBuffer(\n            \"M\", \"\
    D\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n     \
    \   )\n        val romanNum11 = mutable.ArrayBuffer(\n            \"M\", \"D\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n\
    \        val romanNum12 = mutable.ArrayBuffer(\n            \"M\", \"D\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n        )\n    \
    \    val romanNum13 = mutable.ArrayBuffer(\n            \"M\", \"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpu5bkzqda.scala:55:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[31m\"M\"\e[0m, \"\n\e[31m\e[31m   |\e\
    [0m                 ^\e[0m\n\e[31m   |\e[0m                 unclosed string literal\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5bkzqda.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer(\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu5bkzqda.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu5bkzqda.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum2\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu5bkzqda.scala:24:24 ------------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum3\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu5bkzqda.scala:27:24 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mromanNum4\e[0m = mutable.ArrayBuffer(\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avai"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        var i = 1\n        while(i <= numDigits)\
    \ {\n            val digit = number / Math.pow(10, i)\n            digits += digit\n\
    \            roman.append(romanDigit(digit))\n            i += 1\n        }\n\
    \        roman.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zrvxg4y.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            digits += digit\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \               Found:    (digit : Double)\n\e[31m   |\e[0m                  \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9zrvxg4y.scala:22:25\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            roman.append(romanDigit(digit))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: romanDigit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (number != 0) {\n            val remainder = number % 1000\n\
    \            number /= 1000\n            roman += if (remainder == 0) \"M\" else\
    \ if (remainder == 1) \"D\" else \"C\"\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpm4iq5rh9.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpm4iq5rh9.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m1000\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap2 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap3 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap4 = scala.collection.mutable.HashMap.empty[Int, Int]\n   \
    \     val numsMap5 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap6 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap9 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap10 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap12 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap13 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap14 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap17 =\
    \ scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap18 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap21 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap22 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap23 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb1u_77ip.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb1u_77ip.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while(i < number) {\n            roman += romanToChar(i.toInt)\n\
    \            i += 1\n        }\n        roman.reverse.mkString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7qys2wt.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanToChar(i.toInt)\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \        Not found: romanToChar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        var i =\
    \ 0\n        while (i < numsStr.length) {\n            val n = numsStr(i).toInt\n\
    \            val romanDigit = roman(i).reverse\n            val romanDigitStr\
    \ = romanDigit.reverse\n            val romanDigitNum = romanDigitStr.indexOf(n)\
    \ + 1\n            roman.append(romanDigitStr.substring(0, romanDigitNum))\n \
    \           i += 1\n        }\n        roman.reverse.mkString.toLowerCase\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_0t9duy.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32ijttz8.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp32ijttz8.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = 0\n        while (i < number) {\n            roman += romanDigits(number%100l).mkString(\"\
    \")\n            number /= 100l\n            i += 1\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphyrqtmzv.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += romanDigits(number%\e[31m100l\e\
    [0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: romanDigits\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphyrqtmzv.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            number /= \e[31m100l\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not\
    \ a member of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsMap = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap2 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap3 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap4 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[String, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap10 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap11 = scala.collection.mutable.Map[String, String]()\n        val numsMap12\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap13 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap14 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap15 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap16 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap17 = scala.collection.mutable.Map[String, String]()\n        val numsMap18\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap19 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap20 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap21 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap22 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[String, String]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap25 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap26 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap27 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpprv0i_ar.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpprv0i_ar.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       var i = 0\n        while (i < numsArrayLength) {\n            val num\
    \ = numsArray(i).toInt\n            if (num > 0) {\n                val romanNum\
    \ = numToRoman(num)\n                roman.append(romanNum)\n            }\n \
    \           i += 1\n        }\n        roman.reverse.mkString.toLowerCase\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuh2r6bm7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpuh2r6bm7.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mromanNum\e[0m =\
    \ numToRoman(num)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: numToRoman\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString2\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString3\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString4\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString5\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString7\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString8\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString10\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString11\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString13\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString14\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString15\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString16\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString17\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString18\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString19\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString22\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString23\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString24\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString25\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsString26\
    \ = scala.collection.mutable.ListBuffer.empty[String\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp32ijttz8.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp32ijttz8.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i > 0){\n            val remainder = i % 10\n      \
    \      roman.append(remainder)\n            i /= 10\n        }\n        roman.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmwq63dcr.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n1 error found\n"
  stdout: ''
  timestamp: 1660010452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val digits = scala.math.pow(10,\
    \ number.toInt)\n        val numDigits = scala.math.ceil(digits.length)\n    \
    \    val numDigitsInRoman = scala.math.ceil(scala.math.log10(numDigits))\n   \
    \     val numDigitsInRomanInt = scala.math.ceil(scala.math.log10(numDigitsInRoman))\n\
    \        var romanDigit = 0\n        var romanDigitCount = 0\n        var romanDigitCountInRoman\
    \ = 0\n        var romanDigitCountInRomanInt = 0\n        var romanDigitCountInRomanIntMax\
    \ = 0\n        var romanDigitCountInRomanIntMin = 0\n        var romanDigitCountInRomanIntMaxMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\
    \ = 0\n        var romanDigitCountInRomanIntMaxMinMinMin = 0\n        var romanDigitCountInRomanIntMaxMinMinMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ju3ammp.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ju3ammp.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mromanDigitCountInRomanIntMaxMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mromanDigitCountInRomanIntMaxMinMin is already defined as \e[33mvariable\e[0m\
    \ \e[35mromanDigitCountInRomanIntMaxMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ju3ammp.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mromanDigitCountInRomanIntMaxMinMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mromanDigitCountInRomanIntMaxMinMinMin is already defined as \e[33mvariable\e\
    [0m \e[35mromanDigitCountInRomanIntMaxMinMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ju3ammp.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mromanDigitCountInRomanIntMaxMinMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mromanDigitCountInRomanIntMaxMinMinMin is already defined as \e[33mvariable\e\
    [0m \e[35mromanDigitCountInRomanIntMaxMinMinMin\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1ju3ammp.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mromanDigitCountInRomanIntMaxMinMinMin\e[0m = \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mromanDigitCo"
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length-1))\n            i -= 1000\n        }\n        while(i >=\
    \ 100) {\n            roman.append(roman.last.substring(0, roman.last.length-1))\n\
    \            i -= 100\n        }\n        while(i >= 10) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length-1))\n            i -= 10\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length-1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmpnznilbvg.scala:26)\n\tat Problem$.main(tmpnznilbvg.scala:33)\n\
    \tat Problem.main(tmpnznilbvg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzhhpnlx.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzhhpnlx.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprzhhpnlx.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprzhhpnlx.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprzhhpnlx.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mval"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInRoman = scala.math.pow(10,\
    \ numDigits)\n        val numRomanDigits = scala.math.ceil(numDigitsInRoman /\
    \ 4.0)\n        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n\
    \        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n \
    \       val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n  \
    \      val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n   \
    \     val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n    \
    \    val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n     \
    \   val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n      \
    \  val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n       \
    \ val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n        val\
    \ numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n        val numRomanDigitsInRoman\
    \ = scala.math.ceil(numRomanDigits / 4.0)\n        val numRomanDigitsInRoman =\
    \ scala.math.ceil(numRomanDigits / 4.0)\n        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits\
    \ / 4.0)\n        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits /\
    \ 4.0)\n        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n\
    \        val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n \
    \       val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n  \
    \      val numRomanDigitsInRoman = scala.math.ceil(numRomanDigits / 4.0)\n   \
    \     val numRomanDigitsInRoman = scala.math.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8oths3w2.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8oths3w2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumRomanDigitsInRoman\e[0m = scala.math.ceil(numRomanDigits\
    \ / \e[31m4.0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumRomanDigitsInRoman is already defined as \e[33mvalue\e\
    [0m \e[35mnumRomanDigitsInRoman\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8oths3w2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumRomanDigitsInRoman\e\
    [0m = scala.math.ceil(numRomanDigits / \e[31m4.0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnumRomanDigitsInRoman is already defined as \e[33mvalue\e[0m \e\
    [35mnumRomanDigitsInRoman\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8oths3w2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumRomanDigitsInRoman\e\
    [0m = scala.math.ceil(numRomanDigits / \e[31m4.0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnumRomanDigitsInRoman is already defined as \e[33mvalue\e[0m \e\
    [35mnumRomanDigitsInRoman\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8oths3w2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumRomanDigitsInRoman\e\
    [0m = scala.math.ceil(numRomanDigits / \e[31m4.0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while(number > 0){\n            val remainder = number % 10\n\
    \            roman.append(remainder)\n            number /= 10\n            i\
    \ += 1\n        }\n        roman.reverse.mkString.toLowerCase\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4bglxd5c.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp4bglxd5c.scala:20:19 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        var i =\
    \ 0\n        while(i < numsStr.length) {\n            val digit = numsStr(i).toInt\n\
    \            val romanDigit = scala.math.pow(10, digit).toInt\n            val\
    \ romanDigitStr = romanDigit.toString\n            val romanDigitStrReverse =\
    \ romanDigitStr.reverse\n            val romanDigitStrReverse2 = romanDigitStrReverse.reverse\n\
    \            roman.append(romanDigitStrReverse2.takeWhile(_ <= '9').mkString)\n\
    \            roman.append(romanDigitStrReverse2.dropWhile(_ <= '9').mkString)\n\
    \            i += 1\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjwdmo3x.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStrLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv4epc4qk.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv4epc4qk.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv4epc4qk.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv4epc4qk.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in "
  stdout: ''
  timestamp: 1660010450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLen = nums.length\n        for (i<-0 until numsLen)\
    \ {\n            val num = nums(i)\n            val romanNum = num.toString.toRoman\n\
    \            roman += romanNum\n        }\n        roman.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvg5guqt1.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpvg5guqt1.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsLen\e[0m = nums.length\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     value length is not a member of Double\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpvg5guqt1.scala:19:22 -----------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m                \
    \      \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010460
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpenwuwfx8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpenwuwfx8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpenwuwfx8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpenwuwfx8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, String]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap5 = scala.collection.mutable.Map[Int, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap7 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Int, String]()\n        val\
    \ numsMap10 = scala.collection.mutable.Map[Int, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap12 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap15 = scala.collection.mutable.Map[Int, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap17 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap20 = scala.collection.mutable.Map[Int, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Int, String]()\n        val numsMap22 = scala.collection.mutable.Map[Int,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Int, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Int, String]()\n       \
    \ val numsMap25 = scala.collection.mutable.Map[Int, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Int, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39ti_bce.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i)\n            if (num > number) {\n                roman.clear()\n       \
    \         break\n            }\n            val remainder = number % num\n   \
    \         roman.append(remainder.toString.charAt(0).toLowerCase)\n           \
    \ number -= remainder\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9eevptu0.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9eevptu0.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp9eevptu0.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9eevptu0.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            number -= remainder\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val num = numsString.charAt(i)\n\
    \            val romanNum = roman.lastOption.filter(_ != num).getOrElse(num)\n\
    \            roman.append(romanNum)\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqvt2kku0.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n\
    \        val numsMap = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap2 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap3 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap4 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap5 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap6 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap7 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap8 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap9 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap10 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap12 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap13 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap14 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap15 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap16 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap17 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap18 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap19 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap21 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap22 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap23 = scala.collection.mutable.HashMap.empty[Long, String]\n\
    \        val numsMap24 = scala.collection.mutable.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl90b14bx.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpl90b14bx.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl90b14bx.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val digit = number\
    \ / i\n            val remainder = number % i\n            val romanDigit = if\
    \ (digit > 0) \"M\" else if (digit < 0) \"D\" else \"C\"\n            roman.append(romanDigit)\n\
    \            roman.append(if (remainder > 0) \"I\" else if (remainder < 0) \"\
    V\" else \"X\")\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4e8a6nh.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpi4e8a6nh.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val thousandths = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ tenths = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val thousandthths = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val hundredthths = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val thousandthths = scala.collection.mutable.ListBuffer.empty\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbqmmqzi8.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbqmmqzi8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbqmmqzi8.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbqmmqzi8.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defi"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).toInt\n        val numDigitsInt = scala.math.pow(10,\
    \ numDigits)\n        val numDigitsInString = (numDigitsInt * numDigitsInt + numDigitsInt\
    \ - numDigits).toString.length\n        val numDigitsInRoman = scala.math.pow(10,\
    \ numDigitsInString).toInt\n        val numDigitsInRomanString = scala.math.pow(10,\
    \ numDigitsInRoman).toString.length\n        val numDigitsInRomanStringInt = numDigitsInRomanString\
    \ * numDigitsInRoman\n        val numDigitsInRomanStringIntString = numDigitsInRomanStringInt\
    \ * numDigitsInRomanString\n        val numDigitsInRomanStringIntStringString\
    \ = numDigitsInRomanStringIntString * numDigitsInRomanStringInt\n        val numDigitsInRomanStringIntStringStringString\
    \ = numDigitsInRomanStringIntStringString * numDigitsInRomanStringIntStringString\n\
    \        val numDigitsInRomanStringIntStringStringStringString = numDigitsInRomanStringIntStringStringString\
    \ * numDigitsInRomanStringIntStringStringString\n        val numDigitsInRomanStringIntStringStringStringStringString\
    \ = numDigitsInRomanStringIntStringStringStringString * numDigitsInRomanStringIntStringStringStringString\n\
    \        val numDigitsInRomanStringIntStringStringStringStringStringString = numDigitsInRomanStringIntStringStringStringStringStringString\
    \ * numDigitsInRomanStringIntStringStringStringStringStringString\n        val\
    \ numDigitsInRomanStringIntStringStringStringStringStringStringStringString =\
    \ numDigitsInRomanStringIntStringStringStringStringStringStringStringString *\
    \ numDigitsInRomanStringIntStringStringStringStringStringStringStringStringString\n\
    \        val numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringString\
    \ = numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringString\
    \ * numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringStringString\n\
    \        val numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringStringStringString\
    \ = numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringStringStringStringString\
    \ * numDigitsInRomanStringIntStringStringString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg5kyxvwp.scala:28:76 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumDigitsInRomanStringIntStringStringStringStringStringString\e\
    [0m = numDigitsInRomanStringIntStringStringStringStringStringString * numDigitsInRomanStringIntStringStringStringStringStringString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumDigitsInRomanStringIntStringStringStringStringStringString\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg5kyxvwp.scala:29:88\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanStringIntStringStringStringStringStringStringStringString\e\
    [0m = numDigitsInRomanStringIntStringStringStringStringStringStringStringString\
    \ * numDigitsInRomanStringIntStringStringStringStringStringStringStringStringString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnumDigitsInRomanStringIntStringStringStringStringStringStringStringString\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg5kyxvwp.scala:30:100\
    \ --------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringString\e\
    [0m = numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringString\
    \ * numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringStringString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numDigitsInRomanStringIntStringStringStringStringStringStringStringStringStringString\n\
    \e[31m   |\e[0m\e[0m needs"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString.reverse\n        val numsStrLen\
    \ = numsStr.length\n        val numsStrArray = numsStr.toCharArray\n        val\
    \ numsStrArrayLen = numsStrArray.length\n        val numsStrArrayIndex = 0\n \
    \       val numsStrArrayIndexLen = numsStrArrayIndex + 1\n        val numsStrArrayIndex2\
    \ = 0\n        val numsStrArrayIndex2Len = numsStrArrayIndex2 + 1\n        val\
    \ numsStrArrayIndex3 = 0\n        val numsStrArrayIndex3Len = numsStrArrayIndex3\
    \ + 1\n        val numsStrArrayIndex4 = 0\n        val numsStrArrayIndex4Len =\
    \ numsStrArrayIndex4 + 1\n        val numsStrArrayIndex5 = 0\n        val numsStrArrayIndex5Len\
    \ = numsStrArrayIndex5 + 1\n        val numsStrArrayIndex6 = 0\n        val numsStrArrayIndex6Len\
    \ = numsStrArrayIndex6 + 1\n        val numsStrArrayIndex7 = 0\n        val numsStrArrayIndex7Len\
    \ = numsStrArrayIndex7 + 1\n        val numsStrArrayIndex8 = 0\n        val numsStrArrayIndex8Len\
    \ = numsStrArrayIndex8 + 1\n        val numsStrArrayIndex9 = 0\n        val numsStrArrayIndex9Len\
    \ = numsStrArrayIndex9 + 1\n        val numsStrArrayIndex10 = 0\n        val numsStrArrayIndex10Len\
    \ = numsStrArrayIndex10 + 1\n        val numsStrArrayIndex11 = 0\n        val\
    \ numsStrArrayIndex11Len = numsStrArrayIndex11 + 1\n        val numsStrArrayIndex12\
    \ = 0\n        val numsStrArrayIndex12Len = numsStrArrayIndex12 + 1\n        val\
    \ numsStrArrayIndex13 = 0\n        val numsStrArrayIndex13Len = numsStrArrayIndex13\
    \ + 1\n        val numsStrArrayIndex14 = 0\n        val numsStrArrayIndex14Len\
    \ = numsStrArrayIndex14 + 1\n        val numsStrArrayIndex15 = 0\n        val\
    \ numsStrArrayIndex15Len = numsStrArrayIndex15 + 1\n        val numsStrArrayIndex16\
    \ = 0\n        val numsStrArray\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnxr_q8tl.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnxr_q8tl.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxr_q8tl.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap2 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap3 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap4 = scala.collection.mutable.HashMap.empty[Int, Int]\n   \
    \     val numsMap5 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap6 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap7 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap9 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap10 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap11 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap12 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap13 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap14 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap15 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap17 =\
    \ scala.collection.mutable.HashMap.empty[Int, Int]\n        val numsMap18 = scala.collection.mutable.HashMap.empty[Int,\
    \ Int]\n        val numsMap19 = scala.collection.mutable.HashMap.empty[Int, Int]\n\
    \        val numsMap20 = scala.collection.mutable.HashMap.empty[Int, Int]\n  \
    \      val numsMap21 = scala.collection.mutable.HashMap.empty[Int, Int]\n    \
    \    val numsMap22 = scala.collection.mutable.HashMap.empty[Int, Int]\n      \
    \  val numsMap23 = scala.collection.mutable.HashMap.empty[Int, Int]\n        val\
    \ numsMap24 = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwsgyrudc.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwsgyrudc.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLen = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numsLenLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsLenLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4m3upruc.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4m3upruc.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4m3upruc.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4m3upruc.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1660010463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp28p67lut.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp28p67lut.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStrLen = scala.collection.mutable.ListBuffer[Int]()\n       \
    \ val numsStrLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numsStrLenLenLen = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numsStrLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptv39phpg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptv39phpg.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptv39phpg.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsStrLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplev"
  stdout: ''
  timestamp: 1659806083
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphc1ry_6a.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphc1ry_6a.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqmikpzra.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmikpzra.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqmikpzra.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1659806082
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num.toInt\n            val romanDigit = if\
    \ (digit > 0) digit - 1 else digit + 10\n            roman += romanDigit.toString\n\
    \        }\n        roman.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfx9rgm86.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpfx9rgm86.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpfx9rgm86.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n   \
    \     val numDigit = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptahujl_1.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptahujl_1.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptahujl_1.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptahujl_1.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptahujl_1.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mval"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ var i = number\n        while(i > 0){\n            val remainder = i % 1000\n\
    \            roman.append(remainder % 100).append(remainder / 100)\n         \
    \   i /= 1000\n        }\n        roman.mkString.toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpuiauinub.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder % \e[31m100\e[0m).append(remainder\
    \ / \e[31m100\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e\
    [0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems:\
    \ String*): (roman : scala.collection.mutable.ArrayBuffer[String])\n\e[31m   |\e\
    [0m (elem: String): (roman : scala.collection.mutable.ArrayBuffer[String])\n\e\
    [31m   |\e[0mmatch arguments (Long)\n1 error found\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap3 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[Long, String]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap7 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap8 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[Long, String]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[Long, String]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap12 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap13 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[Long, String]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap17 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap18 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[Long, String]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap22 = scala.collection.mutable.Map[Long,\
    \ String]()\n        val numsMap23 = scala.collection.mutable.Map[Long, String]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[Long, String]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[Long, String]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[Long, String]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7je6yq_3.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphw_szbne.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphc1ry_6a.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphc1ry_6a.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (number > 0) {\n            val remainder = number % 10\n\
    \            number /= 10\n            roman += if (remainder == 0) \"M\" else\
    \ if (remainder == 1) \"CM\" else \"D\"\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpivhhctl7.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"CM\"\e[0m \e[33melse\e[0m \e[31m\"D\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                   ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpivhhctl7.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value /= is not a member of Long - did you mean\
    \ number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        var i\
    \ = 0\n        while (i < number) {\n            roman += intToRoman(i).toLowerCase\n\
    \            i += 1\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60pxafsh.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            roman += intToRoman(i).toLowerCase\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \          Not found: intToRoman\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsString = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString2 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString3 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString4 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString5 = scala.collection.mutable.ListBuffer[String]()\n        val numsString6\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString7 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString8 = scala.collection.mutable.ListBuffer[String]()\n   \
    \     val numsString9 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString10 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString11 = scala.collection.mutable.ListBuffer[String]()\n        val numsString12\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString13 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString15 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString16 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString17 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString18 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsString19 = scala.collection.mutable.ListBuffer[String]()\n        val numsString20\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsString21 =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val numsString22 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsString23 = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val numsString24 = scala.collection.mutable.ListBuffer[String]()\n    \
    \    val numsString25 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsString26 = scala.collection.mutable.ListBuffer[String]\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqbcilkug.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp99otviv0.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilderBuilder\
    \ = scala.collection.mutable.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp28p67lut.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp28p67lut.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mStringBuilder\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilderBuilder\e\
    [0m = scala.collection.mutable.ListBuffer.empty[\e[35mStringBuilder\e[0m]\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStringBuilderBuilder is already defined as \e[33mvalue\e\
    [0m \e[35mnumsStringBuilderBuilder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp28p67lut.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 "
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % i\n            number -= remainder\n            roman += if (remainder\
    \ == 0) \"M\" else if (remainder == 1) \"D\" else \"C\"\n        }\n        roman.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr5jvvood.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman += \e[33mif\e[0m (remainder == \e[31m0\e\
    [0m) \e[31m\"M\"\e[0m \e[33melse\e[0m \e[33mif\e[0m (remainder == \e[31m1\e[0m)\
    \ \e[31m\"D\"\e[0m \e[33melse\e[0m \e[31m\"C\"\e[0m\n\e[31m\e[31m   |\e[0m   \
    \                  ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5jvvood.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpr5jvvood.scala:17:26 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums) {\n\e\
    [31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                    Found:    (nums : Double)\n\e[31m   |\e[0m              \
    \            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr5jvvood.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number -= remainder\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ number.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660010467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        var i\
    \ = 0\n        while (i < numsString.length) {\n            val n = numsString.charAt(i)\n\
    \            val m = nums.toString.indexOf(n)\n            val r = roman.size\
    \ + m.toString.length\n            roman.push(numsString.substring(i, i + r))\n\
    \            i += r\n        }\n        roman.map(_.toLowerCase).mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl80z375b.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val num\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuxhnm9kn.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuxhnm9kn.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e[35mString\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuxhnm9kn.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuxhnm9kn.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m \e[35mnumsStr\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuxhnm9kn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsStr\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsStr is already defined as \e[33mvalue\e[0m "
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdqanfyw.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwdqanfyw.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        var i = 0\n\
    \        while (number > 0) {\n            val remainder = number % 10\n     \
    \       roman.append(remainder)\n            number /= 10\n            digits\
    \ += i\n            i += 1\n        }\n        val romanString = roman.mkString(\"\
    \")\n        val digitString = digits.mkString(\"\")\n        val result = romanString\
    \ + digitString\n        result.toLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpy0dtr_jt.scala:20:18 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpy0dtr_jt.scala:21:19 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        var i = 0\n        while (i < nums) {\n            roman.append(roman(i).substring(0,\
    \ roman(i).length-1))\n            i += 1\n        }\n        roman.map(x => x.toLowerCase\
    \ + x.substring(1)).mkString(\"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoe4o37cf.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdqanfyw.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwdqanfyw.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplabtz8lj.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplabtz8lj.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ digits = scala.collection.mutable.ListBuffer.empty[Int]\n        val tens =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n    \
    \    val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n  \
    \      val numThousands = scala.collection.mutable.ListBuffer.empty[\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4uegml43.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4uegml43.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4uegml43.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4uegml43.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4uegml43.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already d"
  stdout: ''
  timestamp: 1660010471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (number > 0) {\n            roman.append(roman.take(i).dropRight(1).map(x =>\
    \ x.toString.toLower).mkString(\"\"))\n            number -= Math.pow(10, i)\n\
    \            i += 1\n        }\n        roman.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg669j8kv.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg669j8kv.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            number -= Math.pow(\e[31m10\e[0m, i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val nums = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val numDigits = scala.collection.mutable.ListBuffer[Long]()\n       \
    \ val numDigit = scala.collection.mutable.ListBuffer[Long]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numDigit\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpry4gb09d.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpry4gb09d.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry4gb09d.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry4gb09d.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpry4gb09d.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumDigit\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigit is already defined as \e[33mvalue\e[0m \e[35mnumDigit\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        var i = 0\n        while (i < nums.length) {\n      \
    \      val num = nums(i)\n            if (num > 0) {\n                val romanNum\
    \ = num.toString.toRoman\n                roman += romanNum\n                num\
    \ -= romanNum\n                i += 1\n            }\n        }\n        roman.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ums8owg.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5ums8owg.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mwhile\e[0m (i < nums.length) {\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       value length is not a member of Double\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp5ums8owg.scala:19:22 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^\e[0m\n\e[31m   |\e[0m                      \e[33mvalue\e\
    [0m \e[35mnums\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLen =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpstawtggl.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpstawtggl.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpstawtggl.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpstawtggl.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e\
    [0m = scala.collection.mutable.ArrayBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsLenLenLenLenLenLenLenLenLenLenLenLenLen\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defin"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i.toInt)\n            val remainder = number % num\n            roman.append(if\
    \ (remainder > 0) \"M\" else \"m\")\n            roman.append(if (remainder >\
    \ 0) \"C\" else \"c\")\n            roman.append(if (remainder > 0) \"D\" else\
    \ \"d\")\n            roman.append(if (remainder > 0) \"L\" else \"l\")\n    \
    \        roman.append(if (remainder > 0) \"X\" else \"x\")\n            roman.append(if\
    \ (remainder > 0) \"V\" else \"v\")\n            roman.append(if (remainder >\
    \ 0) \"I\" else \"i\")\n            roman.append(if (remainder > 0) \"N\" else\
    \ \"n\")\n            roman.append(if (remainder > 0) \"S\" else \"s\")\n    \
    \        roman.append(if (remainder > 0) \"R\" else \"r\")\n            roman.append(if\
    \ (remainder > 0) \"Q\" else \"q\")\n            roman.append(if (remainder >\
    \ 0) \"P\" else \"p\")\n            roman.append(if (remainder > 0) \"O\" else\
    \ \"o\")\n            roman.append(if (remainder > 0) \"Z\" else \"z\")\n    \
    \        roman.append(if (remainder > 0) \"C\" else \"c\")\n            roman.append(if\
    \ (remainder > 0) \"D\" else \"d\")\n            roman.append(if (remainder >\
    \ 0) \"L\" else \"l\")\n            roman.append(if (remainder > 0) \"X\" else\
    \ \"x\")\n            roman.append(if (remainder > 0) \"V\" else \"v\")\n    \
    \        roman.append(if (remainder > 0) \"I\" else \"i\")\n            roman.append(if\
    \ (remainder > 0) \"N\" else \"n\")\n            roman.append(if (remainder >\
    \ 0) \"S\" else \"s\")\n            roman.append(if (remainder > 0) \"R\" else\
    \ \"r\")\n            roman.append(if (remainder > 0) \"Q\" else \"q\")\n    \
    \        roman.append(if (remainder > 0) \"P\" else \"p\")\n            roman.append(if\
    \ (remainder > 0) \"O\" else \"o\")\n            roman.append(if (remainder >\
    \ 0) \"Z\" else \"z\")\n            roman.append(if (remainder > 0) \"C\" else\
    \ \"c\")\n            roman.append(if (remainder > 0) \"D\" else \"d\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfu00t74l.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu00t74l.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfu00t74l.scala:17:26\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until nums) {\n\e[31m\e[31m   |\e[0m                          ^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    (nums : Double)\n\e[31m\
    \   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpfu00t74l.scala:67:1 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpfu00t74l.scala:50:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, String]()\n     \
    \   val numsMap5 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap6 = scala.collection.mutable.Map[String, String]()\n        val numsMap7\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap8 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap9 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap10 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap11 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap12 = scala.collection.mutable.Map[String, String]()\n        val numsMap13\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap14 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap15 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap16 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap17 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[String, String]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap20 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap21 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap22 = scala.collection.mutable.Map[String, String]()\n    \
    \    val numsMap23 = scala.collection.mutable.Map[String, String]()\n        val\
    \ numsMap24 = scala.collection.mutable.Map[String, String]()\n        val numsMap25\
    \ = scala.collection.mutable.Map[String, String]()\n        val numsMap26 = scala.collection.mutable.Map[String,\
    \ String]()\n        val numsMap27 = scala.collection.mutable.Map[String, String]()\n\
    \        val numsMap\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9foqt3tn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9foqt3tn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsLength = nums.length\n        val numsDigits\
    \ = nums.toString.length\n        val numsDigit = numsDigits.toInt\n        val\
    \ numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n  \
    \      val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        val numsDigits = numsLength.toInt\n        val numsDigit = numsDigits.toInt\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppjmrwzlt.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = numsLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppjmrwzlt.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsDigit\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppjmrwzlt.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsDigits\e[0m = numsLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsDigits is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppjmrwzlt.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsDigit\e[0m = numsDigits.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsDigit is already defined as \e[33mvalue\e[0m \e[35mnumsDigit\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppjmrwzlt.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsDigits\e[0m = numsLength.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsDigits\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsDigits\e[0m"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTens\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundred\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousand =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ListBuffer.empty[Int]\n      \
    \  val numHundreds = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numThousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n   \
    \     val numThousand = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val numDigits = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numThousands =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigit = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val numTen = scala.collection.mutable.ListBuffer.empty[Int]\n       \
    \ val numHundred = scala.collection.mutable.ListBuffer.empty[Int]\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf3g_99so.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf3g_99so.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf3g_99so.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf3g_99so.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /t"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numThousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val\
    \ numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numHundreds\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numThousands\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numDigits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val numTens = scala.collection.mutable.ArrayBuffer.empty[Int]\n     \
    \   val numHundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8aub04df.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumDigits\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8aub04df.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8aub04df.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8aub04df.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ E"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsStr = nums.toString\n        val numsArr = numsStr.split(\"\
    \\\\.\")\n        val numsArrLen = numsArr.length\n        val numsArr2 = numsArr.tail\n\
    \        val numsArrLen2 = numsArr2.length\n        val numsArr3 = numsArr2.tail\n\
    \        val numsArrLen3 = numsArr3.length\n        val numsArr4 = numsArr3.tail\n\
    \        val numsArrLen4 = numsArr4.length\n        val numsArr5 = numsArr4.tail\n\
    \        val numsArrLen5 = numsArr5.length\n        val numsArr6 = numsArr5.tail\n\
    \        val numsArrLen6 = numsArr6.length\n        val numsArr7 = numsArr6.tail\n\
    \        val numsArrLen7 = numsArr7.length\n        val numsArr8 = numsArr7\n\
    \        val numsArrLen8 = numsArr8.length\n        val numsArr9 = numsArr8.tail\n\
    \        val numsArrLen9 = numsArr9.length\n        val numsArr10 = numsArr9\n\
    \        val numsArrLen10 = numsArr10.length\n        val numsArr11 = numsArr10.tail\n\
    \        val numsArrLen11 = numsArr11.length\n        val numsArr12 = numsArr11\n\
    \        val numsArrLen12 = numsArr12.length\n        val numsArr13 = numsArr12\n\
    \        val numsArrLen13 = numsArr13.length\n        val numsArr14 = numsArr13\n\
    \        val numsArrLen14 = numsArr14.length\n        val numsArr15 = numsArr14\n\
    \        val numsArrLen15 = numsArr15.length\n        val numsArr16 = numsArr15\n\
    \        val numsArrLen16 = numsArr16.length\n        val numsArr17 = numsArr16\n\
    \        val numsArrLen17 = numsArr17.length\n        val numsArr18 = numsArr17\n\
    \        val numsArrLen18 = numsArr18.length\n        val numsArr19 = numsArr18\n\
    \        val numsArrLen19 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwpno5igo.scala:55:26 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mnumsArrLen19\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpwpno5igo.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwpno5igo.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsStr\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ArrayBuffer.empty[String]\n \
    \       val numsStr5 = scala.collection.mutable.ArrayBuffer.empty[String]\n  \
    \      val numsStr6 = scala.collection.mutable.ArrayBuffer.empty[String]\n   \
    \     val numsStr7 = scala.collection.mutable.ArrayBuffer.empty[String]\n    \
    \    val numsStr8 = scala.collection.mutable.ArrayBuffer.empty[String]\n     \
    \   val numsStr9 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr10 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr11 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr12 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr13 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr14 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr15 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr16 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr17 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr19 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr20 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr21 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr22 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr23 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr24 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr25 = scala.collection.mutable.ArrayBuffer.empty[String]\n      \
    \  val numsStr26 = scala.collection.mutable.ArrayBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp47gd25sg.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp47gd25sg.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanNum = num.toString.toRoman\n            roman.append(romanNum)\n\
    \        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz973chd5.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpz973chd5.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpz973chd5.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnb48aqqe.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnb48aqqe.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws8fz2ze.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        var i = 0\n        while (i < numsArray.length)\
    \ {\n            val numChar = numsArray(i)\n            val romanChar = if (numChar\
    \ >= 'a' && numChar <= 'z') numChar else numChar.toString.toLower\n          \
    \  roman += romanChar\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptaple8_p.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptaple8_p.scala:22:96 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mromanChar\e[0m = \e\
    [33mif\e[0m (numChar >= \e[31m'a'\e[0m && numChar <= \e[31m'z'\e[0m) numChar \e\
    [33melse\e[0m numChar.toString.toLower\n\e[31m\e[31m   |\e[0m                \
    \                                                               ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (number > 0) {\n            roman.append(roman(i))\n            number -= Math.pow(10,\
    \ i)\n            i += 1\n        }\n        roman.mkString(\"\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph_vkkqbl.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph_vkkqbl.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            number -= Math.pow(\e[31m10\e[0m, i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        var remainder = number\n\
    \        var i = 0\n        while (number > 0) {\n            val remainderDigit\
    \ = remainder % 10\n            roman.append(if (remainderDigit == 0) \"M\" else\
    \ if (remainderDigit == 1) \"D\" else \"C\")\n            remainder /= 10\n  \
    \          i += 1\n        }\n        roman.reverse.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4jp3fja.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010473
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws8fz2ze.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        val numsString = nums.toString.reverse\n        val numsArray\
    \ = numsString.toCharArray\n        val numsArrayLength = numsArray.length\n \
    \       val numsArrayIndex = 0\n        val numsArrayMax = numsArrayLength - 1\n\
    \        val numsArrayMin = 0\n        val numsArraySum = 0\n        val numsArrayProduct\
    \ = 1\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val numsArrayIndexMin\
    \ = 0\n        val numsArrayIndexSum = 0\n        val numsArrayIndexProduct =\
    \ 1\n        val numsArrayIndexMax = numsArrayLength - 1\n        val num\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx8_s71rd.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx8_s71rd.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsArrayIndexSum\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIndexSum is already defined as \e[33mvalue\e[0m \e\
    [35mnumsArrayIndexSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8_s71rd.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIndexProduct\e\
    [0m = \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIndexProduct is already defined as \e[33mvalue\e\
    [0m \e[35mnumsArrayIndexProduct\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx8_s71rd.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIndexMax\e[0m =\
    \ numsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsArrayIndexMax is already defined as \e[33mvalue\e[0m \e\
    [35mnumsArrayIndexMax\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8_s71rd.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsArrayIndexMin\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnumsArrayIndexMin is already defined as \e[33mvalue\e[0m \e[35mnumsArrayIndexMin\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660010476
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ remainder = number\n        var i = 2\n        while(i <= 1000) {\n        \
    \    val remainderToAdd = remainder % i\n            roman.append(if (remainderToAdd\
    \ == 0) \"M\" else if (remainderToAdd == 1) \"D\" else \"C\")\n            remainder\
    \ = remainder / i\n            i += 1\n        }\n        roman.mkString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwir4ug3_.scala:27)\n\tat Problem.main(tmpwir4ug3_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.Map[Long, String]()\n        val numsMap2 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap3 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap4 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap5 = scala.collection.mutable.Map[String, Long]()\n        val numsMap6\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap7 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap8 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap9 = scala.collection.mutable.Map[String, Long]()\n       \
    \ val numsMap10 = scala.collection.mutable.Map[String, Long]()\n        val numsMap11\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap12 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap13 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap14 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap15 = scala.collection.mutable.Map[String, Long]()\n        val numsMap16\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap17 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap18 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap19 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap20 = scala.collection.mutable.Map[String, Long]()\n        val numsMap21\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap22 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap23 = scala.collection.mutable.Map[String, Long]()\n\
    \        val numsMap24 = scala.collection.mutable.Map[String, Long]()\n      \
    \  val numsMap25 = scala.collection.mutable.Map[String, Long]()\n        val numsMap26\
    \ = scala.collection.mutable.Map[String, Long]()\n        val numsMap27 = scala.collection.mutable.Map[String,\
    \ Long]()\n        val numsMap\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfcqb7wcz.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfcqb7wcz.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ romanNum = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRoman\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numToRomanNum\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum2\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum3\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum4\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum5\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum6\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum7\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum8\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum9\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum10\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum11\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum12\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum13\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum14\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum15\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum16\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum17\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum18\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum19\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum20\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum21\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum22\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val numToRomanNum23\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3cdv5gm6.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3cdv5gm6.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsStr\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr2 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr3 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr4 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr5 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr6 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr8 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr9\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr10 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr11 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr12 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr13 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr14 = scala.collection.mutable.ListBuffer.empty[String]\n   \
    \     val numsStr15 = scala.collection.mutable.ListBuffer.empty[String]\n    \
    \    val numsStr16 = scala.collection.mutable.ListBuffer.empty[String]\n     \
    \   val numsStr17 = scala.collection.mutable.ListBuffer.empty[String]\n      \
    \  val numsStr18 = scala.collection.mutable.ListBuffer.empty[String]\n       \
    \ val numsStr19 = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ numsStr20 = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr21\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr22 =\
    \ scala.collection.mutable.ListBuffer.empty[String]\n        val numsStr23 = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val numsStr24 = scala.collection.mutable.ListBuffer.empty[String]\n \
    \       val numsStr25 = scala.collection.mutable.ListBuffer.empty[String]\n  \
    \      val numsStr26 = scala.collection.mutable.ListBuffer.empty[String\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpktgo2wog.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpktgo2wog.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredsTens = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsThousandsThousands\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousandsThousandsThousandsHundreds\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandsThousandsThousandsThousands\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3yxj77g8.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3yxj77g8.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val digit = num / 100\n            val hundreds = num %\
    \ 100\n            val hundredsString = if (hundreds == 0) \"M\" else if (hundreds\
    \ == 1) \"CM\" else \"D\"\n            val hundredsRoman = intToMiniRoman(hundreds)\n\
    \            val digitRoman = if (digit == 0) \"M\" else if (digit == 1) \"CM\"\
    \ else \"D\"\n            roman += digitRoman + hundredsString\n        }\n  \
    \      roman.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8h49jy7.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpf8h49jy7.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpf8h49jy7.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = nums.toInt\n\
    \            val remainder = num % i\n            roman.append(remainder / i)\n\
    \        }\n        roman.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2hmsy78q.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2hmsy78q.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ijwbe61.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5ijwbe61.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val tens = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val thousands = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val tenths = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredths\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ArrayBuffer.empty[Int]\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uq9_hcc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_uq9_hcc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_uq9_hcc.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mhundredthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredthths is already defined as \e[33mvalue\e[0m \e[35mhundredthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_uq9_hcc.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ArrayBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of tople"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ romanNum = scala.collection.mutable.ListBuffer.empty[Int]\n        val numDigits\
    \ = scala.math.log10(number).ceil.toInt\n        val digits = scala.math.pow(10,\
    \ numDigits)\n        val units = (number / digits).floor.toInt\n        val unitDigits\
    \ = scala.math.pow(10, units)\n        val unitRoman = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        val unitRomanNum = scala.collection.mutable.ListBuffer.empty[Int]\n \
    \       val unitRomanDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unitRomanNumDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unitRomanNumDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unitRomanNumDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unitRomanNumDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unitRomanNumDigits = scala.math.pow(10, units)\n        val unitRomanNumDigits\
    \ = scala.math.pow(10, units)\n        val unitRomanNumDigits = scala.math.pow(10,\
    \ units)\n        val unitRomanNumDigits = scala.math.pow(10, units)\n       \
    \ val unit\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzyar2skx.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzyar2skx.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36munitRomanNumDigits\e[0m = scala.math.pow(\e[31m10\e[0m, units)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0munitRomanNumDigits is already defined as \e[33mvalue\e[0m \e[35munitRomanNumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzyar2skx.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36munitRomanNumDigits\e[0m = scala.math.pow(\e\
    [31m10\e[0m, units)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitRomanNumDigits is already defined as \e[33mvalue\e[0m\
    \ \e[35munitRomanNumDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzyar2skx.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36munitRomanNumDigits\e[0m\
    \ = scala.math.pow(\e[31m10\e[0m, units)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitRomanNumDigits is already defined as \e[33mvalue\e[0m\
    \ \e[35munitRomanNumDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpzyar2skx.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36munitRomanNumDigits\e[0m\
    \ = scala.math.pow(\e[31m10\e[0m, units)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0munitRomanNumDigits is already defined as \e[33mvalue\e[0m\
    \ \e[35munitRomanNumDigits\e[0m"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer(\n            \"\",\n            \"M\",\n\
    \            \"CM\",\n            \"D\",\n            \"CD\",\n            \"\
    C\",\n            \"XC\",\n            \"L\",\n            \"XL\",\n         \
    \   \"X\",\n            \"IX\",\n            \"V\",\n            \"IV\",\n   \
    \         \"I\"\n        )\n        val romanNum = number / 100\n        val remainder\
    \ = number % 100\n        romanNum match {\n            case 0 => roman(0)\n \
    \           case 1 => roman(1)\n            case 2 => roman(2)\n            case\
    \ 3 => roman(3)\n            case 4 => roman(4)\n            case 5 => roman(5)\n\
    \            case 6 => roman(6)\n            case 7 => roman(7)\n            case\
    \ 8 => roman(8)\n            case 9 => roman(9)\n            case 10 => roman(10)\n\
    \            case 11 => roman(11)\n            case 12 => roman(12)\n        \
    \    case 13 => roman(13)\n            case 14 => roman(14)\n            case\
    \ 15 => roman(15)\n            case 16 => roman(16)\n            case 17 => roman(17)\n\
    \            case 18 => roman(18)\n            case 19 => roman(19)\n        \
    \    case 20 => roman(20)\n            case 21 => roman(21)\n            case\
    \ 22 => roman(22)\n            case 23 => roman(23)\n            case 24 => roman(24)\n\
    \            case 25 => roman(25)\n            case 26 => roman(26)\n        \
    \    case 27 => roman(27)\n            case 28 => roman(28)\n            case\
    \ 29 => roman(29)\n            case 30 => roman(30)\n            case 31 => roman(31)\n\
    \            case 32 => roman(32)\n            case 33 => roman(33)\n        \
    \    case 34 => roman(34)\n            case 35 => roman(35)\n            case\
    \ 36 => roman(36)\n            case 37 => roman(37)\n            case 38 => roman(38)\n\
    \            case 39 => roman(39)\n            case 40 => roman(40)\n        \
    \    case 41 => roman(41)\n            case 42 => roman(42)\n            case\
    \ 43 => roman(43)\n            case 44 => roman(44)\n            case 45 => roman(45)\n\
    \            case 46 => roman(46)\n            case 47 => roman(47)\n        \
    \    case 48 => roman(48)\n            case 49 => roman\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp300ovm_m.scala:103:0 ---------------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp300ovm_m.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ArrayBuffer(\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp300ovm_m.scala:102:1 --------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: String\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp300ovm_m.scala:85:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m85 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val digits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val tens = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val hundreds = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ thousands = scala.collection.mutable.ListBuffer[Int]()\n        val numDigits\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numTens = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numHundreds = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val numThousands = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numTen =\
    \ scala.collection.mutable.ListBuffer[Int]()\n        val numHundred = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numTens\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numTen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numThousand = scala.collection.mutable.ListBuffer[Int]()\n      \
    \  val numDigits = scala.collection.mutable.ListBuffer[Int]()\n        val numTens\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numHundreds = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numThousands = scala.collection.mutable.ListBuffer[Int]()\n     \
    \   val numDigit = scala.collection.mutable.ListBuffer[Int]()\n        val numTen\
    \ = scala.collection.mutable.ListBuffer[Int]()\n        val numHundred = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val numThousand = scala.collection.mutable.ListBuffer[Int\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpltfmjvth.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpltfmjvth.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigits\e[0m = scala.collection.mutable.ListBuffer[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigits is already defined as \e[33mvalue\e[0m \e[35mnumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpltfmjvth.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mnumTens\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumTens is already defined as \e[33mvalue\e[0m \e[35mnumTens\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpltfmjvth.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumHundreds\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumHundreds is already defined as \e[33mvalue\e[0m \e[35mnumHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpltfmjvth.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumThousands\e[0m = scala.collection.mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumThousands is already defined as \e[33mvalue\e[0m \e[35mnumThousands"
  stdout: ''
  timestamp: 1660010483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = number\n        while(i >= 1000) {\n            roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n            i /= 1000\n        }\n        roman.append(roman.last.substring(0,\
    \ roman.last.length - 1))\n        roman.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.intToMiniRoman(tmpgx1q_nun.scala:21)\n\tat Problem$.main(tmpgx1q_nun.scala:25)\n\
    \tat Problem.main(tmpgx1q_nun.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsString\
    \ = scala.collection.mutable.ListBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder2\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder3\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder4\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder5\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder6\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder7\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder8\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder9\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder10\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder11\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder12\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder13\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder14\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder15\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder16\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder17\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder18\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder19\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder20\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder21\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder22\
    \ = scala.collection.mutable.ListBuffer.empty[StringBuilder]\n        val numsStringBuilder23\
    \ = scala.collection.mut\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwdqanfyw.scala:40:51 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder23\e[0m\
    \ = scala.collection.mut\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value mut is not a member of\
    \ collection - did you mean collection.Set?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpwdqanfyw.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer[String]()\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val romanDigit = num.toString.toRoman\n            roman.append(romanDigit)\n\
    \        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwkdmac8.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkwkdmac8.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          value size is not a member of Double\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpkwkdmac8.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnum\e[0m = nums(i)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m        \
    \              \e[33mvalue\e[0m \e[35mnums\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val num = scala.math.pow(10,\
    \ i.toInt)\n            val numStr = num.toString.toUpperCase\n            val\
    \ romanStr = roman.mkString(\"\") + numStr\n            roman.append(romanStr)\n\
    \        }\n        roman.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjpe3t5rk.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjpe3t5rk.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val digits =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val tens = scala.collection.mutable.ListBuffer.empty[Int]\n\
    \        val hundreds = scala.collection.mutable.ListBuffer.empty[Int]\n     \
    \   val thousands = scala.collection.mutable.ListBuffer.empty[Int]\n        val\
    \ hundredths = scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandths\
    \ = scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val hundredththths =\
    \ scala.collection.mutable.ListBuffer.empty[Int]\n        val thousandthths =\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdvxf1wq9.scala:42:27 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdvxf1wq9.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvxf1wq9.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mhundredththths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhundredththths is already defined as \e[33mvalue\e[0m \e[35mhundredththths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvxf1wq9.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mthousandthths\e[0m = scala.collection.mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthousandthths is already defined as \e[33mvalue\e[0m \e[35mthousandthths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvxf1wq9.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m   "
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while(number > 0){\n            val remainder = number % 10\n\
    \            roman.append(remainder)\n            number /= 10\n            i\
    \ += 1\n        }\n        roman.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmprb3mq64j.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            roman.append(remainder)\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m\
    \ with types\n\e[31m   |\e[0m (elems: String*): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (roman : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((remainder : Long))\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmprb3mq64j.scala:20:19 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            number /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Int]\n        val numsMap =\
    \ scala.collection.mutable.Map[Int, Int]()\n        val numsMap2 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap3 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap4 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap5\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap6 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap7 = scala.collection.mutable.Map[Int, Int]()\n  \
    \      val numsMap8 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap9\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap10 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap11 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap12 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap13 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap14\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap15 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap16 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap17 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap18 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap19\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap20 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap21 = scala.collection.mutable.Map[Int, Int]()\n \
    \       val numsMap22 = scala.collection.mutable.Map[Int, Int]()\n        val\
    \ numsMap23 = scala.collection.mutable.Map[Int, Int]()\n        val numsMap24\
    \ = scala.collection.mutable.Map[Int, Int]()\n        val numsMap25 = scala.collection.mutable.Map[Int,\
    \ Int]()\n        val numsMap26 = scala.collection.mutable.Map[Int, Int]\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpws8fz2ze.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010439
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer[String]()\n        val nums\
    \ = scala.collection.mutable.ListBuffer[Long]()\n        val numsStr = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr2 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr3 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr4\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr5 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr6 = scala.collection.mutable.ListBuffer[String]()\n      \
    \  val numsStr7 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr8\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr9 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr10 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr11 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr12 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr13\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr14 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr15 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr16 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr17 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr18\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr19 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr20 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr21 = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ numsStr22 = scala.collection.mutable.ListBuffer[String]()\n        val numsStr23\
    \ = scala.collection.mutable.ListBuffer[String]()\n        val numsStr24 = scala.collection.mutable.ListBuffer[String]()\n\
    \        val numsStr25 = scala.collection.mutable.ListBuffer[String]()\n     \
    \   val numsStr26 = scala.collection.mutable.ListBuffer[String]\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphw_szbne.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Long]\n        val numsString\
    \ = scala.collection.mutable.ArrayBuffer.empty[String]\n        val numsStringBuilder\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilderBuilder2\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder3\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder4\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder5\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder6\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder7\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder8\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder9\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder10\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder11\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder12\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder13\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder14\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder15\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder16\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder17\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder18\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder19\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder20\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder21\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder22\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder23\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder24\
    \ = scala.collection.mutable.StringBuilder.newBuilder\n        val numsStringBuilder25\
    \ = scala.collection.mutable.StringBuilder.new\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdjh3anc.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mnumsStringBuilder25\e[0m\
    \ = scala.collection.mutable.StringBuilder.\e[33mnew\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                 an identifier expected, but\
    \ 'new' found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdjh3anc.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659806076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ romanNum = scala.collection.mutable.ListBuffer.empty[Int]\n        var i = 0\n\
    \        while (number > 0) {\n            roman.append(romanNum.take(number).mkString)\n\
    \            romanNum += i\n            number -= romanNum.last\n            i\
    \ += 1\n        }\n        roman.reverse.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp46rbz341.scala:19:39\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            roman.append(romanNum.take(number).mkString)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (number : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp46rbz341.scala:21:19 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            number -= romanNum.last\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean number.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ArrayBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums) {\n            val remainder\
    \ = number % nums\n            number /= nums\n            roman.append(roman.last.charAt(0)\
    \ + remainder.toString)\n        }\n        roman.mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr0uyo23d.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mroman\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpr0uyo23d.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until nums)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (nums : Double)\n\e[31m   |\e[0m        \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr0uyo23d.scala:19:19 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            number /= nums\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value /= is not a member of Long - did you mean number.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        val\
    \ nums = scala.collection.mutable.ListBuffer.empty[Long]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Long, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplabtz8lj.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmplabtz8lj.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ remainder = number\n        var i = 2\n        while (i <= 1000) {\n       \
    \     if (remainder >= i) {\n                roman += romanDigits(remainder /\
    \ i).toLowerCase + romanDigits(i % i).toLowerCase\n                remainder %=\
    \ i\n            }\n            i += 1\n        }\n        if (remainder > 0)\
    \ {\n            roman += romanDigits(remainder).toLowerCase\n        }\n    \
    \    roman.toString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdbj1uxh.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                roman += romanDigits(remainder / i).toLowerCase\
    \ + romanDigits(i % i).toLowerCase\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: romanDigits\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzdbj1uxh.scala:26:21\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            roman += romanDigits(remainder).toLowerCase\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                   Not found: romanDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ListBuffer.empty[String]\n        var\
    \ i = 0\n        while (number > 0) {\n            roman.append(roman(i))\n  \
    \          number -= Math.pow(10, i)\n            i += 1\n        }\n        roman.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3xeldonr.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            number -= Math.pow(\e[31m10\e[0m, i)\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean number.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = scala.collection.mutable.ArrayBuffer.empty[String]\n       \
    \ val nums = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val numsMap\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap2\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap3\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap4\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap5\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap6\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap7\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap8\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap9\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap10\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap11\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap12\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap13\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap14\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap15\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap16\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap17\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap18\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap19\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap20\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap21\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap22\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap23\
    \ = scala.collection.mutable.HashMap.empty[Int, String]\n        val numsMap24\
    \ = scala.\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ijwbe61.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5ijwbe61.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = mutable.ListBuffer.empty[String]\n        val nums = scala.math.pow(10,\
    \ number.toInt)\n        for (i <- 0 until nums.size) {\n            val num =\
    \ nums(i)\n            val remainder = number % num\n            roman.append(if\
    \ (remainder > 0) \"M\" else \"m\")\n            roman.append(if (remainder >\
    \ 1) \"C\" else \"c\")\n            roman.append(if (remainder > 2) \"L\" else\
    \ \"l\")\n            roman.append(if (remainder > 3) \"X\" else \"x\")\n    \
    \        roman.append(if (remainder > 4) \"V\" else \"v\")\n            roman.append(if\
    \ (remainder > 5) \"I\" else \"i\")\n            roman.append(if (remainder >\
    \ 9) \"X\" else \"x\")\n            roman.append(if (remainder > 10) \"V\" else\
    \ \"v\")\n            roman.append(if (remainder > 50) \"I\" else \"i\")\n   \
    \         roman.append(if (remainder > 100) \"X\" else \"x\")\n            roman.append(if\
    \ (remainder > 1000) \"V\" else \"v\")\n            roman.append(if (remainder\
    \ > 1000) \"I\" else \"i\")\n            roman.append(if (remainder > 1000) \"\
    X\" else \"x\")\n            roman.append(if (remainder > 1000) \"V\" else \"\
    v\")\n            roman.append(if (remainder > 1000) \"I\" else \"i\")\n     \
    \       roman.append(if (remainder > 1000) \"X\" else \"x\")\n            roman.append(if\
    \ (remainder > 1000) \"V\" else \"v\")\n            roman.append(if (remainder\
    \ > 1000) \"I\" else \"i\")\n            roman.append(if (remainder > 1000) \"\
    X\" else \"x\")\n            roman.append(if (remainder > 1000) \"V\" else \"\
    v\")\n            roman.append(if (remainder > 1000) \"I\" else \"i\")\n     \
    \       roman.append(if (remainder > 1000) \"X\" else \"x\")\n            roman.append(if\
    \ (remainder > 1000) \"V\" else \"v\")\n            roman.append(if (remainder\
    \ > 1000) \"I\" else \"i\")\n            roman.append(if (remainder > 1000) \"\
    X\" else \"x\")\n            roman.append(if (remainder > 1000) \"V\" else \"\
    v\")\n            roman.append(if (remainder > 1000) \"I\" else \"i\")\n     \
    \       roman.append(if (remainder > 1000) \"X\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzv_6nlmm.scala:47:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            roman.append(\e[33mif\e[0m (remainder > \e\
    [31m1000\e[0m) \"X\n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpzv_6nlmm.scala:49:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpzv_6nlmm.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzv_6nlmm.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mroman\e[0m = mutable.ListBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzv_6nlmm.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until nums.size) {\n\e[31m\e[31m   |\e[0m                  \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value size is\
    \ not a member of Double\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpzv_6nlmm.scala:18:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mnum\e[0m = nums(i)\n\e[31m\e[31m   |\e[0m                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                      \e[33mvalue\e[0m \e[35mnums\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzv_6nlmm.scala:49:4\
    \ -------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e"
  stdout: ''
  timestamp: 1660010484
