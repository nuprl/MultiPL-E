name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\"\
  )\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x\
  \ : Long, shift : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse.grouped(shift)\n        val\
    \ result = digits.reverse.mkString\n        result + (if (shift > x.length) \"\
    \" else \"\")", "        val digits = x.toString.reverse\n        val shift =\
    \ shift % digits.length\n        val newDigits = digits.dropRight(shift)\n   \
    \     val newDigitString = newDigits.reverse\n        val newString = newDigitString\
    \ + digits.dropRight(digits.length - shift)\n        newString", "        val\
    \ digits = x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        if (shift > digits.length) result + digits.reverse.mkString(\"\"\
    )\n        else result", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse)", "        val digits = x.toString.reverse\n \
    \       val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == digits.length) result else reversed", "        val digits\
    \ = x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        if (shift > digits.length) result.reverse\n        else result",
  "        val digits = x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        result + (digits.lastOption.getOrElse(\"\"))", "        val digits\
    \ = x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n  \
    \      val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        return result", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == 0) {\n            result\n        } else if (shift ==\
    \ 1) {\n            reversed\n        } else {\n            circularShift(reversed,\
    \ shift - 1)\n        }", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString\n        result + (if (result.length\
    \ < shift) \"\" else \"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result.reverse\n        else result", "        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).reverse\
    \ + shiftDigits", "        val digits = x.toString.reverse.grouped(shift)\n  \
    \      val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\"\
    )", "        val digits = x.toString.reverse.grouped(shift)\n        val result\
    \ = digits.mkString(\"\")\n        val digits = digits.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result", "        val digits\
    \ = x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length).reverse\n\
    \        digits.substring(0, shift) + shiftDigits", "        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.dropRight(shift).reverse\n\
    \        val result = shiftDigit + shiftDigits\n        result.toString", "  \
    \      val digits = x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed", "        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.size < shift\
    \ ? digits.reverse.mkString(\"\") : \"\")"]
stop_tokens:
- "\n    }\n"
